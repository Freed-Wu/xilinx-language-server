{"iphys_opt_design": "iphys_opt_design\n\nDescription: \nInteractive phys_opt_design.\n\nSyntax: \niphys_opt_design  [-fanout_opt] [-critical_cell_opt] [-replicate_cell]\n                  [-reconnect] [-placement_opt] [-forward_retime]\n                  [-backward_retime] [-net <arg>] -cluster <args>\n                  -place_cell <args> [-dsp_register_opt] [-bram_register_opt]\n                  [-uram_register_opt] [-shift_register_opt] [-cell <arg>]\n                  [-packing] [-unpacking] [-port <arg>] [-critical_pin_opt]\n                  [-restruct_opt] [-equ_drivers_opt] [-skipped_optimization]\n                  [-create_bufg] [-insert_negative_edge_ffs] [-hold_fix]\n                  [-slr_crossing_opt] [-shift_register_to_pipeline]\n                  [-auto_pipeline] [-pipeline_to_shift_register] [-quiet]\n                  [-verbose]\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-fanout_opt]                  Fanout optimization including very high \n                                 fanout optimizations\n  [-critical_cell_opt]           Do cell-duplication based optimization on \n                                 timing critical nets\n  [-replicate_cell]              Atomic cell replication operation, for \n                                 interconnect retiming and LUT optimizaton\n  [-reconnect]                   Reconnect loads from equivalent drivers for \n                                 interconnect retiming and LUT optimization\n  [-placement_opt]               Move cells to reduce delay on \n                                 timing-critical nets\n  [-forward_retime]              Forward retiming optimization\n  [-backward_retime]             Backward retiming optimization\n  [-net]                         net to be optimized\n  -cluster                       Clusters of load pins\n  -place_cell                    Place cell or cell connecting to pin to loc\n  [-dsp_register_opt]            DSP register optimization\n  [-bram_register_opt]           BRAM register optimization\n  [-uram_register_opt]           UltraRAM register optimization\n  [-shift_register_opt]          Shift register optimization\n  [-cell]                        cell to be optimized\n  [-packing]                     Packing in DSP/BRAM\n  [-unpacking]                   Unpacking in DSP/BRAM\n  [-port]                        Port in DSP/BRAM that is optimized\n  [-critical_pin_opt]            Pin Swap optimization\n  [-restruct_opt]                LUT restructuring optimization\n  [-equ_drivers_opt]             Equivalent driver rewiring\n  [-skipped_optimization]        The change is not committed\n  [-create_bufg]                 Insert bufg to drive HFO nets\n  [-insert_negative_edge_ffs]    Inserting negative edge triggered FFs for \n                                 high hold mitigation\n  [-hold_fix]                    Inserting buffers for hold fix optimization\n  [-slr_crossing_opt]            Optimize slr crossing nets\n  [-shift_register_to_pipeline]  shift register to pipeline opt\n  [-auto_pipeline]               Auto pipeline\n  [-pipeline_to_shift_register]  pipeline_to_shift_register\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n\nCategories: \nTools\n\nDescription:\n\n  The iphys_opt_design command describes a specific optimization that was\n  performed by the phys_opt_design command, such as replicating a critical\n  cell or pulling registers from a block RAM to improve critical path delay.\n  The iphys_opt_design command includes all the information necessary to\n  recreate both the post-optimization logical netlist and the placement\n  changes required for the optimized netlist.\n\n  Interactive physical optimization can be used in two ways:\n\n   *  Applying post-placement physical optimizations to the pre-placement\n      netlist to improve the overall placement result and improve design\n      performance.\n\n   *  Saving the physical optimizations in a Tcl script to be repeated as\n      needed.\n\n  The various optimizations performed by phys_opt_design can be written to an\n  iphys_opt Tcl script by write_iphys_opt_tcl, and read into the design by\n  the read_iphys_opt_tcl command.\n\n  Note: The iphys_opt_design command is intended for use inside the iphys_opt\n  Tcl script file. These commands can be edited in the context of the\n  iphys_opt Tcl script, but they are not intended to be specified at the\n  command line.\n\n  This command returns a transcript of its processes, or an error if it fails.\n\nArguments:\n\n  -fanout_opt - (Optional) Performs delay-driven optimization on the\n  specified net, by replicating drivers to reduce delay.\n\n  -critical_cell_opt - (Optional) Replicate cells on specified nets to reduce\n  delays.\n\n  -placement_opt - (Optional) Move cells to reduce delay on specified nets.\n\n  -rewire - (Optional) Refactor logic cones to reduce logic levels and reduce\n  delay on critical signals.\n\n  -net <arg> - (Optional) Specify the net to apply an optimization to.\n\n  -cluster <args> - (Required) Specify a cluster of load pins.\n\n  -place_cell <args> - (Required) Place the specified cells, or cells\n  connected to the specified pins, on the device sites specified.\n\n  -dsp_register_opt - (Optional) Improve critical path delay by moving\n  registers from slices to DSP blocks, or from DSP blocks to slices.\n\n  -bram_register_opt - (Optional) Improve critical path delay by moving\n  registers from slices to block RAMs, or from block RAMs to slices.\n\n  -uram_register_opt - (Optional) Improve critical path delay by moving\n  registers from slices to UltraRAMs, or from UltraRAMs to slices.\n\n  -shift_register_opt - (Optional) Perform shift register optimization to\n  improve timing on negative slack paths between shift register cells (SRLs)\n  and other logic cells.\n\n  -cell <arg> - (Optional) Specify a cell to apply an optimization to.\n\n  -packing - (Optional) Packing in DSP/BRAM.\n\n  -unpacking - (Optional) Unpacking in DSP/BRAM.\n\n  -port <arg> - (Optional) Specify a port on a cell to apply the optimization\n  to.\n\n  -critical_pin_opt - For LUT inputs, this optimization performs remapping of\n  logical pins to physical pins, also known as pin-swapping, to improve\n  critical path timing.\n\n  -skipped_optimization - (Optional) Defines the specified optimization as\n  not performed. These are optimizations identified by phys_opt_design that\n  are skipped because suitable locations for optimized logic cannot be found.\n  For example, BRAM register optimizations to improve slack that are skipped\n  because no suitable locations can be found for the registers.\n\n  -insert_negative_edge_ffs - (Optional) Insert negative edge, or falling\n  edge triggered flip flops to help manage hold timing.\n\n  -hold_fix - (Optional) Performs optimizations to insert data path delay\n  buffers for hold fix optimization.\n\n  -slr_crossing_opt - (Optional) Performs post-place or post-route\n  optimizations to improve the path delay of inter-SLR connections. The\n  optimization adjusts the locations of the driver, load, or both along the\n  SLR crossing after potential replication. For use with UltraScale and\n  UltraScale+ devices.\n\n  -auto_pipeline - (Optional) Auto pipeline the design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example performs a critical cell optimization on the\n  specified net and cluster of ports:\n\n    iphys_opt_design -critical_cell_opt -net \\  \n       {ADUR_CORE_INST/CPE_INST/CPE_ANT_RESOURCE_TDM_INST0 \\  \n       /CPE_ANT_LINE_IQ_TDM_ANT0_INST/CPE_PN_MULT_INST/CPE_PN_MUL_INST3 \\  \n       /Q_PNI_MULT_INST/pn_mult_reg[3][0]} \\  \n       -cluster {pn_mult[3]_i_14_replica  {\\  \n       {ADUR_CORE_INST/CPE_INST/CPE_ANT_RESOURCE_TDM_INST0 \\  \n       /CPE_ANT_LINE_IQ_TDM_ANT0_INST/CPE_PN_MULT_INST/CPE_PN_MUL_INST2 \\  \n       /Q_ADD_INST/pn_mult_reg[3]_i_6_CARRY8/S[0]}}}\\  \n       -cluster {pn_mult[3]_i_14_replica_1  {\\  \n       {ADUR_CORE_INST/CPE_INST/CPE_ANT_RESOURCE_TDM_INST0 \\  \n       /CPE_ANT_LINE_IQ_TDM_ANT0_INST/CPE_PN_MULT_INST/CPE_PN_MUL_INST0 \\  \n       /Q_ADD_INST/pn_mult_reg[3]_i_10_CARRY8/S[0]}}}\\ \n    \n\n  The following example performs a shift register optimization on the\n  specified cell:\n\n    iphys_opt_design -shift_register_opt -cell \\  \n       {ADUR_CORE_INST/EMIF_INTERFACE_INST/EMIF_HOST_IF_INST/DLY_INST1 \\  \n       /PD_INST_FPGA/delay_chain_reg[9][16]_srl9} -port D  \n    \n\nSee Also:\n\n   *  phys_opt_design\n   *  read_iphys_opt_tcl\n   *  report_phys_opt_design\n   *  write_iphys_opt_tcl\n",
"save_project_as": "save_project_as\n\nDescription: \nSave the current project under a new name\n\nSyntax: \nsave_project_as  [-scan_for_includes] [-exclude_run_results]\n                 [-include_local_ip_cache] [-force] [-quiet] [-verbose] <name>\n                 [<dir>]\n\nReturns: \nsaved project object\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-scan_for_includes]       Scan for include files and add them to the new \n                             project\n  [-exclude_run_results]     Exclude run results in the new project\n  [-include_local_ip_cache]  Include IP cache results in the new project\n  [-force]                   Overwrite existing project directory\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n  <name>                     New name for the project to save\n  [<dir>]                    Directory where the project file is saved\n                             Default: .\n\nCategories: \nProject\n\nDescription:\n\n  Saves a currently open project file under a new name in the specified\n  directory, or in the current working directory if no other directory is\n  specified.\n\n  This command save a Vivado Design Suite project file (.xpr), or a project\n  file for the Vivado Lab Edition (.lpr), in the specified directory.\n\n  The command returns the name of the saved project, or returns an error if\n  it fails.\n\nArguments:\n\n  -scan_for_includes - (Optional) Scans all source files and adds any\n  referenced Verilog 'include files into the project structure.\n\n  -exclude_run_results - (Optional) Exclude run results in the new project.\n  This strips the project of its current run results to make a copy of the\n  project sources without the additional data.\n\n  -include_local_ip_cache - (Optional) Include IP cache results in the new\n  project. This allows you to retain the out-of-context synthesis cache with\n  the new project.\n\n  -force - (Optional) Overwrite the existing project. If the project name is\n  already define in the specified directory then you must also specify the\n  -force option for the tool to overwrite the existing project.\n\n  Note: If the existing project is currently open, the new project will\n  overwrite the existing project on the disk, but both projects will be\n  opened in the tool. In this case you should probably run the close_project\n  command prior to running create_project.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the new project. This argument must appear\n  before the specified directory. Since these commands do not have\n  parameters, the tool interprets the first argument as <name> and uses the\n  second argument as <dir>. The project file is saved as <name>.xpr in the\n  Vivado Design Suite, or <name>.lpr in the Vivado Lab Edition, and is\n  written into the specified directory <dir>.\n\n  <dir> - (Optional) The directory name in which to write the new project\n  file. If the specified directory does not exist a new directory will be\n  created. If the directory is specified with the complete path, the tool\n  uses the specified path name. However, if <dir> is specified without a\n  path, the tool looks for or creates the directory in the current working\n  directory, or the directory from which the tool was launched.\n\n  Note: When creating a project in GUI-mode, the tool appends the filename\n  <name> to the directory name <dir> and creates a project directory with the\n  name <dir> /<name> and places the new project file and project data folder\n  into that project directory.\n\nExamples:\n\n  The following example saves the active project as a new project called\n  myProject in a directory called myProjectDir:\n\n    save_project_as myProject myProjectDir \n    \n\n  Note: Because <dir> is specified as the folder name only, the tool will\n  create the project in the current working directory, or the directory from\n  which the tool was launched.\n\n  The following example saves the current project to a new project called\n  myProject in a directory called C:/Designs/myProjectDir. If you use the\n  -force argument, the tool will overwrite an existing project if one is\n  found in the specified location.\n\n    save_project_as myProject C:/Designs/myProjectDir -force  \n    \n\nSee Also:\n\n   *  create_project\n   *  current_project\n   *  open_project\n",
"precompile_kernel": "precompile_kernel\n\nDescription: \nPre-synthesize a kernel IP\n\nSyntax: \nprecompile_kernel  [-synthesis_options <args>] [-kernel_name <arg>] [-force]\n                   [-output_xo <arg>] [-hw_platform <arg>] [-platform <arg>]\n                   [-user_ip_repo_paths <args>] -xo_path <arg> [-quiet]\n                   [-verbose]\n\nReturns: \nThe path to the packaged XO container\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-synthesis_options]   Dictionary (Tcl dict) of synthesis run properties \n                         (e.g. {property1 value1 property2 value2 ...}) to be\n                         applied for synthesis.\n  [-kernel_name]         The name of the kernel\n  [-force]               Overwrite existing XO file\n  [-output_xo]           The name of the output XO\n  [-hw_platform]         The XSA or hardware platform to target for \n                         precompilation\n  [-platform]            The platform to target for precompilation\n  [-user_ip_repo_paths]  Add existing directories to the list of IP \n                         repositories. Value is an absolute path or a partial\n                         path relative the current working directory.\n  -xo_path               The path of the XO container to precompile\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nVitis, Acceleration, FileIO\n",
"write_vhdl": "write_vhdl\n\nDescription: \nExport the current netlist in VHDL format\n\nSyntax: \nwrite_vhdl  [-cell <arg>] [-mode <arg>] [-lib] [-port_diff_buffers]\n            [-write_all_overrides] [-keep_vcc_gnd] [-rename_top <arg>]\n            [-arch_only] [-force] [-include_xilinx_libs] [-quiet] [-verbose]\n            <file>\n\nReturns: \nthe name of the output file or directory\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-cell]                 Root of the design to write, e.g. des.subblk.cpu\n                          Default: whole design\n  [-mode]                 Output mode. Valid values: funcsim, pin_planning, \n                          synth_stub\n                          Default: funcsim\n  [-lib]                  Write each library into a separate file\n  [-port_diff_buffers]    Output differential buffers when writing in -port \n                          mode\n  [-write_all_overrides]  Write parameter overrides on Xilinx primitives even\n                          if the same as the default value\n  [-keep_vcc_gnd]         Don't replace VCC/GND instances by literal \n                          constants on load terminals.  For simulation modes \n                          only.\n  [-rename_top]           Replace top module name with custom name e.g. \n                          netlist\n                          Default: new top module name\n  [-arch_only]            Write only the architecture, not the entity \n                          declaration for the top cell\n  [-force]                Overwrite existing file\n  [-include_xilinx_libs]  Include simulation models directly in netlist \n                          instead of linking to library\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  <file>                  Which file to write\n\nCategories: \nFileIO, Simulation\n\nDescription:\n\n  Write a VHDL netlist of the current design or from a specific cell of the\n  design to the specified file or directory.\n\n  The output of this command is a VHDL IEEE 1076.4 VITAL-2000 compliant VHDL\n  file that contains netlist information obtained from the input design\n  files. You can output a complete netlist of the design or specific cell, or\n  output a port list for the design.\n\nArguments:\n\n  -cell <arg> - (Optional) Write the VHDL netlist from a specified cell or\n  block level of the design hierarchy. The output VHDL file or files will\n  only include information contained within the specified cell or module.\n\n  -mode <arg> - (Optional) The mode to use when writing the VHDL file. By\n  default, the simulation netlist is written for the whole design. Valid mode\n  values are:\n\n   *  funcsim - Output the VHDL netlist to be used as a functional simulation\n      model. The output netlist is not suitable for synthesis. This is the\n      default setting.\n\n   *  pin_planning - Output only the I/O ports in the entity declaration for\n      the top module.\n\n   *  synth_stub - Output the ports from the top-level of the design for use\n      as a synthesis stub.\n\n  -lib - (Optional) Create a separate VHDL file for each library used by the\n  design.\n\n  Note: This option is the opposite of, and replaces the -nolib option from\n  prior releases. Previously the default behavior of write_vhdl was to output\n  a separate VHDL file for each library used in the design, unless -nolib was\n  specified. Now you must specify the -lib option to output separate files\n  for each library.\n\n  -port_diff_buffers - (Optional) Add the differential pair buffers and\n  internal wires associated with those buffers into the output ports list.\n  This argument is only valid when -mode pin_planning or -mode synth_stub is\n  specified.\n\n  -write_all_overrides [ true | false ] - (Optional) Write parameter\n  overrides in the design to the VHDL output even if the value of the\n  parameter is the same as the defined primitive default value. If the option\n  is false then parameter values which are equivalent to the primitive\n  defaults are not output to the VHDL file. Setting this option to true will\n  not change the result but makes the output netlist more verbose.\n\n  -keep_vcc_gnd - (Optional) By default, when writing a nelist for\n  simulation, or from an IP integrator block design, the Vivado Design Suite\n  replaces VCC and GND primitives, and the nets they drive, with literal\n  constants on each of the loads on the net. The -keep_vcc_gnd option\n  disables this default behavior and preserves the VCC or GND primitives.\n\n  -rename_top <arg> - (Optional) Rename the top module in the output as\n  specified. This option only works with -mode funcsim to allow the VHDL\n  netlist to plug into top-level simulation test benches.\n\n  -arch_only - (Optional) Suppress the entity definition of the top module,\n  and outputs the architecture only. This simplifies the use of the output\n  VHDL netlist with a separate test bench.\n\n  -force - (Optional) Overwrite the VHDL files if they already exists.\n\n  -include_xilinx_libs - (Optional) Write the simulation models directly in\n  the output netlist file rather than pointing to the libraries by reference.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The filename of the VHDL file to write. If the file\n  name does not have either a .vhd or .vhdl file extension then the name is\n  assumed to be a directory, and the VHDL file is named after the top module,\n  and is output to the specified directory.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes a VHDL simulation netlist file for the whole\n  design to the specified file and path:\n\n    write_vhdl C:/Data/bft_top.vhd \n    \n\n  In the following example the entity definition of the top-level module is\n  not output to the VHDL netlist:\n\n    write_vhdl C:/Data/vhdl_arch_only.vhd -arch_only \n    \n\nSee Also:\n\n   *  write_verilog\n",
"set_logic_zero": "set_logic_zero\n\nDescription: \nSets logic zero for input ports and input pins\n\nSyntax: \nset_logic_zero  [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   List of input ports and input pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets the specified input ports and input pins to a logic zero. This command\n  is NOT supported in Synthesis.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) A list of the input ports and pins to be affected.\n\nExamples:\n\n  The following example sets the specified port to logic state 0:\n\n    set_logic_zero [get_ports reset] \n    \n\nSee Also:\n\n   *  all_inputs\n   *  get_pins\n   *  get_ports\n   *  set_logic_one\n   *  set_logic_unconnected\n",
"reset_ucf": "reset_ucf\n\nDescription: \nClear floorplan constraints read in from a file\n\nSyntax: \nreset_ucf  [-quiet] [-verbose] <file>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      UCF file to be reset\n\nCategories: \nFloorplan\n",
"report_property": "report_property\n\nDescription: \nReport properties of object\n\nSyntax: \nreport_property  [-all] [-class <arg>] [-return_string] [-file <arg>] [-append]\n                 [-regexp] [-quiet] [-verbose] [<object>] [<pattern>]\n\nReturns: \nproperty report\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-all]            Report all properties of object even if not set\n  [-class]          Object type to query for properties. Not valid with \n                    <object>\n  [-return_string]  Set the result of running report_property in the Tcl \n                    interpreter's result variable\n  [-file]           Filename to output result to.  Send output to console if \n                    -file is not used\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-regexp]         Pattern is treated as a regular expression\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  [<object>]        Object to query for properties\n  [<pattern>]       Pattern to match properties against\n                    Default: *\n\nCategories: \nObject, PropertyAndParameter, Report\n\nDescription:\n\n  Gets the property name, property type, and property value for all of the\n  properties on a specified object, or class of objects.\n\n  Note: list_property also returns a list of all properties on an object, but\n  does not include the property type or value.\n\n  You can specify objects for report_property using the get_* series of\n  commands to get a specific object. You can use the lindex command to return\n  a specific object from a list of objects:\n\n    report_property [lindex [get_cells] 0] \n    \n\n  However, if you are looking for the properties on a class of objects, you\n  should use the -classoption instead of an actual object.\n\n  This command returns a report of properties on the object, or returns an\n  error if it fails.\n\nArguments:\n\n  -all - (Optional) Return all of the properties for an object, even if the\n  property value is not currently defined.\n\n  -class <arg> - (Optional) Return the properties of the specified class\n  instead of a specific object. The class argument is case sensitive, and\n  most class names are lower case.\n\n  Note: -class cannot be used together with an <object>.\n\n  -return_string - (Optional) Directs the output to a Tcl string. The Tcl\n  string can be captured by a variable definition and parsed or otherwise\n  processed.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Xilinx regular expression Tcl commands are always\n  anchored to the start of the search string. You can add '.*' to the\n  beginning or end of a search string to widen the search to include a\n  substring. See http://perldoc.perl.org/perlre.html for help with regular\n  expression syntax.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <object> - (Optional) A single object on which to report properties.\n\n  Note: If you specify multiple objects you will get an error.\n\n  <pattern> - (Optional) Match the available properties on the <object> or\n  -class against the specified search pattern. The <pattern> applies to the\n  property name, and only properties matching the specified pattern will be\n  reported. The default pattern is the wildcard `*` which returns a list of\n  all properties on the specified object.\n\n  Note: The search pattern is case sensitive, and most properties are UPPER\n  case.\n\nExamples:\n\n  The following example returns all properties of the specified object:\n\n    report_property -all [get_cells cpuEngine] \n    \n\n  The following example returns the properties of the specified class of\n  objects, rather than an actual object:\n\n    report_property -class bel \n    \n\n  The following example returns properties on the current hw_device that\n  match the specified pattern, specified as a regular expression:\n\n    report_property [current_hw_device] -regexp .*PROG.* \n    \n\n  To determine which properties are available for the different design\n  objects supported by the tool, you can use multiple report_property\n  commands in sequence. The following example returns all properties of the\n  specified current objects:\n\n    report_property -all [current_project]  \n    report_property -all [current_fileset]   \n    report_property -all [current_design]  \n    report_property -all [current_run] \n    \n\nSee Also:\n\n   *  create_property\n   *  current_design\n   *  current_fileset\n   *  current_hw_device\n   *  current_project\n   *  current_run\n   *  get_cells\n   *  get_property\n   *  list_property\n   *  list_property_value\n   *  reset_property\n   *  set_property\n",
"generate_base_platform": "generate_base_platform\n\nDescription: \nGenerate a base platform based on a given routed checkpoint\n\nSyntax: \ngenerate_base_platform  [-source <arg>] [-reconfig_platform <arg>]\n                        [-base_platform <arg>]\n                        [-reconfig_platform_prefix <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-source]                    (Required) Specify routed checkpoint path\n  [-reconfig_platform]         (Required) Specify reconfigurable platform \n                               module name\n  [-base_platform]             (Optional) Specify the output file name, the \n                               default file name is 'base_platform'\n  [-reconfig_platform_prefix]  (Optional) Specify wrapper port name prefix \n                               from reconfigurable platform module, the \n                               default prefix is 'RL_'\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n\nCategories: \nFileIO\n",
"set_max_time_borrow": "set_max_time_borrow\n\nDescription: \nLimit time borrowing for latches\n\nSyntax: \nset_max_time_borrow  [-quiet] [-verbose] <delay> <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <delay>     Delay value: Value >= 0\n  <objects>   List of clocks, cells, data pins or clock pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets the maximum amount of time in nanoseconds that can be borrowed between\n  nets when analyzing the timing on latches.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <delay> - (Required) The delay that should be applied to the specified\n  objects. The <delay> is specified in nanoseconds (ns) as a floating point\n  number >= 0, with a default value of 0.\n\n  <objects> - (Required) A list of clocks, cells, data pins, or clock pins to\n  which the limit should be applied.\n\nExamples:\n\n  The following example specifies that the latches attached to 'all clocks'\n  will be allowed 0 time units of borrowing. Effectively, this disables time\n  borrowing throughout the entire design.\n\n    set_max_time_borrow 0.0 [all_clocks] \n    \n\n  The following example specifies that nets in the top level of hierarchy are\n  allowed 20 time units of time borrowing:\n\n    set_max_time_borrow 20 {top/*} \n    \n\nSee Also:\n\n   *  all_clocks\n   *  get_clocks\n   *  get_nets\n",
"subst": "subst(n)              Tcl Built-In Commands              subst(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       subst - Perform backslash, command, and variable substitu-\n       tions\n\nSYNOPSIS\n       subst ?-nobackslashes? ?-nocommands? ?-novariables? string\n_________________________________________________________________\n\nDESCRIPTION\n       This command performs variable substitutions, command sub-\n       stitutions, and  backslash  substitutions  on  its  string\n       argument  and  returns  the fully-substituted result.  The\n       substitutions are performed in exactly the same way as for\n       Tcl  commands.   As a result, the string argument is actu-\n       ally substituted twice, once by  the  Tcl  parser  in  the\n       usual  fashion  for  Tcl  commands, and again by the subst\n       command.\n\n       If any of the -nobackslashes, -nocommands, or -novariables\n       are  specified,  then  the corresponding substitutions are\n       not performed.  For example, if -nocommands is  specified,\n       command  substitution  is  not  performed:  open and close\n       brackets are treated as ordinary characters with  no  spe-\n       cial interpretation.\n\n       Note that the substitution of one kind can include substi-\n       tution  of  other  kinds.   For  example,  even  when  the\n       -novariables  option is specified, command substitution is\n       performed without restriction.  This means that any  vari-\n       able  substitution  necessary to complete the command sub-\n       stitution will still take place.   Likewise,  any  command\n       substitution necessary to complete a variable substitution\n       will take place, even when -nocommands is specified.   See\n       the EXAMPLES below.\n\n       If  an  error  occurs during substitution, then subst will\n       return that error.  If a  break  exception  occurs  during\n       command  or variable substitution, the result of the whole\n       substitution will be the string (as substituted) up to the\n       start of the substitution that raised the exception.  If a\n       continue exception occurs during the evaluation of a  com-\n       mand  or  variable  substitution,  an empty string will be\n       substituted for that entire command or variable  substitu-\n       tion  (as  long  as  it  is well-formed Tcl.)  If a return\n       exception occurs, or any other  return  code  is  returned\n       during command or variable substitution, then the returned\n       value is substituted for that substitution.  See the EXAM-\n       PLES below.  In this way, all exceptional return codes are\n       'caught' by subst.  The subst command itself  will  either\n       return an error, or will complete successfully.\n\nEXAMPLES\n       When  it  performs  its substitutions, subst does not give\n       any special treatment to double  quotes  or  curly  braces\n       (except within command substitutions) so the script\n              set a 44\n              subst {xyz {$a}}\n       returns 'xyz {44}', not 'xyz {$a}' and the script\n              set a 'p\\} q \\{r'\n              subst {xyz {$a}}\n       returns 'xyz {p} q {r}', not 'xyz {p\\} q \\{r}'.\n\n       When  command  substitution  is performed, it includes any\n       variable substitution necessary to evaluate the script.\n              set a 44\n              subst -novariables {$a [format $a]}\n       returns '$a 44', not '$a $a'.   Similarly,  when  variable\n       substitution is performed, it includes any command substi-\n       tution necessary to retrieve the value of the variable.\n              proc b {} {return c}\n              array set a {c c [b] tricky}\n              subst -nocommands {[b] $a([b])}\n       returns '[b] c', not '[b] tricky'.\n\n       The continue and break exceptions allow command  substitu-\n       tions  to  prevent substitution of the rest of the command\n       substitution and the rest of string  respectively,  giving\n       script  authors  more  options  when processing text using\n       subst.  For example, the script\n              subst {abc,[break],def}\n       returns 'abc,', not 'abc,,def' and the script\n              subst {abc,[continue;expr {1+2}],def}\n       returns 'abc,,def', not 'abc,3,def'.\n\n       Other exceptional return  codes  substitute  the  returned\n       value\n              subst {abc,[return foo;expr {1+2}],def}\n       returns 'abc,foo,def', not 'abc,3,def' and\n              subst {abc,[return -code 10 foo;expr {1+2}],def}\n       also returns 'abc,foo,def', not 'abc,3,def'.\n\nSEE ALSO\n       Tcl(n), eval(n), break(n), continue(n)\n\nKEYWORDS\n       backslash  substitution,  command  substitution,  variable\n       substitution\n\n\n\nTcl                            7.4                       subst(n)\n",
"add_module_instance": "add_module_instance\n\nDescription: \nAdd CIPS instance in top module\n\nSyntax: \nadd_module_instance  -module_name <arg> -inst_name <arg> [-lib_name <arg>]\n                     [-force] [-quiet] [-verbose] [<file>]\n\nUsage: \n  Name          Description\n  -------------------------\n  -module_name  Primary unit name to be instantiated\n  -inst_name    Intance name of module/entity to be instantiated\n  [-lib_name]   Library name in which module_name is compiled\n  [-force]      Overwrite existing file\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<file>]      Output file to write. Update top file, If option not provided\n\nCategories: \nFileIO\n",
"list_attribute_value": "",
"pwd": "pwd(n)                Tcl Built-In Commands                pwd(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       pwd  -  Return  the  absolute  path of the current working\n       directory\n\nSYNOPSIS\n       pwd\n_________________________________________________________________\n\n\nDESCRIPTION\n       Returns the absolute path  name  of  the  current  working\n       directory.\n\nEXAMPLE\n       Sometimes it is useful to change to a known directory when\n       running some external command using exec, but it is impor-\n       tant to keep the application usually running in the direc-\n       tory that it was started in  (unless  the  user  specifies\n       otherwise) since that minimizes user confusion. The way to\n       do this is to save the current directory while the  exter-\n       nal command is being run:\n              set tarFile [file normalize somefile.tar]\n              set savedDir [pwd]\n              cd /tmp\n              exec tar -xf $tarFile\n              cd $savedDir\n\nSEE ALSO\n       file(n), cd(n), glob(n), filename(n)\n\n\nKEYWORDS\n       working directory\n\n\n\nTcl                                                        pwd(n)\n",
"close_project": "close_project\n\nDescription: \nClose current opened project\n\nSyntax: \nclose_project  [-delete] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-delete]   Delete the project from disk also\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Closes the current open project.\n\n  Note: Any user-defined Tcl variables that are in the global namespace (i.e.\n  not in a project-specific namespace) are not reset or cleared by this\n  command. Global variables are persistent with the invocation of Vivado and\n  are only cleared when the Vivado Design Suite is closed. You can also use\n  the unset command to expressly clear a specific Tcl variable.\n\nArguments:\n\n  -delete - (Optional) Delete the project data from the hard disk after\n  closing the project.\n\n  Note: Use this argument with caution. You will not be prompted to confirm\n  the deletion of project data.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following command closes the active project:\n\n    close_project \n    \n\n  This example closes the current project. If you have multiple projects\n  open, the close_project command applies to the current project which can be\n  defined with the current_project command.\n\n  The following example sets project_1 as the current project, and then\n  closes the project and deletes it from the computer hard disk:\n\n    current_project project_1  \n    close_project -delete \n    \n\n  Note: Use the -delete argument with caution. You will not be prompted to\n  confirm the deletion of project data.\n\nSee Also:\n\n   *  current_project\n",
"set_input_jitter": "set_input_jitter\n\nDescription: \nSet input jitter for a clock object\n\nSyntax: \nset_input_jitter  [-quiet] [-verbose] <clock> <input_jitter>\n\nReturns: \nclock\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <clock>         Clock\n  <input_jitter>  Input jitter: Value >= 0\n\nCategories: \nXDC\n\nDescription:\n\n  Use the set_input_jitter command to specify additional jitter for a\n  specific primary clock.\n\n  Input jitter is the difference between successive clock edges due to\n  variation from the ideal arrival times. This command sets the input jitter\n  in nanoseconds (ns) for a specified primary clock, defined with the\n  create_clock command. Because the command accepts a single clock, the\n  jitter for each primary clock must be set individually.\n\n  You can only use the set_input_jitter command to specify input jitter on\n  primary clocks. You cannot use the command to set input jitter on generated\n  or auto derived clocks. Input jitter is propagated to generated clocks from\n  the master clock, except for MMCM and PLL.\n\n  The input jitter is used in the calculation of discrete jitter, which is\n  the amount of jitter introduced by hardware primitives such as MMCM or PLL.\n  Discrete jitter is a feature of clocks generated by the MMCM. See\n  set_clock_uncertainty.\n\n  The set_input_jitter command is ignored during synthesis.\n\n  Note: INPUT_JITTER is a property of primary clocks that can be returned by\n  the get_property or report_property commands.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <clock> - (Required) The clock name of a primary clock, defined with the\n  create_clock command.\n\n  <input_jitter> - (Required) The input jitter for the specified clock object\n  (value >= 0). The value is specified as nanoseconds (ns).\n\nExamples:\n\n  The following example sets an input jitter value of 0.3 ns on two clocks,\n  sysClk and procClk. Although the jitter values are the same, you must use\n  two set_input_jitter commands since the command only takes one clock as an\n  argument:\n\n    set_input_jitter sysClk 0.3  \n    set_input_jitter procClk 0.3 \n    \n\n  The following example defines a primary clock, sysClk, and a generated\n  clock, sysClkDiv2, that is a divide by two version of the primary clock. An\n  input jitter of 0.15 ns is specified on the primary clock. The input jitter\n  is automatically propagated to the generated clock:\n\n    create_clock -period 10 -name sysClk [get_ports sysClk]  \n    create_generated_clock  -name sysClkDiv2 -source [get_ports sysClk] \\  \n       -divide_by 2 [get_pins clkgen/sysClkDiv/Q]  \n    set_input_jitter sysClk 0.15 \n    \n\n  Note: In this example sysClkDiv2 is generated by a divider implemented with\n  flip-flops, so the input jitter is propagated from the primary clock.\n\nSee Also:\n\n   *  all_clocks\n   *  check_timing\n   *  create_clock\n   *  create_generated_clock\n   *  report_clocks\n   *  report_timing\n   *  set_clock_uncertainty\n   *  set_clock_latency\n   *  set_system_jitter\n",
"structured_placement": "structured_placement\n\nDescription: \nWrite pblock constraints for structured placement\n\nSyntax: \nstructured_placement  [-file <arg>] [-force] [-apply]\n                      [-pblock_height_limit <arg>] [-pblock_size_limit <arg>]\n                      [-quiet] [-verbose]\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-file]                 Pblock constraints file\n                          Values: A filename with alphanumeric characters.\n  [-force]                Overwrite existing file\n  [-apply]                Apply the pblock constraints\n  [-pblock_height_limit]  Maximum number of sites in a column\n                          Default: 32\n  [-pblock_size_limit]    Maximum number of sites in a PBlobk\n                          Default: 80\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n\nCategories: \nXDC, Methodology\n",
"check_timing": "check_timing\n\nDescription: \nCheck the design for possible timing problems\n\nSyntax: \ncheck_timing  [-file <arg>] [-no_header] [-loop_limit <arg>] [-append]\n              [-name <arg>] [-override_defaults <args>] [-include <args>]\n              [-exclude <args>] [-return_string] [-rpx <arg>] [-cells <args>]\n              [-verbose] [-quiet]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-file]               Filename to output results to. (send output to \n                        console if -file is not used)\n  [-no_header]          do not generate a report header\n  [-loop_limit]         Limit the number of loops reported for loops check\n                        Default: 100\n  [-append]             Append the results to file, don't overwrite the \n                        results file\n  [-name]               Output the results to GUI panel with this name\n  [-override_defaults]  Overrides the checks in the default timing checks \n                        listed below\n  [-include]            Add this list of checks to be performed along with \n                        default timing checks listed below\n  [-exclude]            Exclude this list of checks to be performed from the \n                        default timing checks listed below\n  [-return_string]      return report as string\n  [-rpx]                Filename to output interactive results to.\n  [-cells]              run check_timing on the specified cell(s)\n  [-verbose]            Return a detailed list of all timing problems found\n  [-quiet]              Ignore command errors\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Checks the design elements of ports, pins, and paths, against the current\n  timing constraints. Use this command to identify possible problems with\n  design data and timing constraints before running the report_timing\n  command. The check_timing command runs a series of default timing checks,\n  and reports a summary of any violations found. To get detailed information\n  about violations, use the -verbose option.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to the GUI with the -name option,\n  or to a file with -file.\n\n  Default Timing Checks:\n\n   *  constant_clock - Checks for clock signals connected to a constant\n      signal (gnd/vss/data).\n\n   *  generated_clocks - Checks for loops, or circular definitions within the\n      generated clock network. This check will return an error if a generated\n      clock uses a second generated clock as its source, when the second\n      generated clock uses the first clock as its source.\n\n   *  latch_loops - Checks for and warns of combinational latch loops in the\n      design.\n\n   *  loops - Checks for and warns of combinational feedback loops in the\n      design.\n\n   *  multiple_clock - Warns if multiple clocks reach a register clock pin.\n      If more than one clock signal reaches a register clock pin it is\n      unclear which clock will be used for analysis. In this case, use the\n      set_case_analysis command so that only one clock will propagate to the\n      register clock pin.\n\n   *  no_clock - Reports unclocked registers. In this case, no setup or hold\n      checks are performed on data pins related to the register clock pin.\n\n   *  no_input_delay - Reports the input ports without an input delay\n      constraint. Input delays can be assigned using the set_input_delay\n      command. Input ports that are unclocked will not be checked for input\n      delays.\n\n   *  no_output_delay - Reports the output ports without an output delay\n      constraint. Output delays can be assigned using the set_output_delay\n      command. Output ports that are unclocked will not be checked for output\n      delays.\n\n   *  partial_input_delay - Reports the input ports having partially defined\n      input delay constraints. Assigning set_input_delay -max or\n      set_input_delay -min to an input port, without assigning the other,\n      creates a partially defined input delay. In such cases, paths starting\n      from the input port may become unconstrained and no timing checks will\n      be done against the port. Assigning set_input_delay without specifying\n      either -min or -max allows the tool to assume both min and max delays,\n      and so does not result in a partial input delay.\n\n      Note: Unclocked input ports are not checked for partial input\n      delays.\n\n   *  partial_output_delay - Reports the output ports having partially\n      defined output delay constraints. Assigning set_output_delay -max or\n      set_output_delay -min to an output port, without assigning the other,\n      creates a partially defined output delay. In such cases, paths reaching\n      the port may become unconstrained and no timing checks will be done\n      against the port. Assigning set_output_delay without specifying either\n      -min or -max allows the tool to assume both min and max delays, and so\n      does not result in a partial output delay.\n\n      Note: Unclocked output ports are not checked for partial output\n      delays.\n\n   *  pulse_width_clock - Reports clock pins that have only a pulse width\n      check associated with the pin, and no setup or hold check, no recovery,\n      removal, or clk->Q check.\n\n   *  unconstrained_internal_endpoints - This warning identifies timing path\n      endpoints at register data pins that are not constrained. Endpoints at\n      register data pins are constrained by clock assignment using the\n      create_clock command. Endpoints at output ports are checked and\n      reported by the no_output_delay check.\n\nArguments:\n\n  -file <arg> - (Optional) Write the results to the specified file on disk.\n  By default, the output of this command is written to the Tcl console.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  write the named file into the current working directory, or the directory\n  from which the tool was launched.\n\n  -append - Append the results to the specified file. As a default the\n  check_timing command will overwrite an existing file when the -file\n  argument is specified.\n\n  -no_header - (Optional) Do not write the standard header to the report.\n  This is a boolean option that is enabled by its use.\n\n  -loop_limit <arg> - (Optional) The number of loops to identify and report\n  during the loop and latch_loop checks. The check_timing command will\n  continue to perform other checks after the -loop_limit has been reached.\n\n  -name <arg> - (Optional) Creates the named report in the Timing Results\n  view of the GUI.\n\n  -override_defaults <args> - (Optional) Override the default timing checks\n  and run only the specified checks.\n\n  Tip: Multiple checks should be enclosed in quotes, '', or braces, {}.\n\n  -include <args> - (Optional) Run the specified checks in addition to the\n  current default checks.\n\n  -exclude <args> - (Optional) Exclude the specified checks from the default\n  checks performed by the check_timing command. Specify the checks to be\n  excluded from the list of default checks.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -cells <arg> - (Option) Perform the timing checks for the specified\n  hierarchical cells. The details of the report will be based on the\n  specified cells rather than the whole design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Return more detailed results from the checks that are\n  run. Returns details of the problems found.\n\nExamples:\n\n  The following example runs check_timing, but excludes the specified checks\n  from the default timing checks.\n\n    check_timing -exclude {loops generated_clocks}\n\n  The following example uses the -verbose argument to obtain detailed results\n  running just the multiple_clocks check, and then uses get_clocks to look\n  further into the issue.\n\n    check_timing -verbose -override_defaults {multiple_clock}\n      Checking multiple_clock.\n      There are 2 register/latch pins with multiple clocks.\n      procEngine/mode_du/set_reg[0]/C\n      provEngine/mode_du/set_reg[1]/C\n    get_clocks -of_objects [get_pin procEngine/mode_du/set_reg[0]/C]\n      sysClk coreClk\n\nSee Also:\n\n   *  create_clock\n   *  get_clocks\n   *  open_report\n   *  report_timing\n   *  set_case_analysis\n   *  set_input_delay\n   *  set_max_delay\n   *  set_output_delay\n",
"report_route_status": "report_route_status\n\nDescription: \nReport on status of the routing.\n\nSyntax: \nreport_route_status  [-return_nets] [-return_string] [-file <arg>] [-append]\n                     [-of_objects <args>] [-route_type <arg>] [-list_all_nets]\n                     [-show_all] [-dump_routes] [-has_routing]\n                     [-boolean_check <arg>] [-ignore_cache] [-to_load <args>]\n                     [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-return_nets]    Return a list of nets that match the given -route_type \n                    type\n  [-return_string]  Set the result of running the report in the Tcl \n                    interpreter's result variable\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-of_objects]     Report detailed routing for these routes\n  [-route_type]     Only show routes with the given status: \n                    UNPLACED|UNPLACED_ALL|UNROUTED|PARTIAL|GAPS|CONFLICTS|ANT\n                    ENNAS|NODRIVER|MULTI_DRIVER|LOCKED_NODES|HAS_ROUTING|INTR\n                    ASITE|NOLOADS|HIERPORT|ROUTED (ignored if -of_objects is \n                    used)\n  [-list_all_nets]  List full route information for every net in the design \n                    (ignored if -of_objects is used)\n  [-show_all]       List all relevant pins for routes marked as UNPLACED or \n                    PARTIAL routes and list all relevant nodes for routes \n                    marked as ANTENNAS or CONFLICTS routes (by default only \n                    the first 15 pins or nodes are listed for a route)\n  [-dump_routes]    Show the full routing tree for every routed net in the \n                    design.  This is VERY VERBOSE.\n  [-has_routing]    Returns 0 if there is no routing currently stored for \n                    this design and 1 if there is. All other options are \n                    ignored.\n  [-boolean_check]  Returns 1 if the given flag is true and 0 if it is not.  \n                    Value flags that can be checked are: \n                    PLACED_FULLY|PARTIALLY_ROUTED|ROUTED_FULLY|ERRORS_IN_ROUT\n                    ES. All other options are ignored (cannot be used with \n                    -has_routing).\n  [-ignore_cache]   Throw away all cached information and recalculate the \n                    route status for the entire design (slow)\n  [-to_load]        Show just one branch of the given route from the driver \n                    to the given load\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Reports the state of routing in the current design.\n\n  The route status report can include a wide range of information, from a\n  simple 1 if the design has routing, to a complete route tree for each net\n  in the design.\n\nArguments:\n\n  -return_nets - (Optional) Returns a list of nets that can be processed by\n  other Tcl commands. When the -return_nets argument is used, it is required\n  to also use the -route_type argument with a valid route state.\n\n  Note: This argument cannot be used with -return_string, -of_objects,\n  -list_all_nets, -dump_routes, -has_routing, -boolean_check or\n  -file arguments.\n  This argument will not generate the report_route_status output.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -of_objects <args> - (Optional) Report the full routing tree for the\n  specified route, net, or xdef_net objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -route_type <arg> - (Optional) Only show routes with the specified route\n  status. Valid route states are:\n\n   *  ANTENNAS - the net has antennas or islands. Antennas are connected\n      routing that don't go to a valid load, islands are pieces of\n      disconnected routing in the route tree.\n\n   *  CONFLICTS - the net has conflicts (either multiple routes share the\n      same node, or a site internally has a logical net driving a site pin\n      and that site pin has routing to it from a different logical net, or a\n      routed site reported that it was invalid).\n\n   *  HIERPORT - the net has either no loads or no drivers and is also\n      connected to a top level terminal port.\n\n   *  INTRASITE - is fully routed inside a site. No routing required.\n\n   *  GAPS - the net has known gaps in the route tree.\n\n   *  HAS_ROUTING - the net has a route tree associated with it.\n\n   *  LOCKED_NODES - the net has locked routing nodes in it.\n\n   *  NODRIVER - the net has no drivers.\n\n   *  NOLOADS - the net has no loads and so needs no routing.\n\n   *  PARTIAL - the net has routing but is not fully routed.\n\n   *  ROUTED - the net is fully routed with no errors.\n\n   *  UNPLACED - the net has any unplaced pins.\n\n   *  UNPLACED_ALL - none of the pins for the net are placed.\n\n   *  UNROUTED - the net needs to be routed but has no route data.\n\n  Note: The -route_type option is ignored if -of_objects is also specified.\n\n  -list_all_nets - (Optional) Report summary route status for every net in\n  the design, or those selected by -route_type if it is given.\n\n  Note: This option is ignored if -of_objects is specified.\n\n  -show_all - (Optional) Report all relevant pins for routes marked as\n  UNPLACED or PARTIAL routes and list all relevant nodes for routes marked as\n  ANTENNAS or CONFLICTS routes. As a default only the first 15 pins or nodes\n  are listed for a given route.\n\n  -dump_routes - (Optional) Report the full routing tree for every routed net\n  in the design.\n\n  Note: This is a very long report, and can take some time to generate.\n\n  -has_routing - (Optional) Returns false (0) if the design is unrouted, and\n  returns true (1) if the design has routing. All other options are ignored\n  when -has_routing is specified.\n\n  Note: Has routing does not mean fully routed.\n\n  -boolean_check <arg> - (Optional) Returns 1 if the specified design\n  attribute is true, and returns 0 if it is not true. Design attributes that\n  can be checked include: PLACED_FULLY, PARTIALLY_ROUTED, ROUTED_FULLY,\n  ERRORS_IN_ROUTES.\n\n  Note: This option cannot be used with -has_routing or -return_nets.\n\n  -ignore_cache - (Optional) By default the report_route_status command is\n  iterative, and only updates the route information for new nets and routes\n  as the design is implemented. This argument will cause the command to\n  ignore the cached information and regenerate the report for the entire\n  design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  -to_load - (Optional) Show just one branch of the given route from the driver to the given load.\n\n  Note: This option cannot be used without -of_objects option.\n  Both options must take one argument only.\n\nExamples:\n\n  The following example reports the route status for the specified nets:\n\n    report_route_status -of_objects [get_nets u4*]  \n    \n\n  The following example returns a list of nets that have routing but are not\n  fully routed to the Find Results window in the Vivado IDE.\n\n    show_objects [report_route_status -return_nets -route_type PARTIAL]\n\nSee Also:\n\n   *  route_design\n",
"rename_pin": "rename_pin\n\nDescription: \nrename a pin\n\nSyntax: \nrename_pin  -to <arg> [-quiet] [-verbose] <pin>...\n\nUsage: \n  Name        Description\n  -----------------------\n  -to         New name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <pin>       Pin to rename\n\nCategories: \nNetlist\n\nDescription:\n\n  Rename the specified pin on a hierarchical cell in the current synthesized\n  or implemented design.\n\n  The following are limitations with regard to renaming pins:\n\n   *  Pins on primitive cells cannot be renamed.\n\n   *  A pin on a hierarchical cell that has the DONT_TOUCH property can be\n      renamed, but a pin on an hierarchical cell inside a DON'T_TOUCH cell\n      cannot be renamed.\n\n   *  You cannot rename individual bits of a bus pin, but you can\n      collectively rename the whole bus.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  Changes to the names of cells, nets, pins, and ports, will also affect the\n  design constraints defined in the in-memory design. Constraints are\n  automatically modified to target the new object name, however these are not\n  written back to the source XDC file. Saving the modified in-memory design\n  using write_checkpoint will save both the renamed objects and modified\n  constraints.\n\n  This command returns nothing if successful, or an error if it fails.\n\nArguments:\n\n  -to <arg> - (Required) The new name to assign to the specified pin. The new\n  name only needs to specify the pin name, rather than the whole hierarchical\n  name of the pin. Specified names can not contain Tcl special characters:\n  `'\\{};$#\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pin> - (Required) The hierarchical name of a pin, starting with the\n  instance name of the cell it is found on.\n\nExamples:\n\n  The following example renames the specified pin:\n\n    rename_pin -to in1 egressLoop[0].egressFifo/I1 \n    \n\n  The following example shows the error that is returned when you try to\n  rename a single bit of a bus, and then renames the whole bus pin:\n\n    rename_pin -to din[0] egressLoop[0].egressFifo/buffer_fifo/dataInput[0]  \n    WARNING: [Coretcl 2-1480] rename_pin can not rename bits of a bus, \\  \n    use resize_pin_bus instead.  \n    rename_pin -to dataInput egressLoop[0].egressFifo/buffer_fifo/din \n    \n\nSee Also:\n\n   *  connect_net\n   *  create_cell\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  remove_pin\n   *  set_hierarchy_separator\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"read_saif": "read_saif\n\nDescription: \nImport simulation data in saif format\n\nSyntax: \nread_saif  [-strip_path <arg>] [-no_strip] [-out_file <arg>] [-quiet]\n           [-verbose] <file>\n\nUsage: \n  Name           Description\n  --------------------------\n  [-strip_path]  Specifies the name of the instance of the current design as \n                 it appears in the SAIF file\n  [-no_strip]    Do not strip first two levels of hierarchy from SAIF file\n  [-out_file]    Specifies the name of the output file that contains nets \n                 that could not be matched\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <file>         Specifies the name of the SAIF file to be read\n\nCategories: \nFileIO, Power, Simulation\n\nDescription:\n\n  Reads a Switching Activity Interchange Format (SAIF) file for use during\n  power analysis by the report_power command, or power optimization by\n  power_opt_design. The read_saif command will annotate the design nodes with\n  activity from the SAIF file and estimate power appropriately.\n\n  Running report_power or power_opt_design after reading the SAIF file will\n  use the activity rates from the specified file during optimization and\n  analysis.\n\nArguments:\n\n  -strip_path <arg> - (Optional) Strip the specified instance path prefix\n  from elements in the SAIF file to allow them to be mapped properly to\n  instances in the current design.\n\n  Note: The instance path specified should not begin with a '/'. The\n  read_saif parser looks for design net names, which do not have a leading\n  '/'.\n\n  -no_strip - (Optional) Do not strip first two levels of hierarchy from the\n  SAIF file.\n\n  -out_file <arg> - (Optional) The name of an output file where unmatched\n  nets and other messages are reported. This file is created during the\n  import of the SAIF file. If the -out_file option is not specified, the\n  information is not saved to a file.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  write the specified file to the current working directory, or the directory\n  from which the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the SAIF file to read.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example:\n\n    read_saif -strip_path design/top/F1 C:/Data/design1.saif \n    \n\nSee Also:\n\n   *  power_opt_design\n   *  report_power\n",
"report_clock_interaction": "report_clock_interaction\n\nDescription: \nReport on clock timing paths and unclocked registers\n\nSyntax: \nreport_clock_interaction  [-from <args>] [-to <args>] [-delay_type <arg>]\n                          [-setup] [-hold] [-significant_digits <arg>]\n                          [-no_header] [-file <arg>] [-append] [-name <arg>]\n                          [-return_string] [-cells <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-from]                From clocks\n  [-to]                  To clocks\n  [-delay_type]          Type of path delay: Values: max, min, min_max\n                         Default: max\n  [-setup]               Consider max delay timing paths (equivalent to \n                         -delay_type max)\n  [-hold]                Consider min delay timing paths (equivalent to \n                         -delay_type min)\n  [-significant_digits]  Number of digits to display: Range: 0 to 3\n                         Default: 2\n  [-no_header]           do not generate a report header\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append the results to file, don't overwrite the \n                         results file\n  [-name]                Output the results to GUI panel with this name\n  [-return_string]       Return report as string\n  [-cells]               run report_clock_interaction on the specified \n                         cell(s)\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Reports clock interactions and signals that cross clock domains to identify\n  potential problems such a metastability, or data loss, or incoherency,\n  where some visibility into the paths that cross clock domains is\n  beneficial. This command requires an open synthesized or implemented\n  design.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -from <args> - (Optional) The source clocks of the clock pairs relationship\n  between which the clock interactions should be analyzed. You can specify\n  clock names or clock objects.\n\n  -to <args> - (Optional) The destination clocks of the clock pairs\n  relationship between which the clock interactions should be analyzed. You\n  can specify clock names or clock objects.\n\n  -delay_type <arg> - (Optional) Specifies the type of delay to analyze when\n  running the clock interaction report. The valid values are min, max, and\n  min_max. The default setting for -delay_type is max.\n\n  -setup - (Optional) Check for setup violations. This is the same as\n  specifying -delay_type max.\n\n  -hold - (Optional) Check for hold violations. This is the same as\n  specifying -delay_type min.\n\n  Note: -setup and -hold can be specified together, which is the same as\n  specifying -delay_type min_max.\n\n  -significant_digits <arg> - (Optional) The number of significant digits in\n  the output results. The valid range is 0 to 3. The default setting is 2\n  significant digits.\n\n  -no_header - (Optional) Do not write a header to the report.\n\n  -file <arg> - (Optional) Write the report into the specified file. Unless\n  you also specify -append, the specified file will be overwritten if it\n  already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) The name of the Clock Interaction Report view to\n  display in the tool GUI mode. If the name has already been used in an open\n  Report view, that view will be closed and a new report opened.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -cells <arg> - (Option) Generate the report for the specified hierarchical\n  cells. The details of the report will be based on the specified cells\n  rather than the whole design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example sets the model for interconnect delay, selects a\n  device speed grade, and then runs report_clock_interaction:\n\n    set_delay_model -interconnect none  \n    set_speed_grade -3  \n    report_clock_interaction -delay_type min_max \\  \n       -significant_digits 3 -name 'results_1' \n\n  The following example returns the clock interactions, writing the report to\n  the GUI, to the specified file, and returns a string which is assigned to\n  the specified variable:\n\n    set clk_int [report_clock_interaction -file clk_int.txt -name clk_int1 \\  \n    -return_string] \n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n   *  report_clocks\n   *  set_delay_model\n   *  set_speed_grade\n",
"get_pkgpin_nibbles": "get_pkgpin_nibbles\n\nDescription: \nGet a list of pkgpin nibbles.\n\nSyntax: \nget_pkgpin_nibbles  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                    [-quiet] [-verbose] [<patterns>]\n\nReturns: \npin_nibble\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the pin_nibble of these package_pins, iobank, site, or \n                 port.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match pin_nibble against patterns\n                 Default: *\n\nCategories: \nDevice, XDC, Object\n\nDescription:\n\n  Return a list of nibbles, or half-bytes, on the I/O banks of the current\n  Xilinx UltraScale device.\n\n  For 7 series devices, the hierarchy of IO Banks is divided into two object\n  types: I/O Banks and Package Pins. For Xilinx UltraScale FPGA devices, the\n  IO Bank hierarchy includes two additional divisions: Byte groups and\n  Nibbles.\n\n  The relationships of these objects on an UltraScale device are defined as\n  follows:\n\n   *  An iobank has 2 or 4 bytegroups.\n\n   *  Each pkgpin_bytegroup has 2 nibbles, an upper and lower, and has 13\n      package pins.\n\n   *  Each pkgpin_nibble has 6 or 7 pins, and is the upper or lower nibble of\n      the pkgpin_bytegroup.\n\n   *  A package_pin is one pin of an iobank, a pkgpin_bytegroup, or a\n      pkgpin_nibble.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_pkgpin_nibbles based on property values on the objects. You can find\n  the properties on an object with the report_property or list_property\n  commands. In the case of the pkgpin_nibble object, 'NAME', 'IOBANK' and\n  'TYPE' are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the pkgpin_nibble objects of the\n  specified package_pins, iobank, site, or port.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match pkgpin_nibbles against the specified\n  patterns. The default pattern is the wildcard `*` which returns all\n  pkgpin_nibble objects on the current device.\n\nExamples:\n\n  The following example returns the Upper nibbles associated with the\n  specified IO bank:\n\n    \n    get_pkgpin_nibbles -of [get_iobanks 44] -filter {TYPE == U} \n    \n\nSee Also:\n\n   *  get_iobanks\n   *  get_package_pins\n   *  get_pkgpin_bytegroup\n   *  list_property\n   *  report_property\n",
"install": "install\n\nDescription: \nInstall board\n\nSyntax: \ninstall  [-quiet] [-verbose] <board>\n\nReturns: \nNothing\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <board>     Name of board to install\n\nCategories: \nTools\n",
"current_board_part": "current_board_part\n\nDescription: \nGet the current board_part object\n\nSyntax: \ncurrent_board_part  [-quiet] [-verbose]\n\nReturns: \ncurrent board_part object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nObject, Project, Board\n\nDescription:\n\n  Return the Xilinx device used in the current project or design.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The board part provides a representation of the Xilinx device in the\n  context of the board-level system, and is represented by the part0\n  component in the Board Interface file.\n\n  The board can be specified:\n\n   *  When the project is created by selecting Boards from the Default Part\n      dialog box.\n\n   *  By setting the BOARD_PART property on the current project as shown in\n      the example.\n\n   *  By selecting the Project Device in the Settings dialog box in an open\n      project in the Vivado IDE.\n\n  Refer to the Vivado Design Suite User Guide: System-Level Design Entry\n  (UG895) for information on creating projects, and on configuring project\n  settings.\n\n  Note: When you specify the board with the set_property command, the target\n  part is also changed to match the part required by the specified BOARD_PART\n  property.\n\n  The current_board_part command returns the NAME property of the current\n  board part. The command returns a warning when the project targets a Xilinx\n  FPGA instead of a board, or when the BOARD_PART property has not been\n  defined. The command returns an error if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example sets the BOARD_PART property for the current project,\n  then reports the board part in use by the project:\n\n    set_property BOARD_PART xilinx.com:kc705:part0:1.0 [current_project]  \n    current_board_part  \n       xilinx.com:kc705:part0:1.0 \n    \n\n  This example shows the results of setting the BOARD_PART property, causing\n  the target part to be changed as well. The target part is changed\n  automatically, and a warning is returned:\n\n    set_property BOARD_PART xilinx.com:ac701:part0:1.0 [current_project]  \n    WARNING: [Project 1-153] The current project part `xc7k325tffg900-2`  \n       does not    match with the `XILINX.COM:AC701:PART0:1.0` board part   \n       settings. The project part will be reset to `XILINX.COM:AC701:PART0:1.0`  \n       board part.  \n    INFO: [Project 1-152] Project part set to artix7 (xc7a200tfbg676-2) \n    \n\n  Note: You can use the report_property command to check the BOARD_PART and\n  PART property on the current_project to see the changes.\n\n  The following example shows how to get DEVICE, PACKAGE, SPEED and FAMILY\n  properties for the part defined by the PART_NAME property of the current\n  board part:\n\n    get_property DEVICE [get_parts [get_property PART_NAME \\  \n       [current_board_part]]]   \n    get_property PACKAGE [get_parts [get_property PART_NAME \\  \n       [current_board_part]]]  \n    get_property SPEED [get_parts [get_property PART_NAME \\  \n       [current_board_part]]]  \n    get_property FAMILY [get_parts [get_property PART_NAME \\  \n       [current_board_part]]] \n    \n\nSee Also:\n\n   *  current_project\n   *  get_board_components\n   *  get_boards\n   *  get_board_part_interfaces\n   *  get_board_part_pins\n   *  get_board_parts\n   *  report_property\n   *  set_property\n",
"get_waivers": "get_waivers\n\nDescription: \nGet one or more DRC/METHODOLOGY/CDC/LINT message waivers\n\nSyntax: \nget_waivers  [-type <arg>] [-id <arg>] [-of_objects <args>] [-regexp]\n             [-filter <arg>] [-nocase] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nwaivers\n\nUsage: \n  Name           Description\n  --------------------------\n  [-type]        Type of waiver - DRC, METHODOLOGY, CDC, LINT, ALL\n  [-id]          ID of the DRC/METHODOLOGY/CDC/LINT message being waived\n  [-of_objects]  List of objects (cells, nets, pins, sites, etc.) for which \n                 DRC/METHODLOGY/CDC/LINT waiver(s) were set\n  [-regexp]      Patterns are full regular expressions\n  [-filter]      Filter list with expression\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match waiver names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nWaiver, Object\n\nDescription:\n\n  The create_waiver command lets you select individual DRC, methodology, or\n  CDC violations or rule checks that can be waived for a design, letting you\n  move forward in the design flow. The get_waivers command lets you query the\n  defined waiver objects in the current design.\n\n  A waiver must be specified for an individual DRC or methodology violation,\n  or for a specific DRC or methodology check, or for a CDC path. The waiver\n  must be assigned to a specific object, or specific violation ID, or for\n  paths using -from/-to arguments. You can format the get_waivers command to\n  return the specific types of waivers you are looking for, or waivers\n  associated with specific objects.\n\n  You can report the waivers defined in the current design with\n  report_waivers, and remove waivers from the design using delete_waivers.\n\nArguments:\n\n  -type <arg> - (Optional) Specifies the type of waiver to get. Currently\n  supports DRC, METHODOLOGY, and CDC.\n\n  -id <arg> - (Optional) Specifies the ID of the check or violation\n  associated with the waiver.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_waivers based on property values on the waivers. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the waivers object, 'NAME', 'OBJECT_COUNTS' and 'TYPE' are\n  some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the waivers associated with the\n  specified objects (cells, nets, pins, sites, etc.).\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match waivers against the specified search pattern.\n  The default pattern is the wildcard `*` which gets a list of all waivers in\n  the project.\n\nExamples:\n\n  This example gets any waivers in the current design:\n\n    get_waivers \n    \n\n  The following example gets all DRC check waivers:\n\n    get_waivers -type DRC * \n    \n\n  The following example gets all waivers associated with the specified objects:\n\n    get_waivers -of_objects [get_ports {src_in* dest_out*}] \n    \n\nSee Also:\n\n   *  create_waiver\n   *  delete_waivers\n   *  report_waivers\n",
"flow_viz": "flow_viz\n\nDescription: \nGenerate flow visualization data\n\nSyntax: \nflow_viz  [-verbose] [-quiet]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-verbose]  Suspend message limits during command execution\n  [-quiet]    Ignore command errors\n\nCategories: \nTools, Tcl\n",
"unknown": "unknown(n)            Tcl Built-In Commands            unknown(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       unknown - Handle attempts to use non-existent commands\n\nSYNOPSIS\n       unknown cmdName ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This  command is invoked by the Tcl interpreter whenever a\n       script tries to invoke a command that does not exist.  The\n       default  implementation  of unknown is a library procedure\n       defined when Tcl  initializes  an  interpreter.   You  can\n       override  the default unknown to change its functionality,\n       or you can register a new handler  for  individual  names-\n       paces  using  the  namespace  unknown  command.  Note that\n       there is no default implementation of unknown  in  a  safe\n       interpreter.\n\n       If the Tcl interpreter encounters a command name for which\n       there is not a defined  command  (in  either  the  current\n       namespace,  or  the global namespace), then Tcl checks for\n       the existence of an unknown handler for the current names-\n       pace.   By  default,  this  handler  is  a  command  named\n       ::unknown.  If there is no such command, then  the  inter-\n       preter  returns  an  error.  If the unknown command exists\n       (or a new handler has  been  registered  for  the  current\n       namespace),  then  it is invoked with arguments consisting\n       of the fully-substituted name and arguments for the origi-\n       nal  non-existent  command.  The unknown command typically\n       does things like searching through library directories for\n       a  command  procedure  with the name cmdName, or expanding\n       abbreviated command names to full-length, or automatically\n       executing  unknown  commands  as  sub-processes.   In some\n       cases  (such  as  expanding  abbreviations)  unknown  will\n       change the original command slightly and then (re-)execute\n       it.  The result of the unknown  command  is  used  as  the\n       result for the original non-existent command.\n\n       The  default implementation of unknown behaves as follows.\n       It first calls the auto_load library procedure to load the\n       command.   If this succeeds, then it executes the original\n       command with its original  arguments.   If  the  auto-load\n       fails then unknown calls auto_execok to see if there is an\n       executable file by the name cmd.  If so,  it  invokes  the\n       Tcl  exec  command with cmd and all the args as arguments.\n       If cmd cannot be auto-executed, unknown checks to  see  if\n       the  command  was  invoked at top-level and outside of any\n       script.  If so, then unknown takes two  additional  steps.\n       First,  it  sees  if  cmd  has  one of the following three\n       forms: !!, !event, or ^old^new?^?.  If  so,  then  unknown\n       carries  out history substitution in the same way that csh\n       would for these constructs.  Finally,  unknown  checks  to\n       see  if  cmd  is a unique abbreviation for an existing Tcl\n       command.  If so, it expands the command name and  executes\n       the  command  with the original arguments.  If none of the\n       above efforts  has  been  able  to  execute  the  command,\n       unknown generates an error return.  If the global variable\n       auto_noload  is  defined,  then  the  auto-load  step   is\n       skipped.   If  the  global variable auto_noexec is defined\n       then  the  auto-exec  step  is  skipped.    Under   normal\n       circumstances  the return value from unknown is the return\n       value from the command that was eventually executed.\n\nEXAMPLE\n       Arrange for the  unknown  command  to  have  its  standard\n       behavior  except for first logging the fact that a command\n       was not found:\n\n              # Save the original one so we can chain to it\n              rename unknown _original_unknown\n\n              # Provide our own implementation\n              proc unknown args {\n                  puts stderr 'WARNING: unknown command: $args'\n                  uplevel 1 [list _original_unknown {*}$args]\n              }\n\nSEE ALSO\n       info(n), proc(n), interp(n), library(n), namespace(n)\n\nKEYWORDS\n       error, non-existent command\n\n\n\nTcl                                                    unknown(n)\n",
"write_cfgmem": "write_cfgmem\n\nDescription: \nCreate file(s) for programming flash memory.\n\nSyntax: \nwrite_cfgmem  [-force] -format <arg> -size <arg> [-interface <arg>] [-checksum]\n              [-disablebitswap] [-loadbit <arg>] [-loaddata <arg>] [-quiet]\n              [-verbose] <file>\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-force]           Overwrite existing file\n  -format            Format of the file to generate\n  -size              Size of memory that is being targeted in M Bytes (must \n                     be power of 2).\n  [-interface]       Interface used to program device.\n                     Default: SMAPx8\n  [-checksum]        Calculate a 32-bit checksum for each file. Memory will \n                     be filed with value of 0xFF unless a different byte \n                     value is specified.\n                     Default: 0xFF\n  [-disablebitswap]  Disable bit swapping in a byte for bitfiles.\n  [-loadbit]         Load bit files into memory from given address.\n  [-loaddata]        Load data into memory from given address.\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <file>             The name of the file to generate\n\nCategories: \nFileIO\n\nDescription:\n\n  This command formats a design specific configuration bitstream (.bit) file,\n  and any specified data files, into a specified memory configuration file\n  format to program into a flash memory device using the program_hw_cfgmem\n  command. Supported memory configuration file formats are MCS, BIN, and HEX.\n\n  Note: When you generate a cfgmem file with write_cfgmem, by default the\n  bits within a byte are bit-swapped, or mirrored, compared to bytes in the\n  original input bitstream. You can disable bitswap using the -disablebitswap\n  option as described below.\n\n  The process whereby the design specific data is loaded or programmed into\n  the Xilinx FPGA is called configuration. The create_hw_cfgmem command\n  defines a flash memory device used for configuring and booting the hardware\n  device.\n\n  After the hw_cfgmem object is created, and associated with the hw_device,\n  the configuration memory can be programmed with the bitstream and other\n  data from a memory configuration file created with the write_cfgmem\n  command. The hw_cfgmem object is programmed using the program_hw_cfgmem\n  command.\n\n  The write_cfgmem -loadbit command loads one or more specified bitstream\n  files into the memory configuration file, filling the available memory of\n  the device in an upward or downward direction from a specified starting\n  address. You can also add data files to the memory configuration file, by\n  specifying the starting address to load the file with -loaddata.\n\n  Note: When using -loadbit and -loaddata to fill the memory of the device,\n  you must exercise care to insure that the bitstream and data files fit into\n  the available memory and do not overwrite each other. Any data collisions\n  will cause the write_cfgmem command to fail with an error.\n\n  The write_cfgmem command returns a transcript of its process when\n  successful, or returns an error if it fails.\n\nArguments:\n\n  -force - (Optional) Overwrite a file of the same name if one exists.\n\n  -format [ BIN | HEX | MCS ] - (Required) The format of the memory\n  configuration file to write. Supported values include BIN, HEX, and MCS.\n\n  -size <arg> - (Required) Specify the size limit in MBytes of the PROM\n  device that is being targeted. The size must be specified as a power of 2.\n\n  -interface <arg> - (Optional) Specify the interface used to program the\n  PROM device. Valid values include SMAPx8 (default), SMAPx16, SMAPx32,\n  SERIALx1, SPIx1, SPIx2, SPIx4, SPIx8, BPIx8, BPIx16. This also determines\n  if byte swapping is enabled or disabled. The default interface is SMAPx8.\n\n  Note: The specified interface format of the configuration memory file is\n  critical to properly programming the flash memory device with the\n  program_hw_cfgmem command. You should be careful to use this option to\n  match the generated file with the target cfgmem_part.\n\n  -checksum - (Optional) Calculate a 32-bit checksum for the PROM file. The\n  device memory will be filled with the default value of 0xFF unless a\n  different byte value is specified. This option generates a checksum value\n  appearing in the memory configuration file. This value should match the\n  checksum in the device programmer. Use this option to verify that correct\n  data was programmed into the flash memory.\n\n  -disablebitswap - (Optional) Disable the default bit swapping for bytes in\n  the bitstream files. By default, in the files written by write_cfgmem, the\n  bits within a byte are bit-swapped, or mirrored, compared to bytes in the\n  original input BIT files. This option disables the bit swapping in the\n  output files.\n\n  -loadbit <arg> - (Optional) Specify the starting address of the PROM device\n  to begin loading one or more bitstream files. The option is specified as a\n  string with the form:\n\n    'up|down 0x0 <bitfile1>.bit <bitfile2>.bit' \n    \n\n  Where:\n\n   *  up | down - This option loads one or more BIT files into memory,\n      starting from the specified address, in either and upward or a downward\n      direction.\n\n   *  0x0 - The starting address to load the bitstream, specified as a\n      hexadecimal value.\n\n   *  <bitfile>.bit - The bitstream (.bit) file to load into the flash memory\n      device. You can specify multiple bitstream files, causing the files to\n      be concatenated in a daisy chain.\n\n  Note: You can only specify the -loadbit option once, but you can repeat the\n  arguments as needed to load multiple bitstream files from different\n  starting addresses:\n\n    -loadbit 'up 0 bitfile1.bit up 0xFFFFFF bitfile2.bit'  \n    \n\n  -loaddata <arg> - (Optional) Load the specified data files into the memory\n  of the configuration device from the starting address. The -loaddata option\n  is a string in the same form as the -loadbit argument, specifying the\n  direction, starting address, and data file names to add into the memory\n  configuration file. Data files will be added to the flash memory device as\n  is, with no additional formatting.\n\n   *  up | down - This option loads one or more DATA files into memory,\n      starting from the specified address, in either and upward or a downward\n      direction.\n\n   *  0x0 - The starting address to load the data file, specified as a\n      hexadecimal value.\n\n   *  <data_file> - A data file to load into the flash memory device. You can\n      specify multiple data files, causing the files to be concatenated in a\n      daisy chain.\n\n  Note: Although both -loadbit and -loaddata are marked as optional, at least\n  one argument must be used to provide the data for the memory configuration\n  file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The filename of the memory configuration file to write.\n  The file extension will match the format specified (.mcs), and is not\n  required as part of the file name.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExample:\n\n  The following example writes the specified memory configuration file in the\n  MCS format, with a size limit of 64 MB, loading the specified bitstream\n  file moving up from the starting address:\n\n    write_cfgmem -format MCS -size 64 -loadbit 'up 0x0 \\  \n    C:/Data/Vivado_Debug/project_debug/project_debug.runs/impl_1/sinegen_demo.bit' \\  \n    config_memory1 \n    \n\nSee Also:\n\n   *  create_hw_cfgmem\n   *  current_hw_device\n   *  delete_hw_cfgmem\n   *  get_cfgmem_parts\n   *  get_property\n   *  program_hw_cfgmem\n   *  readback_hw_cfgmem\n   *  set_property\n   *  write_bitstream\n",
"lrange": "lrange(n)             Tcl Built-In Commands             lrange(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lrange - Return one or more adjacent elements from a list\n\nSYNOPSIS\n       lrange list first last\n_________________________________________________________________\n\n\nDESCRIPTION\n       List must be a valid Tcl list.  This command will return a\n       new list consisting of elements first through last, inclu-\n       sive.  The index values first and last are interpreted the |\n       same as index values for the command  string  index,  sup- |\n       porting  simple  index  arithmetic and indices relative to |\n       the end of the list.  If first is less than  zero,  it  is\n       treated  as  if  it were zero.  If last is greater than or\n       equal to the number of elements in the list,  then  it  is\n       treated  as if it were end.  If first is greater than last\n       then an empty string  is  returned.   Note:  'lrange  list\n       first  first'  does  not always produce the same result as\n       'lindex list first' (although it  often  does  for  simple\n       fields that are not enclosed in braces); it does, however,\n       produce exactly the same results  as  'list  [lindex  list\n       first]'\n\nEXAMPLES\n       Selecting the first two elements:\n              % lrange {a b c d e} 0 1\n              a b\n\n       Selecting the last three elements:\n              % lrange {a b c d e} end-2 end\n              c d e\n\n       Selecting everything except the first and last element:\n              % lrange {a b c d e} 1 end-1\n              b c d\n\n       Selecting  a single element with lrange is not the same as\n       doing so with lindex:\n              % set var {some {elements to} select}\n              some {elements to} select\n              % lindex $var 1\n              elements to\n              % lrange $var 1 1\n              {elements to}\n\n\nSEE ALSO\n       list(n), lappend(n),  lindex(n),  linsert(n),  llength(n),\n       lsearch(n), lset(n), lreplace(n), lsort(n), string(n)      |\n\n\nKEYWORDS\n       element, list, range, sublist\n\n\n\nTcl                            7.4                      lrange(n)\n",
"get_boards": "get_boards\n\nDescription: \nGet the list of boards available in the project\n\nSyntax: \nget_boards  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n            [-verbose] [<patterns>...]\n\nReturns: \nlist of board objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board' objects of these types: 'board_component'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match Board names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Project, Board\n\nDescription:\n\n  Gets a list of evaluation boards available for use by the current project.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The board in use by the project is returned by the current_board_part\n  command.\n\n  The board can be specified:\n\n   *  When the project is created by selecting Boards from the Default Part\n      dialog box.\n\n   *  By setting the BOARD property on the current project as shown in the\n      example.\n\n   *  By selecting the Project Device in the Settings dialog box in an open\n      project in the Vivado IDE.\n\n  Refer to the Vivado Design Suite User Guide: System-Level Design Entry\n  (UG895) for information on creating projects, and on configuring project\n  settings.\n\n  Note: When you specify the board with the set_property command, the target\n  part is also changed to match the part required by the specified BOARD\n  property.\n\n  This command returns a list of boards that are available for use by the\n  current project, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by get_boards\n  based on property values on the boards. You can find the properties on an\n  object with the report_property or list_property commands. Any\n  property/value pair can be used as a filter. In the case of the board\n  object, 'NAME', 'DEVICE', and 'FAMILY' are some of the properties that can\n  be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the boards of the specified\n  board_component objects as returned by get_board_components.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match boards against the specified search patterns.\n  The default pattern is the wildcard `*` which gets a list of all boards\n  available for use in the project. More than one pattern can be specified to\n  find multiple boards based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example reports the properties of the specified evaluation\n  board:\n\n    report_property [get_boards -filter {LIBRARY_NAME==artix7}] \n    \n\n  The following example returns all boards matching the specified search\n  patterns:\n\n    get_boards {*ar* *kc*} \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_interfaces\n   *  get_board_pins\n   *  list_property\n   *  report_property\n   *  set_property\n",
"list_features": "list_features\n\nDescription: \nList available features.\n\nSyntax: \nlist_features  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nTools\n\nDescription:\n\n  In order to reduce the memory footprint of the Vivado Design Suite, there\n  are groups of Tcl commands called 'features' which are unavailable for use\n  until you run a command from that feature set, or unless you explicitly\n  load the feature using the load_features command.\n\n  This command lists the available features sets of the Vivado Design Suite\n  that can be loaded with the load_features command.\n\n  Note: If a feature has been previously loaded, it will not be listed as a\n  feature available to load.\n\n  This command returns a list of features, or an error message.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the list of features available to load into\n  the Vivado Design Suite:\n\n    list_features \n    \n\nSee Also:\n\n   *  help\n   *  load_features\n",
"report_debug_core": "report_debug_core\n\nDescription: \nReport details on debug cores\n\nSyntax: \nreport_debug_core  [-file <arg>] [-append] [-return_string] [-full_path]\n                   [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-return_string]  Return report as a string\n  [-full_path]      Display full hierarchical net path in report\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport, Debug\n\nDescription:\n\n  Writes a report of the various Vivado device tool debug cores in the\n  current project, and the parameters of those cores. Debug cores can be\n  added to a project using the create_debug_core command.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Return report as a string. This argument can\n  not be used with the -file argument.\n\n  -full_path - (Optional) Display the net names using the full hierarchical\n  path of the net.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example writes the debug core report to the specified file\n  name at the specified location:\n\n    report_debug_core -file C:/Data/FPGA_Design/project_1_cores.txt \n    \n\nSee Also:\n\n   *  create_debug_core\n",
"report_accelerator_utilization": "report_accelerator_utilization\n\nDescription: \nCompute Accelerator utilization of device and display report\n\nSyntax: \nreport_accelerator_utilization  [-file <arg>] [-name <arg>] [-json]\n                                [-kernels <args>] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name        Description\n  -----------------------\n  [-file]     Filename to output results to. (send output to console if -file\n              is not used)\n  [-name]     Output the results to GUI panel with this name\n  [-json]     Generate a JSON view of the data in addition to the report\n  [-kernels]  Report utilization of given list of kernels\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Reports resource utilization used by an accelerator card. Logic is\n  categorized into platform, user accelerator logic, and available resources\n  to the user. In order to report the correct platform utilization, all user\n  accelerators must be specified.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -name <arg> - (Optional) Specifies the name of the results to output to the\n  Vitis tool.\n\n  -kernels <arg> - (Required) Takes a TCL list where each element of the list\n  represents one kernel. Each list element is made up of 3 entries:\n  <category>:<hierarchy>:<identifier>. Category and identifier are for\n  reporting purposes only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following reports the utilization for the platform and the specified\n  kernels:\n\n    report_accelerator_utilization -kernels {module:HierA/HierB:kernelB module:HierA/HierC:kernelC}\n\nSee Also:\n\n   *  report_utilization\n",
"swap_locs": "swap_locs\n\nDescription: \nSwap two locations\n\nSyntax: \nswap_locs  [-quiet] [-verbose] <aloc> <bloc>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <aloc>      First location (port/cell/site - should be of same type as \n              'bloc')\n  <bloc>      Second location (port/cell/site - should be of same type as \n              'aloc')\n\nCategories: \nFloorplan\n\nDescription:\n\n  Swaps the LOC constraints assigned to two similar logic elements. A logic\n  element is an element that can be placed onto a device resource on the\n  FPGA.\n\n  Some DRC checking is performed when the swap_locs command is executed to\n  ensure that the two selected elements can in fact be assigned to their new\n  locations. If the location of either element is invalid for any reason, the\n  swap_locs command will fail and an error will be returned.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <aloc> - (Required) The location of the first logic element to swap. This\n  can be specified as a port, a cell, or a device site.\n\n  <bloc> - (Required) The location of the second logic element to swap. This\n  can be specified as a port, a cell, or a device site. This must match the\n  type specified by the <aloc> variable.\n\nExamples:\n\n  The following example swaps the instances assigned to the two specified\n  device sites:\n\n    swap_locs [get_sites {OLOGIC_X2Y1}] [get_sites {OLOGIC_X2Y0}] \n    \n\nSee Also:\n\n   *  get_cells\n   *  get_ports\n   *  get_sites\n",
"auto_import": "",
"get_kernels": "get_kernels\n\nDescription: \nGet kernel definitions in a Xilinx object file\n\nSyntax: \nget_kernels  -xo_path <arg> [-quiet] [-verbose]\n\nReturns: \nList of kernel definitions\n\nUsage: \n  Name        Description\n  -----------------------\n  -xo_path    Absolute path to the Xilinx object file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nSDAccel, Kernel\n",
"case": "case(n)               Tcl Built-In Commands               case(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       case  -  Evaluate  one  of several scripts, depending on a\n       given value\n\nSYNOPSIS\n       case string ?in? patList body ?patList body ...?\n\n       case string ?in? {patList body ?patList body ...?}\n_________________________________________________________________\n\n\nDESCRIPTION\n       Note: the case command is obsolete and is  supported  only\n       for  backward  compatibility.  At some point in the future\n       it may be removed entirely.  You  should  use  the  switch\n       command instead.\n\n       The  case  command  matches  string  against  each  of the\n       patList arguments in order.  Each patList  argument  is  a\n       list  of  one  or more patterns.  If any of these patterns\n       matches string then  case  evaluates  the  following  body\n       argument  by passing it recursively to the Tcl interpreter\n       and returns the result of that evaluation.   Each  patList\n       argument consists of a single pattern or list of patterns.\n       Each pattern may contain any of the  wild-cards  described\n       under string match.  If a patList argument is default, the\n       corresponding body will be evaluated if no patList matches\n       string.   If  no  patList  argument  matches string and no\n       default is given, then the case command returns  an  empty\n       string.\n\n       Two  syntaxes  are provided for the patList and body argu-\n       ments.  The first uses a separate argument for each of the\n       patterns  and commands; this form is convenient if substi-\n       tutions are desired on some of the patterns  or  commands.\n       The  second  form  places all of the patterns and commands\n       together into a single argument; the  argument  must  have\n       proper list structure, with the elements of the list being\n       the patterns and commands.  The second form makes it  easy\n       to  construct  multi-line  case commands, since the braces\n       around the whole list make it  unnecessary  to  include  a\n       backslash  at  the  end  of  each line.  Since the patList\n       arguments are in braces in the second form, no command  or\n       variable  substitutions are performed on them;  this makes\n       the behavior of the second form different than  the  first\n       form in some cases.\n\n\nSEE ALSO\n       switch(n)\n\n\nKEYWORDS\n       case, match, regular expression\n\n\n\nTcl                            7.0                        case(n)\n",
"list_property_value": "list_property_value\n\nDescription: \nList legal property values of object\n\nSyntax: \nlist_property_value  [-default] [-class <arg>] [-quiet] [-verbose] <name>\n                     [<object>]\n\nReturns: \nlist of property values\n\nUsage: \n  Name        Description\n  -----------------------\n  [-default]  Show only the default value.\n  [-class]    Object type to query for legal property values. Ignored if \n              object is specified.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of property whose legal values is to be retrieved\n  [<object>]  Object to query for legal properties values\n\nCategories: \nObject, PropertyAndParameter\n\nDescription:\n\n  Gets a list of valid values for an enumerated type property of either a\n  class of objects or a specific object.\n\n  Note: The command cannot be used to return valid values for properties\n  other than Enum properties. The report_property command will return the\n  type of property to help you identify Enum properties.\n\nArguments:\n\n  -default - (Optional) Return the default property value for the specified\n  class of objects.\n\n  -class <arg> - (Optional) Return the property values of the specified class\n  instead of a specific object. The class argument is case sensitive, and\n  most class names are lower case.\n\n  Note: -class cannot be used together with an <object>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the property to be queried. Only properties\n  with an enumerated value, or a predefined value set, can be queried with\n  this command. All valid values of the specified property will be returned.\n\n  <object> - (Optional) A single object on which to report properties.\n\n  Note: If you specify multiple objects you will get an error.\n\nExamples:\n\n  The following example returns the list of valid values for the\n  KEEP_HIERARCHY property from cell objects:\n\n    list_property_value KEEP_HIERARCHY -class cell \n    \n\n  The following example returns the same result, but uses an actual cell\n  object in place of the general cell class:\n\n    list_property_value KEEP_HIERARCHY [get_cells cpuEngine] \n    \n\n  The following example returns the default value for the specified property\n  by using the current design as a representative of the design class:\n\n    list_property_value -default BITSTREAM.GENERAL.COMPRESS [current_design] \n    \n\nSee Also:\n\n   *  create_property\n   *  current_design\n   *  get_cells\n   *  get_property\n   *  list_property\n   *  report_property\n   *  reset_property\n   *  set_property\n",
"report_sdx_utilization": "report_sdx_utilization\n\nDescription: \nCompute Sdx utilization of device and display report\n\nSyntax: \nreport_sdx_utilization  [-file <arg>] [-name <arg>] [-kernels <args>] [-quiet]\n                        [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name        Description\n  -----------------------\n  [-file]     Filename to output results to. (send output to console if -file\n              is not used)\n  [-name]     Output the results to GUI panel with this name\n  [-kernels]  Report utilization of given list of kernels\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nReport\n",
"break": "break(n)              Tcl Built-In Commands              break(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       break - Abort looping command\n\nSYNOPSIS\n       break\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  is  typically  invoked inside the body of a\n       looping command such as  for  or  foreach  or  while.   It\n       returns  a  TCL_BREAK code, which causes a break exception\n       to occur.  The exception causes the current script  to  be\n       aborted  out  to  the  innermost  containing loop command,\n       which then aborts  its  execution  and  returns  normally.\n       Break  exceptions  are  also handled in a few other situa-\n       tions, such as the catch command, Tk event  bindings,  and\n       the outermost scripts of procedure bodies.\n\nEXAMPLE\n       Print a line for each of the integers from 0 to 5:\n              for {set x 0} {$x<10} {incr x} {\n                 if {$x > 5} {\n                    break\n                 }\n                 puts 'x is $x'\n              }\n\n\nSEE ALSO\n       catch(n),   continue(n),  for(n),  foreach(n),  return(n),\n       while(n)\n\n\nKEYWORDS\n       abort, break, loop\n\n\n\nTcl                                                      break(n)\n",
"report_datasheet": "report_datasheet\n\nDescription: \nReport data sheet\n\nSyntax: \nreport_datasheet  [-significant_digits <arg>] [-file <arg>] [-append]\n                  [-return_string] [-sort_by <arg>] [-name <arg>]\n                  [-show_all_corners] [-show_oe_timing] [-group <args>]\n                  [-rpx <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-significant_digits]  Number of digits to display: Range: 0 to 3\n                         Default: 3\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append the results to file, don't overwrite the \n                         results file\n  [-return_string]       return report as string\n  [-sort_by]             Sorting order: Values: clock, port\n                         Default: clock\n  [-name]                Output the results to GUI panel with this name\n  [-show_all_corners]    provide all corners\n  [-show_oe_timing]      show output enable (tristate) timing\n  [-group]               List of output ports for skew calculation\n  [-rpx]                 Filename to output interactive results to.\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Create a 'datasheet' report for the current design. Reports setup and hold\n  times of input I/Os in relation to clocks, max/min delays from clocks to\n  output pads, skews of input/ output buses.\n\n  The datasheet report has the timing characteristics of a design at the\n  package balls/pads, including the package trace flight times. To disable\n  flight times use the following command:\n\n    config_timing_analysis -disable_flight_delays true \n    \n\n  The source synchronous output skew can be automatically calculated by the\n  Vivado Design Suite by using the -group switch for report_datasheet and\n  grouping together all the ports of the data bus including the sourced clock\n  output port. The sourced clock output port must be first in the group list.\n  For example:\n\n    report_datasheet -file output_filename -group [get_ports \\  \n       {clock_port data_bit[0] data_bit[1] data_bit[2]}] \n    \n\nArguments:\n\n  -significant_digits <arg> - (Optional) Number of digits to display from 0\n  to 3. The default is 3.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -sort_by [ port | clock ] - (Optional) Sorting order. Valid values are\n  clock or port. The default is to sort the report by clocks.\n\n  -name <arg> - (Optional) The name of the Datasheet report view to display\n  in the Vivado IDE when run in GUI mode. If the name has already been used\n  in an open Report view, that view will be closed and a new report opened.\n\n  -show_all_corners - (Optional) Report all process corners.\n\n  -show_oe_timing - (Optional) Report max and min values for paths using\n  output enable, showing both ON and OFF states.\n\n  -group [get_ports {xxx1 xxx2 ... xxxN}] - (Optional) Allows you to define\n  your own custom group of ports for analysis. This option requires a list of\n  port objects as returned by the get_ports command. The first port in the\n  list will be used as the reference for skew calculation. In most cases,\n  this will be a clock port of a source synchronous output interface.\n  Multiple groups can be specified, each with its own reference clock port.\n  When -group is not specified the timer automatically finds the group of\n  output ports based on the launching clock, and reports skew based on that\n  clock.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a . rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the datasheet sorted by ports, for all\n  process corners:\n\n    \n    report_datasheet -sort_by port -show_all_corners \n    \n\n  The following example reports the datasheet with the skew calculation for\n  two groups of ports, with the first port of each group providing the\n  reference for the skew calculation for that group. In this example, CLK0OUT\n  is the forwarded clock for DATA0-4 and CLK1OUT is the forwarded clock for\n  DATA4-7:\n\n    report_datasheet -file ds.txt -group [get_ports \\  \n       {CLK0OUT DATA0 DATA1 DATA2 DATA3}] \\  \n       -group [get_ports {CLK1OUT DATA4 DATA5 DATA6 DATA7}] \n    \n\nSee Also:\n\n   *  get_ports\n",
"get_runs": "get_runs\n\nDescription: \nGet a list of runs\n\nSyntax: \nget_runs  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n          [-verbose] [<patterns>]\n\nReturns: \nlist of run objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'run' objects of these types: 'reconfig_module'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match run names against patterns\n                 Default: *\n\nCategories: \nObject, Project\n\nDescription:\n\n  Gets a list of synthesis and implementation runs in the current project\n  that match a specified search pattern. The default command gets a list of\n  all runs defined in the project.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_runs based on property values on the runs. You can find the properties\n  on an object with the report_property or list_property commands. Any\n  property/value pair can be used as a filter. In the case of the runs\n  object, 'CONSTRSET', 'IS_IMPLEMENTATION', 'IS_SYNTHESIS', and 'FLOW' are\n  some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the design runs for the specified\n  reconfig_module objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match run names against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all defined runs\n  in the project. More than one pattern can be specified to find multiple\n  runs based on different search criteria.\n\nExamples:\n\n  The following example gets a list of all incomplete runs in the current\n  project:\n\n    get_runs -filter {PROGRESS < 100} \n    \n\n  The following example gets a list of runs matching the specified pattern:\n\n    get_runs imp*  \n    \n\n  Note: If there are no runs matching the pattern you will get a warning.\n\nSee Also:\n\n   *  create_run\n   *  current_run\n   *  get_reconfig_modules\n   *  report_property\n",
"current_run": "current_run\n\nDescription: \nSet or get the current run\n\nSyntax: \ncurrent_run  [-synthesis] [-implementation] [-quiet] [-verbose] [<run>]\n\nReturns: \nrun object\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-synthesis]       Set or get the current synthesis run\n  [-implementation]  Set or get the current implementation run (default \n                     unless '-synthesis' is specified)\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  [<run>]            Run to set as current; optional\n\nCategories: \nProject\n\nDescription:\n\n  Defines the current synthesis or implementation run, or returns the name of\n  the current run. The current run is the one automatically selected when the\n  Synthesize or Implement commands are launched.\n\n  You can use the get_runs command to determine the list of defined runs in\n  the current design.\n\nArguments:\n\n  -synthesis - (Optional) Specifies that the current_run command should set\n  or return the name of the current synthesis run.\n\n  -implementation - (Optional) Specifies that the current_run command should\n  set or return the name of the current implementation run. This is the\n  default used when neither -synthesis or -implementation are specified.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <run> - (Optional) Sets the name of the synthesis or implementation run to\n  make the current run.\n\nExamples:\n\n  The following example defines the synth_1 run as the current_run:\n\n    current_run synth_1 \n    \n\n  Note: The -synthesis and -implementation arguments are not required because\n  the name allows the tool to identify the specific run of interest.\n\n  The following command returns the name of the current implementation run:\n\n    current_run -implementation -quiet \n    \n\nSee Also:\n\n   *  create_run\n   *  get_runs\n   *  launch_runs\n",
"auto_execok": "",
"convert_ngc": "convert_ngc\n\nDescription: \n(User-written application)\nConvert all provided NGC files to a supported format\n\n\nSyntax: \nconvert_ngc  [-output_dir <arg>] [-format <arg>] [-add_to_project] [-force]\n             [-quiet] [-verbose] <files>\n\nReturns: \nNone\n\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-output_dir]      Directory to place all output, else the output is placed\n                     at location of NGC file\n                     Default: Script output directory path\n  [-format]          Accepts 'Verilog' or 'EDIF' (Default: EDIF), specifies \n                     the desired output format\n                     Default: EDIF\n  [-add_to_project]  Adds the output files to the current project, if no \n                     project is open, then this option does nothing\n  [-force]           Force overwriting of files that already exist on disk, \n                     replaces files in project if add_to_project switch was \n                     specified\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <files>            A list of NGC files to convert\n\nCategories: \nxilinxtclstore, projutils, user-written\nDescription:\n\n  Converts provided NGC files to a supported format.\n\nArguments:\n\n  -output_dir <arg> - (Optional) Directory to place all output, else the \n  output is placed in the directory where the NGC file resides.\n\n  -format <arg> - (Optional) Accepts 'Verilog' or 'EDIF' (Default: EDIF), \n  specifies the desired output format\n\n  -add_to_project - (Optional) Adds the output files to the current project, \n  if no project is open, then this option does nothing.\n\n  -force - (Optional) Force overwriting of files that already exist on disk, \n  replaces files in project if add_to_project switch was specified\n\n  <files> - (Required) A list of NGC files to convert.\n\nExamples:\n\n  The following example will convert test.ngc to test.edn. The test.edn file\n  will be added to the open project. Verbose messaging will be printed:-\n  \n  % tclapp::xilinx::projutils::convert_ngc ./test.ngc -add_to_project -verbose\n  \n  The following example will convert test.ngc to test.edn. The test.edn file\n  will be placed in the ./output directory. If ./output/test.edn exists it \n  will be replaced:-\n  \n  % tclapp::xilinx::projutils::convert_ngc ./test.ngc -output_dir output -force\n\n  The following example converts all NGC files in the current directory and in \n  all sub-directories:-\n\n  % tclapp::xilinx::projutils::convert_ngc [ glob ./**/*.ngc ] [ glob ./*.ngc ]\n\n\nSee Also:\n\n   *  add_files\n   *  current_project\n   *  get_files\n   *  glob\n   *  read_edif\n",
"write_hwdef": "write_hwdef\n\nDescription: \nWrites hardware definition for use in the software development\n\nSyntax: \nwrite_hwdef  [-force] [-quiet] [-verbose] <file>\n\nReturns: \nsuccess/failure status of applied action.\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrites the existing hardware definition file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Hardware definition file (Values: A filename with alphanumeric \n              characters and .hwdef extention.) \n\nCategories: \nProject\n\nDescription:\n\n  Writes a hardware definition (.hwdef) file for use in the software\n  development tools (SDK).\n\n  The write_hwdef command is intended to simplify the movement of designs\n  from the Vivado Design Suite to software development in SDK. This command\n  is run automatically by the Vivado Design Suite when generating the output\n  products for a top-level design that includes a block design with an\n  embedded processor like MicroBlaze, or Zynq-7000 SoC. Block designs are\n  created in the IP integrator of the Vivado Design Suite with the\n  create_bd_design command.\n\n  Each Block Design and HIP generates a hardware container file with .hwdef\n  extension. The container file includes device metadata and hardware design \n  files.\n\n  The write_hwdef command returns nothing if successful, or an error if the\n  command fails.\n\nArguments:\n\n  -force - (Optional) Overwrite and existing hardware definition file if one\n  exists. If this option is not specified, then the Vivado Design Suite will\n  not overwrite an existing file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Specify the name of the hardware definition file. The\n  file can include the path and file extension. The default file extension of\n  .hwdef is used if an extension is not specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example creates the specified hardware definition file:\n\n    write_hwdef  -force C:/Data/ug940/lab1/zynq_design.hdf  \n    \n\nSee Also:\n\n   *  create_bd_design\n   *  launch_sdk\n   *  write_sysdef\n",
"delete_power_results": "delete_power_results\n\nDescription: \nDelete power results that were stored in memory under a given name.\n\nSyntax: \ndelete_power_results  -name <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -name       Name for the set of results to clear\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nPower\n\nDescription:\n\n  Deletes the power analysis results for the specified results set.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation\n\nArguments:\n\n  -name <arg> - (Required) The name of the results set to delete. This name\n  was either explicitly defined, or was automatically defined when the\n  report_power command was run.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example runs power analysis, and then clears the results:\n\n    report_power -name my_set  \n    delete_power_results -name my_set \n    \n\nSee Also:\n\n   *  power_opt_design\n   *  report_power\n   *  reset_switching_activity\n   *  set_switching_activity\n",
"pkg_mkIndex": "pkg_mkIndex(n)        Tcl Built-In Commands        pkg_mkIndex(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       pkg_mkIndex  -  Build  an  index  for automatic loading of\n       packages\n\nSYNOPSIS\n       pkg_mkIndex ?-direct?  ?-lazy?  ?-load pkgPat? ?-verbose? dir ?pattern pattern ...?\n_________________________________________________________________\n\nDESCRIPTION\n       Pkg_mkIndex is a utility procedure that  is  part  of  the\n       standard  Tcl  library.   It is used to create index files\n       that allow packages to be loaded automatically when  pack-\n       age  require  commands  are executed.  To use pkg_mkIndex,\n       follow these steps:\n\n       [1]    Create the package(s).  Each package may consist of\n              one  or  more  Tcl  script  files  or binary files.\n              Binary files must be suitable for loading with  the\n              load  command with a single argument;  for example,\n              if the file is test.so it must be possible to  load\n              this  file  with  the  command  load test.so.  Each\n              script file must contain a package provide  command\n              to declare the package and version number, and each\n              binary file must contain a call to  Tcl_PkgProvide.\n\n       [2]    Create  the index by invoking pkg_mkIndex.  The dir\n              argument gives the name of  a  directory  and  each\n              pattern  argument  is  a  glob-style  pattern  that\n              selects script or binary files in dir.  The default\n              pattern is *.tcl and *.[info sharedlibextension].\n\n              Pkg_mkIndex  will create a file pkgIndex.tcl in dir\n              with package information about all the files  given\n              by  the pattern arguments.  It does this by loading\n              each file into a slave interpreter and seeing  what\n              packages and new commands appear (this is why it is\n              essential  to  have  package  provide  commands  or\n              Tcl_PkgProvide  calls  in  the  files, as described\n              above).  If you have a package split among  scripts\n              and binary files, or if you have dependencies among\n              files, you may have to  use  the  -load  option  or\n              adjust the order in which pkg_mkIndex processes the\n              files.  See COMPLEX CASES below.\n\n       [3]    Install the package as a subdirectory of one of the\n              directories  given by the tcl_pkgPath variable.  If\n              $tcl_pkgPath  contains  more  than  one  directory,\n              machine-dependent  packages  (e.g., those that con-\n              tain binary shared libraries)  should  normally  be\n              installed  under  the  first directory and machine-\n              independent packages (e.g., those that contain only\n              Tcl  scripts)  should be installed under the second\n              directory.  The  subdirectory  should  include  the\n              package's script and/or binary files as well as the\n              pkgIndex.tcl file.   As  long  as  the  package  is\n              installed  as  a  subdirectory  of  a  directory in\n              $tcl_pkgPath it will automatically be found  during\n              package require commands.\n\n              If  you install the package anywhere else, then you\n              must ensure that the directory containing the pack-\n              age is in the auto_path global variable or an imme-\n              diate subdirectory of one  of  the  directories  in\n              auto_path.   Auto_path  contains a list of directo-\n              ries that are searched by both the auto-loader  and\n              the   package   loader;   by  default  it  includes\n              $tcl_pkgPath.  The package loader also  checks  all\n              of   the   subdirectories  of  the  directories  in\n              auto_path.  You can add a  directory  to  auto_path\n              explicitly  in your application, or you can add the\n              directory to your TCLLIBPATH environment  variable:\n              if  this  environment variable is present, Tcl ini-\n              tializes  auto_path  from  it  during   application\n              startup.\n\n       [4]    Once  the above steps have been taken, all you need\n              to do  to  use  a  package  is  to  invoke  package\n              require.   For  example,  if versions 2.1, 2.3, and\n              3.1  of  package  Test   have   been   indexed   by\n              pkg_mkIndex,  the command package require Test will\n              make version 3.1 available and the command  package\n              require  -exact  Test  2.1  will  make  version 2.1\n              available.  There may be many versions of a package\n              in  the  various index files in auto_path, but only\n              one will actually be loaded in a given interpreter,\n              based  on  the first call to package require.  Dif-\n              ferent versions of a package may be loaded in  dif-\n              ferent interpreters.\n\nOPTIONS\n       The optional switches are:\n\n       -direct        The  generated  index will implement direct\n                      loading  of  the   package   upon   package\n                      require.  This is the default.\n\n       -lazy          The  generated  index  will manage to delay\n                      loading the package until the use of one of\n                      the   commands  provided  by  the  package,\n                      instead  of  loading  it  immediately  upon\n                      package  require.   This  is not compatible\n                      with the use of auto_reset,  and  therefore\n                      its use is discouraged.\n\n       -load pkgPat   The  index  process will pre-load any pack-\n                      ages that exist in the current  interpreter\n                      and match pkgPat into the slave interpreter\n                      used to generate the  index.   The  pattern\n                      match  uses string match rules, but without\n                      making  case  distinctions.   See   COMPLEX\n                      CASES below.\n\n       -verbose       Generate  output  during  the indexing pro-\n                      cess.  Output is via the tclLog  procedure,\n                      which by default prints to stderr.\n\n       --             End of the flags, in case dir begins with a\n                      dash.\n\nPACKAGES AND THE AUTO-LOADER\n       The package management facilities  overlap  somewhat  with\n       the  auto-loader,  in  that  both  arrange for files to be\n       loaded  on-demand.   However,  package  management  is   a\n       higher-level  mechanism  that uses the auto-loader for the\n       last step in the loading process.  It is generally  better\n       to   index   a   package   with  pkg_mkIndex  rather  than\n       auto_mkindex because the package mechanism  provides  ver-\n       sion  control:   several versions of a package can be made\n       available in the index files, with different  applications\n       using  different  versions  based  on package require com-\n       mands.  In contrast, auto_mkindex does not understand ver-\n       sions so it can only handle a single version of each pack-\n       age.  It is probably not a good  idea  to  index  a  given\n       package  with  both  pkg_mkIndex and auto_mkindex.  If you\n       use pkg_mkIndex to index a package, its commands cannot be\n       invoked  until  package  require has been used to select a\n       version;  in contrast, packages indexed with  auto_mkindex\n       can be used immediately since there is no version control.\n\nHOW IT WORKS\n       Pkg_mkIndex depends on the package  unknown  command,  the\n       package  ifneeded command, and the auto-loader.  The first\n       time a package require command  is  invoked,  the  package\n       unknown script is invoked.  This is set by Tcl initializa-\n       tion to a script that evaluates all  of  the  pkgIndex.tcl\n       files  in  the  auto_path.  The pkgIndex.tcl files contain\n       package ifneeded commands for each version of each  avail-\n       able  package;  these commands invoke package provide com-\n       mands to announce the availability  of  the  package,  and\n       they  setup  auto-loader  information to load the files of\n       the package.  If the -lazy  flag  was  provided  when  the\n       pkgIndex.tcl  was  generated, a given file of a given ver-\n       sion of a given package is not actually loaded  until  the\n       first  time  one  of its commands is invoked.  Thus, after\n       invoking package require you may  not  see  the  package's\n       commands  in  the  interpreter,  but  you  will be able to\n       invoke the commands and they will be auto-loaded.\n\nDIRECT LOADING\n       Some packages, for instance packages which use  namespaces\n       and  export  commands  or those which require special ini-\n       tialization, might select  that  their  package  files  be\n       loaded  immediately upon package require instead of delay-\n       ing the actual loading to the first  use  of  one  of  the\n       package's  command. This is the default mode when generat-\n       ing the package index.  It can be overridden by specifying\n       the -lazy argument.\n\nCOMPLEX CASES\n       Most  complex  cases  of  dependencies  among  scripts and\n       binary files, and packages being split among  scripts  and\n       binary  files  are  handled  OK.  However, you may have to\n       adjust  the  order  in  which  files  are   processed   by\n       pkg_mkIndex.   These issues are described in detail below.\n\n       If each script or file contains one package, and  packages\n       are only contained in one file, then things are easy.  You\n       simply specify all files to be indexed in any  order  with\n       some glob patterns.\n\n       In  general,  it is OK for scripts to have dependencies on\n       other packages.  If scripts contain package  require  com-\n       mands,  these  are  stubbed out in the interpreter used to\n       process the scripts, so these do not cause  problems.   If\n       scripts  call  into  other  packages in global code, these\n       calls are handled by a stub unknown command.  However,  if\n       scripts  make variable references to other package's vari-\n       ables in global code, these will cause  errors.   That  is\n       also bad coding style.\n\n       If  binary  files  have  dependencies  on  other packages,\n       things can become tricky because it  is  not  possible  to\n       stub  out  C-level  APIs  such  as Tcl_PkgRequire API when\n       loading a binary file.  For example, suppose the BLT pack-\n       age  requires  Tk,  and  expresses  this  with  a  call to\n       Tcl_PkgRequire in its Blt_Init routine.  To support  this,\n       you  must  run  pkg_mkIndex  in an interpreter that has Tk\n       loaded.  You  can  achieve  this  with  the  -load  pkgPat\n       option.  If you specify this option, pkg_mkIndex will load\n       any packages listed by info loaded and that  match  pkgPat\n       into the interpreter used to process files.  In most cases\n       this will satisfy the Tcl_PkgRequire calls made by  binary\n       files.\n\n       If  you  are  indexing two binary files and one depends on\n       the other, you should specify the one that  has  dependen-\n       cies last.  This way the one without dependencies will get\n       loaded and indexed, and then the package it provides  will\n       be  available  when the second file is processed.  You may\n       also need to load the first  package  into  the  temporary\n       interpreter  used  to  create the index by using the -load\n       flag; it will not hurt to specify  package  patterns  that\n       are not yet loaded.\n\n       If  you  have a package that is split across scripts and a\n       binary file, then you should avoid  the  -load  flag.  The\n       problem is that if you load a package before computing the\n       index it masks any other files that provide  part  of  the\n       same  package.  If you must use -load, then you must spec-\n       ify the scripts first; otherwise the package  loaded  from\n       the  binary  file  may  mask  the  package  defined by the\n       scripts.\n\nSEE ALSO\n       package(n)\n\nKEYWORDS\n       auto-load, index, package, version\n\n\n\nTcl                            8.3                 pkg_mkIndex(n)\n",
"get_parts": "get_parts\n\nDescription: \nGet a list of parts available in the software\n\nSyntax: \nget_parts  [-regexp] [-filter <arg>] [-of_objects <args>] [-quiet] [-verbose]\n           [<patterns>]\n\nReturns: \nlist of part objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the parts of the objects specified: project, design, or \n                 run.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match part names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject\n\nDescription:\n\n  Gets a list of parts that match a specified search pattern. The default\n  command gets a list of all parts.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_parts based on property values on the parts. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the part\n  object, 'DEVICE', 'FAMILY' and 'SPEED' are some of the properties that can\n  be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Return the parts of the specified project,\n  design, or run objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match parts against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all parts. More\n  than one search pattern can be specified to find parts based on different\n  search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example gets a list of 7vx485t parts, speed grade -1:\n\n    get_parts -filter {DEVICE =~ xc7vx485t* && speed == -1}  \n    \n\n  The following example gets the number of 7 series and 6 series Virtex parts:\n\n    llength [get_parts -regexp {xc7v.* xc6V.*} -nocase] \n    \n\n  Note: If there are no parts matching the pattern, the tool will return a\n  warning.\n\nSee Also:\n\n   *  list_property\n   *  report_property\n",
"linsert": "linsert(n)            Tcl Built-In Commands            linsert(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       linsert - Insert elements into a list\n\nSYNOPSIS\n       linsert list index element ?element element ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  produces  a new list from list by inserting\n       all of the element arguments just before the index'th ele-\n       ment  of  list.  Each element argument will become a sepa-\n       rate element of the new list.  If index is  less  than  or\n       equal  to  zero, then the new elements are inserted at the\n       beginning of the list.  The interpretation  of  the  index |\n       value  is  the  same as for the command string index, sup- |\n       porting simple index arithmetic and  indices  relative  to |\n       the end of the list.\n\nEXAMPLE\n       Putting  some  values into a list, first indexing from the\n       start and then indexing from the end,  and  then  chaining\n       them together:\n              set oldList {the fox jumps over the dog}\n              set midList [linsert $oldList 1 quick]\n              set newList [linsert $midList end-1 lazy]\n              # The old lists still exist though...\n              set newerList [linsert [linsert $oldList end-1 quick] 1 lazy]\n\n\nSEE ALSO\n       list(n),  lappend(n),  lindex(n),  llength(n), lsearch(n),\n       lset(n), lsort(n), lrange(n), lreplace(n), string(n)       |\n\n\nKEYWORDS\n       element, insert, list\n\n\n\nTcl                            8.2                     linsert(n)\n",
"read_xdef": "read_xdef\n\nDescription: \nRead Xilinx physical design exchange and restore the physical implementation data to working memory\n\nSyntax: \nread_xdef  [-print_release_version] [-no_routing] [-no_clear] [-cell <arg>]\n           [-strict] [-no_clear_prog_delay] [-quiet] [-verbose] <file>\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-print_release_version]  Print out the release version of the file\n  [-no_routing]             Do not read and restore the routing data\n  [-no_clear]               Do not clear the place and route databases before\n                            attempting to read in the new xdef data\n  [-cell]                   Read the given XDEF in as if it were instantiated\n                            under the given cell.\n  [-strict]                 Require exact matches between placement and \n                            routing information for the loaded design. Only \n                            valid with -cell.\n  [-no_clear_prog_delay]    Don't clear the prog delays when reading in the \n                            xdef.\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n  <file>                    XDEF file name\n\nCategories: \nFileIO\n\nDescription:\n\n  Reads a Xilinx Design Exchange File (XDEF). The XDEF file includes the\n  netlist, the location, and optionally the routing information of an\n  implemented design. You can import an XDEF file into an open design.\n\n  Note: When reading an XDEF file into an open implemented design, the\n  placement and routing of the current implementation will be overwritten by\n  the imported data.\n\n  When reading an XDEF file with routing information included, you can\n  optionally ignore the routing information and simply use the LOC\n  information to place the logic elements onto the device.\n\nArguments:\n\n  -print_release_version - (Optional) Print the current software version from\n  the XDEF file. This allows you to see which version of the software was\n  used to write the XDEF file.\n\n  -no_routing - (Optional) Do not import routing information from the XDEF\n  file.\n\n  -cell <arg> - (Optional) Import the XDEF file relative to the specified\n  cell. The data is imported into the hierarchy of the specified cell.\n\n  -strict - (Optional) Force a strict matching of placement and routing\n  information with the block it is imported into. An error is returned if the\n  XDEF data does not match the cell instances in the specified cell.\n\n  Note: This argument is only valid for use with the -cell argument.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - The name of the XDEF file to be imported.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example reads the specified XDEF file from the current\n  working directory, or the directory from which the tool was launched:\n\n    read_xdef design.xdef \n    \n\n  The following example imports the specified XDEF file into the hierarchy of\n  the specified cell, using strict matching, and ignores the routing\n  information:\n\n    read_xdef C:/Data/cell.xdef -cell [get_cells cpuEngine] -strict -no_routing \n    \n\nSee Also:\n\n   *  write_xdef\n",
"set_power_opt": "set_power_opt\n\nDescription: \nSet constraints for power optimization\n\nSyntax: \nset_power_opt  [-include_cells <args>] [-exclude_cells <args>] [-clocks <args>]\n               [-cell_types <args>] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-include_cells]  Include only these instances for clock gating.\n                    Default: all\n  [-exclude_cells]  Exclude these instances from clock gating.\n                    Default: none\n  [-clocks]         Clock gate instances clocked by these clocks only.\n                    Default: all clocks\n  [-cell_types]     Clock gate these cell types only. Specify either \n                    [all|none], or one or more of [bram|reg|srl].\n                    Default: all\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nPower, XDC\n\nDescription:\n\n  Specify cell instances to include or exclude in power optimization. The\n  specified cells are optimized using the power_opt_design command.\n\n  Note: Block RAM optimizations are performed by default with the opt_design\n  command. Some or all BRAM cells can be excluded from the opt_design\n  optimization using the set_power_opt command as well.\n\n  The effect of multiple set_power_opt commands is cumulative, so that you\n  can specify a broad class of cell types to optimize, include specific\n  hierarchical cells, and then exclude cells within the included hierarchy to\n  refine the power optimization.\n\n  The power optimizations that have been performed can be reported using the\n  report_power_opt command.\n\nArguments:\n\n  -include_cells <args> - (Optional) Include only these instances for clock\n  gating. Use this option to list specific cells or blocks to be optimized\n  using power_opt_design. The default is to include all cells in power\n  optimization.\n\n  -exclude_cells <args> - (Optional) Exclude these instances from clock\n  gating. The default is to not exclude cells from power optimization. The\n  -exclude_cells option excludes from the currently included cells. By\n  default all cells are included, however, if -include_cells has been\n  specified, then -exclude_cells applies only to the currently included\n  cells.\n\n  -clocks <args> - (Optional) Perform power optimizations on instances\n  clocked by the specified clocks only. The default is to include all clocks\n  in the design.\n\n  Note: It is possible to use both -clocks and -include_cells to produce a\n  list of cells that are not clocked by the specified clocks, resulting in no\n  power optimization.\n\n  -cell_types [ all | bram | reg | srl | none ] - (Optional) Perform power\n  optimization on the specified cell types only. The default is to perform\n  power optimization on all types of cells. You can use all or none to reset,\n  or clear, any prior set_power_opt commands. You can also specify one or\n  more of bram, srl, or reg type cells.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example sets power optimization for BRAM cells only, and then\n  runs power optimization:\n\n    set_power_opt -cell_types bram  \n    power_opt_design \n    \n\n  The following example sets power optimization for BRAM and REG type cells,\n  then adds SRLs, and runs power optimization. Then all cells are cleared,\n  and only SRLs are included, and power optimization is run again:\n\n    set_power_opt -cell_types { bram reg}   \n    set_power_opt -cell_types { srl}   \n    power_opt_design  \n    set_power_opt -cell_types { none}  \n    set_power_opt -cell_types { srl}   \n    power_opt_design         \n    \n\n  The following example sets power optimization for BRAM cells only, excludes\n  the cpuEngine block from optimization, but then includes the\n  cpuEngine/cpu_dbg_dat_i block, then performs power optimization:\n\n    set_power_opt -cell_types bram  \n    set_power_opt -exclude_cells cpuEngine  \n    set_power_opt -include_cells cpuEngine/cpu_dbg_dat_i  \n    power_opt_design \n    \n\nSee Also:\n\n   *  opt_design\n   *  power_opt_design\n   *  report_power_opt\n",
"set_multicycle_path": "set_multicycle_path\n\nDescription: \nDefine multicycle path\n\nSyntax: \nset_multicycle_path  [-setup] [-hold] [-rise] [-fall] [-start] [-end]\n                     [-reset_path] [-from <args>] [-rise_from <args>]\n                     [-fall_from <args>] [-to <args>] [-rise_to <args>]\n                     [-fall_to <args>] [-through <args>] [-rise_through <args>]\n                     [-fall_through <args>] [-quiet] [-verbose]\n                     <path_multiplier>\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-setup]           Only setup multiplier is set\n  [-hold]            Only hold multiplier is set\n  [-rise]            Multiplier valid for rising delays on path endpoint\n  [-fall]            Multiplier valid for falling delays on path endpoint\n  [-start]           Multiplier measured against path startpoint\n  [-end]             Multiplier measured against path endpoint\n  [-reset_path]      Reset this path before setting multicycle\n  [-from]            List of path startpoints or clocks\n  [-rise_from]       Apply to paths rising from the list of startpoints or \n                     clocks\n  [-fall_from]       Apply to paths falling from the list of startpoints or \n                     clocks\n  [-to]              List of path endpoints or clocks\n  [-rise_to]         Apply to paths with rise transition at the list of \n                     endpoints or clocks\n  [-fall_to]         Apply to paths with fall transition at the list of \n                     endpoints or clocks\n  [-through]         List of through pins, cells or nets\n  [-rise_through]    Apply to paths rising through pins, cells or nets\n  [-fall_through]    Apply to paths falling through pins, cells or nets\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <path_multiplier>  Number of cycles\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  By default, the Vivado timing engine performs a single-cycle analysis, in\n  which the setup check is performed at the destination on the capture edge,\n  one clock cycle after the edge of the source clock. However, this may not\n  be appropriate for certain timing paths. The most common example is a logic\n  path that requires more than one clock cycle for the data to stabilize at\n  the endpoint.\n\n  The set_multicycle_path command lets you choose a path multiplier, N, to\n  establish a timing path that takes N clock cycles from the start clock edge\n  to the capture clock edge. The path multiplier defines the total number of\n  clock cycles required for propagation of a signal from its origin to\n  destination when that propagation is longer than a single clock cycle. For\n  more information on the use of this command, refer to the Vivado Design\n  Suite User Guide: Using Constraints (UG903).\n\n  The set_multicycle_path command is used to specify path multipliers for\n  setup and hold analysis, for rising and/or falling edges, with respect to\n  the source clock or the destination clock. This command includes three\n  elements:\n\n   *  The specification of the setup and hold analysis affected by the\n      multicycle path.\n\n   *  The definition of the timing paths to which the multicycle path applies.\n\n   *  The path multiplier defining the number of clock cycles to apply to the\n      timing analysis.\n\n  By default the path multiplier applies to both the setup and hold analysis.\n  The hold analysis is derived from the setup analysis, so it is moved along\n  with the setup analysis. If the path multiplier moves the setup check N\n  clock cycles, it moves the hold check N-1 clock cycles. However, this often\n  results in hold timing failures.\n\n  You can use a second set_multicycle_path command with the -hold option to\n  restore the hold analysis to its original location. When the -hold option\n  is specified the <path_multiplier> acts on the hold relationship to restore\n  the hold check to its original position. For instance, the following\n  command sequence extends the setup check for 3 clock cycles, and\n  consequently extends the hold check by two clock cycles (N-1). The second\n  command restores the hold check to its original position:\n\n    set_multicycle_path 3 -from {usbEngine1/u4/csr_reg[26]/C} \\  \n    -to {usbEngine1/u1/u2/sizd_c_reg[12]/D}  \n    set_multicycle_path 2 -from {usbEngine1/u4/csr_reg[26]/C} \\  \n    -to {usbEngine1/u1/u2/sizd_c_reg[12]/D} -hold \n    \n\n  By default, the setup path multiplier is applied with respect to the\n  destination clock, and the hold path multiplier is applied with respect to\n  the source clock. Use the -start or -end options to change the default\n  setup or hold analysis with respect to the source or destination clocks.\n\n  This command operates silently when successful, or returns an error if the\n  command fails.\n\nArguments:\n\n  -setup - (Optional) Apply the path multiplier to the setup check, which\n  also affects the hold check. This is also the default behavior of the\n  set_multicycle_path command when neither -setup nor -hold are specified.\n\n  -hold - (Optional) Apply the path multiplier only to the hold check, to\n  change the hold relationship by the specified number of clock cycles.\n\n  Note: When neither -setup nor -hold is used, or when only -setup is\n  specified, the <path_multiplier> applies to both setup and hold checks.\n\n  -rise - (Optional) Apply the multiplier specifically to rising edge delays\n  on the path endpoint.\n\n  -fall - (Optional) Apply the multiplier specifically to falling edge delays\n  on the path endpoint.\n\n  Note: If neither -rise or -fall is specified, the multiplier is applied to\n  both the rising and falling edge delays.\n\n  -start - (Optional) By default, the setup path multiplier is defined with\n  respect to the destination clock (-end). To modify the setup requirement\n  with respect to the source clock, the -start option must be used.\n\n  -end - (Optional) By default, the hold path multiplier is defined with\n  respect to the source clock. To modify the hold requirement with respect to\n  the destination clock, the -end option must be used.\n\n  Note: The -start/-end options have no effect when applying a multicycle\n  path constraint on paths clocked by the same clock, or clocked by two\n  clocks having the same waveform, or with no phase shift.\n\n  -reset_path - (Optional) Reset the specified path before applying the\n  multicycle path multiplier.\n\n  -from <args> - (Optional) A list of start points on the path that will be\n  affected by the path multiplier.\n\n  -rise_from <args> - (Optional) A list of the start points on the\n  rising-edge path that will be affected by the multicycle path multiplier.\n\n  -fall_from <args> - (Optional) A list of the start points on the\n  falling-edge path that will be affected by the multicycle path multiplier.\n\n  -to <args> - (Optional) A list of the end points on the path that will be\n  affected by the multicycle path multiplier.\n\n  -rise_to <args> - (Optional) A list of the end points on the rising-edge\n  path that will be affected by the multicycle path multiplier.\n\n  -fall_to <args> - (Optional) A list of the end points on the falling-edge\n  path that will be affected by the multicycle path multiplier.\n\n  -through <args> - (Optional) A list of pins, cell, or nets through which\n  the path affected by the multicycle path multiplier travels.\n\n  -rise_through <args> - (Optional) A list of pins, cell, or nets through\n  which the rising-edge path affected by the multicycle path multiplier\n  travels.\n\n  -fall_through <args> - (Optional) Specifies the list of pins, cell, or nets\n  through which the falling-edge path affected by the multicycle path\n  multiplier travels.\n\n  Note: Although -to, -through, and -from (in their various forms) are all\n  optional arguments, at least one -from, -to, or -through argument must be\n  specified to define a timing path for the set_multicycle_path constraint,\n  or an error will be returned.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <path_multiplier> - (Required) The number of clock cycles to move the setup\n  and hold analysis analysis.\n\n  Note: When -hold is specified, the <path_multiplier> acts on the hold\n  relationship to restore the hold check to its original position.\n\nExamples:\n\n  The following example establishes a path multiplier of 3 clock cycles for\n  the setup check of the timing path defined by the -from/-to options. A path\n  multiplier of N-1, or 2 in this example, is used to decrement the hold\n  check on the same timing path:\n\n    \n    set_multicycle_path 3 -setup -from [get_pins data0_reg/C] \\  \n       -to [get_pins data1_reg/D]  \n    set_multicycle_path 2 -hold -from [get_pins data0_reg/C] \\  \n       -to [get_pins data1_reg/D] \n    \n\n  Note: For more information on the relationship between the setup and hold\n  analysis refer to the Vivado Design Suite User Guide: Using Constraints\n  (UG903).\n\nSee Also:\n\n   *  report_timing\n   *  report_timing_summary\n   *  set_input_delay\n   *  set_output_delay\n",
"set_logic_one": "set_logic_one\n\nDescription: \nSets logic one for input ports and input pins\n\nSyntax: \nset_logic_one  [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   List of input ports and input pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets the specified input ports or input pins to a logic one. This command\n  is NOT supported in Synthesis.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) A list of the input ports and pins to be affected.\n\nExamples:\n\n  The following example sets the specified input port to a logic one:\n\n    set_logic_one [get_ports reset] \n    \n\n  The following example sets the input ports reset and wbDataForInput to a\n  logic one:\n\n    set_logic_one [list [get_ports reset] [get_ports wbDataForInput]] \n    \n\n  The following example sets the input pin I on instance reset_IBUF to a\n  logic one:\n\n    set_logic_one [get_pins reset_IBUF_inst/I] \n    \n\nSee Also:\n\n   *  all_inputs\n   *  get_pins\n   *  get_ports\n   *  set_logic_dc\n   *  set_logic_unconnected\n   *  set_logic_zero\n",
"generate_hier_access": "generate_hier_access\n\nDescription: \n(User-written application)\nGenerate sources for hierarchical access simulation\n\n\nSyntax: \ngenerate_hier_access  [-bypass <arg>] [-driver <arg>] [-directory <arg>]\n                      [-pseudo_top <arg>] [-testbench <arg>] [-log <arg>]\n                      [-quiet] [-verbose]\n\nReturns: \nNone\n\n\nUsage: \n  Name           Description\n  --------------------------\n  [-bypass]      Hierarchical access module name\n                 Default: xil_dut_bypass\n  [-driver]      Signal driver template module name\n                 Default: xil_bypass_driver\n  [-directory]   Output directory for the generated sources\n                 Default: current working directory\n  [-pseudo_top]  Top-level pseudo testbench module name\n                 Default: None\n  [-testbench]   User design testbench module name\n                 Default: None\n  [-log]         Simulator log containing hierarchical path information \n                 (required for the non-Vivado standalone flow only)\n                 Default: None\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nsimulation, xilinxtclstore, user-written\n",
"read_bxn": "read_bxn\n\nDescription: \nRead a bxn file\n\nSyntax: \nread_bxn  [-quiet] [-verbose] <file>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Bxn file\n\nCategories: \nFileIO\n",
"catch": "catch(n)              Tcl Built-In Commands              catch(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       catch - Evaluate script and trap exceptional returns\n\nSYNOPSIS\n       catch script ?resultVarName? ?optionsVarName?\n_________________________________________________________________\n\n\nDESCRIPTION\n       The  catch  command  may  be  used  to prevent errors from\n       aborting command interpretation.  The catch command  calls\n       the  Tcl  interpreter  recursively  to execute script, and\n       always returns without raising an error, regardless of any\n       errors that might occur while executing script.\n\n       If  script  raises  an error, catch will return a non-zero\n       integer value corresponding to the exceptional return code\n       returned  by evaluation of script.  Tcl defines the normal\n       return code from script evaluation  to  be  zero  (0),  or\n       TCL_OK.  Tcl also defines four exceptional return codes: 1\n       (TCL_ERROR),  2  (TCL_RETURN),  3   (TCL_BREAK),   and   4\n       (TCL_CONTINUE).   Errors during evaluation of a script are\n       indicated by a return code of TCL_ERROR.  The other excep-\n       tional return codes are returned by the return, break, and\n       continue commands and in other special situations as docu-\n       mented.   Tcl packages can define new commands that return\n       other integer values as return codes as well, and  scripts\n       that  make  use  of the return -code command can also have\n       return codes other than the five defined by Tcl.\n\n       If the resultVarName argument is given, then the  variable\n       it  names  is  set to the result of the script evaluation.\n       When the return code from the script is 1 (TCL_ERROR), the\n       value  stored  in resultVarName is an error message.  When\n       the return code from the script is 0 (TCL_OK),  the  value\n       stored in resultVarName is the value returned from script.\n\n       If the optionsVarName argument is given, then the variable |\n       it names is set to a dictionary of return options returned |\n       by evaluation of script.  Tcl specifies two  entries  that |\n       are  always  defined  in the dictionary: -code and -level. |\n       When the return code from  evaluation  of  script  is  not |\n       TCL_RETURN,  the  value of the -level entry will be 0, and |\n       the value of the -code entry  will  be  the  same  as  the |\n       return code.  Only when the return code is TCL_RETURN will |\n       the values of the -level and -code  entries  be  something |\n       else,  as  further  described in the documentation for the |\n       return command.                                            |\n\n       When  the  return  code  from  evaluation  of  script   is |\n       TCL_ERROR,  three  additional  entries  are defined in the |\n       dictionary of return  options  stored  in  optionsVarName: |\n       -errorinfo,  -errorcode, and -errorline.  The value of the |\n       -errorinfo entry is a  formatted  stack  trace  containing |\n       more information about the context in which the error hap- |\n       pened.  The formatted stack trace is meant to be read by a |\n       person.   The  value of the -errorcode entry is additional |\n       information about the error stored as a list.  The -error- |\n       code  value  is meant to be further processed by programs, |\n       and may not be particularly readable by people.  The value |\n       of  the  -errorline  entry  is an integer indicating which |\n       line  of  script  was  being  evaluated  when  the   error |\n       occurred.   The  values  of  the -errorinfo and -errorcode |\n       entries of the most recent error  are  also  available  as |\n       values of the global variables ::errorInfo and ::errorCode |\n       respectively.                                              |\n\n       Tcl packages may provide commands that set  other  entries |\n       in  the  dictionary of return options, and the return com- |\n       mand may be used by scripts to set return options in addi- |\n       tion to those defined above.\n\nEXAMPLES\n       The  catch command may be used in an if to branch based on\n       the success of a script.\n              if { [catch {open $someFile w} fid] } {\n                  puts stderr 'Could not open $someFile for writing\\n$fid'\n                  exit 1\n              }\n\n       There are more complex examples of catch usage in the doc-\n       umentation for the return command.\n\n\nSEE ALSO\n       break(n),   continue(n),   dict(n),  error(n),  return(n),\n       tclvars(n)\n\n\nKEYWORDS\n       catch, error\n\n\n\nTcl                            8.5                       catch(n)\n",
"startgroup": "startgroup\n\nDescription: \nStart a set of commands that can be undone/redone as a group\n\nSyntax: \nstartgroup  [-try] [-quiet] [-verbose]\n\nReturns: \nint\n\nUsage: \n  Name        Description\n  -----------------------\n  [-try]      Don't start a group if one has already been started\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  Starts a sequence of commands that can be undone or redone as a series. Use\n  endgroup to end the sequence of commands.\n\n  You can have multiple command groups to undo or redo, but you cannot nest\n  command groups. You must use endgroup to end a command sequence before\n  using startgroup to create a new command sequence.\n\n  Note: The startgroup/endgroup commands are provided to support sequences of\n  related commands that can be undone via the undo command, or redone if\n  needed using the redo command. However, some commands can trigger an\n  endgroup unexpectedly, and certain commands do not support either undo or\n  redo. The limitations are not fully defined.\n\n  The startgroup command returns an integer value of 0 if a group is already\n  started, and returns an integer value of 1 if the startgroup command has\n  started a new group.\n\nArguments:\n\n  -try - (Optional) Returns 1 if a new group is started. Returns 0 if a group\n  has already been started, and therefore a new group cannot be started.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example defines a startgroup, executes a sequence of related\n  commands, and then executes the endgroup. This sequence of commands can be\n  undone or redone as a group:\n\n    startgroup  \n    create_pblock pblock_wbArbEngine  \n    create_pblock pblock_usbEngnSRM  \n    add_cells_to_pblock pblock_wbArbEngine \\  \n       [get_cells [list wbArbEngine]] -clear_locs  \n    add_cells_to_pblock pblock_usbEngnSRM \\  \n       [get_cells [list usbEngine1/usbEngineSRAM]] -clear_locs  \n    endgroup \n    \n\nSee Also:\n\n   *  endgroup\n   *  redo\n   *  undo\n",
"add_files": "add_files\n\nDescription: \nAdd sources to the active fileset\n\nSyntax: \nadd_files  [-fileset <arg>] [-of_objects <args>] [-norecurse] [-copy_to <arg>]\n           [-force] [-scan_for_includes] [-quiet] [-verbose] [<files>...]\n\nReturns: \nlist of file objects that were added\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-fileset]            Fileset name\n  [-of_objects]         Filesets or sub-designs or RMs to add the files to\n  [-norecurse]          Do not recursively search in specified directories\n  [-copy_to]            Copy the file to the specified directory before \n                        adding it to project\n  [-force]              Overwrite the existing file when -copy_to is used\n  [-scan_for_includes]  Scan and add any included files found in the \n                        fileset's RTL sources\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n  [<files>]             Name of the files and/or directories to add. Must be \n                        specified if -scan_for_includes is not used.\n\nCategories: \nProject, Simulation\n\nDescription:\n\n  Adds one or more source files, or the source file contents of one or more\n  directories, to the specified fileset in the current project. Valid source\n  files include HDL sources (VHDL, Verilog, SystemVerilog, and related header\n  files), netlist sources (DCP, EDIF, and NGC), and memory interface files\n  (BMM, MIF, MEM, ELF).\n\n  IP and Block Design sources are not added through the add_files command.\n  These are compound files that are supported by separate commands such as\n  import_ip, read_bd, and read_ip.\n\n  For every file added to a project the Vivado Design Suite attempts to store\n  and maintain both a relative path and an absolute path to the file or\n  directory. When a project is opened, these paths are used to locate the\n  files and directories. By default the Vivado Design Suite applies a\n  Relative First approach to resolving paths, searching the relative path\n  first, then the absolute path. You can use the PATH_MODE property to change\n  how the Vivado tool resolves file paths or properties for specific objects.\n  For more information, see the Vivado Design Suite Properties Reference\n  Guide (UG912).\n\n  Note: Adding multiple files one at a time can cause noticeable performance\n  degradation. It is more efficient to use a single add_files command to\n  import a list of files:\n\n    \n    add_files {file1 file2 file3 ... fileN} \n    \n\n  The Vivado tool does not read the contents of a file automatically when the\n  file is added to the project with add_files, but rather reads the file\n  contents when they are needed. For instance, a constraints file is not read\n  when added to the design until needed by synthesis, timing, or\n  implementation. To read the file at the time of adding it to the design,\n  use the read_xxx command instead.\n\n  Note: When running the Vivado tool in Non-Project mode, in which there is\n  no project file to maintain and manage the various project source files,\n  you should use the read_xxx commands to read the contents of source files\n  into the in-memory design. Refer to the Vivado Design Suite User Guide:\n  Design Flows Overview (UG892) for more information on Non-Project mode.\n\n  The add_files command adds them by reference to the specified fileset. This\n  is different from the import_files command, which copies the file into the\n  local project folders as well as adding them to the specified fileset.\n\n  This command returns the files that were added, or returns an error if it\n  fails.\n\nArguments:\n\n  -fileset <name> - (Optional) The fileset to which the specified source\n  files should be added. An error is returned if the specified fileset does\n  not exist. If no fileset is specified the files are added to the source\n  fileset by default.\n\n  -norecurse - (Optional) Do not recurse through subdirectories of any\n  specified directories. Without this argument, the tool searches through any\n  subdirectories for additional source files that can be added to a project.\n\n  -copy_to <arg> - (Optional) Copy the selected files to the specified\n  directory before adding the files to the project. This option lets you move\n  files from their current location to a new folder to reference as part of\n  the source structure for a project.\n\n  -force - (optional) Overwrite any existing files of the same name as the\n  specified files, in the destination directory, when you use the -copy_to\n  option.\n\n  -scan_for_includes - (Optional) Scan Verilog source files for any `include\n  statements and add these referenced files to the specified fileset. By\n  default, `include files are not added to the fileset.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Optional) One or more file names or directory names to be added\n  to the fileset. If a directory name is specified, all valid source files\n  found in the directory, and in subdirectories of the directory, are added\n  to the fileset.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example adds a file called rtl.v to the current project:\n\n    add_files rtl.v \n    \n\n  In the preceding example the tool looks for the rtl.v file in the current\n  working directory since no file path is specified, and the file is added to\n  the source fileset as a default since no fileset is specified.\n\n  The following example adds a file called top.xdc to the constrs_1\n  constraint fileset, as well as any appropriate source files found in the\n  project_1 directory, and its subdirectories:\n\n    \n    add_files -fileset constrs_1 -quiet c:/Design/top.xdc c:/Design/project_1 \n    \n\n  In addition, the tool ignores any command line errors because the -quiet\n  argument was specified.\n\n  If the -norecurse option had been specified then only constraint files\n  found in the project_1 directory would have been added, but subdirectories\n  would not be searched.\n\n  The following example adds an existing IP core file to the current project:\n\n    add_files -norecurse C:/Data/ip/c_addsub_v11_0_0.xci \n    \n\n  Note: Use the import_ip command to import the IP file into the local\n  project folders.\n\n  The following example reads a top-level design netlist, and the char_fifo\n  IP in a Non-Project Mode design:\n\n    # Read top-level EDIF and IP DCP  \n    read_edif ./sources/wave_gen.edif  \n    add_files ./my_IP/char_fifo/char_fifo.xci \n    \n\n  Note: Either add_files or read_ip can be used reading in an IP core. All\n  output products of the IP, including a design checkpoint ( DCP), will be\n  read as needed.\n\n  The following example adds an existing DSP module, created in System\n  Generator, into the current project:\n\n    add_files C:/Data/model1.mdl \n    \n\n  Note: Use the create_sysgen command to use System Generator to create a new\n  DSP module.\n\nSee Also:\n\n   *  create_sysgen\n   *  import_files\n   *  import_ip\n   *  read_ip\n   *  read_verilog\n   *  read_vhdl\n   *  read_xdc\n",
"webtalk_init": "webtalk_init\n\nDescription: \nInitialize webtalk for use by an external client.\n\nSyntax: \nwebtalk_init  [-webtalk_dir <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-webtalk_dir]  Directory that webtalk can use for temporary files. Must \n                  exist and be writable.\n                  Default: current working directory\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \n\n",
"pr_verify": "pr_verify\n\nDescription: \nVerify whether the design check points are replaceable on board. This command supports these formats:\n (1) 'pr_verify DCP1 DCP2 -full_check';\n (2) 'pr_verify -initial DCP1 -additional {DCP2 DCP3 DCP4 ...}';\n (3) 'pr_verify -in_memory -additional {DCP2 DCP3 ...}';\n For format (3), it must have an in-memory design opened.\n\nSyntax: \npr_verify  [-full_check] [-file <arg>] [-initial <arg>] [-additional <arg>]\n           [-in_memory] [-quiet] [-verbose] [<file1>] [<file2>]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-full_check]  Default behavior is to report the first difference only; if \n                 this option is set to true, pr_verify will report complete \n                 difference in placement or routing\n  [-file]        Filename to output results to. Send output to console if \n                 -file is not used.\n  [-initial]     Initial checkpoint (.dcp)\n  [-additional]  Additional checkpoints (.dcp)\n  [-in_memory]   use in-memory design for comparison, combined with \n                 -additional option\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<file1>]      Design checkpoint (.dcp) file one\n  [<file2>]      Design checkpoint (.dcp) file two\n\nCategories: \nFileIO\n\nDescription:\n\n  This command is used to compare design checkpoint files for use in the\n  Dynamic Function eXchange (DFX) flow.\n\n  For Dynamic Function eXchange designs to work in hardware, the placement and\n  routing of static logic must be consistent between all configurations. In\n  addition, proxy logic must be placed in the same locations and clock spine\n  routing must match. The pr_verify command compares routed design checkpoint\n  files (DCP) created for a Dynamic Function eXchange design to verify that all\n  imported resources match. For more information refer to the Vivado Design\n  Suite User Guide: Dynamic Function eXchange (UG909).\n\n  The two modes for pr_verify let you specify two DCP files to compare, or\n  multiple DCP files to compare against the first DCP file. The syntax for\n  the two modes is:\n\n   *  pr_verify DCP1 DCP2\n\n   *  pr_verify -initial DCP1 -additional {DCP2 DCP3 DCP4}\n\n  The second mode is the same as repeating the pr_verify command to compare\n  each additional DCP with the initial DCP, but keeps the initial DCP open to\n  speed the additional comparisons:\n\n    pr_verify DCP1 DCP2  \n    pr_verify DCP1 DCP3  \n    pr_verify DCP1 DCP4 \n    \n\n  This command returns the results of the comparison, or returns an error if\n  it fails.\n\nArguments:\n\n  -full_check - (Optional) Run a complete check of the two design checkpoints\n  to report all mismatched resources. By default the pr_verify command will\n  stop after the first mismatch since the two design checkpoints are not\n  valid for Dynamic Function eXchange.\n\n  -file <arg> - (Optional) Write the comparison results into the specified\n  file. The specified file will be overwritten if one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -initial <arg> - (Optional) Specify the initial design checkpoint file to\n  use for comparison.\n\n  -additional <args> - (Optional) Specify one or more additional checkpoints\n  to compare against the -initial checkpoint. Multiple checkpoints should be\n  enclosed in quotes or braces.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file1> - The first design checkpoint file to compare.\n\n  <file2> - The second design checkpoint file to compare.\n\nExamples:\n\n  The following example compares the two corner DCPs, specified with the\n  -additional option, against the inital DCP, running a full check on the\n  designs:\n\n    pr_verify -full_check -initial FastConfig.dcp \\  \n       -additional {corner1.dcp corner2.dcp} \n    \n\nSee Also:\n\n   *  read_checkpoint\n   *  write_checkpoint\n",
"update_calibration_scheme": "update_calibration_scheme\n\nDescription: \nUpdates calibration scheme.\n\nSyntax: \nupdate_calibration_scheme  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \n\n",
"report_clock": "\nTopic                     Description\nreport_clock_interaction  Report on clock timing paths and unclocked registers\nreport_clock_networks     Report clock networks\nreport_clock_utilization  Report information about clock nets in design\nreport_clocks             Report clocks\n\nFor help on an individual topic, type 'help <topic>'. For example:\n% help create_project\n",
"read_noc_solution": "read_noc_solution\n\nDescription: \nRead NOC solution from JSON file\n\nSyntax: \nread_noc_solution  -file <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -file       Input NOC solution file In JSON format\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nNOC\n",
"write_inferred_xdc": "write_inferred_xdc\n\nDescription: \nWrite file with inferred xdc timing constraints\n\nSyntax: \nwrite_inferred_xdc  [-force] [-all] [-append] [-async_clocks] [-all_async_reg]\n                    [-clock_groups] [-clocks] [-excl_clocks] [-exceptions]\n                    [-io_constraints] [-merge_existing_constraints]\n                    [-name <arg>] [-quiet] [-verbose] [<file>]\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-force]                       Overwrite existing file.\n  [-all]                         Generate all constraints except missing \n                                 clocks which are generated with the -clocks \n                                 option\n  [-append]                      Append the constraints to file, don't \n                                 overwrite the constraints file\n  [-async_clocks]                Find asynchronous clock groups\n  [-all_async_reg]               Find the missing ASYNC_REG property for safe\n                                 and unsafe Clock Domain Crossing\n  [-clock_groups]                Find asynchronous and exclusive clock \n                                 groups, equivalent to options -async_clocks \n                                 -excl_clocks\n  [-clocks]                      Find missing clock definitions\n  [-excl_clocks]                 Find logically and physically exclusive \n                                 clock groups\n  [-exceptions]                  Find missing exceptions\n  [-io_constraints]              Find missing input and output delays\n  [-merge_existing_constraints]  Add existing user defined constraints to the\n                                 generated constraints\n  [-name]                        Start constraints wizard in a GUI panel with\n                                 this name. Do other command options can be \n                                 combined with -name.\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n  [<file>]                       Filename to write constraints into\n\nCategories: \nFileIO, Timing\n\nDescription:\n\n  You can use the write_inferred_xdc to find constraints that should be\n  defined in the open synthesized or implemented design. Write timing\n  constraints that are automatically generated by the Vivado timing engine,\n  rather than defined in an existing XDC file and added to the design.\n\n  Run write_inferred_xdc -clocks first to define suggested clock and\n  generated clock constraints. The suggested clock constraints will be\n  defined with a period of 1 ns. You can edit the recommended constraints to\n  create clocks and generated clocks with the required clock period to meet\n  the needs of your design.\n\n  You can add the edited constraints file into the design using read_xdc, or\n  add_files, and update_timing.\n\n  You may need to run the write_inferred_xdc command multiple times, using\n  various options like -clock_groups or -async_clocks, to capture all\n  inferred timing constraints from the fully clocked design. You can use an\n  iterative process of writing and sourcing the inferred clocked constraints,\n  and then writing and sourcing additional constraint files to capture all\n  inferred constraints. See the example below for more information.\n\n  This command returns a transcript of the process when successful, or\n  returns an error if it fails.\n\nArguments:\n\n  -force - (Optional) Overwrite the specified output file if it already exists.\n\n  -all - (Optional) Write all XDC constraints for the current design, except\n  missing clocks. The missing clocks can be separately obtained using the\n  -clocks option.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -async_clocks - (Optional) Find asynchronous clock groups that should be\n  defined using the set_clock_groups -asynchronous constraint.\n\n  -all_async_reg - (Optional) Find missing ASYNC_REG properties for safe and\n  unsafe Clock Domain Crossing.\n\n  -clock_groups - (Optional) Find asynchronous and exclusive clock groups,\n  equivalent to specifying both the -async_clocks and -excl_clocks options in\n  the same command.\n\n  -clocks - (Optional) Find missing clock and generated clock definitions\n  that should be defined by the create_clock and create_generated_clock\n  constraints.\n\n  Note: This is the default report generated by the write_inferred_xdc\n  command when no other constraint options are specified.\n\n  -excl_clocks - (Optional) Find physically and logically exclusive clock\n  groups that should be defined using the set_clock_groups\n  -physically_exclusive constraint or the set_clock_groups\n  -logically_exclusive constraint.\n\n  -exceptions - (Optional) Find missing timing exceptions that should be\n  defined by timing constraints such as set_false_path or set_multicycle_path\n  that change the default assumptions for timing paths in the design.\n\n  -io_constraints <arg> - (Optional) Find missing I/O constraints such as\n  set_input_delay, and set_output_delay.\n\n  -merge_existing_constraints - (Optional) This option reports existing\n  user-defined constraints matching the type of inferred constraints\n  currently being reported by the write_inferred_xdc command.\n\n  Note: The existing constraints are written to the specified file as\n  comments so that the inferred constraints file can be read into the Vivado\n  Design Suite using read_xdc without conflicting with existing constraints.\n\n  -name <arg> - (Optional) Specifies the name of the results set to return\n  the reported constraints to when running in the Vivado IDE.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The filename to write the inferred XDC constraints to.\n  You should specify a file extension as part of the file name, as the\n  write_inferred_xdc command will not provide one.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes the inferred clock constraints in the current\n  design:\n\n    write_inferred_xdc -clocks C:/Data/design1_inferred_clocks.xdc \n    \n\n  The write_inferred_xdc command may need to be run multiple times to capture\n  all the inferred constraints, as is shown in this example:\n\n    write_inferred_xdc -clocks clocks.xdc  \n    source clocks.xdc  \n    write_inferred_xdc -all all.xdc  \n    source all.xdc  \n    write_inferred_xdc -async_clocks async.xdc  \n    source async.xdc  \n    \n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n   *  report_exceptions\n   *  report_timing\n   *  set_clock_groups\n   *  set_false_path\n   *  set_input_delay\n   *  set_multicycle_path\n   *  set_output_delay\n   *  write_xdc\n",
"set_logic_dc": "set_logic_dc\n\nDescription: \nSets logic dc for input ports and input pins\n\nSyntax: \nset_logic_dc  [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   List of input ports and input pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets the specified input ports or input pins to a logic value of `X`, as\n  unknown or don`t care. This command is NOT supported in Synthesis.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) A list of the input ports and pins to be affected.\n\nExamples:\n\n  The following example sets the specified port to `X`:\n\n    set_logic_dc [get_ports reset] \n    \n\nSee Also:\n\n   *  all_inputs\n   *  get_pins\n   *  get_ports\n   *  set_logic_one\n   *  set_logic_unconnected\n   *  set_logic_zero\n",
"if": "if(n)                 Tcl Built-In Commands                 if(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       if - Execute scripts conditionally\n\nSYNOPSIS\n       if expr1 ?then? body1 elseif expr2 ?then? body2 elseif ...\n       ?else? ?bodyN?\n_________________________________________________________________\n\n\nDESCRIPTION\n       The if command evaluates expr1 as an  expression  (in  the\n       same  way that expr evaluates its argument).  The value of\n       the expression must be a boolean (a numeric value, where 0\n       is  false  and anything is true, or a string value such as\n       true or yes for true and false or no for false); if it  is\n       true  then  body1  is  executed  by  passing it to the Tcl\n       interpreter.  Otherwise expr2 is evaluated as  an  expres-\n       sion  and if it is true then body2 is executed, and so on.\n       If none of the expressions evaluates to true then bodyN is\n       executed.  The then and else arguments are optional 'noise\n       words' to make the command easier to read.  There  may  be\n       any  number  of elseif clauses, including zero.  BodyN may\n       also be omitted as long  as  else  is  omitted  too.   The\n       return  value  from  the command is the result of the body\n       script that was executed, or an empty string  if  none  of\n       the expressions was non-zero and there was no bodyN.\n\nEXAMPLES\n       A simple conditional:\n              if {$vbl == 1} { puts 'vbl is one' }\n\n       With an else-clause:\n              if {$vbl == 1} {\n                 puts 'vbl is one'\n              } else {\n                 puts 'vbl is not one'\n              }\n\n       With an elseif-clause too:\n              if {$vbl == 1} {\n                 puts 'vbl is one'\n              } elseif {$vbl == 2} {\n                 puts 'vbl is two'\n              } else {\n                 puts 'vbl is not one or two'\n              }\n\n       Remember,  expressions can be multi-line, but in that case\n       it can be a good idea to use the optional then keyword for\n       clarity:\n              if {\n                 $vbl == 1 || $vbl == 2 || $vbl == 3\n              } then {\n                 puts 'vbl is one, two or three'\n              }\n\n\nSEE ALSO\n       expr(n), for(n), foreach(n)\n\n\nKEYWORDS\n       boolean, conditional, else, false, if, true\n\n\n\nTcl                                                         if(n)\n",
"write_placer_checkpoint": "write_placer_checkpoint\n\nDescription: \nWrite Placer Checkpoint\n\nSyntax: \nwrite_placer_checkpoint  [-force] [-quiet] [-verbose] <directory>\n\nUsage: \n  Name         Description\n  ------------------------\n  [-force]     Overwrite existing checkpoint directory for current phase\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <directory>  Design checkpoint directory\n               Values: A directory name with alphanumeric characters\n\nCategories: \n\n",
"all_registers": "all_registers\n\nDescription: \nGet a list of register cells or pins in the current design\n\nSyntax: \nall_registers  [-clock <args>] [-rise_clock <args>] [-fall_clock <args>]\n               [-cells] [-data_pins] [-clock_pins] [-async_pins] [-output_pins]\n               [-level_sensitive] [-edge_triggered] [-no_hierarchy] [-quiet]\n               [-verbose]\n\nReturns: \nlist of cell or pin objects\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-clock]            Consider registers of this clock\n  [-rise_clock]       Consider registers triggered by clock rising edge\n  [-fall_clock]       Consider registers triggered by clock falling edge\n  [-cells]            Return list of cells (default)\n  [-data_pins]        Return list of register data pins\n  [-clock_pins]       Return list of register clock pins\n  [-async_pins]       Return list of async preset/clear pins\n  [-output_pins]      Return list of register output pins\n  [-level_sensitive]  Only consider level-sensitive latches\n  [-edge_triggered]   Only consider edge-triggered flip-flops\n  [-no_hierarchy]     Only search the current instance\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Returns a list of sequential register cells or register pins in the current\n  design.\n\n  Tip: Returned objects includes DSPs and Block RAMs as they contain internal\n  registers.\n\n  The list of returned objects can be limited by the use of the arguments\n  described below. You can limit the list of registers returned to a specific\n  clock or clocks, or to registers triggered by the rising or falling edge of\n  a specified clock.\n\n  The list of registers returned by all_registers can also be limited or\n  reduced by the filter command to filter according to properties assigned to\n  the registers. Properties of an object can be returned by the list_property\n  or report_property commands.\n\n  You can also get a list of the pins of collected registers instead of the\n  register objects by specifying one or more of the pin arguments.\n\nArguments:\n\n  -clock <args> - (Optional) Return a list of all registers whose clock pins\n  are in the fanout of the specified clock.\n\n  -rise_clock <args> - (Optional) Return a list of registers triggered by the\n  rising edge of the specified clocks.\n\n  -fall_clock <args> - (Optional) Return a list of registers triggered by the\n  falling edge of the specified clocks.\n\n  Note: Do not combine -clock, -rise_clock, and -fall_clock in the same\n  command.\n\n  -cells - (Optional) Return a list of register cell objects as opposed to a\n  list of pin objects. This is the default behavior of the command.\n\n  -data_pins - (Optional) Return a list of data pins of all registers in the\n  design, or of the registers that meet the search requirement.\n\n  -clock_pins - (Optional) Return a list of clock pins of the registers that\n  meet the search requirement.\n\n  -async_pins - (Optional) Limit the search to asynchronous pins of the\n  registers that meet the search requirement.\n\n  -output_pins - (Optional) Return a list of output pins of the registers\n  that meet the search requirement.\n\n  Note: Use the -*_pins arguments separately. If you specify multiple\n  arguments, only one argument is applied in the following order of\n  precedence: -data_pins, -clock_pins, -async_pins, -output_pins.\n\n  -level_sensitive - (Optional) Return a list of the level-sensitive\n  registers or latches.\n\n  -edge_triggered - (Optional) Return a list of the edge-triggered registers\n  or flip-flops.\n\n  -no_hierarchy - (Optional) Do not search the hierarchy of the design. Only\n  search in the level of the current_instance.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns a list of registers that are triggered by the\n  falling edge of any clock in the design:\n\n    all_registers -fall_clock [all_clocks]\n\n  The following example sets the minimum delay:\n\n    set_min_delay 2.0 -to [all_registers -clock CCLK -data_pins]\n\n  The following example extracts all registers on clk_A with *meta* in the\n  name:\n\n    filter [all_registers -clock clk_A] {name =~ *meta*}\n\nSee Also:\n\n   *  all_clocks\n   *  current_instance\n   *  filter\n   *  list_property\n   *  report_property\n   *  set_msg_config\n   *  set_min_delay\n\n",
"join": "join(n)               Tcl Built-In Commands               join(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       join - Create a string by joining together list elements\n\nSYNOPSIS\n       join list ?joinString?\n_________________________________________________________________\n\n\nDESCRIPTION\n       The  list argument must be a valid Tcl list.  This command\n       returns the string formed by joining all of  the  elements\n       of  list together with joinString separating each adjacent\n       pair of elements.  The joinString argument defaults  to  a\n       space character.\n\nEXAMPLES\n       Making a comma-separated list:\n              set data {1 2 3 4 5}\n              join $data ', '\n                   --> 1, 2, 3, 4, 5\n\n       Using join to flatten a list by a single level:\n              set data {1 {2 3} 4 {5 {6 7} 8}}\n              join $data\n                   --> 1 2 3 4 5 {6 7} 8\n\n\nSEE ALSO\n       list(n), lappend(n), split(n)\n\n\nKEYWORDS\n       element, join, list, separator\n\n\n\nTcl                                                       join(n)\n",
"select_objects": "select_objects\n\nDescription: \nSelect objects in GUI\n\nSyntax: \nselect_objects  [-add] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-add]      Add to existing selection list\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   Objects to select\n\nCategories: \nGUIControl\n\nDescription:\n\n  Selects the specified object in the appropriate open views in the GUI mode.\n  This command is for display purposes only. You must use the\n  get_selected_objects command to return the selected objects for use in\n  other commands.\n\n  The select_objects command may select secondary objects in addition to the\n  primary object specified. The selection of secondary objects is controlled\n  through the use of Selection Rules defined in the Tools > Settings command.\n  Refer to the Vivado Design Suite User Guide: Using the IDE (UG893) for more\n  information on Setting Selection Rules.\n\n  Selected objects can be unselected with the unselect_objects command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) Specifies one or more objects to be selected.\n\nExamples:\n\n  The following example selects the specified site on the device:\n\n    select_objects [get_sites SLICE_X56Y214] \n    \n\nSee Also:\n\n   *  get_selected_objects\n   *  highlight_objects\n   *  mark_objects\n   *  unselect_objects\n",
"config_design_analysis": "config_design_analysis\n\nDescription: \nThis command configures general features of design analysis.\n\nSyntax: \nconfig_design_analysis  [-max_common_paths <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-max_common_paths]  Number of paths to consider for finding common paths \n                       across phases (< 20000)\n                       Default: 1000\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nTiming\n\nDescription:\n\n  This command configures features of the report_design_analysis command.\n\n  The design analysis report analyzes timing paths at various stages in the\n  Vivado tool flow, including synthesis, optimization, placement, routing.\n  The -max_common_paths option specifies how many setup timing paths to\n  capture at each stage in the flow.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -max_common_paths <arg> - (Optional) The number of paths to consider when\n  examining the distribution of common paths across phases of implementation.\n  Specified as an integer value less than 20,000, the default is 1000.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example ignores the package delays during timing analysis:\n\n    config_design_analysis 500 \n    \n\nSee Also:\n\n   *  report_design_analysis\n",
"get_cells": "get_cells\n\nDescription: \nGet a list of cells in the current design\n\nSyntax: \nget_cells  [-hsc <arg>] [-hierarchical] [-regexp] [-nocase] [-filter <arg>]\n           [-of_objects <args>] [-match_style <arg>] [-leaf]\n           [-include_replicated_objects] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of cell objects\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-hsc]                         Hierarchy separator\n                                 Default: /\n  [-hierarchical]                Search level-by-level in current instance\n  [-regexp]                      Patterns are full regular expressions\n  [-nocase]                      Perform case-insensitive matching (valid \n                                 only when -regexp specified)\n  [-filter]                      Filter list with expression\n  [-of_objects]                  Get cells of these pins, timing paths, nets,\n                                 bels, clock regions, sites, or drc \n                                 violations\n  [-match_style]                 Style of pattern matching\n                                 Default: sdc\n                                 Values: ucf, sdc\n  [-leaf]                        Replace hierarchical cells with leaf cells.\n  [-include_replicated_objects]  Include replicated objects when searching \n                                 for patterns. This option is valid only when\n                                 patterns is specified.\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n  [<patterns>]                   Match cell names against patterns\n                                 Default: *\n\nCategories: \nSDC, XDC, Object\n\nDescription:\n\n  Gets a list of cell objects in the current design that match a specified\n  search pattern. The default command returns a list of all cells in the\n  current_instance of the open design, as specified by the current_instance\n  command.\n\n  You can use the -hierarchical option to extract cells from the hierarchy of\n  the current design.\n\n  The get_cells command also includes an option to get all replicated cells\n  that are added to a design during physical optimization, or\n  phys_opt_design. The use of the -include_replicated_objects option returns\n  the replicated cells of an object when the original cell is returned. You\n  can use this option to ensure that constraints or properties that are\n  applied to a cell are also applied to its replicated cells.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -hsc <arg> - (Optional) Set the hierarchy separator. The default hierarchy\n  separator is `/`.\n\n  -hierarchical - (Optional) Get cells from all levels of the design\n  hierarchy starting from the level of the current_instance, or from the top\n  of the current design. Without this argument, the command will only get\n  cells from the current_instance of the design hierarchy. When using\n  -hierarchical, the search pattern should not contain a hierarchy separator\n  because the search pattern is applied at each level of the hierarchy, not\n  to the full hierarchical cell name. For instance, searching for U1/*\n  searches each level of the hierarchy for instances with U1/ in the name.\n  This may not return the intended results. This is illustrated in the\n  examples below.\n\n  Note: When used with -regexp, the specified search string is matched\n  against the full hierarchical name, and the U1/* search pattern will work\n  as intended.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_cells based on property values on the cells. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the 'cell' object, 'IS_PARTITION', 'IS_PRIMITIVE' and\n  'IS_LOC_FIXED' are some of the properties that can be used to filter\n  results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the cells connected to the specified\n  pins, timing paths, nets, bels, clock regions, sites or DRC violation\n  objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -match_style - (Optional) Indicates that the search pattern matches UCF\n  constraints or SDC constraints. The default is SDC.\n\n  -leaf - (Optional) Replace the hierarchical cells by all the primitive cells\n  underneath.\n\n  -include_replicated_objects - (Optional) Include cells that have been added\n  through replication during optimizations. This option is valid only when\n  specified with <patterns>, and returns replicated cell instances that match\n  the pattern. As a default, the get_cells command does not return replicated\n  cells.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match cells against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all cells in the\n  project. More than one pattern can be specified to find multiple cells\n  based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example uses regular expression to return cells in the BFT\n  example design that match the filter expressions for NAME and REF_NAME. In\n  the first command the NAME is specified in the search pattern, while the\n  second command filters on the NAME property. These commands return the same\n  results:\n\n    get_cells -regexp -filter { REF_NAME =~ FD.* } .*validFor.*  \n    get_cells -regexp -filter { NAME =~ .*validFor.* && REF_NAME =~ FD.* } \n    \n\n  The following example searches all levels of the hierarchy for cells\n  beginning with cpu, or fft, and joins each cell returned with the newline\n  character to put it on a separate line:\n\n    join [get_cells -hier {cpu* fft*}] \\n \n    \n\n  This example gets a list of properties and property values attached to the\n  second object of the list returned by get_cells:\n\n    report_property [lindex [get_cells] 1] \n    \n\n  Note: If there are no cells matching the pattern you will get a warning.\n\n  This example prints a list of the library cells instantiated into the\n  design at all levels of the hierarchy, sorting the list for unique names so\n  that each cell is only printed one time:\n\n    foreach cell [lsort -unique [get_property LIB_CELL [get_cells -hier \\  \n    -filter {IS_PRIMITIVE==1}]]] {puts $cell} \n    \n\n  The following example demonstrates the effect of -hierarchical searches,\n  without and with -regexp:\n\n    get_cells -hierarchical *mmcm*  \n       mmcm_replicator_inst_1  \n       mmcm_replicator_inst_1/mmcm_stage[0].mmcm_channel[0].mmcm  \n    get_cells -hierarchical -regexp .*mmcm.*  \n       mmcm_replicator_inst_1  \n       mmcm_replicator_inst_1/mmcm_stage[0].mmcm_channel[0].mmcm  \n       mmcm_replicator_inst_1/mmcm_stage[0].mmcm_channel[0].mmcm/GND  \n       mmcm_replicator_inst_1/mmcm_stage[0].mmcm_channel[0].mmcm/MMCM_Base \n    \n\n  Note: The last two cells (GND and MMCM_Base) were not returned in the first\n  example (without -regexp) because the cell names do not match the search\n  pattern, as it is applied to each level of the hierarchy.\n\n  The following example runs the report_drc command on the current design,\n  and returns any cells associated with DRC violations:\n\n    report_drc -name drc_1  \n    get_cells -of_objects [get_drc_violations] \n    \n\nSee Also:\n\n   *  current_instance\n   *  get_drc_vioations\n   *  get_lib_cells\n   *  get_nets\n   *  get_pins\n   *  list_property\n   *  phys_opt_design\n   *  report_drc\n   *  report_property\n",
"all_dsps": "all_dsps\n\nDescription: \nGet a list of dsp cells in the current design\n\nSyntax: \nall_dsps  [-quiet] [-verbose]\n\nReturns: \nlist of dsp cell objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of all DSP cell objects that have been declared in the\n  current design.\n\n  The list of DSPs returned by all_dsps can also be limited or reduced by the\n  filter command to filter according to properties assigned to the DSP\n  objects. Properties of an object can be returned by the list_property or\n  report_property commands.\n\n  The all_dsps command is scoped to return the objects hierarchically, from\n  the top-level of the design or from the level of the current instance. By\n  default the current instance is defined as the top level of the design, but\n  can be changed by using the current_instance command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns a list of all DSPs defined in the current\n  design, and filters that list to return a single DSP assigned to the\n  specified SITE:\n\n    filter [all_dsps] {SITE == DSP48_X1Y6} \n    \n\n  The following example shows how the list returned can be passed to another\n  command:\n\n    set_false_path -from [all_dsps] -to [all_registers] \n    \n\nSee Also:\n\n   *  all_cpus\n   *  all_hsios\n   *  all_registers\n   *  current_instance\n   *  filter\n   *  get_cells\n   *  list_property\n   *  report_property\n   *  set_false_path\n",
"launch_runs": "launch_runs\n\nDescription: \nLaunch a set of runs\n\nSyntax: \nlaunch_runs  [-jobs <arg>] [-scripts_only] [-lsf <arg>] [-sge <arg>]\n             [-cluster_configuration <arg>] [-dir <arg>] [-to_step <arg>]\n             [-next_step] [-host <args>] [-remote_cmd <arg>] [-email_to <args>]\n             [-email_all] [-pre_launch_script <arg>]\n             [-post_launch_script <arg>] [-custom_script <arg>] [-force]\n             [-quiet] [-verbose] <runs>...\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-jobs]                   Number of jobs\n                            Default: 1\n  [-scripts_only]           Only generate scripts\n  [-lsf]                    Use LSF to launch jobs. Required argument is the \n                            bsub command line to pass to LSF\n                            Default: empty\n  [-sge]                    Use SGE to launch jobs. Required argument is the \n                            qsub command line to pass to SGE\n                            Default: empty\n  [-cluster_configuration]  Run jobs on a particular cluster configuration \n                            (picks cluster configuration from GUI settings).\n                            Default: empty\n  [-dir]                    Launch directory\n  [-to_step]                Last Step to run. Ignored when launching multiple\n                            runs. Not valid with -next_step\n  [-next_step]              Run next step. Ignored when launching multiple \n                            runs. Not valid with -to_step.\n  [-host]                   Launch on specified remote host with a specified \n                            number of jobs. Example: -host {machine1 2} -host\n                            {machine2 4}\n  [-remote_cmd]             Command to log in to remote hosts\n                            Default: ssh -q -o ConnectTimeout=30 -o \n                            ConnectionAttempts=3 -o BatchMode=yes\n  [-email_to]               List of email addresses to notify when jobs \n                            complete (only applicable with -host)\n  [-email_all]              Send email after each job completes (only \n                            applicable with -host)\n  [-pre_launch_script]      Script to run before launching each job (only \n                            applicable with -host)\n  [-post_launch_script]     Script to run after each job completes (only \n                            applicable with -host)\n  [-custom_script]          User run script map file which contains run name \n                            to user run script mapping\n  [-force]                  Run the command, even if there are pending \n                            constraint changes, which will be lost (in a \n                            Dynamic Function eXchange design)\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n  <runs>                    Runs to launch\n\nCategories: \nProject\n\nDescription:\n\n  Launches synthesis and implementation runs when running the Vivado tools in\n  Project Mode. Refer to the Vivado Design Suite User Guide: Design Flows\n  Overview (UG892) for a complete description of Project Mode and Non-Project\n  Mode.\n\n  A run must be previously defined using the create_run command, and the\n  properties of the run must be previously configured using the set_property\n  command. Both synthesis and implementation runs can be specified in the\n  same launch_runs command. However, to launch an implementation run, the\n  parent synthesis run must already be complete.\n\n  In Non-Project Mode, Vivado synthesis can be launched directly using the\n  synth_design command, and does not require the use of a defined run.\n\n  In Non-Project Mode, Vivado implementation steps can be launched\n  individually with the opt_design, power_opt_design, place_design,\n  route_design, phys_opt_design, and write_bitstream commands.\n\nArguments:\n\n  -jobs <arg> - (Optional) The number of parallel jobs to run on the local\n  host. The number of jobs for a remote host is specified as part of the\n  -host argument. You do not need to specify both -jobs and -host.\n\n  -scripts_only - (Optional) Generate a script called runme.bat for each\n  specified run so you can queue the runs to be launched at a later time.\n\n  -lsf <arg> - (Optional) Use IBM Platform Load Sharing Facility (LSF) to\n  launch synthesis and implementation runs. The bsub command line to pass to\n  LSF must be specified as a required argument.\n\n  -sge <arg> - (Optional) Use Oracle Grid Engine or Sun Grid Engine (SGE) to\n  launch synthesis and implementation runs. The qsub command line is a\n  required argument to submit a job to SGE.\n\n  -cluster_configuration <arg> - (Optional) Run jobs on a particular cluster\n  configuration. Name of the cluster configuration is specified to submit a\n  job on a particular cluster.\n\n   *  To get the list of the cluster configurations, use the\n      get_cluster_configurations command.\n\n   *  To create a cluster configuration, use the create_cluster_configuration\n      command.\n\n   *  To remove a cluster configuration, use the\n      remove_cluster_configurations command.\n\n   *  To validate a cluster configuration, use the\n      validate_cluster_configurations command.\n\n  -dir <arg> - (Optional) The directory for the tool to write run results\n  into. A separate folder for each run is created under the specified\n  directory. As a default the tool will write the results of each run into a\n  separate folder under the <project>.runs directory.\n\n  -to_step <arg> - (Optional) Launch the run through the specified step in\n  the implementation process, and then stop. For instance, run implementation\n  through the place_design step, and then stop. This will allow you to look\n  at specific stages of a run without completing the entire run. The\n  following are the valid steps for implementation runs.\n\n   *  opt_design - Optionally optimize the logical design to more efficiently\n      use the target device resources. This step is usually enabled by\n      default even though it is an optional step.\n\n   *  power_opt_design - Optionally optimize elements of the logic design to\n      reduce power demands of the implemented FPGA.\n\n   *  place_design - Place logic cells onto the target device. This is a\n      required step.\n\n   *  power_opt_design (Post-Place) - Optionally optimize power demands of\n      the placed logic elements. This step must be enclosed in quotes or\n      braces since it includes multiple words (e.g. -to_step\n      'power_opt_design (Post-Place)' ).\n\n   *  phys_opt_design - Optionally optimize design timing by replicating\n      drives of high-fanout nets to better distribute the loads.\n\n   *  route_design - Route the connections of the design onto the target\n      FPGA. This is a required step.\n\n   *  write_bitstream - Generate a bitstream file for Xilinx device\n      configuration. This is a required step.\n\n  Note: The specified -to_step must be enabled for the implementation run\n  using the set_property command, or the Vivado tool will return an error.\n\n  -next_step - (Optional) Continue a prior run from the step at which it was\n  stopped. This option can be used to complete a run previously launched with\n  the -to_step argument.\n\n  Note: The -to_step and -next_step arguments may not be specified together,\n  and are ignored when launching multiple runs.\n\n  -host <args> - (Optional) Launch on the named remote host with a specified\n  number of jobs. The argument is in the form of {<hostname> <jobs> }, for\n  example: -host {machine1 2}. If the -host argument is not specified, the\n  runs will be launched from the local host.\n\n  Note: This argument is supported on the Linux platform only.\n\n  -remote_cmd <arg> - (Optional) The command to use to login to the remote\n  host to launch jobs. The default remote command is 'ssh -q -o\n  BatchMode=yes'.\n\n  -email_to <args> - (Optional) Email addresses to send a notification to\n  when the runs have completed processing. This option also requires the use\n  of -host with an SMTP server running to send Email notifications.\n\n  -email_all - (Optional) Send a separate Email for each run as it completes.\n  This option also requires the use of -host with an SMTP server running to\n  send Email notifications.\n\n  -pre_launch_script <arg> - (Optional) A shell script to run on the\n  specified host before launching each job. This option also requires the use\n  of -host.\n\n  -post_launch_script <arg> - (Optional) A shell script to run on the\n  specified host after completion of all jobs. This option also requires the\n  use of -host.\n\n  -custom_script <arg> - (Optional) Specify a script map file, which contains\n  a mapping of run names and scripts to launch for that run.\n\n  -force - (Optional) Launch the run regardless of any pending constraint\n  changes for Partial Reconfiguration designs.\n\n  Note: This argument applies only to Partial Reconfiguration projects. Any\n  pending constraint changes will be lost to the specified runs.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <runs> - (Required) The names of synthesis and implementation runs to\n  launch. One or more run names may be specified.\n\nExamples:\n\n  The following command launches three different synthesis runs with two\n  parallel jobs:\n\n    launch_runs synth_1 synth_2 synth_4 -jobs 2 \n    \n\n  Note: The results for each run will be written to a separate folder\n  synth_1, synth_2, and synth_4 inside of the <project>.runs directory.\n\n  The following example creates a results directory to write run results. In\n  this case a separate folder named impl_3, impl_4, and synth_3 will be\n  written to the specified directory. In addition, the -scripts_only argument\n  tells the tool to write runme.bat scripts to each of these folders but not\n  to launch the runs at this time.\n\n    launch_runs impl_3 impl_4 synth_3 -dir C:/Data/FPGA_Design/results -scripts_only \n    \n\n  The following example configures the impl_1 run, setting options for Vivado\n  Implementation 2013, enabling some of the optional optimizations, and then\n  launches the run to the place_design step:\n\n    set_property flow {Vivado Implementation 2013} [get_runs impl_1]  \n    set_property STEPS.POWER_OPT_DESIGN.IS_ENABLED true [get_runs impl_1]  \n    set_property STEPS.POST_PLACE_POWER_OPT_DESIGN.IS_ENABLED true \\  \n       [get_runs impl_1]  \n    set_property STEPS.PHYS_OPT_DESIGN.IS_ENABLED true [get_runs impl_1]  \n    launch_runs -to_step place_design impl_1 \n    \n\nSee Also:\n\n   *  create_run\n   *  get_runs\n   *  opt_design\n   *  phys_opt_design\n   *  place_design\n   *  power_opt_design\n   *  reset_runs\n   *  route_design\n   *  set_property\n   *  synth_design\n   *  write_bitstream\n",
"get_qor_suggestions": "get_qor_suggestions\n\nDescription: \nGet a list of available QoR suggestions\n\nSyntax: \nget_qor_suggestions  [-filter <arg>] [-quiet] [-verbose] [<IDs>]\n\nReturns: \nlist of qor suggestion objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-filter]   Filter list with expression\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<IDs>]     Match suggestion names against given names\n\nCategories: \nObject, Feasibility, Timing\n\nDescription:\n\n  Get existing QoR suggestion objects created by the report_qor_suggestions\n  command, or read into the design using read_qor_suggestions. The selected\n  QoR objects can be written to a file using the write_qor_suggestions\n  command. The suggestions created by the report command remain in memory\n  until delete_qor_suggestions is run, or until it is overwritten by another\n  report.\n\n  This command returns a list of existing QoR suggestion objects from the\n  open design, or returns an error if it fails.\n\nArguments:\n\n  -filter <arg> - (Optional) Filter the returned suggestion objects with the\n  specified expression. The -filter argument filters the list of objects\n  returned by the command based on property values on the objects. You can\n  find the properties on an object with the report_property or list_property\n  commands. In the case of the qor_suggestion object, ENABLED, CATEGORY, and\n  AUTO are a few of properties you might use to filter the list of\n  suggestions.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <IDs> - (Optional) Specify a list of QoR suggestion IDs to select the\n  specified objects.\n\nExamples:\n\n  To return an individual suggestion, you can supply the full ID:\n\n    get_qor_suggestions RQS_CLOCK-5_1-1\n\n  You can also filter suggestions objects within a given category. Available\n  categories are: Timing, Congestion, Utilization, XDC, Clocking, Netlist, and\n  Strategy. For example, the following returns suggestions related to the\n  Timing category:\n\n    get_qor_suggestions -filter {CATEGORY==Timing}\n\nSee Also:\n\n   *  delete_qor_suggestions\n   *  read_qor_suggestions\n   *  report_qor_suggestions\n   *  write_qor_suggestions\n",
"import_ip": "import_ip\n\nDescription: \nImport an IP file and add it to the fileset\n\nSyntax: \nimport_ip  [-srcset <arg>] [-name <arg>] [-quiet] [-verbose] [<files>]\n\nReturns: \nlist of file objects that were added\n\nUsage: \n  Name        Description\n  -----------------------\n  [-srcset]   (Optional) Specifies the source file set containing the objects\n              to be upgraded\n              Default: The current source fileset\n              Values: Source set name\n  [-name]     (Optional) Specifies a replacement name for the imported IP; \n              may not be used with multiple files.\n              Default: The current name for the imported IP\n              Values: The new name for the imported IP\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<files>]   Names of the IP files to be imported\n              Values: A list of XCI (and/or XCO) file name(s)\n\nCategories: \nProject, IPFlow\n\nDescription:\n\n  Adds an existing XCI or XCO file as an IP source into the current project,\n  and copies it into the local project directory structure.\n\n  The import_ip command allows you to read existing IP files directly, and\n  copy them into the local project folders. Use the read_ip or add_files\n  command to add IP files by reference into the current project.\n\n  Use the create_ip command to create new IP files from the current IP catalog.\n\nArguments:\n\n  -srcset <arg> - (Optional) Specifies the source file set to import the IP\n  files into. If not specified, the default source file set is sources_1.\n\n  -name <arg> - (Optional) The name to assign to the IP object as it is added\n  to the current source fileset. This option can only be used when a single\n  file is specified in <files>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Optional) The names of the IP files to be imported into the\n  current project. Each IP must be in the form of an existing XCI file or XCO\n  file. An XCI file is an IP-XACT format file that contains information about\n  the IP parameterization. An XCO file is a CORE Generator log file that\n  records all the customization parameters used to create the IP core and the\n  project options in effect when the core was generated. The XCI or XCO files\n  are used to recreate the core in the current project.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example copies the 10gig ethernet core into the current\n  project, and assigns it a name of IP_block1:\n\n    import_ip C:/Data/FPGA_Design/10gig_eth.xci -name IP_block1 \n    \n\nSee Also:\n\n   *  add_files\n   *  create_ip\n   *  generate_target\n   *  read_ip\n",
"read_edif": "read_edif\n\nDescription: \nRead one or more EDIF or NGC files\n\nSyntax: \nread_edif  [-quiet] [-verbose] <files>\n\nReturns: \nlist of file objects that were added\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <files>     EDIF or NGC file name(s)\n\nCategories: \nFileIO\n\nDescription:\n\n  Imports an EDIF or NGC netlist file into the Design Source fileset of the\n  current project.\n\n  Note: NGC format files are not supported in the Vivado Design Suite for\n  UltraScale devices. It is recommended that you regenerate the IP using the\n  Vivado Design Suite IP customization tools with native output products.\n  Alternatively, you can use the NGC2EDIF command to migrate the NGC file to\n  EDIF format for importing. For more information refer to the ISE to Vivado\n  Design Suite Migration Guide (UG911).\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) The name of the EDIF or NGC files to be imported.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example imports an EDIF file into the open project:\n\n    read_edif C/Data/bft_top.edf \n    \n\nSee Also:\n\n   *  write_edif\n",
"report_place_status": "report_place_status\n\nDescription: \nReport on status of the routing.\n\nSyntax: \nreport_place_status  [-return_sites] [-return_string] [-file <arg>] [-append]\n                     [-of_objects <args>] [-site_type <arg>] [-list_all_sites]\n                     [-dump_placement] [-placement_type <arg>] [-quiet]\n                     [-verbose]\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-return_sites]    Return a list of sites that match the given -site_type \n                     type\n  [-return_string]   Set the result of running the report in the Tcl \n                     interpreter's result variable\n  [-file]            Filename to output results to. (send output to console \n                     if -file is not used)\n  [-append]          Append the results to file, don't overwrite the results \n                     file\n  [-of_objects]      Report detailed placement status for these sites\n  [-site_type]       Only show sites with the given status: \n                     ROUTE_THRU_SITE|INVALID_RS|TIE_OFF_SITE|ILLEGAL_PL|PLACE\n                     D|HAS_ROUTE_THRUS|HAS_TIE_OFFS|HAS_INVERTED_IN|FIXED_CEL\n                     LS (ignored if -of_objects is used)\n  [-list_all_sites]  List full placement information for every site in the \n                     design (ignored if -of_objects is used)\n  [-dump_placement]  Show the full placement information for every used site \n                     in the design.  This is VERY VERBOSE.\n  [-placement_type]  Routed site type : PLACEDB|PREROUTE|WITH_ROUTING\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Reports the state of placement in the current design.\n\nArguments:\n\n  -return_sites - (Optional) Return a list of sites that match the\n  given -site_type type.\n  When the -return_sites argument is used, it is required to also \n  use the -site_type argument.\n  \n  Note: This argument cannot be used with -return_string, -of_objects,\n  or -dump_placement arguments.\n  This argument will not generate the report_place_status output.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -return_sites option.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -force - (Optional) Overwrite existing report file.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -of_objects <args> - (Optional) Report detailed placement status for these \n  sites.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_sites command. In addition, this option cannot be used with the\n  -return_sites option.\n\n  -site_type <arg> - (Optional) Only show sites with the specified \n  placement status. Valid place states are:\n  \n  *  FIXED_CELLS - Sites with a fixed-cell(s).\n\n  *  HAS_INVERTED_IN - Sites with Inverted Inputs.\n\n  *  HAS_ROUTE_THRUS - Sites has route thrus.\n\n  *  HAS_TIE_OFFS - Site ties some pins off.\n\n  *  ILLEGAL_PL - Illegal Placement Sites.\n\n  *  INVALID_RS - Invalid Routed Sites.\n\n  *  PLACED - Sites has no errors.\n\n  *  ROUTE_THRU_SITE - Sites with route thrus.\n\n  *  TIE_OFF_SITE - Sites with tie-off.\n\n  Note: The -site_type option is ignored if -of_objects is also specified.\n\n  -dump_placement - (Optional) Report the full placement information for \n  every used site in the design.\n  \n  Note: This is a very long report, and can take some time to generate.\n  This option cannot be used with the -return_sites option.\n\n  -placement_type - (Optional) Design attributes that\n  can be checked include: PLACEDB, PREROUTE, WITH_ROUTING.\n\n  -list_all_sites - (Optional) Report summary placement status for\n  every site in the design.\n\n  Note: This option is ignored if -of_objects is also specified.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the place status for the specified sites:\n\n    report_place_status -of_objects [ get_sites AIE* ]\n\nSee Also:\n\n   *  place_design\n\n",
"write_debug_probes": "write_debug_probes\n\nDescription: \nWrite debug probes to a file\n\nSyntax: \nwrite_debug_probes  [-cell <arg>] [-no_partial_ltxfile] [-force] [-quiet]\n                    [-verbose] <file>\n\nReturns: \nname of the output file\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-cell]                Hierarchical name of the Reconfigurable Partition \n                         Cell\n  [-no_partial_ltxfile]  Do not generate partial LTX files\n  [-force]               Overwrite existing file\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n  <file>                 Debug probes file name (default extension is .ltx)\n\nCategories: \nFileIO, Debug\n\nDescription:\n\n  Writes a Vivado Design Suite logic analyzer probes file containing ILA\n  debug cores and signal probes added to the current design. The debug probes\n  data file typically has a .ltx file extension.\n\n  ILA cores are added to the design using the create_debug_core command. ILA\n  probes are added to the design using the create_debug_port command, and\n  connected to nets in your design using the connect_debug_port command.\n\n  The specific information and use of the debug probes file is described in\n  the Vivado Design Suite User Guide: Vivado Programming and Debugging\n  (UG908).\n\nArguments:\n\n  -cell <arg> - (Optional) Specify the hierarchical name of a reconfigurable\n  partition cell to export a partial probe file.\n\n  -force - (Optional) Overwrite the specified file if it already exists.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The file name of the debug probes file to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example write a debug probe file from the current design:\n\n    write_debug_probes C:/Data/designProbes.ltx \n    \n\nSee Also:\n\n   *  create_debug_core\n   *  connect_debug_core\n   *  implement_debug_core\n",
"get_board_components": "get_board_components\n\nDescription: \nGet the list of components available in the board\n\nSyntax: \nget_board_components  [-regexp] [-nocase] [-all] [-filter <arg>]\n                      [-of_objects <args>] [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nlist of component objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-all]         Returns all enabled as well as disabled components\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board_component' objects of these types: 'board \n                 board_bus board_component_pin'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match component names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of components defined on the current board, as defined in the\n  Board Interface file.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  This command returns a list of components, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -all - (Optional) Return a list of all components defined in Board\n  Interface file of the current board.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_components based on property values on the components. You can\n  find the properties on an object with the report_property or list_property\n  commands. Any property/value pair can be used as a filter. In the case of\n  the board component object, 'COMPONENT_NAME', 'TYPE', and 'DESCRIPTION' are\n  some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the components of the specified boards,\n  board_buses, or board_component_pins.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match board components against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  board components defined on the current board.\n\nExamples:\n\n  The following example gets the components defined in the Board Interface\n  file of the specified board:\n\n    get_board_components -of_objects [get_boards zed] \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_buses\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"get_template_bd_designs": "get_template_bd_designs\n\nDescription: \nGet a list of IPI example designs\n\nSyntax: \nget_template_bd_designs  [-quiet] [-verbose]\n\nReturns: \nlist of IPI design objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nIPIntegrator\n\nDescription:\n\n  The command returns the list of template block designs available in the\n  current release of the Vivado Design Suite, or returns an error if it\n  fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the list of available block design templates\n  in the current release:\n\n    get_template_bd_designs \n    \n\nSee Also:\n\n   *  instantiate_template_bd_designs\n",
"reset_operating_conditions": "reset_operating_conditions\n\nDescription: \nReset operating conditions to tool default for power estimation\n\nSyntax: \nreset_operating_conditions  [-voltage <args>] [-grade] [-process]\n                            [-junction_temp] [-ambient_temp] [-thetaja]\n                            [-thetasa] [-airflow] [-heatsink] [-thetajb]\n                            [-board] [-board_temp] [-board_layers]\n                            [-design_power_budget]\n                            [-supply_current_budget <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-voltage]                Resets voltage value. Supported voltage supplies \n                            vary by family.\n  [-grade]                  Resets temperature grade\n  [-process]                Resets process\n  [-junction_temp]          Resets Junction Temperature\n  [-ambient_temp]           Resets Ambient Temperature\n  [-thetaja]                Resets ThetaJA\n  [-thetasa]                Resets ThetaSA\n  [-airflow]                Resets Airflow\n  [-heatsink]               Resets dimensions of heatsink\n  [-thetajb]                Resets ThetaJB\n  [-board]                  Resets Board type\n  [-board_temp]             Resets Board Temperature\n  [-board_layers]           Resets Board layers\n  [-design_power_budget]    Design Power Budget (W)\n  [-supply_current_budget]  Resets list of supply current budget 'name value'\n                            pairs. Supported voltage supplies vary by family.\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n\nCategories: \nPower, XDC\n\nDescription:\n\n  Resets the specified operating conditions to their default values. If no\n  operating conditions are specified, all operating conditions are reset to\n  their default values.\n\n  Operating conditions can be set using the set_operating_conditions command.\n  The current values can be determined using the report_operating_conditions\n  command. The environmental operating conditions of the device are used for\n  power analysis when running the report_power command, but are not used\n  during timing analysis.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -voltage <args> - (Optional) Reset the voltage supply to the default value.\n  The voltage supply and its default depend on the device family.\n\n  -grade - (Optional) Reset the temperature grade of the selected device. The\n  default value is 'commercial'.\n\n  -process - (Optional) Reset the manufacturing process for the target\n  device. The default process is 'typical'.\n\n  -junction_temp - (Optional) Reset the junction temperature for the target\n  device. The default value is 'auto'.\n\n  -ambient_temp - (Optional) Reset the ambient temperature of the design. The\n  default setting is 'default'.\n\n  -thetaja - (Optional) Reset the Theta-JA thermal resistance. The default\n  setting is 'auto'.\n\n  -thetasa - (Optional) Reset the Theta-SA thermal resistance. The default\n  setting is 'auto'.\n\n  -airflow - (Optional) Reset the Linear Feet Per Minute (LFM) airflow. The\n  default setting varies by device family.\n\n  -heatsink - (Optional) Reset the heatsink profile. The default setting is\n  'medium'.\n\n  -thetajb - (Optional) Reset the Theta-JB thermal resistance. The default\n  setting is 'auto'.\n\n  -board - (Optional) Reset the board size to be used for modeling. The\n  default value is 'medium'.\n\n  -board_temp - (Optional) Reset the board temperature to the default setting.\n\n  -board_layers - (Optional) Reset the number of board layers to be used for\n  modeling to the default setting of '12to15'.\n\n  -design_power_budget - (Optional) Reset the design power budget to\n  'unspecified'.\n\n  -supply_current_budget <args> - (Optional) Reset the supply current budgets\n  to the default value. The voltage supply names depend on the device family.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example resets all the operating conditions for the design to\n  their default setting:\n\n    reset_operating_conditions \n    \n\n  The following example resets the junction, ambient, and board temperature\n  for the design to their default settings:\n\n    reset_operating_conditions -junction_temp -ambient_temp -board_temp \n    \n\n  The following example resets the voltage supply Vccint to its default value:\n\n    reset_operating_conditions -voltage Vccint \n    \n\nSee Also:\n\n   *  report_operating_conditions\n   *  report_power\n   *  set_operating_conditions\n",
"open_hw_platform": "open_hw_platform\n\nDescription: \nOpen the Xilinx Shell Archive\n\nSyntax: \nopen_hw_platform  [-no_auto_upgrade] [-quiet] [-verbose] [<file>]\n\nReturns: \nThe name of the shell file\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-no_auto_upgrade]  Disable BD auto upgrade\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n  [<file>]            Xilinx Shell Archive file\n                      Values: A filename with alphanumeric characters and \n                      .dsa/.xsa extension.\n\nCategories: \nVitis, Platform, FileIO\n\nDescription:\n\n  Open a Xilinx support archive (XSA) file and extract the Vivado project,\n  block design, and IP from the archive. This will create a project directory\n  and project file (.xpr) from the XSA.\n\n  Note: The project will be created in the current working directory, or the\n  directory from which the Vivado tool was launched.\n\n  This command returns a transcript of its actions, or returns an error if it\n  fails.\n\nArguments:\n\n  -no_auto_upgrade - (Optional) Do not upgrade the IP used in the Block\n  Design to the latest version. By default, the original IP from the XSA will\n  be auto-upgraded if possible. Use the report_ip_status command to identify\n  out-of-date IP.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Specify the path and file name of the XSA file.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example opens the specified XSA, automatically upgrading the\n  IP as needed:\n\n    open_hw_platform C:/Data/zc706.xsa\n\nSee Also:\n\n   *  validate_hw_platform\n   *  write_hw_platform\n",
"remove_cell": "remove_cell\n\nDescription: \nRemove cells from the current design\n\nSyntax: \nremove_cell  [-quiet] [-verbose] <cells>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <cells>     List of cells to remove\n\nCategories: \nNetlist\n\nDescription:\n\n  Remove cells from the current netlist in either an open Synthesized or\n  Implemented design.\n\n  Note: You cannot remove cells from library macros, also called\n  macro-primitives.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cells> - (Required) List of cells to remove. The instance name can be\n  specified as a hierarchical name, from the top-level of the design. In this\n  case, you must use the hierarchy separator character in the hierarchical\n  instance name. You can determine the current hierarchy separator with the\n  get_hierarchy_separator command.\n\nExamples:\n\n  The following example removes the fftEngine from the in-memory netlist of\n  the current design:\n\n    remove_cell fftEngine  \n    remove_cell usbEngine0/usb_out \n    \n\nSee Also:\n\n   *  create_cell\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"update_ip_catalog": "update_ip_catalog\n\nDescription: \nUpdate the IP Catalog.  Before executing this command optionally use the following to set repository paths:'set_property ip_repo_paths <repo_path_list> [current_fileset]'\n\nSyntax: \nupdate_ip_catalog  [-rebuild] [-add_ip <arg>] [-delete_ip <arg>]\n                   [-delete_mult_ip <args>] [-disable_ip <arg>]\n                   [-enable_ip <arg>] [-add_interface <arg>] [-create_index]\n                   [-repo_path <arg>] [-update_module_ref] [-quiet] [-verbose]\n\nReturns: \nTrue for success\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-rebuild]            Trigger a rebuild of the specified repository's index\n                        file or rebuild all repositories if none specified\n  [-add_ip]             Add the specified IP into the specified repository\n                        Values: Either a path to the IP's component.xml or to\n                        a zip file containing the IP\n  [-delete_ip]          Remove the specified IP from the specified repository\n                        Values: Either a path to the IP's component.xml or \n                        its VLNV\n  [-delete_mult_ip]     Remove the specified IPs from the specified \n                        repository\n                        Values: A list of IPs; either paths to the \n                        component.xml files or their VLNVs\n  [-disable_ip]         Disable the specified IP from the specified \n                        repository\n                        Values: Either a path to the IP's component.xml or \n                        its VLNV\n  [-enable_ip]          Enable the specified disabled IP from the specified \n                        repository\n                        Values: Either a path to the IP's component.xml or \n                        its VLNV\n  [-add_interface]      Add the specified interface into the specified \n                        repository\n                        Values: A path to the interface's xml file\n  [-create_index]       Cache the specified repository's data on disk, to \n                        improve load time.\n  [-repo_path]          Used in conjunction with rebuild, add_ip, delete_ip, \n                        delete_mult_ip, disable_ip or create_index to specify\n                        the path of the repository on which to operate\n  [-update_module_ref]  Update module reference from their source (e.g. HDL \n                        file)\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nIPFlow\n\nDescription:\n\n  Update the IP catalog associated with the current design.\n\n  The Xilinx IP catalog, or repository, is located in the installation\n  hierarchy of the Vivado Design Suite software release being used. You can\n  also add custom IP to the repository by using the set_property command to\n  set the IP_REPO_PATHS property on the source fileset to point to the\n  locations of custom IP, as shown in the example below.\n\n  The update_ip_catalog command lets you add, delete, disable, or enable\n  individual IP cores in the catalog. When referring to individual cores, you\n  can reference them by the path to the component.xml file, or by referencing\n  the VLNV property of the IP.\n\n  Note: The VLNV property refers to the Vendor:Library:Name:Version string\n  which uniquely identifies the IP in the catalog.\n\n  This command returns a transcript of its process if successful, or returns\n  an error if it fails.\n\nArguments:\n\n  -rebuild - (Optional) Rebuild the complete IP catalog index, or just\n  rebuild the index for the IP repository specified by the -repo_path.\n\n  -add_ip <arg> - (Optional) Add an individual IP core to the specified IP\n  repository. This argument requires the -repo_path argument to also be\n  specified. The IP is specified as a path to the component.xml of the IP, or\n  the path to a zip file containing the IP.\n\n  -delete_ip <arg> - (Optional) Remove an IP core from the specified IP\n  repository. This argument requires the -repo_path argument to also be\n  specified. The IP is specified as a path to the component.xml of the IP, or\n  as the VLNV property of the IP.\n\n  -delete_mult_ip <arg> - (Optional) Remove the specified IP cores from the\n  IP repository. This argument requires the -repo_path argument to also be\n  specified. The IPs are specified either as paths to the component.xml\n  files, or as the VLNV properties of the IP.\n\n  -disable_ip <arg> - (Optional) Disable an IP core from the specified IP\n  repository. This argument requires the -repo_path argument to also be\n  specified. The IP is specified as a path to the component.xml of the IP, or\n  as the VLNV property of the IP.\n\n  -enable_ip <arg> - (Optional) Enable a previously disabled IP core from the\n  specified repository. This argument requires the -repo_path argument to\n  also be specified. The IP is specified as a path to the component.xml of\n  the IP, or as the VLNV property of the IP.\n\n  -add_interface <arg> - (Optional) Specify the path to the XML file of a\n  user-defined AXI interface to add to the IP repository.\n\n  -create_index - (Optional) Cache the specified repository`s data on disk,\n  to improve load time. This argument requires the -repo_path argument to\n  also be specified.\n\n  -repo_path <arg> - (Optional) Used in conjunction with -rebuild, -add_ip,\n  -delete_ip, -delete_mult_ip or -create_index to specify the directory name\n  of an IP repository to operate on.\n\n  Note: The IP repository must have been previously added to the current\n  source fileset using the set_property command to set the IP_REPO_PATH. See\n  the example below.\n\n  -update_module_ref - (Optional) Refresh the block design cell or cells that\n  reference module definitions from RTL source files by rereading a module\n  definition from the source file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example sets the IP_REPO_PATHS property of the current Source\n  fileset, to add an IP repository, then rebuilds the IP catalog index for\n  the whole IP catalog:\n\n    set_property IP_REPO_PATHS C:/Data/IP_LIB [current_fileset]  \n    update_ip_catalog -rebuild \n    \n\n  This example disables the IP specified by its VLNV property from the\n  specified IP repository:\n\n    update_ip_catalog -disable_ip {myCo.com:ip:custom_decoder:1.0} \\  \n       -repo_path C:/Data/ip \n    \n\n  This example disables the IP specified by the path to the component.xml\n  file, from the IP repository:\n\n    update_ip_catalog -disable_ip C:/Data/ip/custom_encoder_1/component.xml \\  \n    -repo_path C:/Xilinx/Vivado/data/ip \n    \n\nSee Also:\n\n   *  create_ip\n   *  import_ip\n   *  generate_target\n   *  update_module_reference\n   *  validate_ip\n",
"write_abstract_shell": "write_abstract_shell\n\nDescription: \nWrite an abstract shell checkpoint of the current design\n\nSyntax: \nwrite_abstract_shell  -cell <arg> [-force] [-quiet] [-verbose] <file>\n\nReturns: \nThe name of the checkpoint file\n\nUsage: \n  Name        Description\n  -----------------------\n  -cell       Create an abstract shell for this reconfigurable cell\n  [-force]    Overwrite existing checkpoint file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Design checkpoint file\n              Values: A filename with alphanumeric characters and .dcp \n              extension.\n\nCategories: \nFileIO\n",
"get_site_pins": "get_site_pins\n\nDescription: \nGet a list of site_pins.\n\nSyntax: \nget_site_pins  [-of_objects <args>] [-regexp] [-nocase] [-filter <arg>]\n               [-quiet] [-verbose] [<patterns>]\n\nReturns: \nsite_pins\n\nUsage: \n  Name           Description\n  --------------------------\n  [-of_objects]  Get 'site_pin' objects of these types: 'site xdef_site node \n                 pin net bel_pin'.\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match the 'site_pin' objects against patterns.\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Returns a list of site pins of the specified site, node, logical cell pin,\n  or net objects in an open design.\n\n  This command recommends the use of the -of_objects argument to prevent high\n  run times and compute resources.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -of_objects <args> - (Optional) Return the site pins of specified site,\n  node, pin, or net objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_site_pins based on property values on the site pins. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the site\n  pin object, 'IS_CLOCK', 'IS_DATA' and 'IS_PART_OF_BUS' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match site pins against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all site pins of\n  the specified objects. More than one search pattern can be specified to\n  find site pins based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the site_pins of the specified Nets:\n\n    get_site_pins -of_objects [get_nets *Clk]  \n    IOB_X1Y24/I \n    \n\n  The following example returns the output site_pins associated with the site\n  SLICE_X21Y92:\n\n    \n    get_site_pins -of_objects [get_sites SLICE_X21Y92] -filter {DIRECTION==OUT}  \n    SLICE_X21Y92/A SLICE_X21Y92/AMUX SLICE_X21Y92/AQ  \n    SLICE_X21Y92/B SLICE_X21Y92/BMUX SLICE_X21Y92/BQ   \n    SLICE_X21Y92/C SLICE_X21Y92/CMUX SLICE_X21Y92/COUT  \n    SLICE_X21Y92/CQ SLICE_X21Y92/D SLICE_X21Y92/DMUX   \n    SLICE_X21Y92/DQ \n    \n\nSee Also:\n\n   *  get_nets\n   *  get_nodes\n   *  get_pins\n   *  get_sites\n   *  list_property\n   *  report_property\n",
"delete_pr_configurations": "delete_pr_configurations\n\nDescription: \nDelete existing configurations\n\nSyntax: \ndelete_pr_configurations  [-quiet] [-verbose] <configs>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <configs>   List of Configurations to delete\n\nCategories: \nPartition\n\nDescription:\n\n  Delete the specified PR configuration from the current project.\n\n  This command returns nothing if successful, or returns an error if the\n  command fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <configs> - (Required) Specify one or more PR configuration objects to\n  remove from the current project. The configurations can be specified by\n  name, or as objects returned by the get_pr_configurations command.\n\nExample:\n\n  The following example deletes the specified PR configuration:\n\n    delete_pr_configurations [get_pr_configurations clockHigh] \n    \n\nSee Also:\n\n   *  create_pr_configuration\n   *  get_pr_configurations\n   *  setup_pr_configurations\n",
"set_bus_skew": "set_bus_skew\n\nDescription: \nDefine bus skew\n\nSyntax: \nset_bus_skew  [-from <args>] [-rise_from <args>] [-fall_from <args>]\n              [-to <args>] [-rise_to <args>] [-fall_to <args>]\n              [-through <args>] [-rise_through <args>] [-fall_through <args>]\n              [-quiet] [-verbose] <value>\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-from]          List of path startpoints\n  [-rise_from]     Apply to paths rising from the list of startpoints\n  [-fall_from]     Apply to paths falling from the list of startpoints\n  [-to]            List of path endpoints\n  [-rise_to]       Apply to paths with rise transition at the list of \n                   endpoints\n  [-fall_to]       Apply to paths with fall transition at the list of \n                   endpoints\n  [-through]       List of through pins, cells or nets\n  [-rise_through]  Apply to paths rising through pins, cells or nets\n  [-fall_through]  Apply to paths falling through pins, cells or nets\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <value>          Constraint value\n\nCategories: \nXDC\n\nDescription:\n\n  Set the bus skew requirement on bus signals that cross clock domains. The\n  bus skew constraint defines the maximum skew spread between the fastest and\n  slowest signals of the bus, and does not consider the overall datapath\n  delay. The Vivado router will try to satisfy the set_bus_skew constraints.\n  Example uses of the bus skew constraint include clock domain crossing for\n  gray-coded pointers, MUX-controlled and MUX-data holding CDC buses.\n\n  Note: Bus skew constraints are not overridden by clock groups, max delay,\n  or false path, because set_bus_skew is a constraint between the signals of\n  a bus, rather than on a particular path.\n\n  The set_bus_skew constraint can be combined with the set_max_delay\n  constraint for good results. The set_bus_skew constraint does not care\n  about the absolute datapath delay, but only about the relative arrival\n  times of data at the destination, taking into account source and\n  destination clock skew. You can help set_bus_skew by also using\n  set_max_delay -datapath_only <SRC_CLK>. This constraint helps the Vivado\n  placer to ensure that the source and destination registers are not placed\n  too far apart, so that the router can more easily satisfy the set_bus_skew\n  constraint. Refer to the Vivado Design Suite User Guide: Using Constraints\n  (UG903) for more information.\n\n  In order to not over constrain the skew requirement, the bus skew value\n  should be approximately the smallest period of the two clock domains. This\n  will prevent multiple data captures by the destination clock domain.\n\n  The set_bus_skew command requires a timing path defined by both -from and\n  -to, or some form such as -fall_from or -rise_to. You can optionally\n  specify -through values to further refine the path. You should specify\n  explicit signal paths with -from/-to instead of specifying entire clock\n  domains:\n\n   *  set_bus_skew -from [get_pins <hierarchy/C>] -to [get_pins\n      <hierarchy/D>] <value>\n\n  Note: Do not set bus skew constraints between timed synchronous paths.\n\n  You can use the report_bus_skew command to report the calculated skew on\n  paths in the current design.\n\n  The set_bus_skew command returns nothing if successful, or an error if it\n  fails.\n\nArguments:\n\n  -from <args> - (Optional) The starting points of the timing paths to set\n  bus skew on. Pins or cells can be specified as timing path startpoints.\n\n  Note: Although the various -from, -to, and -through arguments are listed as\n  optional, a path must be defined using a form of the -from and -to\n  arguments.\n\n  -rise_from <args> - (Optional) Set bus skew on the timing paths with rising\n  edge transitions at the specified startpoints.\n\n  -fall_from <args> - (Optional) Set bus skew on the timing paths with\n  falling edge transitions at the specified startpoints.\n\n  -to <args> - (Optional) The endpoints, or destination objects of timing\n  paths to define the bus skew on. Pins or cells can be specified as\n  endpoints.\n\n  -rise_to <args> - (Optional) Set bus skew on the timing paths with rising\n  edge transitions at the specified endpoints.\n\n  -fall_to <args> - (Optional) Set bus skew on the timing paths with falling\n  edge transitions at the specified endpoints.\n\n  -through <args> - (Optional) Set bus skew only on paths through the\n  specified pins, cell instance, or nets. You can specify individual -through\n  (or -rise_through and -fall_through) points in sequence to define a\n  specific path through the design. The order of the through points is\n  important to define a path. You can also specify through points with\n  multiple objects, in which case the timing path can pass through any of the\n  specified through objects.\n\n  -rise_through <args> - (Optional) Set bus skew on the timing paths with\n  rising edge transitions at the specified through points.\n\n  -fall_through <args> - (Optional) Set bus skew on the timing paths with\n  falling edge transitions at the specified through points.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <value> - Specifies the value of the acceptable bus skew in nanoseconds.\n\nExamples:\n\n  The following example defines the bus skew between the gray-coded Read and\n  Write pointers:\n\n    set_bus_skew -from [get_pins gray_coded_read_ptr[*]/C] \\  \n       -to [get_pins gray_coded_write_ptr[*]/D] 2.5  \n    \n\nSee Also:\n\n   *  report_bus_skew\n   *  report_cdc\n   *  report_datasheet\n   *  set_data_check\n   *  set_max_delay\n",
"device_enable": "device_enable\n\nDescription: \nEnable specified devices\n\nSyntax: \ndevice_enable  [-quiet] [-verbose] <enable>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <enable>    Enable the given part\n\nCategories: \nDebug\n",
"open_placer_checkpoint": "open_placer_checkpoint\n\nDescription: \nOpen Placer Checkpoint\n\nSyntax: \nopen_placer_checkpoint  [-phase <arg>] [-continue] [-quiet] [-verbose]\n                        <directory>\n\nUsage: \n  Name         Description\n  ------------------------\n  [-phase]     Placer Checkpoint Name\n  [-continue]  Continue placement from checkpoint opened in interactive mode\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <directory>  Design checkpoint directory\n               Values: A directory name with alphanumeric characters\n\nCategories: \n\n",
"phys_opt_design": "phys_opt_design\n\nDescription: \nOptimize the current placed netlist.\n\nSyntax: \nphys_opt_design  [-fanout_opt] [-placement_opt] [-routing_opt]\n                 [-slr_crossing_opt] [-insert_negative_edge_ffs]\n                 [-restruct_opt] [-interconnect_retime] [-lut_opt] [-casc_opt]\n                 [-cell_group_opt] [-critical_cell_opt] [-dsp_register_opt]\n                 [-bram_register_opt] [-uram_register_opt] [-bram_enable_opt]\n                 [-shift_register_opt] [-hold_fix] [-aggressive_hold_fix]\n                 [-retime] [-force_replication_on_nets <args>]\n                 [-directive <arg>] [-critical_pin_opt] [-clock_opt]\n                 [-path_groups <args>] [-tns_cleanup] [-sll_reg_hold_fix]\n                 [-quiet] [-verbose]\n\nUsage: \n  Name                          Description\n  -----------------------------------------\n  [-fanout_opt]                 Do cell-duplication based optimization on \n                                high-fanout timing critical nets\n  [-placement_opt]              Do placement based optimization on timing \n                                critical nets\n  [-routing_opt]                Do routing based optimization on timing \n                                critical nets\n  [-slr_crossing_opt]           Do placement optimization of SLR-crossing \n                                timing critical nets\n  [-insert_negative_edge_ffs]   Insert negative edge triggered FFs for hold \n                                optimization\n  [-restruct_opt]               Do LUT restructuring optimization\n  [-interconnect_retime]        Do interconnect retiming optimization\n  [-lut_opt]                    Do single LUT replacement/replication \n                                optimization\n  [-casc_opt]                   Do LUT cascade placement/replication \n                                optimization\n  [-cell_group_opt]             Do critical cell group optimization\n  [-critical_cell_opt]          Do cell-duplication based optimization on \n                                timing critical nets\n  [-dsp_register_opt]           Do DSP register optimization\n  [-bram_register_opt]          Do BRAM register optimization\n  [-uram_register_opt]          Do UltraRAM register optimization\n  [-bram_enable_opt]            Do BRAM enable optimization\n  [-shift_register_opt]         Do Shift register optimization\n  [-hold_fix]                   Attempt to improve slack of high hold \n                                violators\n  [-aggressive_hold_fix]        Attempt to aggressively improve slack of high\n                                hold violators\n  [-retime]                     Do retiming optimization\n  [-force_replication_on_nets]  Force replication optimization on nets\n  [-directive]                  Mode of behavior (directive) for this \n                                command. Please refer to Arguments section of\n                                this help for values for this option\n                                Default: Default\n  [-critical_pin_opt]           Do pin-swapping based optimization on timing \n                                critical nets\n  [-clock_opt]                  Do clock skew optimization in post-route \n                                optimization\n  [-path_groups]                Work only on specified path groups\n  [-tns_cleanup]                Work on all nets in the design that meet \n                                criteria for the specified optimizations to \n                                improve design tns\n  [-sll_reg_hold_fix]           Do hold fixing on SLL Tx-Rx paths\n  [-quiet]                      Ignore command errors\n  [-verbose]                    Suspend message limits during command \n                                execution\n\nCategories: \nTools\n\nDescription:\n\n  Performs timing-driven optimization on the negative-slack paths of a\n  design. A path should have negative slack near the worst negative slack\n  (WNS) to be considered for optimization. Optimization will not be performed\n  on designs without negative slack.\n\n  This optional command can be run for post-place or post-route optimizations.\n\n  Note: Because physical optimization requires timing data that is only\n  available after placement, the command cannot be run prior to placement.\n  However, the write_iphys_opt_tcl and read_iphys_opt_tcl commands let you\n  write out the physical optimizations performed on the post-placed design,\n  and then apply those optimizations to the design netlist prior to\n  placement. Refer to the Vivado Design Suite User Guide: Implementation\n  (UG904) for more information on interactive physical optimization.\n\n  Post-place phys_opt_design performs the following optimizations by default:\n\n   *  high-fanout optimization\n\n   *  placement-based optimization of critical paths\n\n   *  LUT restructure optimization\n\n   *  critical-cell optimization\n\n   *  DSP register optimization\n\n   *  Block RAM register optimization\n\n   *  URAM register optimization\n\n   *  a final fanout optimization\n\n  Tip: Using command-line options for specific optimizations results in\n  phys_opt_design performing only the specified optimizations and disabling\n  all others, even the ones that are usually performed by default.\n\n  Post-route phys_opt_design performs the following optimizations by default:\n\n   *  placement-based optimization of critical paths\n\n   *  routing optimization\n\n   *  LUT restructure optimization\n\n   *  critical-cell optimization\n\n  Physical optimizations involve replication, re-timing, hold fixing, and\n  placement improvement. The phys_opt_design command automatically performs\n  all necessary netlist and placement changes.\n\n  To perform re-timing you must specify the -retime option, or the -directive\n  AddRetime option.\n\n  To perform hold fixing you must specify the -hold_fix option, or the\n  -directive ExploreWithHoldFix option.\n\n  If the phys_opt_design command is used iteratively, the subsequent run\n  optimizes the results of the prior run.\n\n  Tip: The phys_opt_design can be multi-threaded to speed the process. Refer\n  to the set_param command for more information on setting the\n  general.maxThreads parameter.\n\n  The command reports each net processed, a summary of any optimizations\n  performed, and the WNS before and after optimization. Replicated objects\n  are named by appending _replica to the original object name, followed by\n  the replicated object count.\n\nArguments:\n\n  -fanout_opt - (Optional) Performs delay-driven optimization on high-fanout\n  timing critical nets, by replicating drivers to reduce delay.\n\n  Note: The -fanout_opt argument is optional, as are the other optimizations.\n  However this optimization is run by default unless explicitly overridden by\n  another optimization.\n\n  -placement_opt - (Optional) Moves cells to reduce delay on timing-critical\n  nets.\n\n  -routing_opt - (Optional) Performs routing optimization on timing-critical\n  nets to reduce delay.\n\n  -slr_crossing_opt - (Optional) Performs post-place or post-route\n  optimizations to improve the path delay of inter-SLR connections. The\n  optimization adjusts the locations of the driver, load, or both along the\n  SLR crossing after potential replication. For use with UltraScale and\n  UltraScale+ devices.\n\n  -restruct_opt - (Optional) advanced LUT restructure optimization to reduce \n  logic levels and reduce delay on critical signals.\n\n  -insert_negative_edge_ffs - (Optional) Inserts negative edge triggered FFs\n  for hold optimization.\n\n  -critical_cell_opt - (Optional) Replicates cells on timing critical nets to\n  reduce delays.\n\n  -dsp_register_opt - (Optional) Improves critical path delay by moving\n  registers from slices to DSP blocks, or from DSP blocks to slices.\n\n  -bram_register_opt - (Optional) Improves critical path delay by moving\n  registers from slices to block RAMs, or from block RAMs to slices.\n\n  -uram_register_opt - (Optional) Improves critical path delay by moving\n  registers across the URAM cell boundary, from slices into URAMs, or from\n  URAMs to slices.\n\n  -bram_enable_opt - (Optional) The block RAM enable optimization improves\n  timing on critical paths involving power-optimized block RAMs.\n  Pre-placement block RAM power optimization restructures the logic driving\n  block RAM read and write enable inputs to reduce dynamic power consumption.\n  After placement the restructured logic may become timing-critical. The\n  block RAM enable optimization reverses the enable-logic optimization to\n  improve the slack on the critical enable-logic paths.\n\n  -shift_register_opt - (Optional) Performs shift register optimization to\n  improve timing on negative slack paths between shift register cells (SRLs)\n  and other logic cells. If there are timing violations to or from shift\n  register cells (SRL16E or SRLC32E), the optimization extracts a register\n  from the beginning or end of the SRL register chain and places it into the\n  logic fabric to improve timing. The optimization shortens the wire length\n  of the original critical path. Refer to the Vivado Design Suite User Guide:\n  Implementation (UG904) for more information.\n\n  -hold_fix - (Optional) Performs optimizations to insert data path delay to\n  fix hold time violations.\n\n  -aggressive_hold_fix - (Optional) Performs optimizations to insert data\n  path delay to fix hold time violations. Considers significantly more hold\n  violations than the standard hold fix algorithm.\n\n  -retime - (Optional) Re-time registers forward through combinational logic\n  to balance path delays.\n\n  -force_replication_on_nets <args> - (Optional) Forces the drivers of the\n  specified net objects to be replicated, regardless of timing slack. This\n  option requires the use of the get_nets command to specify net objects.\n  Replication is based on load placements and requires manual analysis to\n  determine if replication is sufficient. If further replication is required,\n  nets can be replicated repeatedly by successive commands.\n\n  -directive <arg> - (Optional) Directs the mode of physical optimization\n  with specific design objectives. Only one directive can be specified for a\n  single phys_opt_design command, and values are case-sensitive. Supported\n  values include:\n\n   *  Explore - Run different algorithms in multiple passes of optimization,\n      including replication for very high fanout nets.\n\n   *  ExploreWithHoldFix - Run different algorithms in multiple passes of\n      optimization, including hold violation fixing and replication for very\n      high fanout nets.\n\n   *  ExploreWithAggressiveHoldFix - Run different algorithms in multiple\n      passes of optimization, including aggressive hold violation fixing and\n      replication for very high fanout nets.\n\n   *  AggressiveExplore - Similar to Explore but with different optimization\n      algorithms and more aggressive goals.\n\n   *  AlternateReplication - Use different algorithms for performing critical\n      cell replication.\n\n   *  AggressiveFanoutOpt - Uses different algorithms for fanout-related\n      optimizations with more aggressive goals.\n\n   *  AlternateFlowWithRetiming - Perform more aggressive replication and DSP\n      and Block RAM optimizations, and enable register re-timing.\n\n   *  AddRetime - Performs the default phys_opt_design flow and adds re-timing.\n\n   *  RuntimeOptimized - Provides a reduced set of physical optimizations\n      with the shortest runtime. Use this directive when compile time\n      reduction is more important than design performance. RuntimeOptimized\n      includes fanout_opt, critical_cell_opt, placement_opt, and\n      bram_enable_opt.\n\t  \n   *  RQS - Instructs phys_opt_design to select the phys_opt_design directive\n      specified by the report_qor_suggestion strategy suggestion. Requires an\n      RQS file with a strategy suggestion to be read in prior to calling this\n      directive. See report_qor_suggestions -help for more details. \n\n   *  Default - Run phys_opt_design with default settings.\n\n  Refer to the Vivado Design Suite User Guide: Implementation (UG904) for\n  more information on the effects of each directive.\n\n  Note: The -directive option controls the overall optimization strategy, and\n  is not compatible with any specific optimization options. It can only be\n  used with -quiet and -verbose.\n\n  -critical_pin_opt - For LUT inputs, this optimization performs remapping of\n  logical pins to physical pins, also known as pin-swapping, to improve\n  critical path timing. A critical path traversing a logical pin that has\n  been mapped to a slow physical pin, such as A1 or A2, is reassigned to a\n  faster physical pin, such as A6 or A5 if it improves timing.\n\n  Note: A cell with a LOCK_PINS property will be skipped and the cell will\n  retain the pin mapping specified by LOCK_PINS. Logical-to-physical pin\n  mapping can be obtained with get_site_pins for a selected logical pin\n  object.\n\n  -clock_opt - (Optional) Perform clock skew optimization during post-route\n  optimization. Insert global clock buffers to delay destination clocks to\n  improve setup on critical paths. Optimization will modify CLK_MOD delays\n  for Versal devices.\n\n  -path_groups <args> - (Optional) Perform optimizations on the specified\n  path groups only.\n\n  -tns_cleanup - (Optional) This option can be used with the\n  -slr_crossing_opt option. This performs a Total Negative Slack (TNS)\n  cleanup, which supports optimizing SLR crossing paths while allowing some\n  slack degradation on other paths, as long as the overall WNS does not\n  degrade. This is applicable to UltraScale and UltraScale+ devices.\n\n  -sll_reg_hold_fix - (Optional) Performs SLL register hold fix optimization.\n  You can use this option when the router is having trouble resolving hold\n  violations on SLR crossing paths.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example performs a physical optimization of the current\n  post-placement design, and then writes the iphys_opt Tcl script for use\n  before placement:\n\n    phys_opt_design\n    write_iphys_opt_tcl C:/Data/my_iphys_opt.tcl\n\n  This example sets the LOCK_PINS property on the specified cell, then\n  performs physical optimizations including register re-timing, optimization\n  of registers across DSP blocks and block RAMs, and pin swapping (excluding\n  the locked pins) to improve timing:\n\n    set_property LOCK_PINS {I3:A1 I2:A4} [get_cell cpuEngine/qmem_dack_reg_i_1]\n    phys_opt_design -retime -dsp_register_opt -bram_register_opt \\\n       -critical_pin_opt\n\n  This example directs phys_opt_design to run more iterations, with hold\n  violation fixing, to achieve potentially better results:\n\n    phys_opt_design -directive ExploreWithHoldFix\n\n  This example directs phys_opt_design to consider more nets for replication:\n\n    phys_opt_design -directive AggressiveFanoutOpt\n\nSee Also:\n\n   *  get_pins\n   *  get_site_pins\n   *  opt_design\n   *  place_design\n   *  power_opt_design\n   *  read_iphys_opt_tcl\n   *  route_design\n   *  write_iphys_opt_tcl\n",
"list_attribute": "",
"create_clock": "create_clock\n\nDescription: \nCreate a clock object\n\nSyntax: \ncreate_clock  -period <arg> [-name <arg>] [-waveform <args>] [-add] [-quiet]\n              [-verbose] [<objects>]\n\nReturns: \nnew clock object\n\nUsage: \n  Name         Description\n  ------------------------\n  -period      Clock period: Value > 0\n  [-name]      Clock name\n  [-waveform]  Clock edge specification\n  [-add]       Add to the existing clock in source_objects\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<objects>]  List of clock source ports, pins or nets\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Create a clock object with the specified period or waveform defined in\n  nanoseconds (ns). This command defines primary clocks which are used by the\n  timing engine as the delay propagation starting point of any clock edge.\n  The defined clock can be added to the definition of an existing clock, or\n  overwrite the existing clock.\n\n  A virtual clock can be created that has no source in the design. A virtual\n  clock can be used as a time reference for setting input and output delays\n  but does not physically exist in the design.\n\n  A clock can also be generated from an existing physical clock, and derive\n  many of its properties from the master clock. Use the\n  create_generated_clock command to derive a clock from an existing physical\n  clock.\n\n  Note: If you use create_clock to create a generated clock, instead of\n  create_generated_clock, the created clock does not inherit any of the\n  properties of its source clock. The insertion delay and jitter of the\n  parent clock will not be propagated to the generated clock, causing\n  incorrect timing calculations.\n\n  The create_clock command returns the name of the clock object that is\n  created.\n\nArguments:\n\n  -period <arg> - (Required) Specifies the clock period of the clock object\n  to be created. The value is specified as nanoseconds (ns) and must be\n  greater than zero (>0).\n\n  -name <arg> - (Optional) The name of the clock object to be created. If the\n  name is omitted, a system-generated name will be used based on the\n  specified source <objects>. You can also use the -name option without\n  source <objects> to create a virtual clock for the design that is not\n  associated with a physical source on the design.\n\n  -waveform <arg1 arg2 ...> - (Optional) The rising and falling edge times of\n  the waveform of the defined clock, in nanoseconds, over one full clock\n  cycle. You can use multiple rising and falling edges to define the\n  characteristics of the waverform, but there must be an even number of\n  edges, representing both the rising and falling edges of the waveform. The\n  first time specified (arg1) represents the time of the first rising\n  transition, and the second time specified (arg2) is the falling edge. If\n  the value for the falling edge is smaller than the value for the rising\n  edge, it means that the falling edge occurs before the rising edge.\n\n  Note: If you do not specify the waveform, the default waveform is assumed\n  to have a rising edge at time 0.0 and a falling edge at one half the\n  specified period (-period/2).\n\n  -add - (Optional) Define multiple clocks on the same source for\n  simultaneous analysis with different clock waveforms. Use -name to specify\n  the new clock to add. If you do not specify this option, the create_clock\n  command will overwrite any existing clock of the same name.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) The ports, pins, or nets which are the source of the\n  specified clock. If you specify a clock on a source object that already has\n  a clock, the new clock will overwrite the original clock unless you also\n  specify the -add option. If no <objects> are specified to attach the clock\n  object to, the clock will be created as a virtual clock in the design.\n\n  Note: The first driver pin of a specified net will be used as the source of\n  the clock.\n\nExamples:\n\n  The following example creates a physical clock called bftClk and defines\n  the clock period:\n\n    create_clock -name bftClk -period 5.000 [get_ports bftClk] \n    \n\n  Note: If the get_ports command defining the objects is left off of this\n  example, a virtual clock is created in the design rather than a physical\n  clock.\n\n  The following example creates a clock named clk on the input port, bftClk,\n  with a period of 10ns, the rising edge at 2.4ns and the falling edge at\n  7.4ns:\n\n    create_clock -name clk -period 10.000 -waveform {2.4 7.4} [get_ports bftClk] \n    \n\n  The following example creates a virtual clock since no clock source is\n  specified:\n\n    create_clock -name virtual_clock -period 5.000 \n    \n\n  The following example creates a clock with the falling edge at 2ns and the\n  rising edge at 7ns:\n\n    create_clock -name clk -period 10.000 -waveform {7 2} [get_ports bftClk] \n    \n\n  Note: Because the falling edge is earlier than the rising edge in the\n  -waveform definition, although it is specified as arg2, it occurs first in\n  the waveform.\n\nSee Also:\n\n   *  all_clocks\n   *  create_generated_clock\n   *  get_clocks\n   *  report_clocks\n   *  report_clock_interaction\n   *  report_clock_networks\n   *  report_clock_utilization\n   *  set_clock_groups\n   *  set_clock_latency\n   *  set_clock_uncertainty\n   *  set_input_delay\n   *  set_output_delay\n   *  set_propagated_clock\n",
"report_compile_order": "report_compile_order\n\nDescription: \nReport the compile order by analyzing files and constructing a hierarchy.\n\nSyntax: \nreport_compile_order  [-fileset <arg>] [-missing_instances] [-constraints]\n                      [-sources] [-used_in <arg>] [-file <arg>] [-append]\n                      [-of_objects <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-fileset]            FileSet to parse to determine compile order\n  [-missing_instances]  Report missing instances in the design hierarchy\n  [-constraints]        Report the constraint compile order\n  [-sources]            Report the source compile order\n  [-used_in]            Specify the used in filter.\n  [-file]               Filename to output results to.\n  [-append]             Append output to existing file\n  [-of_objects]         Get 'file' objects of these types: 'file fileset ip \n                        reconfig_module'.\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Report the compilation order of files in the various active filesets:\n  constraints, design sources, and simulation sources.\n\n  This command returns the order of file processing for synthesis,\n  implementation, and simulation. The report can be limited by specifying the\n  fileset of interest with -fileset, or using the -constraints option or\n  -sources option.\n\n  The -used_in option lets you report the processing order of files used in\n  Synthesis, Simulation, or one of the implementation steps, according to the\n  value of the USED_IN property.\n\n  By default the report is returned to the Tcl console, or standard output,\n  but it can also be written to a file.\n\nArguments:\n\n  -of_objects <args> - (Optional) Report the files that are associated with\n  the specified filesets, sub-designs, or reconfiguration modules. The\n  default is to search all filesets. When -compile_order and -used_in are\n  specified, the -of_objects switch will only accept a single fileset, or a\n  single sub-design such as an IP core, Block Design, or DSP design. A\n  sub-design is also known as a composite file.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -fileset <arg> - (Optional) Limit the report to the specified fileset.\n\n  -missing_instances - (Optional) Return the list of cells that are missing\n  source files in the current or specified fileset.\n\n  -constraints - (Optional) Report the compilation order of the constraint\n  files in the current design, including constraints for any IP in the\n  design.\n\n  -sources - (Optional) Report the compilation order of files found in the\n  sources_1 fileset of design sources.\n\n  -used_in <arg> - (Optional) Accepts one of the enumerated values of the\n  USED_IN property for files, and returns files matching the specified value.\n  Valid values for this option include the following: synthesis, simulation,\n  or implementation. Refer to the Vivado Design Suite Properties Reference\n  Guide (UG912) for information on the USED_IN property and its supported\n  values.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the compilation order of the active filesets\n  in the current design:\n\n    report_compile_order \n    \n\n  The following returns a list of cells with missing source files in the\n  current design, and appends the report to the specified file:\n\n    report_compile_order -missing_instances -file C:/Data/report1.txt -append \n    \n\n  The following command lists the compile order of the files in the active\n  constraint set:\n\n    report_compile_order -constraints \n    \n\nSee Also:\n\n   *  current_fileset\n   *  get_files\n   *  update_compile_order\n",
"report_timing_summary": "report_timing_summary\n\nDescription: \nReport timing summary\n\nSyntax: \nreport_timing_summary  [-check_timing_verbose] [-delay_type <arg>]\n                       [-no_detailed_paths] [-setup] [-hold] [-max_paths <arg>]\n                       [-nworst <arg>] [-unique_pins] [-path_type <arg>]\n                       [-no_reused_label] [-input_pins] [-no_pr_attribute]\n                       [-no_pblock] [-routable_nets] [-slack_lesser_than <arg>]\n                       [-report_unconstrained] [-significant_digits <arg>]\n                       [-no_header] [-file <arg>] [-append] [-name <arg>]\n                       [-return_string] [-warn_on_violation] [-datasheet]\n                       [-cells <args>] [-rpx <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                     Description\n  ------------------------------------\n  [-check_timing_verbose]  produce a verbose report when checking the design \n                           for potential timing problems\n  [-delay_type]            Type of path delay: Values: max, min, min_max\n                           Default: min_max\n  [-no_detailed_paths]     do not report timing paths for each clock and path\n                           group analyzed\n  [-setup]                 Report max delay timing paths (equivalent to \n                           -delay_type max)\n  [-hold]                  Report min delay timing paths (equivalent to \n                           -delay_type min)\n  [-max_paths]             Maximum number of paths to report per clock or \n                           path group: Value >=1\n                           Default: 1\n  [-nworst]                List up to N worst paths to endpoint: Value >=1\n                           Default: 1\n  [-unique_pins]           for each unique set of pins, show at most 1 path \n                           per path group\n  [-path_type]             Format for path report: Values: end summary short \n                           full full_clock full_clock_expanded\n                           Default: full_clock_expanded\n  [-no_reused_label]       Do not label reuse status on pins in the report\n  [-input_pins]            Show input pins in path\n  [-no_pr_attribute]       for Dynamic Function eXchange designs, do not \n                           report whether netlist resources are in the static\n                           or reconfigurable regions\n  [-no_pblock]             report timing summary without pblock column\n  [-routable_nets]         store the number of routable nets traversed as a \n                           property on timing paths.\n  [-slack_lesser_than]     Display paths with slack less than this\n                           Default: 1e+30\n  [-report_unconstrained]  report unconstrained and user ignored paths\n  [-significant_digits]    Number of digits to display: Range: 0 to 3\n                           Default: 3\n  [-no_header]             do not generate a report header\n  [-file]                  Filename to output results to. (send output to \n                           console if -file is not used)\n  [-append]                Append the results to file, don't overwrite the \n                           results file\n  [-name]                  Output the results to GUI panel with this name\n  [-return_string]         return report as string\n  [-warn_on_violation]     issue a critical warning when the report contains \n                           a timing violation\n  [-datasheet]             Include data sheet report\n  [-cells]                 run report_timing_summary on the specified cell(s)\n  [-rpx]                   Filename to output interactive results to.\n  [-quiet]                 Ignore command errors\n  [-verbose]               Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Tip: The report_timing_summary can be multi-threaded to speed the process.\n  Refer to the set_param command for more information on setting the\n  general.maxThreads parameter.\n\n  Generate a timing summary to help understand if the design has met timing\n  requirements. The timing summary can be run on an open Synthesized or\n  Implemented Design.\n\n  The timing summary report includes the following information:\n\n   *  Timer Settings - Details the timing engine settings used to generate\n      the timing information in the report.\n\n   *  Check Timing - Contains the same information that is produced by the\n      check_timing command, which summarizes potential timing issues.\n\n   *  Design Timing Summary - Provides a summary of the timing of the design,\n      including values for worst and total negative slack (WNS/TNS), worst\n      and total hold slack (WHS/THS), and component switching limits (CSL).\n\n   *  Clock Definitions - Contains the same information that is produced by\n      the report_clocks command, showing all the clocks that were created for\n      the design, either by create_clock, create_generated_clock, or\n      automatically by the tool.\n\n   *  Intra-Clock Table - Summarizes timing paths with the same source and\n      destination clocks.\n\n   *  Inter-Clock Table - Summarizes timing paths with different source and\n      destination clocks.\n\n   *  Path Group Table - Shows default path groups and user-defined path\n      groups created by the group_path command.\n\n   *  Timing Details - Contains detailed timing paths, both max delay and min\n      delay, as well as component switching limits for each clock defined,\n      similar to the report_timing command.\n\n   *  Data sheet - Contains the same information that is produced by the\n      report_datasheet command. It contains the timing characteristics of a\n      design at the I/O ports. The data sheet information is added to the\n      summary report only when the -datasheet option is specified.\n\n  This command is automatically run during implementation as part of the\n  launch_runs command.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -check_timing_verbose - (Optional) Output a verbose timing summary report.\n\n  -delay_type <arg> - (Optional) Specifies the type of delay to analyze when\n  running the timing report. The valid values are min, max, min_max. The\n  default setting for -delay_type is min_max.\n\n  -no_detailed_paths - (Optional) Do not report the full timing path for each\n  clock or path group analyzed.\n\n  -setup - (Optional) Check for setup violations. This is the same as\n  specifying -delay_type max.\n\n  -hold - (Optional) Check for hold violations. This is the same as\n  specifying -delay_type min.\n\n  Note: -setup and -hold can be specified together, which is the same as\n  specifying -delay_type min_max.\n\n  -max_paths <arg> - (Optional) The maximum number of paths to report per\n  clock or per path group. This is specified as a value greater than or equal\n  to 1. By default the report_timing_summary command will report the single\n  worst timing path, or the worst path per path group.\n\n  -nworst <arg> - (Optional) The number of timing paths to output in the\n  timing report. The timing report will return the <N> worst paths to\n  endpoints based on the specified value, greater than or equal to 1. The\n  default setting is 1.\n\n  -unique_pins - (Optional) Only report timing paths through each unique set\n  of pins, reporting one path per path group.\n\n  -path_type <arg> - (Optional) Specify the path data to output in the timing\n  summary report. The default format is full_clock_expanded. The valid path\n  types are:\n\n   *  end - Shows the endpoint of the path only, with calculated timing values.\n\n   *  summary - Displays the startpoints and endpoints with slack calculation.\n\n   *  short - Displays the startpoints and endpoints with calculated timing\n      values.\n\n   *  full - Displays the full timing path, including startpoints, through\n      points, and endpoints.\n\n   *  full_clock - Displays full clock paths in addition to the full timing\n      path.\n\n   *  full_clock_expanded - Displays full clock paths between a master clock\n      and generated clocks in addition to the full_clock timing path. This is\n      the default setting.\n\n  -no_reused_label - (Optional) Disable the reporting of reuse information in\n  designs that use incremental place and route based on an existing design\n  checkpoint (DCP) file. Both placement and routing can be completed\n  incrementally, based on prior results stored in a Design Checkpoint file\n  (DCP), using the incremental implementation flow. Refer to the\n  read_checkpoint command, or to Vivado Design Suite User Guide:\n  Implementation (UG904) for more information on incremental place and route.\n  By default, designs using incremental place and route have pins labeled\n  with information related to the physical data reused from the specified\n  incremental checkpoint. This option removes the reuse labels including the\n  following:\n\n   *  Routing: Placement and routing to this pin are reused.\n\n   *  Placement: Cell placement is reused but routing to this pin is not\n      reused.\n\n   *  Moved: Neither cell placement nor routing to this pin is reused.\n\n   *  New: The cell, net, or pin is new. It does not exist in the incremental\n      checkpoint.\n\n  -input_pins - (Optional) Show input pins in the timing path report. For use\n  with -path_type full, full_clock, and full_clock_expanded.\n\n  -no_pr_attribute <arg> - (Optional) For Partial Reconfiguration (PR)\n  designs, this option disables the standard reporting of data that indicates\n  whether netlist resources are in the static or reconfigurable regions.\n\n  -no_pblock - (Optional) Do not report the Pblock information when there are\n  some Pblocks on the path.\n\n  -routable_nets - (Optional) Report the number of routable nets traversed as\n  a property of the timing paths returned.\n\n  -slack_lesser_than <arg> - (Optional) Report timing on paths with a\n  calculated slack value less than the specified value.\n\n  -report_unconstrained - (Optional) Report timing on unconstrained paths in\n  the current design. As a default, the report_timing_summary command will\n  not include unconstrained timing paths.\n\n  Tip: In the Vivado IDE, this option must be enabled to report the User\n  Ignored Paths in the Timing report.\n\n  -significant_digits <arg> - (Optional) The number of significant digits in\n  the output results. The valid range is 0 to 3. The default setting is 3\n  significant digits.\n\n  -no_header - (Optional) Do not add header information to the report. This\n  can be useful when returning the timing summary report to a string for\n  further processing.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) Specifies the name of the results set for the GUI.\n  Timing summary reports in the GUI can be deleted by the\n  delete_timing_results command.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -warn_on_violation - (Optional) Specify that a Critical Warning will be\n  generated by the Vivado Design Suite when the timing report contains a\n  timing violation.\n\n  -datasheet - (Optional) Generate data sheet information to add to the\n  summary report.\n\n  -cells <arg> - (Option) Generate the timing summary report on the specified\n  hierarchical cells. The details of the report will be based on the\n  specified cells rather than the whole design.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the timing summary of the current design:\n\n    report_timing_summary\n\n  The following example reports the hold timing summary of the current\n  design, including unconstrained paths, with the specified options:\n\n    report_timing_summary -delay_type min -path_type full_clock_expanded \\\n       -report_unconstrained -max_paths 2 -nworst 1 -significant_digits 2 \\\n       -input_pins -name {timing_6}\n\nSee Also:\n\n   *  check_timing\n   *  create_clock\n   *  create_generated_clock\n   *  delete_timing_results\n   *  get_path_groups\n   *  get_timing_paths\n   *  group_path\n   *  open_report\n   *  report_clocks\n   *  report_timing\n   *  set_msg_config\n   *  report_datasheet\n",
"write_hwx": "write_hwx\n\nDescription: \nWrites the hardware files archive for the current design for use in the Labtool\n\nSyntax: \nwrite_hwx  [-force] [-bit <arg>] [-bin <arg>] [-ll <arg>] [-msk <arg>]\n           [-nky <arg>] [-rbt <arg>] [-ltx <arg>] [-quiet] [-verbose] <file>\n\nReturns: \nThe name of the hw file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrite existing hardware archive file\n  [-bit]      Bitstream file \n  [-bin]      Binary configuration data file with no header information\n  [-ll]       Logical location file\n  [-msk]      Mask file\n  [-nky]      Encryption key file\n  [-rbt]      Raw bit file\n  [-ltx]      Debug probes file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Hardware archive file\n              Values: A filename with alphanumeric characters and .hwx \n              extension.\n\nCategories: \nFileIO\n",
"get_projects": "get_projects\n\nDescription: \nGet a list of projects\n\nSyntax: \nget_projects  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n              [<patterns>]\n\nReturns: \nlist of project objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match project names against patterns\n                Default: *\n\nCategories: \nObject, Project\n\nDescription:\n\n  Gets a list of open projects that match the specified search pattern. The\n  default gets a list of all open projects.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_projects based on property values on the projects. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the 'projects' object, 'NAME', 'DIRECTORY' and\n  'TARGET_LANGUAGE' are some of the properties that can be used to filter\n  results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match projects against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all parts. More\n  than one pattern can be specified to find multiple projects based on\n  different search criteria.\n\nExamples:\n\n  The following example gets a list of all open projects.\n\n    get_projects \n    \n\n  The following example sets a variable called project_found to the length of\n  the list of projects returned by get_projects, then prints either that\n  projects were found or were not found as appropriate:\n\n    \n    set project_found [llength [get_projects ISC*] ]  \n    if {$project_found > 0} {puts 'Project Found.'} \\  \n       else {puts 'No Projects Found.'} \n    \n\n  Note: If there are no projects matching the pattern you will get a warning.\n\nSee Also:\n\n   *  create_project\n   *  current_project\n   *  open_project\n",
"format": "format(n)             Tcl Built-In Commands             format(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       format - Format a string in the style of sprintf\n\nSYNOPSIS\n       format formatString ?arg arg ...?\n_________________________________________________________________\n\n\nINTRODUCTION\n       This  command  generates  a  formatted string in a fashion\n       similar to the ANSI  C  sprintf  procedure.   FormatString\n       indicates  how  to  format  the result, using % conversion\n       specifiers as in sprintf, and the additional arguments, if\n       any,  provide  values  to  be substituted into the result.\n       The return value from format is the formatted string.\n\nDETAILS ON FORMATTING\n       The command operates by scanning formatString from left to\n       right.   Each character from the format string is appended\n       to the result string unless it is a percent sign.  If  the\n       character  is  a  %  then  it  is not copied to the result\n       string.  Instead, the characters following the % character\n       are  treated  as  a  conversion specifier.  The conversion\n       specifier controls the conversion of the  next  successive\n       arg  to  a particular format and the result is appended to\n       the result string in place of  the  conversion  specifier.\n       If  there are multiple conversion specifiers in the format\n       string, then each one controls the conversion of one addi-\n       tional  arg.  The format command must be given enough args\n       to meet the needs of all of the conversion  specifiers  in\n       formatString.\n\n       Each  conversion specifier may contain up to six different\n       parts: an XPG3 position specifier, a set of flags, a mini-\n       mum  field width, a precision, a size modifier, and a con-\n       version character.  Any of these  fields  may  be  omitted\n       except  for the conversion character.  The fields that are\n       present must appear in the order given above.   The  para-\n       graphs below discuss each of these fields in turn.\n\n       If  the  %  is followed by a decimal number and a $, as in\n       '%2$d', then the value to convert is not  taken  from  the\n       next  sequential  argument.  Instead, it is taken from the\n       argument indicated by the number, where 1  corresponds  to\n       the  first arg.  If the conversion specifier requires mul-\n       tiple arguments because of * characters in  the  specifier\n       then  successive  arguments  are  used,  starting with the\n       argument given by the number.  This follows the XPG3  con-\n       ventions  for  positional  specifiers.   If  there are any\n       positional specifiers in  formatString  then  all  of  the\n       specifiers must be positional.\n\n       The  second  portion of a conversion specifier may contain\n       any of the following flag characters, in any order:\n\n       -         Specifies that the converted argument should  be\n                 left-justified  in  its  field (numbers are nor-\n                 mally right-justified  with  leading  spaces  if\n                 needed).\n\n       +         Specifies that a number should always be printed\n                 with a sign, even if positive.\n\n       space     Specifies that a space should be  added  to  the\n                 beginning  of  the number if the first character\n                 is not a sign.\n\n       0         Specifies that the number should  be  padded  on\n                 the left with zeroes instead of spaces.\n\n       #         Requests  an  alternate output form. For o and O\n                 conversions it guarantees that the  first  digit\n                 is  always  0.  For x or X conversions, 0x or 0X\n                 (respectively) will be added to the beginning of\n                 the result unless it is zero.  For all floating-\n                 point conversions (e, E, f, g, and G) it guaran-\n                 tees that the result always has a decimal point.\n                 For g and G conversions it specifies that trail-\n                 ing zeroes should not be removed.\n\n       The  third  portion of a conversion specifier is a decimal\n       number giving a minimum field width for  this  conversion.\n       It  is  typically  used to make columns line up in tabular\n       printouts.  If the converted argument contains fewer char-\n       acters than the minimum field width then it will be padded\n       so that it is as wide as the minimum field width.  Padding\n       normally  occurs by adding extra spaces on the left of the\n       converted argument, but the 0 and - flags may be  used  to\n       specify  padding with zeroes on the left or with spaces on\n       the right, respectively.  If the minimum  field  width  is\n       specified  as  * rather than a number, then the next argu-\n       ment to the format command determines  the  minimum  field\n       width; it must be an integer value.\n\n       The  fourth  portion of a conversion specifier is a preci-\n       sion, which consists of a period  followed  by  a  number.\n       The number is used in different ways for different conver-\n       sions.  For e, E, and f conversions it specifies the  num-\n       ber of digits to appear to the right of the decimal point.\n       For g and G conversions it specifies the total  number  of\n       digits  to  appear,  including  those on both sides of the\n       decimal point (however, trailing zeroes after the  decimal\n       point  will  still  be  omitted unless the # flag has been\n       specified).  For integer conversions, it specifies a mini-\n       mum  number  of  digits  to  print (leading zeroes will be\n       added if necessary).  For s conversions it  specifies  the\n       maximum  number of characters to be printed; if the string\n       is longer than this then the trailing characters  will  be\n       dropped.  If the precision is specified with * rather than\n       a number then the next  argument  to  the  format  command\n       determines the precision; it must be a numeric string.\n\n       The  fifth  part of a conversion specifier is a size modi-\n       fier, which must be ll, h, or l.  If it is ll it specifies\n       that an integer value is taken without truncation for con-\n       version to a formatted substring.  If it is h it specifies\n       that  an  integer  value  is  truncated  to a 16-bit range\n       before converting.  This option is rarely useful.   If  it\n       is  l  it specifies that the integer value is truncated to\n       the same range as that produced by the wide() function  of\n       the  expr command (at least a 64-bit range).  If neither h\n       nor l are present, the integer value is truncated  to  the\n       same  range  as that produced by the int() function of the\n       expr command (at least a 32-bit range, but  determined  by\n       the value of tcl_platform(wordSize)).\n\n       The  last thing in a conversion specifier is an alphabetic\n       character that determines what kind of conversion to  per-\n       form.   The  following conversion characters are currently\n       supported:\n\n       d         Convert integer to signed decimal string.\n\n       u         Convert integer to unsigned decimal string.\n\n       i         Convert integer to signed decimal string (equiv-\n                 alent to d).\n\n       o         Convert integer to unsigned octal string.\n\n       x or X    Convert  integer to unsigned hexadecimal string,\n                 using  digits  '0123456789abcdef'  for   x   and\n                 '0123456789ABCDEF' for X).\n\n       c         Convert integer to the Unicode character it rep-\n                 resents.\n\n       s         No conversion; just insert string.\n\n       f         Convert number to signed decimal string  of  the\n                 form  xx.yyy,  where the number of y's is deter-\n                 mined by the precision  (default:  6).   If  the\n                 precision  is 0 then no decimal point is output.\n\n       e or E    Convert number to  scientific  notation  in  the\n                 form  x.yyye±zz,  where  the  number  of  y's is\n                 determined by the precision  (default:  6).   If\n                 the precision is 0 then no decimal point is out-\n                 put.  If the E form is used then  E  is  printed\n                 instead of e.\n\n       g or G    If  the exponent is less than -4 or greater than\n                 or equal to the precision, then  convert  number\n                 as  for  %e or %E.  Otherwise convert as for %f.\n                 Trailing zeroes and a trailing decimal point are\n                 omitted.\n\n       %         No conversion: just insert %.\n\nDIFFERENCES FROM ANSI SPRINTF\n       The behavior of the format command is the same as the ANSI\n       C sprintf procedure except for the following differences:\n\n       [1]    %p and %n specifiers are not supported.\n\n       [2]    For %c conversions the argument must be an  integer\n              value,  which  will then be converted to the corre-\n              sponding character value.\n\n       [3]    The size  modifiers  are  ignored  when  formatting\n              floating-point  values.   The  ll  modifier  has no\n              sprintf counterpart.\n\nEXAMPLES\n       Convert the numeric value of a UNICODE  character  to  the\n       character itself:\n              set value 120\n              set char [format %c $value]\n\n       Convert  the output of time into seconds to an accuracy of\n       hundredths of a second:\n              set us [lindex [time $someTclCode] 0]\n              puts [format '%.2f seconds to execute' [expr {$us / 1e6}]]\n\n       Create a packed X11 literal color specification:\n              # Each color-component should be in range (0..255)\n              set color [format '#%02x%02x%02x' $r $g $b]\n\n       Use XPG3 format codes to allow  reordering  of  fields  (a\n       technique  that  is  often used in localized message cata-\n       logs; see  msgcat)  without  reordering  the  data  values\n       passed to format:\n              set fmt1 'Today, %d shares in %s were bought at $%.2f each'\n              puts [format $fmt1 123 'Global BigCorp' 19.37]\n\n              set fmt2 'Bought %2\\$s equity ($%3$.2f x %1\\$d) today'\n              puts [format $fmt2 123 'Global BigCorp' 19.37]\n\n       Print a small table of powers of three:\n              # Set up the column widths\n              set w1 5\n              set w2 10\n\n              # Make a nice header (with separator) for the table first\n              set sep +-[string repeat - $w1]-+-[string repeat - $w2]-+\n              puts $sep\n              puts [format '| %-*s | %-*s |' $w1 'Index' $w2 'Power']\n              puts $sep\n\n              # Print the contents of the table\n              set p 1\n              for {set i 0} {$i<=20} {incr i} {\n                 puts [format '| %*d | %*ld |' $w1 $i $w2 $p]\n                 set p [expr {wide($p) * 3}]\n              }\n\n              # Finish off by printing the separator again\n              puts $sep\n\nSEE ALSO\n       scan(n), sprintf(3), string(n)\n\nKEYWORDS\n       conversion  specifier,  format, sprintf, string, substitu-\n       tion\n\n\n\nTcl                            8.1                      format(n)\n",
"set_false_path": "set_false_path\n\nDescription: \nDefine false path\n\nSyntax: \nset_false_path  [-setup] [-hold] [-rise] [-fall] [-reset_path] [-from <args>]\n                [-rise_from <args>] [-fall_from <args>] [-to <args>]\n                [-rise_to <args>] [-fall_to <args>] [-through <args>]\n                [-rise_through <args>] [-fall_through <args>] [-quiet]\n                [-verbose]\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-setup]         Eliminate setup timing analysis for paths\n  [-hold]          Eliminate hold timing analysis for paths\n  [-rise]          Eliminate only rising delays for the defined paths\n  [-fall]          Eliminate only falling delays for the defined paths\n  [-reset_path]    Reset this path before setting false path\n  [-from]          List of path startpoints or clocks\n  [-rise_from]     Apply to paths rising from the list of startpoints or \n                   clocks\n  [-fall_from]     Apply to paths falling from the list of startpoints or \n                   clocks\n  [-to]            List of path endpoints or clocks\n  [-rise_to]       Apply to paths with rise transition at the list of \n                   endpoints or clocks\n  [-fall_to]       Apply to paths with fall transition at the list of \n                   endpoints or clocks\n  [-through]       List of through pins, cells or nets\n  [-rise_through]  Apply to paths rising through pins, cells or nets\n  [-fall_through]  Apply to paths falling through pins, cells or nets\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Sets false timing paths in the design that are ignored during timing\n  analysis.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation\n\nArguments:\n\n  -setup - (Optional) Eliminate setup timing analysis for specified timing\n  paths.\n\n  -hold - (Optional) Eliminate hold timing analysis for specified timing paths.\n\n  -rise - (Optional) Eliminate rising delays for the specified timing paths.\n\n  -fall - (Optional) Eliminate falling delays for the specified timing paths.\n\n  -reset_path - (Optional) Reset the timing path before setting false path.\n  This clears all exception-based timing constraints from the defined timing\n  path.\n\n  -from <element_name> - (Optional) List of path origins or clocks. A valid\n  startpoint is a clock object, the clock pin of sequential logic, or an\n  input or bidirectional port.\n\n  -rise_from <element_name> - (Optional) Apply to paths rising from the list\n  of origins or clocks\n\n  -fall_from <element_name> - (Optional) Apply to paths falling from the list\n  of origins or clocks\n\n  -to <element_name> - (Optional) List of path endpoints or clocks\n\n  -rise_to <element_name> - (Optional) Apply to paths with rise transition at\n  the list of endpoints or clocks\n\n  -fall_to <element_name> - (Optional) Apply to paths with fall transition at\n  the list of endpoints or clocks\n\n  -through <element_name> - (Optional) List of through pins, cells or nets\n\n  -rise_through <element_name> - (Optional) Apply to paths rising through\n  pins, cells or nets\n\n  -fall_through <element_name> - (Optional) Apply to paths falling through\n  pins, cells or nets\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example eliminates the setup timing for paths from the bftClk:\n\n    set_false_path -setup -from bftClk \n    \n\n  The following example excludes paths between the two clocks from timing\n  analysis:\n\n    set_false_path -from [get_clocks GT0_RXUSRCLK2_OUT] \\  \n       -to [get_clocks DRPCLK_OUT] \n    \n\nSee Also:\n\n   *  get_clocks\n   *  get_pins\n   *  get_ports\n   *  report_timing\n",
"get_files": "get_files\n\nDescription: \nGet a list of source files\n\nSyntax: \nget_files  [-regexp] [-nocase] [-filter <arg>] [-compile_order <arg>]\n           [-used_in <arg>] [-references] [-all] [-of_objects <args>] [-quiet]\n           [-verbose] [<patterns>]\n\nReturns: \nlist of file objects\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-regexp]         Patterns are full regular expressions\n  [-nocase]         Perform case-insensitive matching (valid only when \n                    -regexp specified)\n  [-filter]         Filter list with expression\n  [-compile_order]  Get files by type and in compilation order (must use with\n                    -used_in)\n  [-used_in]        Get files used in a specific step (must use with \n                    -compile_order)\n  [-references]     Get files referenced in the provided objects (must use \n                    with -of_objects)\n  [-all]            Include all internal files.\n  [-of_objects]     Get 'file' objects of these types: 'file fileset ip \n                    reconfig_module'.\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  [<patterns>]      Match file names against patterns\n                    Default: *\n\nCategories: \nObject, Project\n\nDescription:\n\n  Gets a list of files in the current project that match a specified search\n  pattern. The default command gets a list of all files in the project.\n\n  The get_files command returns a machine readable list of files in the\n  project, in a design, or in a sub-design such as an IP core or block\n  design. You can filter the results returned by get_files using one of the\n  command arguments such as -of_objects, -compile_order, -used_in, and\n  -filter.\n\n  The -compile_order and -used_in options must be used together to return a\n  list of files from the sources or constraints filesets used in synthesis,\n  simulation, or implementation, sorted according to the order of evaluation\n  by the Vivado tools. The -compile_order and -used_in options use complex\n  file ordering rules that can change based on header files, include files,\n  or other language options. You can also filter files returned by get_files\n  according to the USED_IN property, using the -filter option instead of the\n  -used_in option.\n\n  You can use the report_compile_order command to generate a report of all\n  files in the sources or constraints filesets, used in synthesis,\n  simulation, AND implementation, sorted into different sections.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_files based on property values on the files. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the 'file'\n  object, 'FILE_TYPE', and 'IS_ENABLED' are some of the properties that can\n  be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the files that are associated with the\n  specified file, fileset, IP, or reconfig_module objects. The default is to\n  search all filesets. When -compile_order and -used_in are specified, the\n  -of_objects switch will only accept a single fileset, or a single\n  sub-design such as an IP core, Block Design, or DSP design. A sub-design is\n  also known as a composite file.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -compile_order [ sources | constraints ] - (Optional) Returns the source\n  design files, or the constraint files sorted according to the order of\n  compilation by the Vivado Design Suite.\n\n  Note: This option must be used with the -used_in option. When specified,\n  the -of_objects switch will only accept a single fileset or sub-design.\n\n  -used_in <arg> - (Optional) Accepts one of the enumerated values of the\n  USED_IN property for files, and returns files matching the specified value.\n  Valid values for this option include the following: synthesis, simulation,\n  or implementation. Refer to the Vivado Design Suite Properties Reference\n  Guide (UG912) for information on the USED_IN property and its supported\n  values.\n\n  Note: This option must be used with the -compile_order option. When\n  specified, the -of_objects switch will only accept a single fileset or\n  sub-design.\n\n  -all - (Optional) Returns all of the files in the design, including\n  internal files in support of IP and other objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match files against the specified patterns. The\n  default pattern is the wildcard `*` which gets all files in the project or\n  of_objects. More than one pattern can be specified to find multiple files\n  based on different search criteria.\n\nExamples:\n\n  The following example returns the VHDL files in the design that are used in\n  simulation:\n\n    get_files -filter {FILE_TYPE == VHDL && USED_IN =~ simulation*} \n    \n\n  This example returns the design source files that are used in simulation:\n\n    get_files -compile_order sources -used_in simulation \n    \n\n  This example gets a list of files associated with the specified IP core\n  composite file (ip.xci), from the sources_1 fileset that are used in\n  synthesis:\n\n    get_files -compile_order sources -used_in synthesis -of [get_files ip.xci]  \n    \n\n  The following example gets a list of the files found in the sources_1 and\n  constrs_1 filesets:\n\n    get_files -of [get_filesets {sources_1 constrs_1}] \n    \n\n  Note: If there are no files matching the pattern you will get a warning.\n\nSee Also:\n\n   *  report_compile_order\n   *  report_property\n",
"reset_drc": "reset_drc\n\nDescription: \nRemove DRC report\n\nSyntax: \nreset_drc  [-name <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-name]     DRC result name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nDRC, Report\n\nDescription:\n\n  Clear the DRC results from the specified named result set.\n\n  This command operates silently, returning nothing if successful, or\n  returning an error if it fails.\n\nArguments:\n\n  -name <arg> - (Optional) Specifies the name of the DRC results to be\n  cleared. The name is established by the -name argument in the report_drc\n  command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example clears the specified results set from memory and the\n  GUI:\n\n    reset_drc -name DRC1 \n    \n\nSee Also:\n\n   *  report_drc\n",
"create_testbench": "create_testbench\n\nDescription: \nCreate testbench for design unit instance\n\nSyntax: \ncreate_testbench  [-name <arg>] [-mode <arg>] [-type <arg>]\n                  [-add_to_simset <arg>] [-runtime <arg>] [-set_as_top]\n                  [-force] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-name]           Name of the testbench module\n                    Default: testbench\n  [-mode]           Simulation mode (behavioral, post-synthesis or \n                    post-implementation)\n                    Default: behavioral\n  [-type]           Netlist type (functional or timing)\n  [-add_to_simset]  Add the generated testbench to the specified simulation \n                    fileset\n  [-runtime]        Set simulation runtime\n  [-set_as_top]     Set generated testbench module as top\n  [-force]          Overwrite existing testbench source file\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nToolLaunch, Simulation\n\nDescription:\n\n  Create testbench for a design unit instance. This command will create a\n  functional system verilog based testbench for the scoped hierarchical\n  instance. The testbench contains port/signal specification, parameter\n  declaration, stimuli vector include file, and module instantiation of the\n  selected instance as DUT (Design Under Test).\n\n  The command allows user to add the testbench to an existing or a new\n  simulation fileset from which the simulation can be launched.\n\n  Note: The generated testbench is simulator independent.\n\nArguments:\n\n  -name <arg> - (Optional) Specify the name of the testbench module name.\n  Default name is testbench.\n\n  -add_to_simset <arg> - (Optional) Specify name of the simulation fileset to\n  which the testbench needs to be added. If this switch is not specified then\n  the command will add the testbench to current active simulation fileset.\n\n  -set_as_top - (Optional) Set the generated testbench module as top in the\n  simulation fileset where the testbench will be added.\n\n  -mode <arg> - (Optional) Specifies simulation mode. Allowed values are:\n  behavioral, post-synthesis, or post-implementation. Default is behavioral.\n\n  -type <arg> - (Optional) Specifies simulation type. Allowed values are:\n  functional or timing (not applicable for behavioral mode).\n\n  -force - (Optional) Overwrite existing testbench file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following command will create a testbench for module fifo and add it to\n  the sub_design_fifo simulation fileset:\n\n    create_testbench -name fifo -add_to_simset sub_design_fifo\n\n  The following commands will generate VCD file for /top/DUT/fifo/buf_1\n  instance of type buf module, record the waveform activity in VCD file for\n  2000ns, create a testbench with module named tb, add the testbench to the\n  test_buffer simulation fileset and set tb as top module in this fileset:\n\n    generate_vcd_ports {/top/DUT/fifo/buf_1}\n        run 2000ns\n        close_vcd -ports\n        create_testbench -name tb -add_to_simset test_buffer -set_as_top\n\nSee also:\n\n   *  generate_vcd_ports\n\n   *  close_vcd\n\n   *  launch_simulation\n",
"create_dashboard": "create_dashboard\n\nDescription: \nCreate the Project summary dashboard\n\nSyntax: \ncreate_dashboard  -name <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -name       Name of the dashboard\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n",
"find_top": "find_top\n\nDescription: \nFind top module candidates in the supplied files, fileset, or active fileset. Returns a rank ordered list of candidates.\n\nSyntax: \nfind_top  [-fileset <arg>] [-files <args>] [-return_file_paths] [-quiet]\n          [-verbose]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-fileset]            Fileset to parse to search for top candidates\n  [-files]              Files to parse to search for top candidates\n  [-return_file_paths]  For each top returned, also include the associated \n                        file path. The returned value will be a single list \n                        of strings, alternating top names and file paths.\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Find the most likely candidates for the top module in the files defined in\n  the current fileset, or in the specified fileset, or in the specified list\n  of files.\n\n  The command returns an ordered list of modules that the tool identifies as\n  the best candidates for the top-level of the design. You can use the lindex\n  command, and choose index 0 to select the best candidate for the top\n  module.\n\nArguments:\n\n  -fileset <arg> - (Optional) Search the specified simulation or source\n  fileset for top module candidates. The default is to search the current\n  fileset of the current design.\n\n  -files <arg> - (Optional) Find the top module candidates in the specified\n  list of files.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example chooses the best top module of the current design for\n  synthesis:\n\n    synth_design -top [lindex [find_top] 0]  \n    \n\n  Note: Since find_top returns multiple possible candidates, choosing index 0\n  chooses the best top candidate for synthesis.\n\n  The following example returns the best top module candidate from the\n  specified list of files:\n\n    find_top -files [get_files -filter {NAME =~ *or1200*}] \n    \n\n  The following example sets the results of find_top into the variable\n  $topVar, then uses that variable to define the top module in the current\n  fileset using the set_property command:\n\n    set topVar [ find_top -files [get_files -filter {NAME =~ *usbf*} ] ]  \n    usbf_top  \n    set_property top $topVar [current_fileset] \n    \n\nSee Also:\n\n   *  set_property\n   *  synth_design\n",
"package": "package(n)            Tcl Built-In Commands            package(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       package  - Facilities for package loading and version con-\n       trol\n\nSYNOPSIS\n       package forget ?package package ...?\n       package ifneeded package version ?script?\n       package names\n       package present package ?requirement...?\n       package present -exact package version\n       package provide package ?version?\n       package require package ?requirement...?\n       package require -exact package version\n       package unknown ?command?\n       package vcompare version1 version2\n       package versions package\n       package vsatisfies version requirement...\n       package prefer ?latest|stable?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This command keeps  a  simple  database  of  the  packages\n       available  for  use  by the current interpreter and how to\n       load them into the interpreter.  It supports multiple ver-\n       sions of each package and arranges for the correct version\n       of a package to be loaded based on what is needed  by  the\n       application.   This  command also detects and reports ver-\n       sion clashes.  Typically, only  the  package  require  and\n       package   provide  commands  are  invoked  in  normal  Tcl\n       scripts;  the other commands are used primarily by  system\n       scripts that maintain the package database.\n\n       The  behavior  of the package command is determined by its\n       first argument.  The following forms are permitted:\n\n       package forget ?package package ...?\n              Removes all information about each specified  pack-\n              age  from  this  interpreter, including information\n              provided by both package ifneeded and package  pro-\n              vide.\n\n       package ifneeded package version ?script?\n              This  command typically appears only in system con-\n              figuration scripts to set up the package  database.\n              It indicates that a particular version of a partic-\n              ular package is available if needed, and  that  the\n              package  can be added to the interpreter by execut-\n              ing script.  The script is saved in a database  for\n              use  by subsequent package require commands;  typi-\n              cally, script sets up auto-loading for the commands\n              in   the  package  (or  calls  load  and/or  source\n              directly), then invokes package provide to indicate\n              that the package is present.  There may be informa-\n              tion in the database for several different versions\n              of  a single package.  If the database already con-\n              tains information for package and version, the  new\n              script  replaces  the  existing one.  If the script\n              argument is omitted, the current script for version\n              version of package package is returned, or an empty\n              string if no  package  ifneeded  command  has  been\n              invoked for this package and version.\n\n       package names\n              Returns  a list of the names of all packages in the\n              interpreter for which a version has  been  provided\n              (via  package  provide)  or  for  which  a  package\n              ifneeded script is available.  The  order  of  ele-\n              ments in the list is arbitrary.\n\n       package present\n              This  command  is  equivalent  to  package  require\n              except that it does not try and load the package if\n              it is not already loaded.\n\n       package provide package ?version?\n              This  command  is  invoked to indicate that version\n              version of package package is now  present  in  the\n              interpreter.   It is typically invoked once as part\n              of an ifneeded script, and  again  by  the  package\n              itself  when it is finally loaded.  An error occurs\n              if a different version of package has been provided\n              by a previous package provide command.  If the ver-\n              sion argument is omitted, then the command  returns\n              the  version  number that is currently provided, or\n              an empty string if no package provide  command  has\n              been invoked for package in this interpreter.\n\n       package require package ?requirement...?\n              This  command is typically invoked by Tcl code that\n              wishes to use a particular version of a  particular\n              package.   The  arguments indicate which package is\n              wanted, and the command  ensures  that  a  suitable\n              version  of  the  package is loaded into the inter-\n              preter.  If the command succeeds,  it  returns  the\n              version number that is loaded;  otherwise it gener-\n              ates an error.\n\n              A suitable version of the package  is  any  version\n              which  satisfies  at least one of the requirements,\n              per the rules of package  vsatisfies.  If  multiple\n              versions  are  suitable the implementation with the\n              highest version is chosen. This last part is  addi-\n              tionally  influenced by the selection mode set with\n              package prefer.\n\n              In the 'stable' selection  mode  the  command  will\n              select  the  highest  stable version satisfying the\n              requirements, if any. If no stable  version  satis-\n              fies the requirements, the highest unstable version\n              satisfying the requirements will be  selected.   In\n              the 'latest' selection mode the command will accept\n              the highest version  satisfying  all  the  require-\n              ments, regardless of its stableness.\n\n              If  a  version of package has already been provided\n              (by invoking the package provide command), then its\n              version  number  must  satisfy the requirements and\n              the command returns  immediately.   Otherwise,  the\n              command  searches  the database of information pro-\n              vided by previous package ifneeded commands to  see\n              if  an  acceptable version of the package is avail-\n              able.  If so, the script for the highest acceptable\n              version  number  is  evaluated in the global names-\n              pace; it must do whatever is necessary to load  the\n              package,  including calling package provide for the\n              package.  If the package ifneeded database does not\n              contain  an acceptable version of the package and a\n              package unknown command has been specified for  the\n              interpreter  then  that command is evaluated in the\n              global namespace;  when it  completes,  Tcl  checks\n              again  to  see if the package is now provided or if\n              there is a package ifneeded script for it.  If  all\n              of  these  steps fail to provide an acceptable ver-\n              sion of the package, then the  command  returns  an\n              error.\n\n       package require -exact package version\n              This  form  of  the  command  is used when only the\n              given version  of  package  is  acceptable  to  the\n              caller.   This  command  is  equivalent  to package\n              require package version-version.\n\n       package unknown ?command?\n              This command supplies a 'last  resort'  command  to\n              invoke  during  package require if no suitable ver-\n              sion of a package  can  be  found  in  the  package\n              ifneeded database.  If the command argument is sup-\n              plied, it contains the first  part  of  a  command;\n              when  the  command  is  invoked  during  a  package\n              require command, Tcl appends one or more additional\n              arguments  giving  the  desired  package  name  and\n              requirements.  For example, if command is  foo  bar\n              and  later  the command package require test 2.4 is\n              invoked, then Tcl will execute the command foo  bar\n              test  2.4  to load the package.  If no requirements\n              are supplied to the package require  command,  then\n              only the name will be added to invoked command.  If\n              the package unknown command is  invoked  without  a\n              command  argument, then the current package unknown\n              script is returned, or an empty string if there  is\n              none.   If command is specified as an empty string,\n              then the current package unknown script is removed,\n              if there is one.\n\n       package vcompare version1 version2\n              Compares  the two version numbers given by version1\n              and version2.  Returns -1 if version1 is an earlier\n              version  than  version2, 0 if they are equal, and 1\n              if version1 is later than version2.\n\n       package versions package\n              Returns a list of all the version numbers of  pack-\n              age  for  which  information  has  been provided by\n              package ifneeded commands.\n\n       package vsatisfies version requirement...\n              Returns 1 if the version satisfies at least one  of\n              the  given  requirements,  and  0  otherwise.  Each\n              requirement is allowed to have any of the forms:\n\n              min    This form is called 'min-bounded'.\n\n              min-   This form is called 'min-unbound'.\n\n              min-max\n                     This form is called 'bounded'.\n\n              where 'min' and 'max' are  valid  version  numbers.\n              The legacy syntax is a special case of the extended\n              syntax, keeping backward  compatibility.  Regarding\n              satisfaction the rules are:\n\n              [1]    The  version has to pass at least one of the\n                     listed requirements to be satisfactory.\n\n              [2]    A version satisfies a 'bounded'  requirement\n                     when\n\n                      [a]    For  min  equal  to  the max if, and\n                             only if the version is equal to  the\n                             min.\n\n                      [b]    Otherwise  if,  and only if the ver-\n                             sion is greater than or equal to the\n                             min,  and  less  than the max, where\n                             both min and max  have  been  padded\n                             internally  with  'a0'.   Note  that\n                             while  the  comparison  to  min   is\n                             inclusive,  the comparison to max is\n                             exclusive.\n\n              [3]    A 'min-bounded' requirement is  a  'bounded'\n                     requirement  in  disguise, with the max part\n                     implicitly  specified  as  the  next  higher\n                     major version number of the min part. A ver-\n                     sion satisfies it per the rules above.\n\n              [4]    A version satisfies a 'min-unbound' require-\n                     ment  if,  and only if it is greater than or\n                     equal to the min, where  the  min  has  been\n                     padded  internally  with  'a0'.  There is no\n                     constraint to a maximum.\n\n       package prefer ?latest|stable?\n              With no  arguments,  the  commands  returns  either\n              'latest'  or 'stable', whichever describes the cur-\n              rent  mode  of  selection  logic  used  by  package\n              require.\n\n              When  passed  the  argument  'latest',  it sets the\n              selection logic mode to 'latest'.\n\n              When passed the argument 'stable', if the  mode  is\n              already  'stable', that value is kept.  If the mode\n              is already 'latest', then the  attempt  to  set  it\n              back  to 'stable' is ineffective and the mode value\n              remains 'latest'.\n\n              When passed any other value as an  argument,  raise\n              an invalid argument error.\n\n              When  an interpreter is created, its initial selec-\n              tion mode value is set to 'stable' unless the envi-\n              ronment  variable TCL_PKG_PREFER_LATEST is set.  If\n              that environment  variable  is  defined  (with  any\n              value)  then  the initial (and permanent) selection\n              mode value is set to 'latest'.\n\nVERSION NUMBERS\n       Version numbers consist of one  or  more  decimal  numbers\n       separated  by  dots,  such as 2 or 1.162 or 3.1.13.1.  The\n       first number is called the major version  number.   Larger\n       numbers  correspond  to  later versions of a package, with\n       leftmost numbers having greater significance.   For  exam-\n       ple,  version  2.1  is later than 1.3 and version 3.4.6 is\n       later  than  3.3.5.   Missing  fields  are  equivalent  to\n       zeroes:   version  1.3  is  the  same as version 1.3.0 and\n       1.3.0.0, so it is earlier than 1.3.1 or 1.3.0.2.  In addi-\n       tion, the letters 'a' (alpha) and/or 'b' (beta) may appear\n       exactly once to replace a dot for separation.  These  let-\n       ters  semantically  add a negative specifier into the ver-\n       sion, where 'a' is -2, and 'b' is -1. Each may  be  speci-\n       fied only once, and 'a' or 'b' are mutually exclusive in a\n       specifier. Thus  1.3a1  becomes  (semantically)  1.3.-2.1,\n       1.3b1  is  1.3.-1.1.  Negative  numbers  are  not directly\n       allowed in version specifiers.  A version number not  con-\n       taining  the  letters  'a'  or  'b'  as specified above is\n       called a stable version, whereas presence of  the  letters\n       causes the version to be called is unstable.  A later ver-\n       sion number is assumed to be upwards  compatible  with  an\n       earlier  version  number as long as both versions have the\n       same major version number.  For example, Tcl scripts writ-\n       ten  for  version  2.3  of a package should work unchanged\n       under versions 2.3.2, 2.4,  and  2.5.1.   Changes  in  the\n       major version number signify incompatible changes: if code\n       is written to use version 2.1 of  a  package,  it  is  not\n       guaranteed to work unmodified with either version 1.7.3 or\n       version 3.1.\n\nPACKAGE INDICES\n       The recommended way to use packages in Tcl  is  to  invoke\n       package  require  and package provide commands in scripts,\n       and use the procedure pkg_mkIndex to create package  index\n       files.   Once  you have done this, packages will be loaded\n       automatically in response  to  package  require  commands.\n       See the documentation for pkg_mkIndex for details.\n\nEXAMPLES\n       To  state that a Tcl script requires the Tk and http pack-\n       ages, put this at the top of the script:\n              package require Tk\n              package require http\n\n       To test to see if the Snack package is available and  load\n       if  it  is (often useful for optional enhancements to pro-\n       grams where the loss of the functionality is not critical)\n       do this:\n              if {[catch {package require Snack}]} {\n                 # Error thrown - package not found.\n                 # Set up a dummy interface to work around the absence\n              } else {\n                 # We have the package, configure the app to use it\n              }\n\nSEE ALSO\n       msgcat(n), packagens(n), pkgMkIndex(n)\n\nKEYWORDS\n       package, version\n\n\n\nTcl                            7.5                     package(n)\n",
"binary": "binary(n)             Tcl Built-In Commands             binary(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       binary - Insert and extract fields from binary strings\n\nSYNOPSIS\n       binary format formatString ?arg arg ...?\n       binary scan string formatString ?varName varName ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This  command  provides facilities for manipulating binary\n       data.  The first form, binary  format,  creates  a  binary\n       string  from  normal  Tcl  values.  For example, given the\n       values 16 and 22, on a 32-bit architecture, it might  pro-\n       duce  an  8-byte  binary  string  consisting of two 4-byte\n       integers, one for each of the numbers.  The second form of\n       the  command,  binary scan, does the opposite: it extracts\n       data from a binary string and returns it as  ordinary  Tcl\n       string values.\n\nBINARY FORMAT\n       The  binary format command generates a binary string whose\n       layout is specified by the formatString and whose contents\n       come  from the additional arguments.  The resulting binary\n       value is returned.\n\n       The formatString consists of a sequence of  zero  or  more\n       field  specifiers  separated by zero or more spaces.  Each\n       field specifier is a single type character followed by  an\n       optional  flag  character  followed by an optional numeric\n       count.  Most field  specifiers  consume  one  argument  to\n       obtain  the  value  to  be  formatted.  The type character\n       specifies how the value is to  be  formatted.   The  count\n       typically  indicates  how many items of the specified type\n       are taken from the value.  If present, the count is a non-\n       negative  decimal  integer  or *, which normally indicates\n       that all of the items in the value are to be used.  If the\n       number of arguments does not match the number of fields in\n       the format string that consume arguments, then an error is\n       generated.  The  flag  character is ignored for for binary\n       format.\n\n       Here is a small example to clarify  the  relation  between\n       the field specifiers and the arguments:\n              binary format d3d {1.0 2.0 3.0 4.0} 0.1\n\n       The  first argument is a list of four numbers, but because\n       of the count of 3 for the associated field specifier, only\n       the first three will be used. The second argument is asso-\n       ciated with the  second  field  specifier.  The  resulting\n       binary  string contains the four numbers 1.0, 2.0, 3.0 and\n       0.1.\n\n       Each type-count pair moves an imaginary cursor through the\n       binary  data,  storing  bytes  at the current position and\n       advancing the cursor to just after the last  byte  stored.\n       The  cursor is initially at position 0 at the beginning of\n       the data.  The type may be any one of the following  char-\n       acters:\n\n       a    Stores  a  byte  string of length count in the output\n            string.  Every character is taken as modulo 256 (i.e.\n            the low byte of every character is used, and the high\n            byte discarded) so when storing character strings not\n            wholly     expressible     using    the    characters\n            \\u0000-\\u00ff, the encoding convertto command  should\n            be  used  first to change the string into an external\n            representation if  this  truncation  is  not  desired\n            (i.e.  if  the  characters  are  not  part of the ISO\n            8859-1 character set.)  If arg has fewer  than  count\n            bytes, then additional zero bytes are used to pad out\n            the field.  If  arg  is  longer  than  the  specified\n            length,  the  extra  characters  will be ignored.  If\n            count is *, then all of the bytes in arg will be for-\n            matted.  If count is omitted, then one character will\n            be formatted.  For example,\n                   binary format a7a*a alpha bravo charlie\n            will    return     a     string     equivalent     to\n            alpha\\000\\000bravoc,\n                   binary format a* [encoding convertto utf-8 \\u20ac]\n            will  return  a  string  equivalent  to  \\342\\202\\254\n            (which is the UTF-8 byte sequence for a Euro-currency\n            character) and\n                   binary format a* [encoding convertto iso8859-15 \\u20ac]\n            will return a string equivalent to \\244 (which is the\n            ISO 8859-15 byte sequence for a Euro-currency charac-\n            ter). Contrast these last two with:\n                   binary format a* \\u20ac\n            which returns a string equivalent to \\254 (i.e. \\xac)\n            by truncating the high-bits  of  the  character,  and\n            which is probably not what is desired.\n\n       A    This  form  is  the  same as a except that spaces are\n            used for padding instead of nulls.  For example,\n                   binary format A6A*A alpha bravo charlie\n            will return alpha bravoc.\n\n       b    Stores a string of count binary digits in low-to-high\n            order  within  each  byte  in the output string.  Arg\n            must contain a sequence of 1 and 0  characters.   The\n            resulting  bytes  are  emitted in first to last order\n            with the bits being formatted  in  low-to-high  order\n            within  each  byte.  If arg has fewer than count dig-\n            its, then zeros will be used for the remaining  bits.\n            If  arg has more than the specified number of digits,\n            the extra digits will be ignored.   If  count  is  *,\n            then  all of the digits in arg will be formatted.  If\n            count is omitted, then one digit will  be  formatted.\n            If  the  number  of  bits formatted does not end at a\n            byte boundary, the remaining bits of  the  last  byte\n            will be zeros.  For example,\n                   binary format b5b* 11100 111000011010\n            will return a string equivalent to \\x07\\x87\\x05.\n\n       B    This  form  is the same as b except that the bits are\n            stored in high-to-low order within  each  byte.   For\n            example,\n                   binary format B5B* 11100 111000011010\n            will return a string equivalent to \\xe0\\xe1\\xa0.\n\n       H    Stores  a string of count hexadecimal digits in high-\n            to-low within each byte in the  output  string.   Arg\n            must  contain  a  sequence  of  characters in the set\n            '0123456789abcdefABCDEF'.  The  resulting  bytes  are\n            emitted  in  first  to last order with the hex digits\n            being formatted  in  high-to-low  order  within  each\n            byte.  If arg has fewer than count digits, then zeros\n            will be used for the remaining digits.   If  arg  has\n            more  than  the specified number of digits, the extra\n            digits will be ignored.  If count is *, then  all  of\n            the  digits  in  arg  will be formatted.  If count is\n            omitted, then one digit will be  formatted.   If  the\n            number  of  digits  formatted  does not end at a byte\n            boundary, the remaining bits of the last byte will be\n            zeros.  For example,\n                   binary format H3H*H2 ab DEF 987\n            will     return     a     string     equivalent    to\n            \\xab\\x00\\xde\\xf0\\x98.\n\n       h    This form is the same as H except that the digits are\n            stored in low-to-high order within each byte. This is\n            seldom required. For example,\n                   binary format h3h*h2 AB def 987\n            will    return     a     string     equivalent     to\n            \\xba\\x00\\xed\\x0f\\x89.\n\n       c    Stores one or more 8-bit integer values in the output\n            string.  If no count is specified, then arg must con-\n            sist  of an integer value. If count is specified, arg\n            must consist of a list containing at least that  many\n            integers.  The  low-order  8 bits of each integer are\n            stored as a one-byte value at  the  cursor  position.\n            If  count  is *, then all of the integers in the list\n            are formatted. If the number of elements in the  list\n            is  greater  than  count, then the extra elements are\n            ignored.  For example,\n                   binary format c3cc* {3 -3 128 1} 260 {2 5}\n            will    return     a     string     equivalent     to\n            \\x03\\xfd\\x80\\x04\\x02\\x05, whereas\n                   binary format c {2 5}\n            will generate an error.\n\n       s    This  form is the same as c except that it stores one\n            or more 16-bit integers in little-endian  byte  order\n            in  the output string.  The low-order 16-bits of each\n            integer are stored as a two-byte value at the  cursor\n            position  with  the  least  significant  byte  stored\n            first.  For example,\n                   binary format s3 {3 -3 258 1}\n            will    return     a     string     equivalent     to\n            \\x03\\x00\\xfd\\xff\\x02\\x01.\n\n       S    This  form is the same as s except that it stores one\n            or more 16-bit integers in big-endian byte  order  in\n            the output string.  For example,\n                   binary format S3 {3 -3 258 1}\n            will     return     a     string     equivalent    to\n            \\x00\\x03\\xff\\xfd\\x01\\x02.\n\n       t    This form (mnemonically tiny) is the same as s and  S |\n            except that it stores the 16-bit integers in the out- |\n            put string in the native byte order  of  the  machine |\n            where  the  Tcl script is running.  To determine what |\n            the native byte order of the machine is, refer to the |\n            byteOrder element of the tcl_platform array.\n\n       i    This  form is the same as c except that it stores one\n            or more 32-bit integers in little-endian  byte  order\n            in  the output string.  The low-order 32-bits of each\n            integer are stored as a four-byte value at the cursor\n            position  with  the  least  significant  byte  stored\n            first.  For example,\n                   binary format i3 {3 -3 65536 1}\n            will    return     a     string     equivalent     to\n            \\x03\\x00\\x00\\x00\\xfd\\xff\\xff\\xff\\x00\\x00\\x01\\x00\n\n       I    This  form is the same as i except that it stores one\n            or more one or more  32-bit  integers  in  big-endian\n            byte order in the output string.  For example,\n                   binary format I3 {3 -3 65536 1}\n            will     return     a     string     equivalent    to\n            \\x00\\x00\\x00\\x03\\xff\\xff\\xff\\xfd\\x00\\x01\\x00\\x00\n\n       n    This form (mnemonically number or normal) is the same |\n            as  i and I except that it stores the 32-bit integers |\n            in the output string in the native byte order of  the |\n            machine  where  the Tcl script is running.  To deter- |\n            mine what the native byte order of  the  machine  is, |\n            refer  to  the  byteOrder element of the tcl_platform |\n            array.\n\n       w    This form is the same as c except that it stores  one\n            or  more  64-bit integers in little-endian byte order\n            in the output string.  The low-order 64-bits of  each\n            integer are stored as an eight-byte value at the cur-\n            sor position with the least significant  byte  stored\n            first.  For example,\n                   binary format w 7810179016327718216\n            will return the string HelloTcl\n\n       W    This  form is the same as w except that it stores one\n            or more one or more  64-bit  integers  in  big-endian\n            byte order in the output string.  For example,\n                   binary format Wc 4785469626960341345 110\n            will return the string BigEndian\n\n       m    This  form (mnemonically the mirror of w) is the same |\n            as w and W except that it stores the 64-bit  integers |\n            in  the output string in the native byte order of the |\n            machine where the Tcl script is running.   To  deter- |\n            mine  what  the  native byte order of the machine is, |\n            refer to the byteOrder element  of  the  tcl_platform |\n            array.\n\n       f    This  form is the same as c except that it stores one\n            or more one or more single-precision  floating  point\n            numbers in the machine's native representation in the\n            output string.  This representation is  not  portable\n            across  architectures,  so  it  should not be used to\n            communicate floating point numbers  across  the  net-\n            work.   The  size of a floating point number may vary\n            across architectures, so the number of bytes that are\n            generated  may  vary.   If  the  value  overflows the\n            machine's native representation, then  the  value  of\n            FLT_MAX  as  defined  by  the  system  will  be  used\n            instead.  Because Tcl uses double-precision  floating\n            point  numbers  internally, there may be some loss of\n            precision in the conversion to single-precision.  For\n            example, on a Windows system running on an Intel Pen-\n            tium processor,\n                   binary format f2 {1.6 3.4}\n            will    return     a     string     equivalent     to\n            \\xcd\\xcc\\xcc\\x3f\\x9a\\x99\\x59\\x40.\n\n       r    This form (mnemonically real) is the same as f except |\n            that it stores the  single-precision  floating  point |\n            numbers in little-endian order.  This conversion only |\n            produces meaningful  output  when  used  on  machines |\n            which  use  the  IEEE  floating  point representation |\n            (very common, but not universal.)\n\n       R    This form is the same as r except that it stores  the |\n            single-precision floating point numbers in big-endian |\n            order.\n\n       d    This form is the same as f except that it stores  one\n            or  more  one or more double-precision floating point\n            numbers in the machine's native representation in the\n            output string.  For example, on a Windows system run-\n            ning on an Intel Pentium processor,\n                   binary format d1 {1.6}\n            will    return     a     string     equivalent     to\n            \\x9a\\x99\\x99\\x99\\x99\\x99\\xf9\\x3f.\n\n       q    This  form (mnemonically the mirror of d) is the same |\n            as d  except  that  it  stores  the  double-precision |\n            floating  point numbers in little-endian order.  This |\n            conversion only produces meaningful output when  used |\n            on  machines which use the IEEE floating point repre- |\n            sentation (very common, but not universal.)\n\n       Q    This form is the same as q except that it stores  the |\n            double-precision floating point numbers in big-endian |\n            order.\n\n       x    Stores count null bytes in  the  output  string.   If\n            count  is  not  specified,  stores one null byte.  If\n            count is *, generates an error.  This type  does  not\n            consume an argument.  For example,\n                   binary format a3xa3x2a3 abc def ghi\n            will     return     a     string     equivalent    to\n            abc\\000def\\000\\000ghi.\n\n       X    Moves the cursor  back  count  bytes  in  the  output\n            string.   If count is * or is larger than the current\n            cursor position, then the  cursor  is  positioned  at\n            location  0  so that the next byte stored will be the\n            first byte in the result string.  If count is omitted\n            then  the  cursor  is moved back one byte.  This type\n            does not consume an argument.  For example,\n                   binary format a3X*a3X2a3 abc def ghi\n            will return dghi.\n\n       @    Moves the cursor to the absolute location in the out-\n            put  string specified by count.  Position 0 refers to\n            the first byte in the output string.  If count refers\n            to  a  position  beyond  the last byte stored so far,\n            then null bytes will be placed in  the  uninitialized\n            locations and the cursor will be placed at the speci-\n            fied location.  If count is *,  then  the  cursor  is\n            moved  to  the  current end of the output string.  If\n            count is omitted, then an error  will  be  generated.\n            This type does not consume an argument. For example,\n                   binary format a5@2a1@*a3@10a1 abcde f ghi j\n            will return abfdeghi\\000\\000j.\n\nBINARY SCAN\n       The  binary  scan  command  parses  fields  from  a binary\n       string, returning the  number  of  conversions  performed.\n       String  gives  the  input bytes to be parsed (one byte per\n       character, and characters not representable as a byte have\n       their high bits chopped) and formatString indicates how to\n       parse it.  Each varName gives the name of a variable; when\n       a  field  is scanned from string the result is assigned to\n       the corresponding variable.\n\n       As with binary format,  the  formatString  consists  of  a\n       sequence  of  zero  or  more field specifiers separated by\n       zero or more spaces.  Each field  specifier  is  a  single\n       type  character  followed  by  an  optional flag character\n       followed by an optional numeric count.  Most field  speci-\n       fiers  consume  one  argument  to obtain the variable into\n       which the scanned values should be placed.  The type char-\n       acter  specifies how the binary data is to be interpreted.\n       The count typically indicates how many items of the speci-\n       fied  type are taken from the data.  If present, the count\n       is a non-negative decimal integer  or  *,  which  normally\n       indicates  that all of the remaining items in the data are\n       to be used.  If there are not enough bytes left after  the\n       current cursor position to satisfy the current field spec-\n       ifier, then the corresponding variable is  left  untouched\n       and  binary  scan  returns  immediately with the number of\n       variables that were set.  If there are  not  enough  argu-\n       ments for all of the fields in the format string that con-\n       sume arguments, then an error is generated. The flag char-\n       acter  'u'  may be given to cause some types to be read as\n       unsigned values. The flag is accepted for all field  types\n       but is ignored for non-integer fields.\n\n       A similar example as with binary format should explain the\n       relation between field specifiers and arguments in case of\n       the binary scan subcommand:\n              binary scan $bytes s3s first second\n\n       This  command  (provided the binary string in the variable\n       bytes is long enough) assigns a list of three integers  to\n       the variable first and assigns a single value to the vari-\n       able second.  If bytes contains fewer than 8  bytes  (i.e.\n       four  2-byte  integers),  no  assignment to second will be\n       made, and if bytes contains fewer than 6 bytes (i.e. three\n       2-byte  integers),  no  assignment  to first will be made.\n       Hence:\n              puts [binary scan abcdefg s3s first second]\n              puts $first\n              puts $second\n       will print (assuming neither variable is set previously):\n              1\n              25185 25699 26213\n              can't read 'second': no such variable\n\n       It is important to note that the c, s, and S (and i and  I\n       on 64bit systems) will be scanned into long data size val-\n       ues.  In doing this, values that have their high  bit  set\n       (0x80  for chars, 0x8000 for shorts, 0x80000000 for ints),\n       will be sign extended.  Thus the following will occur:\n              set signShort [binary format s1 0x8000]\n              binary scan $signShort s1 val; # val == 0xFFFF8000\n       If you require unsigned values you  can  include  the  'u'\n       flag  character  following the field type. For example, to\n       read an unsigned short value:\n              set signShort [binary format s1 0x8000]\n              binary scan $signShort su1 val; # val == 0x00008000\n\n       Each type-count pair moves an imaginary cursor through the\n       binary data, reading bytes from the current position.  The\n       cursor is initially at position 0 at the beginning of  the\n       data.   The  type  may be any one of the following charac-\n       ters:\n\n       a    The data is a byte string of length count.  If  count\n            is  *, then all of the remaining bytes in string will\n            be scanned into the variable.  If count  is  omitted,\n            then  one  byte  will  be scanned.  All bytes scanned\n            will be interpreted as being characters in the  range\n            \\u0000-\\u00ff  so  the  encoding  convertfrom command\n            will be needed if the string is not a  binary  string\n            or a string encoded in ISO 8859-1.  For example,\n                   binary scan abcde\\000fghi a6a10 var1 var2\n            will return 1 with the string equivalent to abcde\\000\n            stored in var1 and var2 left unmodified, and\n                   binary scan \\342\\202\\254 a* var1\n                   set var2 [encoding convertfrom utf-8 $var1]\n            will store a Euro-currency character in var2.\n\n       A    This form is the same as a,  except  trailing  blanks\n            and  nulls are stripped from the scanned value before\n            it is stored in the variable.  For example,\n                   binary scan 'abc efghi  \\000' A* var1\n            will return 1 with abc efghi stored in var1.\n\n       b    The data is turned into a string of count binary dig-\n            its in low-to-high order represented as a sequence of\n            '1' and '0' characters.  The data bytes  are  scanned\n            in  first  to last order with the bits being taken in\n            low-to-high order within each byte.  Any  extra  bits\n            in  the  last  byte are ignored.  If count is *, then\n            all of the remaining bits in string will be  scanned.\n            If  count  is  omitted, then one bit will be scanned.\n            For example,\n                   binary scan \\x07\\x87\\x05 b5b* var1 var2\n            will  return  2  with  11100  stored  in   var1   and\n            1110000110100000 stored in var2.\n\n       B    This form is the same as b, except the bits are taken\n            in high-to-low order within each byte.  For example,\n                   binary scan \\x70\\x87\\x05 B5B* var1 var2\n            will  return  2  with  01110  stored  in   var1   and\n            1000011100000101 stored in var2.\n\n       H    The data is turned into a string of count hexadecimal\n            digits in high-to-low order represented as a sequence\n            of  characters  in  the  set '0123456789abcdef'.  The\n            data bytes are scanned in first to  last  order  with\n            the  hex  digits  being  taken  in  high-to-low order\n            within each byte. Any extra bits in the last byte are\n            ignored. If count is *, then all of the remaining hex\n            digits in string will be scanned. If count  is  omit-\n            ted, then one hex digit will be scanned. For example,\n                   binary scan \\x07\\xC6\\x05\\x1f\\x34 H3H* var1 var2\n            will return 2 with 07c  stored  in  var1  and  051f34\n            stored in var2.\n\n       h    This  form  is  the  same as H, except the digits are\n            taken in  reverse  (low-to-high)  order  within  each\n            byte. For example,\n                   binary scan \\x07\\x86\\x05\\x12\\x34 h3h* var1 var2\n            will  return  2  with  706  stored in var1 and 502143\n            stored in var2.\n       Note that most code that wishes to parse  the  hexadecimal\n       digits  from multiple bytes in order should use the H for-\n       mat.\n\n       c    The data is turned into count 8-bit  signed  integers\n            and  stored  in the corresponding variable as a list.\n            If count is *, then all of  the  remaining  bytes  in\n            string  will  be  scanned.  If count is omitted, then\n            one 8-bit integer will be scanned.  For example,\n                   binary scan \\x07\\x86\\x05 c2c* var1 var2\n            will return 2 with 7 -122 stored in var1 and 5 stored\n            in var2.  Note that the integers returned are signed,\n            but they can be converted to unsigned  8-bit  quanti-\n            ties using an expression like:\n                   set num [expr { $num & 0xff }]\n\n       s    The  data is interpreted as count 16-bit signed inte-\n            gers represented in little-endian  byte  order.   The\n            integers  are stored in the corresponding variable as\n            a list.  If count is *, then  all  of  the  remaining\n            bytes  in  string will be scanned.  If count is omit-\n            ted, then one 16-bit integer will  be  scanned.   For\n            example,\n                   binary scan \\x05\\x00\\x07\\x00\\xf0\\xff s2s* var1 var2\n            will  return 2 with 5 7 stored in var1 and -16 stored\n            in var2.  Note that the integers returned are signed,\n            but  they can be converted to unsigned 16-bit quanti-\n            ties using an expression like:\n                   set num [expr { $num & 0xffff }]\n\n       S    This form is the same as s except that  the  data  is\n            interpreted  as  count  16-bit signed integers repre-\n            sented in big-endian byte order.  For example,\n                   binary scan \\x00\\x05\\x00\\x07\\xff\\xf0 S2S* var1 var2\n            will return 2 with 5 7 stored in var1 and -16  stored\n            in var2.\n\n       t    The  data is interpreted as count 16-bit signed inte- |\n            gers represented in the  native  byte  order  of  the |\n            machine  running  the  Tcl  script.   It is otherwise |\n            identical to s and S.  To determine what  the  native |\n            byte  order of the machine is, refer to the byteOrder |\n            element of the tcl_platform array.\n\n       i    The data is interpreted as count 32-bit signed  inte-\n            gers  represented  in  little-endian byte order.  The\n            integers are stored in the corresponding variable  as\n            a  list.   If  count  is *, then all of the remaining\n            bytes in string will be scanned.  If count  is  omit-\n            ted,  then  one  32-bit integer will be scanned.  For\n            example,\n                   set str \\x05\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\xf0\\xff\\xff\\xff\n                   binary scan $str i2i* var1 var2\n            will return 2 with 5 7 stored in var1 and -16  stored\n            in var2.  Note that the integers returned are signed,\n            but they can be converted to unsigned 32-bit  quanti-\n            ties using an expression like:\n                   set num [expr { $num & 0xffffffff }]\n\n       I    This  form  is  the same as I except that the data is\n            interpreted as count 32-bit  signed  integers  repre-\n            sented in big-endian byte order.  For example,\n                   set str \\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xf0\n                   binary scan $str I2I* var1 var2\n            will  return 2 with 5 7 stored in var1 and -16 stored\n            in var2.\n\n       n    The data is interpreted as count 32-bit signed  inte- |\n            gers  represented  in  the  native  byte order of the |\n            machine running the  Tcl  script.   It  is  otherwise |\n            identical  to  i and I.  To determine what the native |\n            byte order of the machine is, refer to the  byteOrder |\n            element of the tcl_platform array.\n\n       w    The  data is interpreted as count 64-bit signed inte-\n            gers represented in little-endian  byte  order.   The\n            integers  are stored in the corresponding variable as\n            a list.  If count is *, then  all  of  the  remaining\n            bytes  in  string will be scanned.  If count is omit-\n            ted, then one 64-bit integer will  be  scanned.   For\n            example,\n                   set str \\x05\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\xf0\\xff\\xff\\xff\n                   binary scan $str wi* var1 var2\n            will return 2 with 30064771077 stored in var1 and -16\n            stored in var2.  Note that the integers returned  are\n            signed  and  cannot be represented by Tcl as unsigned\n            values.\n\n       W    This form is the same as w except that  the  data  is\n            interpreted  as  count  64-bit signed integers repre-\n            sented in big-endian byte order.  For example,\n                   set str \\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x07\\xff\\xff\\xff\\xf0\n                   binary scan $str WI* var1 var2\n            will return 2 with 21474836487 stored in var1 and -16\n            stored in var2.\n\n       m    The  data is interpreted as count 64-bit signed inte- |\n            gers represented in the  native  byte  order  of  the |\n            machine  running  the  Tcl  script.   It is otherwise |\n            identical to w and W.  To determine what  the  native |\n            byte  order of the machine is, refer to the byteOrder |\n            element of the tcl_platform array.\n\n       f    The data is  interpreted  as  count  single-precision\n            floating point numbers in the machine's native repre-\n            sentation.  The floating point numbers are stored  in\n            the corresponding variable as a list.  If count is *,\n            then all of the remaining bytes  in  string  will  be\n            scanned.  If count is omitted, then one single-preci-\n            sion floating point number will be scanned.  The size\n            of  a floating point number may vary across architec-\n            tures, so the number of bytes that  are  scanned  may\n            vary.   If the data does not represent a valid float-\n            ing point number, the resulting  value  is  undefined\n            and  compiler  dependent.   For example, on a Windows\n            system running on an Intel Pentium processor,\n                   binary scan \\x3f\\xcc\\xcc\\xcd f var1\n            will return 1 with 1.6000000238418579 stored in var1.\n\n       r    This  form  is  the same as f except that the data is |\n            interpreted as count single-precision floating  point |\n            number  in  little-endian  order.  This conversion is |\n            not portable to the minority  of  systems  not  using |\n            IEEE floating point representations.\n\n       R    This  form  is  the same as f except that the data is |\n            interpreted as count single-precision floating  point |\n            number  in  big-endian order.  This conversion is not |\n            portable to the minority of systems  not  using  IEEE |\n            floating point representations.\n\n       d    This  form  is  the same as f except that the data is\n            interpreted as count double-precision floating  point\n            numbers  in  the machine's native representation. For\n            example, on a Windows system running on an Intel Pen-\n            tium processor,\n                   binary scan \\x9a\\x99\\x99\\x99\\x99\\x99\\xf9\\x3f d var1\n            will return 1 with 1.6000000000000001 stored in var1.\n\n       q    This form is the same as d except that  the  data  is |\n            interpreted  as count double-precision floating point |\n            number in little-endian order.   This  conversion  is |\n            not  portable  to  the  minority of systems not using |\n            IEEE floating point representations.\n\n       Q    This form is the same as d except that  the  data  is |\n            interpreted  as count double-precision floating point |\n            number in big-endian order.  This conversion  is  not |\n            portable  to  the  minority of systems not using IEEE |\n            floating point representations.\n\n       x    Moves the cursor forward count bytes in  string.   If\n            count  is  *  or  is  larger than the number of bytes\n            after the current cursor position, then the cursor is\n            positioned  after  the last byte in string.  If count\n            is omitted, then the  cursor  is  moved  forward  one\n            byte.   Note that this type does not consume an argu-\n            ment.  For example,\n                   binary scan \\x01\\x02\\x03\\x04 x2H* var1\n            will return 1 with 0304 stored in var1.\n\n       X    Moves the cursor back  count  bytes  in  string.   If\n            count is * or is larger than the current cursor posi-\n            tion, then the cursor is positioned at location 0  so\n            that  the next byte scanned will be the first byte in\n            string.  If count is omitted then the cursor is moved\n            back  one byte.  Note that this type does not consume\n            an argument.  For example,\n                   binary scan \\x01\\x02\\x03\\x04 c2XH* var1 var2\n            will return 2 with 1 2  stored  in  var1  and  020304\n            stored in var2.\n\n       @    Moves the cursor to the absolute location in the data\n            string specified by  count.   Note  that  position  0\n            refers  to the first byte in string.  If count refers\n            to a position beyond the end of string, then the cur-\n            sor  is  positioned after the last byte.  If count is\n            omitted, then an error will be generated.  For  exam-\n            ple,\n                   binary scan \\x01\\x02\\x03\\x04 c2@1H* var1 var2\n            will  return  2  with  1  2 stored in var1 and 020304\n            stored in var2.\n\nPORTABILITY ISSUES\n       The r, R, q and Q conversions will only work reliably  for\n       transferring  data  between  computers which are all using\n       IEEE floating point representations.  This is very common,\n       but  not  universal.   To  transfer floating-point numbers\n       portably between all architectures, use their textual rep-\n       resentation (as produced by format) instead.\n\nEXAMPLES\n       This  is  a  procedure  to write a Tcl string to a binary-\n       encoded channel as UTF-8 data preceded by a length word:\n              proc writeString {channel string} {\n                  set data [encoding convertto utf-8 $string]\n                  puts -nonewline [binary format Ia* \\\n                          [string length $data] $data]\n              }\n\n       This procedure reads a string  from  a  channel  that  was\n       written by the previously presented writeString procedure:\n              proc readString {channel} {\n                  if {![binary scan [read $channel 4] I length]} {\n                      error 'missing length'\n                  }\n                  set data [read $channel $length]\n                  return [encoding convertfrom utf-8 $data]\n              }\n\nSEE ALSO\n       format(n), scan(n), tclvars(n)\n\nKEYWORDS\n       binary, format, scan\n\n\n\nTcl                            8.0                      binary(n)\n",
"config_compile_simlib": "config_compile_simlib\n\nDescription: \nConfigure settings for compile_simlib\n\nSyntax: \nconfig_compile_simlib  [-cfgopt <arg>] [-cfgval <arg>] [-simulator <arg>]\n                       [-reset] [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-cfgopt]     Name of the configuration to set\n  [-cfgval]     Get the value of specified configuration\n  [-simulator]  Print the list of configurations for the specified simulator\n  [-reset]      Initialize configurations to default value\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nSimulation\n\nDescription:\n\n  Configure third-party simulator options for use by the compile_simlib\n  command.\n\n  The Vivado Design Suite has a pre-defined configuration file for the\n  compile_simlib command, with compilation options defined for supported\n  third-party simulators, languages, and libraries. The config_compile_simlib\n  command is provided to let you change the configuration options for\n  specific combinations of simulator, language, and library.\n\n  Use the config_compile_simlib command without any arguments to return all\n  current configuration options.\n\nArguments:\n\n  -cfgopt <arg> - (Optional) Specify the configuration options for a specific\n  third party simulator, language, and library combination. The -cfgopt\n  argument is specified as a string made up of four parts in the form:\n\n  {<simulator>.<language>.<library>.<options> }\n\n  Where:\n\n   *  <simulator> - Specify the third-party simulator to configure options\n      for. Refer to the compile_simlib command for currently supported\n      versions of third-party simulators. Valid values are:\n\n       -  modelsim\n\n       -  questasim\n\n       -  xcelium\n\n       -  vcs_mx\n\n       -  riviera\n\n       -  active_hdl\n\n   *  <language> - Specify the language to set the simulation options for.\n      Valid values are verilog or vhdl.\n\n   *  <library> - Specify the library to compile. Valid values for library are:\n\n       -  axi_bfm\n\n       -  ieee\n\n       -  simprim\n\n       -  std\n\n       -  unisim\n\n       -  vl\n\n   *  <options> - Configuration options specific to the simulator, language,\n      and library specified. The following are the default compilation\n      options available for different <simulator>.<language>.<library>\n      combinations:\n\n       -  Active HDL: -v2k5 (verilog), +define+XIL_TIMING, -93 (vhdl),\n          -nowarn ELAB1_0026 (vhdl)\n\t\t  \n       -  Xcelium: -MESSAGES, -NOLOG, -DEFINE XIL_TIMING, -v93 (vhdl),\n          -RELAX (vhdl)\n\n       -  ModelSim: -quiet, +define+XIL_TIMING, -93 (vhdl), -source\n          (simprim, unisim)\n\n       -  QuestaSim: -quiet, +define+XIL_TIMING, -93 (vhdl), -source\n          (simprim, unisim)\n\n       -  Riviera: -v2k5 (verilog), +define+XIL_TIMING, -93 (vhdl), -nowarn\n          ELAB1_0026 (vhdl)\n\n       -  VCS MX: -sverilog (verilog), -nc, +v2k (simprim, unisim),\n          +define+XIL_TIMING\n\n      Note: Refer to the third-party simulator documentation for other\n      compilation options that may be supported.\n\n  -simulator <arg> - (Optional) This option acts as a filter to return only\n  the configuration options associated with the specified simulator. Refer to\n  the -cfgopt option for a list of valid simulator values.\n\n  -reset - (Optional) Restore all settings to the default configuration\n  options of the Vivado Design Suite.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example configures the compilation options for the Modelsim\n  simulator, Verilog language, and Unisim library:\n\n    config_compile_simlib -cfgopt {modelsim.verilog.unisim: -quiet}\n\n  The following example configures the compilation options for multiple\n  simulation libraries:\n\n    config_compile_simlib -cfgopt {modelsim.verilog.synopsys: -quiet} \\\n    -cfgopt {modelsim.verilog.simprim:-source +define+XIL_TIMING}\n\nSee Also:\n\n   *  compile_simlib\n",
"close_design": "close_design\n\nDescription: \nClose the current design\n\nSyntax: \nclose_design  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Closes the currently active design. If the design has been modified, you\n  will not be prompted to save the design prior to closing. You will need to\n  run save_design or save_design_as to save any changes made to the design\n  before using the close_design command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example closes the current design:\n\n    close_design \n    \n\n  Note: If multiple designs are open, you can specify the current design with\n  the current_design command prior to using close_design.\n\n  The following example sets the current design, then closes it:\n\n    current_design rtl_1  \n    close_design \n    \n\n  current_design sets rtl_1 as the active design, then the close_design\n  command closes it.\n\nSee Also:\n\n   *  current_design\n   *  save_design\n   *  save_design_as\n",
"trace": "trace(n)              Tcl Built-In Commands              trace(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       trace - Monitor variable accesses, command usages and com-\n       mand executions\n\nSYNOPSIS\n       trace option ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This command causes Tcl commands to be  executed  whenever\n       certain  operations are invoked.  The legal options (which\n       may be abbreviated) are:\n\n       trace add type name ops ?args?\n              Where type is command, execution, or variable.\n\n              trace add command name ops commandPrefix\n                     Arrange for  commandPrefix  to  be  executed\n                     (with additional arguments) whenever command\n                     name is modified in one of the ways given by\n                     the  list  ops.  Name will be resolved using\n                     the usual namespace resolution rules used by\n                     commands.  If the command does not exist, an\n                     error will be thrown.\n\n                     Ops indicates which operations are of inter-\n                     est,  and  is  a  list of one or more of the\n                     following items:\n\n                      rename Invoke  commandPrefix  whenever  the\n                             traced  command  is  renamed.   Note\n                             that renaming to the empty string is\n                             considered deletion, and will not be\n                             traced with 'rename'.\n\n                      delete Invoke commandPrefix when the traced\n                             command  is deleted. Commands can be\n                             deleted  explicitly  by  using   the\n                             rename command to rename the command\n                             to an  empty  string.  Commands  are\n                             also deleted when the interpreter is\n                             deleted,  but  traces  will  not  be\n                             invoked  because  there is no inter-\n                             preter in which to execute them.\n\n                     When the trace triggers,  depending  on  the\n                     operations  being  traced, a number of argu-\n                     ments are appended to commandPrefix so  that\n                     the actual command is as follows:\n                             commandPrefix oldName newName op\n                     OldName  and  newName  give  the traced com-\n                     mand's current (old) name, and the  name  to\n                     which  it is being renamed (the empty string\n                     if this is a 'delete' operation).  Op  indi-\n                     cates  what  operation is being performed on\n                     the command, and is one of rename or  delete\n                     as  defined above.  The trace operation can-\n                     not be used to stop  a  command  from  being\n                     deleted.  Tcl will always remove the command\n                     once  the  trace  is  complete.    Recursive\n                     renaming  or deleting will not cause further\n                     traces of the same type to be evaluated,  so\n                     a delete trace which itself deletes the com-\n                     mand, or a rename trace which itself renames\n                     the  command  will  not  cause further trace\n                     evaluations to occur.  Both oldName and new-\n                     Name  are  fully  qualified  with any names-\n                     pace(s) in which they appear.\n\n              trace add execution name ops commandPrefix\n                     Arrange for  commandPrefix  to  be  executed\n                     (with additional arguments) whenever command\n                     name is executed, with traces  occurring  at\n                     the  points indicated by the list ops.  Name\n                     will be resolved using the  usual  namespace\n                     resolution  rules  used by commands.  If the\n                     command does not exist,  an  error  will  be\n                     thrown.\n\n                     Ops indicates which operations are of inter-\n                     est, and is a list of one  or  more  of  the\n                     following items:\n\n                      enter  Invoke  commandPrefix  whenever  the\n                             command  name  is   executed,   just\n                             before  the  actual  execution takes\n                             place.\n\n                      leave  Invoke  commandPrefix  whenever  the\n                             command name is executed, just after\n                             the actual execution takes place.\n\n                     enterstep\n                             Invoke commandPrefix for  every  Tcl\n                             command  which  is executed from the\n                             start of the execution of the proce-\n                             dure  name until that procedure fin-\n                             ishes. CommandPrefix is invoked just\n                             before  the  actual execution of the\n                             Tcl  command  being  reported  takes\n                             place.  For example if we have 'proc\n                             foo {} { puts 'hello'  }',  then  an\n                             enterstep  trace  would  be  invoked\n                             just before 'puts 'hello''  is  exe-\n                             cuted.   Setting  an enterstep trace\n                             on a  command  name  that  does  not\n                             refer to a procedure will not result\n                             in an error and is simply ignored.\n\n                     leavestep\n                             Invoke commandPrefix for  every  Tcl\n                             command  which  is executed from the\n                             start of the execution of the proce-\n                             dure  name until that procedure fin-\n                             ishes. CommandPrefix is invoked just\n                             after  the  actual  execution of the\n                             Tcl  command  being  reported  takes\n                             place.  Setting a leavestep trace on\n                             a command name that does  not  refer\n                             to a procedure will not result in an\n                             error and is simply ignored.\n\n                     When the trace triggers,  depending  on  the\n                     operations  being  traced, a number of argu-\n                     ments are appended to commandPrefix so  that\n                     the actual command is as follows:\n\n                     For enter and enterstep operations:\n                             commandPrefix command-string op\n                     Command-string  gives  the  complete current\n                     command being executed (the  traced  command\n                     for  a enter operation, an arbitrary command\n                     for a enterstep  operation),  including  all\n                     arguments  in their fully expanded form.  Op\n                     indicates what operation is being  performed\n                     on  the  command  execution,  and  is one of\n                     enter or enterstep as  defined  above.   The\n                     trace operation can be used to stop the com-\n                     mand from executing, by deleting the command\n                     in  question.  Of course when the command is\n                     subsequently executed, an 'invalid  command'\n                     error will occur.\n\n                     For leave and leavestep operations:\n                             command command-string code result op\n                     Command-string  gives  the  complete current\n                     command being executed (the  traced  command\n                     for  a enter operation, an arbitrary command\n                     for a enterstep  operation),  including  all\n                     arguments  in  their  fully  expanded  form.\n                     Code gives the result code  of  that  execu-\n                     tion,  and  result  the  result  string.  Op\n                     indicates what operation is being  performed\n                     on  the  command  execution,  and  is one of\n                     leave or leavestep as defined  above.   Note\n                     that  the  creation  of  many  enterstep  or\n                     leavestep traces  can  lead  to  unintuitive\n                     results, since the invoked commands from one\n                     trace can themselves lead to further command\n                     invocations for other traces.\n\n                     CommandPrefix  executes  in the same context\n                     as the code that invoked the  traced  opera-\n                     tion:  thus  the  commandPrefix,  if invoked\n                     from a procedure, will have  access  to  the\n                     same  local  variables as code in the proce-\n                     dure. This context may be different than the\n                     context  in  which the trace was created. If\n                     commandPrefix invokes a procedure (which  it\n                     normally  does) then the procedure will have\n                     to use  upvar  or  uplevel  commands  if  it\n                     wishes  to access the local variables of the\n                     code which invoked the trace operation.\n\n                     While commandPrefix is executing  during  an\n                     execution  trace,  traces  on  name are tem-\n                     porarily disabled. This allows the  command-\n                     Prefix  to  execute name in its body without\n                     invoking any  other  traces  again.   If  an\n                     error occurs while executing the commandPre-\n                     fix, then the command name as a  whole  will\n                     return that same error.\n\n                     When  multiple  traces are set on name, then\n                     for  enter  and  enterstep  operations,  the\n                     traced  commands  are invoked in the reverse\n                     order of how the traces were originally cre-\n                     ated;  and  for  leave  and leavestep opera-\n                     tions, the traced commands  are  invoked  in\n                     the original order of creation.\n\n                     The   behavior   of   execution   traces  is\n                     currently  undefined  for  a  command   name\n                     imported into another namespace.\n\n              trace add variable name ops commandPrefix\n                     Arrange  for  commandPrefix  to  be executed\n                     whenever variable name is accessed in one of\n                     the  ways  given  by the list ops.  Name may\n                     refer to a normal variable, an element of an\n                     array,  or to an array as a whole (i.e. name\n                     may be just the name of an  array,  with  no\n                     parenthesized  index).   If name refers to a\n                     whole array, then commandPrefix  is  invoked\n                     whenever any element of the array is manipu-\n                     lated.  If the variable does not  exist,  it\n                     will  be  created  but  will  not be given a\n                     value, so it will be  visible  to  namespace\n                     which   queries,  but  not  to  info  exists\n                     queries.\n\n                     Ops indicates which operations are of inter-\n                     est,  and  is  a  list of one or more of the\n                     following items:\n\n                      array  Invoke  commandPrefix  whenever  the\n                             variable is accessed or modified via\n                             the  array  command,  provided  that\n                             name is not a scalar variable at the\n                             time  that  the  array  command   is\n                             invoked.   If name is a scalar vari-\n                             able, the access via the array  com-\n                             mand will not trigger the trace.\n\n                      read   Invoke  commandPrefix  whenever  the\n                             variable is read.\n\n                      write  Invoke  commandPrefix  whenever  the\n                             variable is written.\n\n                      unset  Invoke  commandPrefix  whenever  the\n                             variable is unset.  Variables can be\n                             unset explicitly with the unset com-\n                             mand, or implicitly when  procedures\n                             return (all of their local variables\n                             are  unset).   Variables  are   also\n                             unset when interpreters are deleted,\n                             but  traces  will  not  be   invoked\n                             because  there  is no interpreter in\n                             which to execute them.\n\n                     When the trace triggers, three arguments are\n                     appended to commandPrefix so that the actual\n                     command is as follows:\n                             commandPrefix name1 name2 op\n                     Name1 and name2 give  the  name(s)  for  the\n                     variable being accessed:  if the variable is\n                     a scalar then  name1  gives  the  variable's\n                     name  and  name2  is an empty string; if the\n                     variable is  an  array  element  then  name1\n                     gives  the name of the array and name2 gives\n                     the index into the array; if an entire array\n                     is  being  deleted  and the trace was regis-\n                     tered on the overall array,  rather  than  a\n                     single  element,  then name1 gives the array\n                     name and name2 is an  empty  string.   Name1\n                     and  name2  are  not necessarily the same as\n                     the name used in the trace variable command:\n                     the upvar command allows a procedure to ref-\n                     erence a variable under  a  different  name.\n                     Op  indicates  what  operation is being per-\n                     formed on the variable, and is one of  read,\n                     write, or unset as defined above.\n\n                     CommandPrefix  executes  in the same context\n                     as the code that invoked the  traced  opera-\n                     tion:   if the variable was accessed as part\n                     of a Tcl procedure, then commandPrefix  will\n                     have  access  to the same local variables as\n                     code in the procedure.  This context may  be\n                     different  than  the  context  in  which the\n                     trace was created. If commandPrefix  invokes\n                     a  procedure  (which  it normally does) then\n                     the procedure will  have  to  use  upvar  or\n                     uplevel  if  it  wishes to access the traced\n                     variable.  Note also that name1 may not nec-\n                     essarily be the same as the name used to set\n                     the trace on the variable;  differences  can\n                     occur  if the access is made through a vari-\n                     able defined with the upvar command.\n\n                     For read and write traces, commandPrefix can\n                     modify  the variable to affect the result of\n                     the traced operation.  If commandPrefix mod-\n                     ifies  the value of a variable during a read\n                     or write trace, then the new value  will  be\n                     returned  as the result of the traced opera-\n                     tion.  The return value from   commandPrefix\n                     is  ignored  except  that  if  it returns an\n                     error of any sort then the traced  operation\n                     also  returns  an  error with the same error\n                     message returned by the trace command  (this\n                     mechanism can be used to implement read-only\n                     variables, for example).  For write  traces,\n                     commandPrefix  is  invoked  after  the vari-\n                     able's value has been changed; it can  write\n                     a  new  value  into the variable to override\n                     the original value specified  in  the  write\n                     operation.   To  implement  read-only  vari-\n                     ables, commandPrefix will  have  to  restore\n                     the old value of the variable.\n\n                     While  commandPrefix  is  executing during a\n                     read or write trace, traces on the  variable\n                     are  temporarily  disabled.  This means that\n                     reads and writes  invoked  by  commandPrefix\n                     will  occur  directly, without invoking com-\n                     mandPrefix  (or  any  other  traces)  again.\n                     However,  if  commandPrefix unsets the vari-\n                     able then unset traces will be invoked.\n\n                     When an unset trace is invoked, the variable\n                     has  already been deleted: it will appear to\n                     be undefined with no traces.   If  an  unset\n                     occurs  because  of a procedure return, then\n                     the trace will be invoked  in  the  variable\n                     context  of the procedure being returned to:\n                     the stack frame of the  returning  procedure\n                     will  no  longer exist.  Traces are not dis-\n                     abled during unset traces, so  if  an  unset\n                     trace   command  creates  a  new  trace  and\n                     accesses the variable,  the  trace  will  be\n                     invoked.   Any  errors  in  unset traces are\n                     ignored.\n\n                     If there are multiple traces on  a  variable\n                     they are invoked in order of creation, most-\n                     recent  first.   If  one  trace  returns  an\n                     error,  then  no  further traces are invoked\n                     for the variable.  If an array element has a\n                     trace  set, and there is also a trace set on\n                     the array as a whole, the trace on the over-\n                     all  array  is invoked before the one on the\n                     element.\n\n                     Once created, the trace  remains  in  effect\n                     either  until  the trace is removed with the\n                     trace  remove  variable  command   described\n                     below, until the variable is unset, or until\n                     the interpreter is  deleted.   Unsetting  an\n                     element  of  array will remove any traces on\n                     that element, but will not remove traces  on\n                     the overall array.\n\n                     This command returns an empty string.\n\n       trace remove type name opList commandPrefix\n              Where  type  is  either command, execution or vari-\n              able.\n\n              trace remove command name opList commandPrefix\n                     If there is a trace set on command name with\n                     the  operations  and command given by opList\n                     and  commandPrefix,  then   the   trace   is\n                     removed,  so  that  commandPrefix will never\n                     again be invoked.  Returns an empty  string.\n                     If  name  does  not  exist, the command will\n                     throw an error.\n\n              trace remove execution name opList commandPrefix\n                     If there is a trace set on command name with\n                     the  operations  and command given by opList\n                     and  commandPrefix,  then   the   trace   is\n                     removed,  so  that  commandPrefix will never\n                     again be invoked.  Returns an empty  string.\n                     If  name  does  not  exist, the command will\n                     throw an error.\n\n              trace remove variable name opList commandPrefix\n                     If there is a trace  set  on  variable  name\n                     with  the  operations  and  command given by\n                     opList and commandPrefix, then the trace  is\n                     removed,  so  that  commandPrefix will never\n                     again be invoked.  Returns an empty  string.\n\n       trace info type name\n              Where  type  is  either command, execution or vari-\n              able.\n\n              trace info command name\n                     Returns a list containing  one  element  for\n                     each  trace  currently  set on command name.\n                     Each element of the list is  itself  a  list\n                     containing   two  elements,  which  are  the\n                     opList and commandPrefix associated with the\n                     trace.   If  name  does  not have any traces\n                     set, then the result of the command will  be\n                     an  empty  string.   If name does not exist,\n                     the command will throw an error.\n\n              trace info execution name\n                     Returns a list containing  one  element  for\n                     each  trace  currently  set on command name.\n                     Each element of the list is  itself  a  list\n                     containing   two  elements,  which  are  the\n                     opList and commandPrefix associated with the\n                     trace.   If  name  does  not have any traces\n                     set, then the result of the command will  be\n                     an  empty  string.   If name does not exist,\n                     the command will throw an error.\n\n              trace info variable name\n                     Returns a list containing  one  element  for\n                     each  trace  currently set on variable name.\n                     Each element of the list is  itself  a  list\n                     containing   two  elements,  which  are  the\n                     opList and commandPrefix associated with the\n                     trace.   If  name does not exist or does not\n                     have any traces set, then the result of  the\n                     command will be an empty string.\n\n       For  backwards  compatibility, three other subcommands are\n       available:\n\n              trace variable name ops command\n                     This is equivalent  to  trace  add  variable\n                     name ops command.\n\n              trace vdelete name ops command\n                     This  is equivalent to trace remove variable\n                     name ops command\n\n              trace vinfo name\n                     This is equivalent to  trace  info  variable\n                     name\n\n       These  subcommands  are  deprecated  and  will  likely  be\n       removed in a future version of Tcl.   They  use  an  older\n       syntax  in which array, read, write, unset are replaced by\n       a, r, w and u respectively, and the ops argument is not  a\n       list, but simply a string concatenation of the operations,\n       such as rwua.\n\nEXAMPLES\n       Print a message whenever either of  the  global  variables\n       foo  and  bar  are  updated, even if they have a different\n       local name at the time (which can be done with  the  upvar\n       command):\n              proc tracer {varname args} {\n                  upvar #0 $varname var\n                  puts '$varname was updated to be \\'$var\\''\n              }\n              trace add variable foo write 'tracer foo'\n              trace add variable bar write 'tracer bar'\n\n       Ensure that the global variable foobar always contains the\n       product of the global variables foo and bar:\n              proc doMult args {\n                  global foo bar foobar\n                  set foobar [expr {$foo * $bar}]\n              }\n              trace add variable foo write doMult\n              trace add variable bar write doMult\n\n       Print a trace of what commands  are  executed  during  the\n       processing of a Tcl procedure:\n              proc x {} { y }\n              proc y {} { z }\n              proc z {} { puts hello }\n              proc report args {puts [info level 0]}\n              trace add execution x enterstep report\n              x\n                -> report y enterstep\n                  report z enterstep\n                  report {puts hello} enterstep\n                  hello\n\nSEE ALSO\n       set(n), unset(n)\n\nKEYWORDS\n       read, command, rename, variable, write, trace, unset\n\n\n\nTcl                            8.4                       trace(n)\n",
"instantiate_example_design": "instantiate_example_design\n\nDescription: \nCreates an example design from a predefined template in an open project.\n\nSyntax: \ninstantiate_example_design  [-design <arg>] [-hier <arg>] [-project <arg>]\n                            [-project_location <arg>] [-options <args>]\n                            [-quiet] [-verbose] <template>\n\nReturns: \nReturns the name of the template applied.\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-design]            Block Design Name\n  [-hier]              Hierarchy Block\n  [-project]           Project Name\n  [-project_location]  Project location\n                       Default: .\n  [-options]           Configurable options\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <template>           Configurable Design Name\n\nCategories: \nIPIntegrator\n\nDescription:\n\n  This command creates an example design from a predefined template in an\n  open project. The target part specified by the open project must be\n  compatible with the example design, as defined in the SUPPORTED_PARTS\n  property of the example, or an error is returned.\n\n  For the embedded processor example designs, base_microblaze and base_zynq,\n  the example design must be created in an open block design in the Vivado IP\n  integrator. Embedded processor example designs require the use of a board\n  as defined by the BOARD_PART property, rather than a target part. Refer to\n  the current_board_part command for more information.\n\n  The command returns the name of the example design used and a transcript of\n  commands; or it returns an error if it fails.\n\nArguments:\n\n  -design <arg> - (Optional) For embedded processor example designs, this\n  option specifies the name of the open and current block design to\n  instantiate the example design into. This option is required for embedded\n  processor example designs. If -design is not specified, an error is\n  returned.\n\n  -hier - (Optional) Hierarchy Block\n\n  -options <args> - (Optional) Specify the values of configurable properties\n  of the example design.\n\n  Note: The configurable properties (CONFIG.*) of an example design can be\n  returned by the report_property or get_property commands.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <template> - Specifies the template design to be instantiated into the\n  specified design. The template can be specified by name, or as an object\n  returned by the get_example_designs command.\n\nExamples:\n\n  The following example creates a new project as specified, overwriting an\n  existing project of the same name if one is found, specifies the BOARD_PART\n  property for the project, creates a new empty block design in the Vivado IP\n  integrator, and then instantiates the Zynq embedded processor example\n  design:\n\n    create_project zynq1 -force  \n    set_property BOARD_PART em.avnet.com:zed:1.3 [current_project]  \n    create_bd_design myFirstZynq  \n    instantiate_example_design -design myFirstZynq \\  \n    [lindex [get_example_designs] 1] \n    \n\n  This example reports the configurable properties of the specified example\n  design:\n\n    \n    report_property [lindex [get_example_designs] 3] CONFIG.* \n    \n\n  This example creates a new empty project as specified, sets a target BOARD\n  for the project, creates and opens a new empty block design, and then\n  instantiates the configurable example design:\n\n    \n    create_project mb1 C:/Data/Vivado_Tutorial/Tutorial_Created_Data/mb1   \n    set_property board_part xilinx.com:kcu105:part0:1.1 [current_project]  \n    create_bd_design design_1  \n    instantiate_example_design -design design_1 \\  \n       -options { Data_Cache.VALUE 8K Include_DDR4.VALUE true \\  \n       Local_memory.VALUE 128K }\\  \n    xilinx.com:design:config_mb:1.0    \n    \n\nSee Also:\n\n   *  create_bd_design\n   *  create_project\n   *  get_example_designs\n   *  set_property\n",
"open_project": "open_project\n\nDescription: \nOpen a Vivado project file (.xpr)\n\nSyntax: \nopen_project  [-part <arg>] [-read_only] [-quiet] [-verbose] <file>\n\nReturns: \nopened project object\n\nUsage: \n  Name          Description\n  -------------------------\n  [-part]       Open the project using this part (overrides project's part)\n  [-read_only]  Open the project in read-only mode\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <file>        Project file to be read\n\nCategories: \nProject\n\nDescription:\n\n  Opens the specified Vivado Design Suite project file (.xpr), or the project\n  file for the Vivado Lab Edition (.lpr).\n\n  Note: The open_project command has a different command syntax in the Vivado\n  Lab Edition. The -part option is not supported because the Vivado Lab\n  Edition project (.lpr) does not specify a target part. The\n  current_hw_target and current_hw_device commands determine the target part.\n\n  This command returns a transcript of its process and the name of the\n  created project, or returns an error if it fails.\n\nArguments:\n\n  -part <arg> - (Optional) Specify a target part to use when opening the\n  project. This option lets you change the speed grade of the part used by a\n  saved project, or change early availability parts for production parts of\n  the same device and package. This option is not supported in Vivado Lab\n  Edition.\n\n  Note: The use of -part is limited in terms of the range of parts that can\n  be used, and can result in an error when opening the project if an\n  incompatible part is specified.\n\n  -read_only - (Optional) Open the project in read only mode. You will not be\n  able to save any modifications to the project unless you use the\n  save_project_as command to save the project to a new editable project.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The project file to open. You must include both the\n  path to the file and the .xpr file extension.\n\nExamples:\n\n  The following example opens the project named my_project1 located in the\n  Designs directory.\n\n    open_project C:/Designs/project1.xpr  \n    \n\n  Note: The project must be specified with the .xpr extension for the tool to\n  recognize it as a project file. The path to the file must be specified\n  along with the project file name or the tool will return an error that it\n  cannot find the specified file.\n\nSee Also:\n\n   *  close_project\n   *  create_project\n   *  current_hw_device\n   *  current_hw_target\n   *  current_project\n",
"improve_timing": "improve_timing\n\nDescription: \nAutomatically place ports and leaf-level instances\n\nSyntax: \nimprove_timing  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nTools\n",
"move_files": "move_files\n\nDescription: \nMoves the files from one fileset to another while maintaining all of their original properties.\n\nSyntax: \nmove_files  [-fileset <arg>] [-of_objects <args>] [-quiet] [-verbose]\n            [<files>...]\n\nReturns: \nlist of files that were moved\n\nUsage: \n  Name           Description\n  --------------------------\n  [-fileset]     Destination fileset name\n  [-of_objects]  Reconfig Modules to move the files to\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<files>]      Name of the files to be moved\n\nCategories: \nProject, Simulation\n\nDescription:\n\n  Moves files returned by the get_files command from one fileset to another\n  while maintaining the properties on the files.\n\n  This command returns the list of files that were moved, or an error if the\n  command fails.\n\nArguments:\n\n  -fileset <arg> - (Optional) The destination fileset to which the specified\n  source files should be moved. If no fileset is specified the files are\n  moved to the sources_1 fileset by default. An error is returned if the\n  specified fileset does not exist.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Optional) One or more file objects returned by the get_files\n  command.\n\n  Note: You must specify file objects returned by the get_files command, and\n  not simply specify file names.\n\nExamples:\n\n  The following example moves the file, top_full.xdc, to the constrs_2 fileset.\n\n    move_files -fileset constrs_2 [get_files top_full.xdc] \n    \n\nSee Also:\n\n   *  get_files\n",
"get_noc_channels": "get_noc_channels\n\nDescription: \nGet NOC physical channels\n\nSyntax: \nget_noc_channels  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                  [-quiet] [-verbose] [<patterns>]\n\nReturns: \nnoc_channel\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the noc_channel of these noc_component.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match noc_channel against patterns\n                 Default: *\n\nCategories: \nNOC, Object\n",
"get_io_standards": "get_io_standards\n\nDescription: \nGet a list of IO standards.\n\nSyntax: \nget_io_standards  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                  [-quiet] [-verbose] [<patterns>]\n\nReturns: \nIO standards\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the IO standards of these bels, sites, package_pins, \n                 io_banks, ports.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match IO standards against patterns\n                 Default: *\n\nCategories: \nDevice, Object\n\nDescription:\n\n  Get a list of IOSTANDARDs available for use on the target device.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_io_standards based on property values on the objects. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of IOSTANDARDs object, 'NAME', 'IS_DCI' and 'IS_DIFFERENTIAL'\n  are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the IOSTANDARDs of package_pin, site,\n  bel, io_bank, and port objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match IOSTANDARDs against the specified patterns.\n  The default pattern is the wildcard `*` which gets a list of all\n  IOSTANDARDs for use on the target part. More than one pattern can be\n  specified to find multiple IOSTANDARDs based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces {} to present the\n  list as a single element.\n\nExamples:\n\n  The following example gets a list of differential IOSTANDARDs available for\n  use on the target device:\n\n    get_io_standards -filter {IS_DIFFERENTIAL} \n    \n\n  Note: If there are no objects matching the pattern you will get a warning.\n\nSee Also:\n\n   *  list_property\n   *  report_property\n",
"copy_constraints": "copy_constraints\n\nDescription: \ncreates a copy of given constraint set\n\nSyntax: \ncopy_constraints  [-constrset <arg>] [-quiet] [-verbose] <name>\n\nReturns: \nreturns the copied constraint set object\n\nUsage: \n  Name          Description\n  -------------------------\n  [-constrset]  Contraint FileSet from which files are copied\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <name>        Name of the copied constraint set\n\nCategories: \nProject\n",
"after": "after(n)              Tcl Built-In Commands              after(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       after - Execute a command after a time delay\n\nSYNOPSIS\n       after ms\n\n       after ms ?script script script ...?\n\n       after cancel id\n\n       after cancel script script script ...\n\n       after idle ?script script script ...?\n\n       after info ?id?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command is used to delay execution of the program or\n       to execute a command in background sometime in the future.\n       It  has  several forms, depending on the first argument to\n       the command:\n\n       after ms\n              Ms must be an integer giving a  time  in  millisec-\n              onds.   The  command sleeps for ms milliseconds and\n              then returns.  While the command  is  sleeping  the\n              application does not respond to events.\n\n       after ms ?script script script ...?\n              In  this  form the command returns immediately, but\n              it arranges for a Tcl command  to  be  executed  ms\n              milliseconds  later  as an event handler.  The com-\n              mand will be executed exactly once,  at  the  given\n              time.  The delayed command is formed by concatenat-\n              ing all the script arguments in the same fashion as\n              the  concat  command.  The command will be executed\n              at global level (outside the  context  of  any  Tcl\n              procedure).  If an error occurs while executing the\n              delayed command then the background error  will  be\n              reported  by  the  command  registered with  interp\n              bgerror.  The after command returns  an  identifier\n              that  can  be  used  to  cancel the delayed command\n              using after cancel.\n\n       after cancel id\n              Cancels the execution of a delayed command that was\n              previously  scheduled.   Id indicates which command\n              should be canceled;  it must have been  the  return\n              value  from  a previous after command.  If the com-\n              mand given by id has already been executed then the\n              after cancel command has no effect.\n\n       after cancel script script ...\n              This  command  also  cancels  the  execution  of  a\n              delayed command.  The script arguments are concate-\n              nated  together  with  space separators (just as in\n              the concat command).  If there is a pending command\n              that  matches  the string, it is cancelled and will\n              never be executed;  if no such command is currently\n              pending  then  the  after  cancel  command  has  no\n              effect.\n\n       after idle script ?script script ...?\n              Concatenates the  script  arguments  together  with\n              space  separators  (just as in the concat command),\n              and arranges for the resulting script to be  evalu-\n              ated later as an idle callback.  The script will be\n              run exactly once, the next time the event  loop  is\n              entered  and  there  are no events to process.  The\n              command returns an identifier that can be  used  to\n              cancel  the delayed command using after cancel.  If\n              an error occurs while executing the script then the\n              background  error  will  be reported by the command\n              registered with  interp bgerror.\n\n       after info ?id?\n              This command  returns  information  about  existing\n              event handlers.  If no id argument is supplied, the\n              command returns a list of the identifiers  for  all\n              existing  event  handlers created by the after com-\n              mand for this interpreter.  If id is  supplied,  it\n              specifies  an  existing  handler; id must have been\n              the return value from some previous call  to  after\n              and  it  must  not  have triggered yet or been can-\n              celled.  In this case the command  returns  a  list\n              with  two  elements.  The first element of the list\n              is the script associated with id,  and  the  second\n              element  is  either  idle or timer to indicate what\n              kind of event handler it is.\n\n       The after ms and after idle forms of  the  command  assume\n       that  the  application  is event driven:  the delayed com-\n       mands will not be executed unless the  application  enters\n       the  event  loop.   In  applications that are not normally\n       event-driven, such as tclsh, the event loop can be entered\n       with the vwait and update commands.\n\nEXAMPLES\n       This defines a command to make Tcl do nothing at all for N\n       seconds:\n              proc sleep {N} {\n                 after [expr {int($N * 1000)}]\n              }\n\n       This arranges for the command wake_up to be run  in  eight\n       hours (providing the event loop is active at that time):\n              after [expr {1000 * 60 * 60 * 8}] wake_up\n\n       The  following command can be used to do long-running cal-\n       culations (as  represented  here  by  ::my_calc::one_step,\n       which  is  assumed  to return a boolean indicating whether\n       another step should be performed) in a step-by-step  fash-\n       ion, though the calculation itself needs to be arranged so\n       it can work step-wise.  This technique is extra careful to\n       ensure   that  the  event  loop  is  not  starved  by  the\n       rescheduling of processing steps (arranging for  the  next\n       step  to  be  done  using an already-triggered timer event\n       only when the event queue has been drained) and is  useful\n       when  you  want to ensure that a Tk GUI remains responsive\n       during a slow task.\n              proc doOneStep {} {\n                 if {[::my_calc::one_step]} {\n                    after idle [list after 0 doOneStep]\n                 }\n              }\n              doOneStep\n\n\nSEE ALSO\n       concat(n), interp(n), update(n), vwait(n)\n\n\nKEYWORDS\n       cancel, delay, idle callback, sleep, time\n\n\n\nTcl                            7.5                       after(n)\n",
"flush": "flush(n)              Tcl Built-In Commands              flush(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       flush - Flush buffered output for a channel\n\nSYNOPSIS\n       flush channelId\n_________________________________________________________________\n\n\nDESCRIPTION\n       Flushes any output that has been buffered for channelId.\n\n       ChannelId  must  be an identifier for an open channel such\n       as a Tcl standard channel (stdout or stderr),  the  return\n       value  from an invocation of open or socket, or the result\n       of a channel creation command provided by a Tcl extension.\n       The channel must have been opened for writing.\n\n       If  the  channel  is in blocking mode the command does not\n       return until all the buffered output has been  flushed  to\n       the  channel.  If  the channel is in nonblocking mode, the\n       command may return before all  buffered  output  has  been\n       flushed;  the  remainder will be flushed in the background\n       as fast as the underlying file or device is able to absorb\n       it.\n\nEXAMPLE\n       Prompt  for  the  user  to type some information in on the\n       console:\n              puts -nonewline 'Please type your name: '\n              flush stdout\n              gets stdin name\n              puts 'Hello there, $name!'\n\n\nSEE ALSO\n       file(n), open(n), socket(n), Tcl_StandardChannels(3)\n\n\nKEYWORDS\n       blocking, buffer, channel, flush, nonblocking, output\n\n\n\nTcl                            7.5                       flush(n)\n",
"all_rams": "all_rams\n\nDescription: \nGet a list of ram cells in the current design\n\nSyntax: \nall_rams  [-quiet] [-verbose]\n\nReturns: \nlist of ram cell objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of all the RAM cell objects present in the current instance,\n  including Block RAMS, Block RAM FIFOs, and Distributed RAMS. These RAM cell\n  objects can be assigned to a variable or passed into another command.\n\n  To get a list of specific RAM cells in the design, use the filter command\n  to filter the results returned by all_rams based on properties assigned to\n  the RAM cells. Properties of an object can be returned by the list_property\n  or report_property commands.\n\n  The all_rams command is scoped to return the objects hierarchically, from\n  the top-level of the design or from the level of the current instance. By\n  default the current instance is defined as the top level of the design, but\n  can be changed by using the current_instance command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns all RAM cells in the design:\n\n    all_rams \n    \n\n  This example returns all RAM cells in the design, and filters the results\n  to return only the FIFO block memories:\n\n    filter [all_rams] {PRIMITIVE_SUBGROUP == fifo} \n    \n\n  The following example sets the current instance, and returns all RAM\n  objects hierarchically from the level of the current instance:\n\n    current_instance usbEngine0  \n    all_rams \n    \n\nSee Also:\n\n   *  all_cpus\n   *  current_instance\n   *  filter\n   *  get_cells\n   *  list_property\n   *  report_property\n",
"create_report_config": "create_report_config\n\nDescription: \nCreate Configurable Report objects.\n\nSyntax: \ncreate_report_config  [-report_name <arg>] [-report_type <arg>] -steps <args>\n                      -runs <args> [-options <arg>] [-copy_of <args>] [-quiet]\n                      [-verbose]\n\nReturns: \nList of configurable report objects\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-report_name]  Name of configurable report object created. Can not be used\n                  when creating multiple objects\n  [-report_type]  Type of configurable report object(s) created. Not required\n                  with '-copy_of'\n  -steps          List of run step(s) for object(s) created\n  -runs           List of run(s) for object(s) created\n  [-options]      options for report command to be set at creation of \n                  configurable report object, except with '-copy_of'\n  [-copy_of]      configurable report object to be copied\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nObject, Report\n\nDescription:\n\n  This command lets you create configurable report objects to add to\n  synthesis and implementation runs, or to add to Report Strategies. A report\n  object defines the report type and options that are run every time a\n  specified step of a synthesis or implementation design run is completed. A\n  Report Strategy lets you define a collection of report objects to associate\n  with many synthesis and implementation runs, and reuse at different stages\n  of the design flow. See the Vivado Design Suite User Guide: Implementation\n  (UG904) for more information.\n\n  Each report object has the `OPTIONS.MORE_OPTIONS` property, which lets you\n  specify command line options of the Tcl report_* command associated with\n  the report object. These command line options are used when the report is\n  generated during the synthesis or implementation run. You can specify the\n  command line options using the -options argument as described below, or by\n  manually setting the `OPTIONS.MORE_OPTIONS` property of an existing report\n  object using the set_property command. Refer to the specific report_*\n  command for information on the available command line options.\n\nArguments:\n\n  -report_name <arg> - (Optional) Specifies the name to assign to the report\n  when it is generated. When the name is not specified, the name will be\n  automatically defined as a combination of the -runs, -steps, and\n  -report_type options.\n\n  Note: The -report_name option cannot be specified when creating multiple\n  report objects. In this case the report name will be automatically defined.\n\n  -report_type <arg> - (Optional) Specifies the report command to be run by\n  the report object. Most of the report_* Tcl commands can be specified as\n  the report type to create.\n\n  Note: The -report_type cannot be specified when using the -copy_of option\n  to create a copy of an existing report object.\n\n  -steps <args> - (Required) Specifies the synthesis or implementation\n  process steps to associate the report object with. The object can be\n  specified for use with multiple steps to have the report rerun at each\n  step, in which case the name of the report will be automatically defined.\n  Accepted values include all of the available process steps for synthesis or\n  implementation: synth_design, opt_design, place_design, route_design...\n\n  -runs <args> - (Required) Specifies the synthesis or implementation design\n  run to associate the report object with. The object can be specified for\n  use with multiple design runs, in which case the name of the report will be\n  automatically defined.\n\n  -options <arg> - (Optional) Specifies various command line options for the\n  specific report_* command being run. See the specific report command for\n  the available options. This option can not be specified when using the\n  -copy_of option to create a copy of an existing report object.\n\n  Note: There is no checking provided of the -options to ensure the options\n  are correct and applicable to the report type specified. If you indicate\n  options that are incorrect the report will return an error when it is run.\n\n  -copy_of <arg> - (Optional) Specifies a report object to use as a template\n  for the new report object. The new report object can be associated with new\n  -steps and -runs.\n\n  Note: The -report_type and -options cannot be specified when using the\n  -copy_of option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example defines a new report object with the specified name\n  and type and associates it with the route_design step of the impl_1 run:\n\n    create_report_config -report_name post_route_datasheet -report_type report_datasheet \\  \n    -steps route_design -runs impl_1 \n    \n\n  This example is the same as the prior example, except it does not specify\n  the name, and so the report object is named automatically as shown in the\n  return value:\n\n    create_report_config -report_type report_datasheet -steps route_design -runs impl_1  \n    impl_1_route_report_datasheet_0 \n    \n\n  The following example creates a new report object for the timing summary\n  report, with the specified command-line options, and associates the object\n  with multiple steps of an implementation run:\n\n    create_report_config -report_type report_timing_summary \\  \n    -steps {opt_design place_design route_design} -runs {impl_2}\\  \n    -options {-no_detailed_paths -report_unconstrained} \n    \n\nSee Also:\n\n   *  delete_report_configs\n   *  generate_reports\n   *  get_report_configs\n   *  set_property\n",
"setup_pr_configurations": "setup_pr_configurations\n\nDescription: \nCreates minimum PR Configurations and Child Impl runs automatically based on the combination of Partition Instances and RMs\n\nSyntax: \nsetup_pr_configurations  [-partitions <args>] [-use_netlist] [-force]\n                         [-run <arg>] [-dfx_mode <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-partitions]   List of partition instances and reconfig modules pairs\n  [-use_netlist]  Use netlist for getting instances of partition_defs to \n                  creating PR Configurations\n  [-force]        Using force deletes active parent impl run's PR \n                  Configuration and it's child runs and PR Configurations, \n                  and then creates new PR Configurations and runs\n  [-run]          Parent impl run to which child impl runs and PR \n                  Configurations need to be created\n  [-dfx_mode]     dynamic function exchange mode\n                  Default: STANDARD\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nPartition\n\nDescription:\n\n  Automatically creates the minimum PR configurations and child\n  implementation runs based on the combination of Partition Instances and\n  Reconfigurable Modules.\n\n  In the Dynamic Function eXchange (DFX) design flow, the PR configuration lets\n  you specify a reconfigurable module (RM) to assign to a specific instance\n  of a Partition Definition (partitionDef). This flow lets you create unique\n  configurations of the design based on the combination of the core design\n  and one or more RMs. The DFX design flow requires the implementation of each\n  PR configuration, resulting in partial bitstreams for the RMs, but complete\n  bitstreams for each integrated configuration. Refer to the Vivado Design\n  Suite User Guide: Dynamic Function eXchange (UG909) for more information.\n\n  This command is designed to work automatically to create the needed PR\n  configurations and implementation runs for those configurations.\n\n  This command returns nothing if successful, or returns an error if the\n  command fails.\n\nArguments:\n\n  -partitions <arg> - (Optional) Specify a list of partition instances and\n  reconfigurable module pairs to assign to the PR configuration. The argument\n  must be specified as <partitionInstance>:<RM> pairs. This format lets you\n  assign different RMs to multiple instances of a single partitionDef in the\n  design.\n\n  -force - (Optional) Delete current PR configurations and configuration\n  runs, and create new PR configurations and runs.\n\n  -run <arg> - (Optional) Specify the parent run to use for the\n  implementation run of a PR configuration.\n\n  -dfx_mode <arg> - (Optional) Specifies the Dynamic Function eXchange mode.\n  It can either be 'STANDARD' or 'ABSTRACT SHELL'. 'STANDARD' mode takes full design\n  into consideration while implementing the reconfigurable modules but \n  'ABSTRACT SHELL' mode uses the shell for a single reconfigurable partition to \n  implement a single reconfigurable module. 'ABSTRACT SHELL' mode saves implementation \n  time compared to 'STANDARD' mode. 'STANDARD' mode is the default.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example automatically creates the necessary PR\n  configurations, and PR config implementation runs, to support the\n  partitionDefs and RMs in the project:\n\n    setup_pr_configurations \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  create_pr_configuration\n   *  create_reconfig_module\n   *  current_pr_configuration\n   *  delete_pr_configurations\n   *  get_pr_configurations\n",
"update_macro": "update_macro\n\nDescription: \nUpdate a macro\n\nSyntax: \nupdate_macro  [-absolute_grid] [-quiet] [-verbose] <macro> <rlocs>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-absolute_grid]  Use absolute grid for relative locations\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <macro>           Macro to update\n  <rlocs>           a list interleaved instances and site names\n\nCategories: \nXDC\n\nDescription:\n\n  Populate a previously created macro with leaf cells and relative placements.\n\n  A macro is made up of primitive, or leaf-level logic cells, and their\n  associated connections, positioned in a placement grid. The specified\n  relative locations, or <rlocs>, can be based on a relative grid, or on an\n  absolute grid, called an RPM_GRID. Refer to the Vivado Design Suite User\n  Guide: Implementation (UG904) for more information on absolute and relative\n  placement grids\n\n  A cell can only belong to a one macro. If you attempt to assign a\n  leaf-level cell to multiple macros, the Vivado tool will return an error.\n  If you attempt to assign a non-primitive cell to a macro, the tool will\n  return an error.\n\n  To change the contents of an existing macro, you must delete the macro with\n  delete_macro, recreate it with create_macro, and update it with new\n  contents. You cannot simply overwrite or modify an existing macro.\n\nArguments:\n\n  -absolute_grid - (Optional) Use to indicate that the <rlocs> are specified\n  in the absolute RPM_GRID.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <macro> - (Required) Specify the name of the macro to update.\n\n  <rlocs> - (Required) Specify the leaf-cells to include in the macro, and\n  their relative locations (RLOCs). When -absolute_grid is specified, the\n  location is based on actual device coordinates instead of relative\n  locations. The cells and RLOCs are specified as name-value pairs, with\n  multiple leaf-cells and RLOCs assigned to a single macro as follows:\n\n    {cell0 XmYn cell1 XmYn ... cellN XmYn} \n    \n\n  Where:\n\n   *  m = An integer representing the relative or absolute X coordinate of\n      the preceding cell.\n\n   *  n = An integer representing the relative or absolute Y coordinate of\n      the preceding cell.\n\n   *  Cell coordinates are relative to each other, unless the -absolute_grid\n      option has been specified.\n\n   *  The relative coordinates are based on a theoretical array of Slices,\n      located relative to each other.\n\n   *  The absolute coordinates are determined by the RPM_X and RPM_Y\n      properties from actual Slices of the target device. These can be\n      determined by the report_property command for selected sites.\n\nExamples:\n\n  The following example creates a macro named usbMacro0, sets the current\n  instance to the usbEngine0/u0 module, assigns three cells to the macro,\n  with a relative placement for each cell to have two of them placed inside\n  the same Slice, and the third placed in a vertically adjacent Slice:\n\n    create_macro usbMacro0  \n    current_instance usbEngine0/u0  \n    update_macro usbMacro0 {rx_active_reg X0Y0 \\  \n       rx_err_reg X0Y0 rx_valid_reg X0Y1} \n    \n\n  The following example creates a macro named usbMacro1, assigns three cells\n  to the macro using the hierarchical path to the leaf-cell, with absolute\n  coordinates specified for the cells in the macro:\n\n    create_macro usbMacro1  \n    set Site1 [get_sites SLICE_X8Y77]  \n    set Site2 [get_sites SLICE_X9Y77]  \n    set Site3 [get_sites SLICE_X8Y78]  \n    set RPM1 X[get_property RPM_X $Site1]Y[get_property RPM_Y $Site1]  \n    set RPM2 X[get_property RPM_X $Site2]Y[get_property RPM_Y $Site2]  \n    set RPM3 X[get_property RPM_X $Site3]Y[get_property RPM_Y $Site3]  \n    update_macro usbMacro1 -absolute_grid 'usbEngine1/u0/rx_active_reg $RPM1 \\  \n    usbEngine1/u0/rx_err_reg $RPM2 usbEngine1/u0/rx_valid_reg $RPM3' \n    \n\n  Note: In the prior example, notice the use of Tcl variables to capture the\n  Sites of interest, and extract the RPM_X and RPM_Y properties of those\n  sites for use in the update_macro command. Also notice the use of quotes\n  ('') instead of curly braces ({}) in the update_macro command. This is to\n  allow the Tcl shell to perform variable substitution of the command. Refer\n  to the Vivado Design Suite User Guide: Using Tcl Scripting (UG894) for more\n  information on variables and variable substitution.\n\n  This command reports the properties on the usbMacro1 macro to see the\n  absolute grid coordinates assigned to the cells in the macro:\n\n    report_property -all [get_macros usbMacro1] \n    \n\nSee Also:\n\n   *  create_macro\n   *  delete_macros\n   *  get_macros\n   *  get_property\n   *  get_sites\n   *  place_design\n   *  report_property\n",
"generate_pblock": "generate_pblock\n\nDescription: \nGenerate PBLOCK by exclude static \n\nSyntax: \ngenerate_pblock  [-cell <arg>] [-inverse_pblock <arg>] [-nested_pblock <arg>]\n                 [-nested_width <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-cell]            Specify cell to add to pblock.\n  [-inverse_pblock]  Specify name of the inverse pblock.  The pblock will \n                     cover everything that the static pblock does not.\n  [-nested_pblock]   Specify name of nested pblock inside inverse_pblock left\n                     adjacent to static pblock.\n  [-nested_width]    Specify the width of the nested pblock.  The nested \n                     pblock height is the same as the adjacent static pblock.\n                     Default: 3\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n\nCategories: \nFileIO\n",
"open_report": "open_report\n\nDescription: \nOpen report from .rpx file\n\nSyntax: \nopen_report  [-file <arg>] [-append] [-console] [-name <arg>] [-return_string]\n             [-quiet] [-verbose] <rpx>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-console]        Send output to console\n  [-name]           Output the results to GUI panel with this name\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <rpx>             Report data file to be read\n\nCategories: \nReport\n\nDescription:\n\n  Read an RPX (protobuf) file into memory to reload report results into the\n  Vivado Design Suite. This command requires an open implemented or\n  synthesized design.\n\n  The RPX file is written by report commands such as report_timing_summary,\n  and report_pulse_width, that support the -rpx option, and is an interactive\n  report file that can be reloaded into memory. Reloading the report into\n  memory, reconnects the objects in the report to design objects so that\n  cross-selection between the report in the Vivado IDE and the design is\n  enabled.\n\n  This command returns the report results to the Tcl console by default, or\n  when -console is specified, or opens a report window in the Vivado IDE when\n  -name is specified. This command returns an error if it fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -console - (Optional) Output the report results to the Tcl console in the\n  Vivado IDE or Tcl shell mode. This is the default behavior of the\n  open_report command if no other options are specified.\n\n  -name <arg> - (Optional) Specifies the name of the results set for the GUI.\n  Timing summary reports in the GUI can be deleted by the\n  delete_timing_results command.\n\n  Note: Opening the RPX file in a named window in the VIvado IDE links\n  objects between the report and the design for cross-selection.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <rpx> - Specify the name of the RPX file to load into memory.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example reads the specified RPX file an opens a named report\n  in the Vivado IDE:\n\n    open_report -name RPX1 design1_summary.rpx \n    \n\nSee Also:\n\n   *  check_timing\n   *  report_bus_skew\n   *  report_config_timing\n   *  report_datasheet\n   *  report_drc\n   *  report_methodology\n   *  report_power\n   *  report_pulse_width\n   *  report_timing\n   *  report_timing_summary\n",
"tandem_verify": "tandem_verify\n\nDescription: \nTCL task to verify Tandem Stage-1 PDIs\n\nSyntax: \ntandem_verify  -reference_dcp <arg> -untrusted_dcp <arg> [-full_check <arg>]\n               [-quiet] [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  -reference_dcp  Path to trusted reference DCP file\n  -untrusted_dcp  Path to untrusted DCP file\n  [-full_check]   Default behavior is to report the first difference only; if\n                  this option is set to true, tandem_verify will report \n                  complete differences\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \n\n",
"get_pblocks": "get_pblocks\n\nDescription: \nGet a list of Pblocks in the current design\n\nSyntax: \nget_pblocks  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n             [-include_nested_pblocks] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of Pblock objects\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-regexp]                  Patterns are full regular expressions\n  [-nocase]                  Perform case-insensitive matching (valid only \n                             when -regexp specified)\n  [-filter]                  Filter list with expression\n  [-of_objects]              Get Pblocks of these cells\n  [-include_nested_pblocks]  Display the the list of nested pblocks\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n  [<patterns>]               Match Pblock names against patterns\n                             Default: *\n\nCategories: \nObject, Floorplan, XDC\n\nDescription:\n\n  Gets a list of Pblocks defined in the current project that match a specific\n  pattern. The default command gets a list of all Pblocks in the project.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_pblocks based on property values on the Pblocks. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the Pblock object, 'NAME' and 'GRID_RANGES' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the Pblocks to which the specified cells\n  are assigned.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -include_nested_pblocks - (Optional) Also get and return any Pblocks nested\n  inside the group of Pblocks returned by the specified search. The nested\n  Pblocks will be added to the list of Pblock objects returned by this\n  command. Refer to the create_pblock command for an example of nesting\n  Pblocks.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match Pblocks against the specified patterns. The\n  default pattern is the wildcard `*` which returns all Pblocks in the\n  project.\n\nExamples:\n\n  The following example gets a list of all Pblocks in the current project:\n\n    get_pblocks \n    \n\n  This example gets a list of all Pblocks which do not have a Slice Range\n  defined:\n\n    get_pblocks -filter {GRIDTYPES !~ SLICE} \n    \n\n  The following example gets the Pblock assignments of the specified cell:\n\n    get_pblocks -of [get_cells CORE/BR_TOP/RLD67_MUX/REG_PMBIST_C1]  \n    \n\n  This example returns the specified Pblock, including any nested Pblocks:\n\n    get_pblocks -include_nested_pblocks usbTop \n    \n\nSee Also:\n\n   *  add_cells_to_pblock\n   *  create_pblock\n   *  get_cells\n   *  place_pblocks\n   *  resize_pblock\n",
"decrypt_bitstream": "decrypt_bitstream\n\nDescription: \nDecrypt an AES-GCM encrypted bitstream\n\nSyntax: \ndecrypt_bitstream  -encrypted_file <arg> -keyfile <arg> [-force] [-quiet]\n                   [-verbose] <file>\n\nUsage: \n  Name             Description\n  ----------------------------\n  -encrypted_file  Input AES-GCM encrypted bitstream (.bit or .rbt)\n  -keyfile         File containing encryption keys\n  [-force]         Overwrite existing file\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <file>           Output decrypted bitstream (.bit, .bin or .rbt)\n\nCategories: \nFileIO\n\nDescription:\n\n  During implementation of secure encrypted UltraScale architecture designs,\n  bitstream-level verification must be performed on the final bitstream\n  against the 'golden' bitstream of the Xilinx tested Security Monitor\n  (SecMon) IP.\n\n  The decrypt_bitstream command takes an AES-GCM encrypted bitstream file\n  (.bit or .rbt) from an implemented design that incorporates the SecMon IP,\n  and an encryption key file (.nky or .nkz), and returns an unencrypted\n  bitstream file. The decrypted bitstream can then be used to complete the\n  bitstream verification process.\n\n  This command returns the requested file if successful, or returns an error\n  if it fails.\n\nArguments:\n\n  -encrypted_file <arg> - (Required) Specifies the AES-GCM encrypted\n  bitstream (.bit or .rbt) to be decrypted.\n\n  -keyfile <arg> - (Required) Specifies the name of the encryption key file\n  (.nky or .nkz). This is necessary for decrypting the encrypted bitstream.\n\n  -force - (Optional) Overwrite an existing file of the same name.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Write the decrypted bitstream in standard format (.bit)\n  or without header information (.bin).\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExample:\n\n  The following example decrypts the specified encrypted bitstream:\n\n    decrypt_bitstream -encrypted_file C:/Data/myDesign.bit \\  \n       -keyfile C:/Data/key.nky -force C:/Data/myDesign_decrypted.bit \n    \n\nSee Also:\n\n   *  write_bitstream\n",
"continue": "continue(n)           Tcl Built-In Commands           continue(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       continue - Skip to the next iteration of a loop\n\nSYNOPSIS\n       continue\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  is  typically  invoked inside the body of a\n       looping command such as  for  or  foreach  or  while.   It\n       returns  a  TCL_CONTINUE  code,  which  causes  a continue\n       exception to occur.   The  exception  causes  the  current\n       script  to be aborted out to the innermost containing loop\n       command, which then continues with the next  iteration  of\n       the  loop.   Catch  exceptions  are  also handled in a few\n       other situations, such as the catch command and the outer-\n       most scripts of procedure bodies.\n\nEXAMPLE\n       Print  a line for each of the integers from 0 to 10 except\n       5:\n              for {set x 0} {$x<10} {incr x} {\n                 if {$x == 5} {\n                    continue\n                 }\n                 puts 'x is $x'\n              }\n\n\nSEE ALSO\n       break(n), for(n), foreach(n), return(n), while(n)\n\n\nKEYWORDS\n       continue, iteration, loop\n\n\n\nTcl                                                   continue(n)\n",
"write_qor_suggestions": "write_qor_suggestions\n\nDescription: \nWrite QoR Suggestions to the given file\n\nSyntax: \nwrite_qor_suggestions  [-strategy_dir <arg>] [-tcl_output_dir <arg>] [-force]\n                       [-of_objects <args>] [-disable_dont_touch] [-quiet]\n                       [-verbose] <file>\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-strategy_dir]        Directory to create Strategy RQS & TCL files\n                         Values: If passed a directory path, for each \n                         strategy suggested one set of RQS and TCL files will\n                         be generated.\n  [-tcl_output_dir]      Directory to create TCL files\n                         Values: TCL files for the QoR suggestions will be \n                         generated in the provided directory.\n  [-force]               Overwrite existing suggestions file\n  [-of_objects]          List of QoR suggestion objects\n  [-disable_dont_touch]  write suggestion command having DONT_TOUCH to file\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n  <file>                 QoR suggestions file\n                         Values: A filename with alphanumeric characters and \n                         .rqs extension.\n\nCategories: \nFileIO, Feasibility, Timing\nDescription:\n\n  Write the QoR suggestions generated by the report_qor_suggestions command.\n  You can combine the suggestions from the latest report with suggestions\n  read into the design with read_qor_suggestions so that you can manage all\n  suggestions in a single RQS file.\n\n  To write out specific QoR suggestions, use the -of_objects option. When\n  this is not specified, all suggestions will be written.\n\n  The recommended way to manage suggestions is using RQS objects. However, it\n  is possible to view and execute the commands using Tcl. Specifying the\n  -tcl_output_dir option writes Tcl scripts for the automated suggestions\n  that are property based.\n\n  Implementation strategies that use machine learning to analyze the design\n  can be generated running report_qor_suggestions. If you specify the\n  -strategy_dir option, multiple Tcl files and one RQS file will be written\n  for each strategy. The Tcl files aid integration into project or non\n  project flows. The main RQS file should not be used as the suggestions are\n  contained in the run specific files along with strategy information.\n\n  This command returns the name of the output file created when successful,\n  or returns an error if it fails.\n\nArguments:\n\n  -strategy_dir <arg> - (Optional) Creates Tcl scripts and RQS files\n  containing commands to set up implementation runs based on machine\n  learning.\n\n  -tcl_output_dir <arg> - (Optional) Creates Tcl scripts containing XDC\n  commands.\n\n  -force - (Optional) Overwrite the specified file if it already exists.\n\n  -of_objects <args> - (Optional) Writes the specified QoR suggestion objects\n  as returned by the get_qor_suggestions command. This can be used to write\n  specific QoR suggestions based on specific properties.\n\n  -disable_dont_touch - (Optional) Allows suggestions to be generated that\n  reset the DONT_TOUCH property. This may lead to slightly lower MTBF and\n  signals no longer being available.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Optional) Write the QoR suggestions to the specified file. If no\n  file extension is specified, the .rqs extension will be added. If the\n  specified file exists, an error will be returned unless the -force option\n  is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  Note: At least one of strategy_dir, tcl_output_dir, or a file must be\n  specified.\n\nExamples:\n\n  Report QoR suggestions and write non-strategy suggestions to the specified\n  file.\n\n    report_qor_suggestions\n    write_qor_suggestions C:/Data/qor_results.rqs\n\n  Report QoR suggestions and write both strategy and non-strategy suggestions.\n\n    report_qor_suggestions\n    write_qor_suggestions -strategy_dir C:/Data/strategy_dir C:/Data/qor_suggestions.rqs\n\n  This creates one RQS file for each strategy suggestion, generating up to\n  three by default. Each RQS file includes one strategy suggestion and all\n  non-strategy suggestions. This means that for subsequent runs, one RQS file\n  per run is required.\n\n  Note: To make use of strategy suggestions, the directive for each\n  implementation command (opt_design, place_design, phys_opt_design, and\n  route_design) must be set to RQS. This can be configured automatically in\n  project mode by sourcing the project mode Tcl script generated for each RQS\n  file in the strategy_dir. There is also a non-project example Tcl script\n  that demonstrates this requirement.\n\nSee Also:\n\n   *  get_qor_suggestions\n   *  read_qor_suggestions\n   *  report_qor_suggestions\n\n",
"set_logic_unconnected": "set_logic_unconnected\n\nDescription: \nSets logic unconnected for output ports and output pins\n\nSyntax: \nset_logic_unconnected  [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   List of output ports and output pins\n\nCategories: \nXDC\n\nDescription:\n\n  Defines the specified output ports or pins as unconnected.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) A list of the output ports and pins to be affected.\n\nExamples:\n\n  The following example sets the specified port to unconnected:\n\n    set_logic_unconnected [get_ports OUT1] \n    \n\nSee Also:\n\n   *  set_logic_dc\n   *  set_logic_one\n   *  set_logic_zero\n",
"get_clocks": "get_clocks\n\nDescription: \nGet a list of clocks in the current design\n\nSyntax: \nget_clocks  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n            [-match_style <arg>] [-include_generated_clocks] [-quiet]\n            [-verbose] [<patterns>]\n\nReturns: \nlist of clocks\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-regexp]                    Patterns are full regular expressions\n  [-nocase]                    Perform case-insensitive matching (valid only \n                               when -regexp specified)\n  [-filter]                    Filter list with expression\n  [-of_objects]                Get clocks of these pins, nets, or cells\n  [-match_style]               Style of pattern matching, valid values are \n                               ucf, sdc\n                               Default: sdc\n  [-include_generated_clocks]  Include auto-inferred/generated_clocks also.\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n  [<patterns>]                 Match clock names against patterns\n                               Default: *\n\nCategories: \nSDC, XDC, Object\n\nDescription:\n\n  Gets a list of clocks in the current design that match a specified search\n  pattern. The default command gets a list of all clocks in the design, like\n  the all_clocks command.\n\n  Clocks can be created using the create_clock or the create_generated_clock\n  commands, or can be automatically generated by the tool, at the output of\n  an MMCM for instance.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_clocks based on property values on the clocks. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the clock object, 'PERIOD', 'WAVEFORM', and 'IS_GENERATED'\n  are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the clocks connected to the specified\n  cell, pin, port, or net objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -match_style - (Optional) Indicates that the search pattern matches UCF\n  constraints or SDC constraints. The default is SDC.\n\n  -include_generated_clocks - (Optional) Returns all clocks, including\n  generated clocks that match the specified pattern. This argument should be\n  used when clock <patterns> are specified in order to return generated\n  clocks of the specified master clocks.\n\n  Note: You can get just the generated clocks with the get_generated_clocks\n  command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match clocks against the specified patterns. The\n  default pattern is the wildcard `*` which gets all clocks in the project.\n  More than one pattern can be specified to find multiple clocks based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example gets a list of clocks matching the various search\n  patterns:\n\n    get_clocks {*clock *ck *Clk} \n    \n\n  Note: If there are no clocks matching the pattern you will get a warning.\n\n  The following example gets the master clock object, and all generated\n  clocks derived from that clock:\n\n    get_clocks -include_generated_clocks wbClk \n    \n\n  The following example gets all properties and property values attached to\n  the specified clock:\n\n    report_property -all [get_clocks wbClk] \n    \n\nSee Also:\n\n   *  all_clocks\n   *  create_clock\n   *  create_generated_clock\n   *  get_generated_clocks\n   *  list_property\n   *  report_property\n",
"synth_ip": "synth_ip\n\nDescription: \nGenerate a synthesis netlist for an IP\n\nSyntax: \nsynth_ip  [-force] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force regeneration of the netlist.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   All the objects for which a netlist needs to be generated for.\n\nCategories: \nProject, IPFlow\n\nDescription:\n\n  This command is used in the non-project flow to create a synthesized design\n  checkpoint file (DCP) to support the out-of-context (OOC) IP flow, or to\n  synthesize and implement an IP module in the OOC hierarchical design flow.\n  IP objects are specified by the get_ips command, or for the specified IP\n  core file (XCI) as specified by the get_files command.\n\n  Note: To enable this functionality, the IP core must be marked for OOC\n  generation by setting the GENERATE_SYNTH_CHECKPOINT property to true (or 1)\n  using the set_property command on the XCI file.\n\n  For project-based designs you would use the create_ip_run and launch_runs\n  commands. Refer to the Vivado Design Suite User Guide: Design Flows\n  Overview (UG892) for more information on Project and Non-Project Modes in\n  Vivado.\n\n  The synth_ip command will automatically generate any required target files\n  prior to synthesizing the IP core. The source files required to synthesize\n  the IP are copied into the IP run directory. Upon completion, any newly\n  generated OOC target files (dcp, stub files, funcsim netlists...) are\n  registered with the associated IP core.\n\nArguments:\n\n  -force - (Optional) Force re-synthesis of the specified IP objects, even if\n  the generated output products for the specified IP are all current.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) One or more IP objects to synthesize. The objects\n  can be specified as IP cores by the get_ips command, or as XCI files using\n  the get_files command.\n\nExamples:\n\n  The following example synthesizes the specified IP object, regenerating the\n  netlist if the synthesized core is up-to-date:\n\n    synth_ip [get_ips char_fifo] -force \n    \n\nSee Also:\n\n   *  create_ip_run\n   *  generate_targets\n   *  get_files\n   *  get_ips\n   *  launch_runs\n   *  synth_design\n   *  read_checkpoint\n",
"report_ssn": "report_ssn\n\nDescription: \nRun SSN analysis on the current package and pinout\n\nSyntax: \nreport_ssn  [-name <arg>] [-return_string] [-format <arg>] [-file <arg>]\n            [-append] [-phase] [-quiet] [-verbose]\n\nReturns: \nssn report\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-name]           Output the results to GUI panel with this name\n  [-return_string]  Return report as string\n  [-format]         Report format.  Valid arguments are CSV, HTML, TXT\n                    Default: csv\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-append]         Append the report to the specified file\n  [-phase]          Account for multi-clock phase in the analysis\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Perform a simultaneous switching noise (SSN) analysis of the current\n  design. The SSN analysis is an accurate method for predicting how output\n  switching affects interface noise margins. The calculation and estimates\n  are based on a range of variables intended to identify potential\n  noise-related issues in your design and should not be used as final design\n  'sign off' criteria.\n\n  SSN analysis provides estimates of the disruption that simultaneously\n  switching outputs can cause on other output ports in the I/O bank. The SSN\n  predictor incorporates I/O bank-specific electrical characteristics into\n  the prediction to better model package effects on SSN.\n\n  The report_ssn command can be affected by the temperature grade of the\n  selected device as defined by the -grade option of the\n  set_operating_condition command. Setting the temperature grade prior to\n  running noise analysis lets you see how noisy signals can be on Commercial,\n  Extended, Industrial, Q-Grade, or Military grade devices.\n\n  By default, report_ssn assumes that every port toggles asynchronously. This\n  results in a worst-case noise analysis, which may be overly pessimistic.\n  The -phase option lets you consider clocking information available in the\n  design to more accurately report SSN noise. Clocks must be defined using\n  the create_clock and create_generated_clock commands. The period, phase\n  shift and duty cycle of the generated clocks have significant impact on SSN\n  analysis.\n\n  The report_ssn command provides a detailed SSN analysis for Xilinx\n  UltraScale architecture devices, Virtex-7, Kintex-7, and Artix-7 devices.\n  The report is returned to the standard output, unless the -file,\n  -return_string, or -name arguments are specified.\n\n  Note: Not all parts support the report_ssn command. The Vivado Design Suite\n  will return an error if you run report_ssn on a target part that does not\n  support SSN analysis. You can query the SSN_REPORT property of a part to\n  see if it supports the command. Refer to the Examples for more information.\n\nArguments:\n\n  -name <arg> - (Optional) Specifies the name of the results to output to the\n  GUI.\n\n  -return_string - (Optional) Directs the output to a Tcl string. The Tcl\n  string can be captured by a variable definition and parsed or otherwise\n  processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -format [ CSV | HTML | TXT ] - (Optional) Specifies the format of the\n  output as either comma-separated values (CSV), HTML, or an ASCII (TXT)\n  file. The default output is CSV.\n\n  Note: The format applies when -file is specified, but is otherwise ignored.\n\n  -file <arg> - (Optional) Write the SSN report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - Append the output of the command to the specified file rather\n  than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -phase - (Optional) Consider clock switching cycles in SSN analysis to\n  provide a more accurate result.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example performs an SSN analysis on the current design,\n  formats the output as HTML, and writes the output to the specified file:\n\n    report_ssn -format html -file C:/Data/devSSN.html \n    \n\n  The following example performs an SSN analysis, with phase analysis, and\n  returns the output to a string which is stored in the specified variable:\n\n    set devSSN [report_ssn -phase -format html -return_string] \n    \n\n  Note: The -format argument in the preceding example is ignored in the\n  absence of -file.\n\n  The following example queries the part in the current project to see if it\n  supports the report_ssn command, and then gets a list of parts from the\n  same part family that support the command:\n\n    get_property SSN_REPORT [get_property PART [current_project]]  \n    get_parts -filter 'FAMILY == [get_property FAMILY [get_property PART \\  \n    [current_project]]] && SSN_REPORT' \n    \n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n   *  get_parts\n   *  get_property\n   *  reset_ssn\n   *  report_property\n   *  set_operating_condition\n",
"get_site_pips": "get_site_pips\n\nDescription: \nGet a list of site_pips from the given object.\n\nSyntax: \nget_site_pips  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n               [-quiet] [-verbose] [<patterns>]\n\nReturns: \nsite_pips\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the site_pips of these sites.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match site_pips against patterns\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Programmable interconnect points, or PIPs, provide the physical routing\n  paths on the device used to connect logic networks. This command returns a\n  list of PIPs on specified sites that match a specified search pattern. The\n  command requires a design to be open.\n\n  This command requires the use of the -of_objects option to specify the\n  sites to return PIPs from.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_site_pips based on property values on the site PIPs. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the PIP\n  object, 'IS_DIRECTIONAL' and 'FROM_PIN' are two of the properties that can\n  be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) This option can be used with the get_sites\n  command to return the PIPs of specified Sites.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match PIPs against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all PIPs for the\n  Sites specified by -of_objects. More than one search pattern can be\n  specified to find pins based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the pins of the specified BELs associated\n  with the specified range of sites on the device:\n\n    get_site_pips -of_objects [get_sites SLICE_X21Y92] \n    \n\nSee Also:\n\n   *  get_sites\n   *  list_property\n   *  report_property\n",
"create_msg_db": "create_msg_db\n\nDescription: \nCreate Message Db\n\nSyntax: \ncreate_msg_db  [-quiet] [-verbose] <file>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Message file to be created\n\nCategories: \nReport\n",
"generate_dsa_emu": "generate_dsa_emu\n\nDescription: \nUsed to generate the emulation section for DSAs.\n\nSyntax: \ngenerate_dsa_emu  [-dsa <arg>] [-platform <arg>] [-prop-json-path <arg>]\n                  [-output-dir-path <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-dsa]              The target DSA\n  [-platform]         The target PLATFORM\n  [-prop-json-path]   emu properties json file\n  [-output-dir-path]  Output path where to dump the emulation output\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n\nCategories: \nVitis, Platform, FileIO\n",
"foreach": "foreach(n)            Tcl Built-In Commands            foreach(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       foreach - Iterate over all elements in one or more lists\n\nSYNOPSIS\n       foreach varname list body\n       foreach varlist1 list1 ?varlist2 list2 ...? body\n_________________________________________________________________\n\n\nDESCRIPTION\n       The foreach command implements a loop where the loop vari-\n       able(s) take on values from one or  more  lists.   In  the\n       simplest case there is one loop variable, varname, and one\n       list, list, that is a list of values to assign to varname.\n       The  body  argument  is a Tcl script.  For each element of\n       list (in order from first to last),  foreach  assigns  the\n       contents  of  the element to varname as if the lindex com-\n       mand had been used to extract the element, then calls  the\n       Tcl interpreter to execute body.\n\n       In  the general case there can be more than one value list\n       (e.g., list1 and list2), and each value list can be  asso-\n       ciated  with  a list of loop variables (e.g., varlist1 and\n       varlist2).  During each iteration of the  loop  the  vari-\n       ables of each varlist are assigned consecutive values from\n       the corresponding list.  Values in each list are  used  in\n       order  from  first to last, and each value is used exactly\n       once.  The total number of loop iterations is large enough\n       to  use  up all the values from all the value lists.  If a\n       value list does not contain enough elements  for  each  of\n       its  loop  variables  in  each iteration, empty values are\n       used for the missing elements.\n\n       The break and continue statements may  be  invoked  inside\n       body, with the same effect as in the for command.  Foreach\n       returns an empty string.\n\nEXAMPLES\n       This loop prints every value in a list together  with  the\n       square and cube of the value:\n              set values {1 3 5 7 2 4 6 8}  ;# Odd numbers first, for fun!\n              puts 'Value\\tSquare\\tCube'    ;# Neat-looking header\n              foreach x $values {           ;# Now loop and print...\n                  puts ' $x\\t [expr {$x**2}]\\t [expr {$x**3}]'\n              }\n\n       The following loop uses i and j as loop variables to iter-\n       ate over pairs of elements of a single list.\n              set x {}\n              foreach {i j} {a b c d e f} {\n                  lappend x $j $i\n              }\n              # The value of x is 'b a d c f e'\n              # There are 3 iterations of the loop.\n\n       The next loop uses i and j to iterate over  two  lists  in\n       parallel.\n              set x {}\n              foreach i {a b c} j {d e f g} {\n                  lappend x $i $j\n              }\n              # The value of x is 'a d b e c f {} g'\n              # There are 4 iterations of the loop.\n\n       The two forms are combined in the following example.\n              set x {}\n              foreach i {a b c} {j k} {d e f g} {\n                  lappend x $i $j $k\n              }\n              # The value of x is 'a d e b f g c {} {}'\n              # There are 3 iterations of the loop.\n\n\nSEE ALSO\n       for(n), while(n), break(n), continue(n)\n\n\nKEYWORDS\n       foreach, iteration, list, looping\n\n\n\nTcl                                                    foreach(n)\n",
"xterm": "",
"launch_impact": "launch_impact\n\nDescription: \nIssues an error that you can not run this command\n\nSyntax: \nlaunch_impact  [-run <arg>] [-ipf <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-run]      Implemented run to launch iMPACT with\n  [-ipf]      Project for iMPACT\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nToolLaunch\n\nDescription:\n\n  Launch iMPACT to configure your device and generate programming files. You\n  can also read back and verify design configuration data, debug\n  configuration problems, or execute XSVF files.\n\n  You must generate the bitstream file using write_bitstream prior to using\n  iMPACT.\n\n  The command returns the list of files read.\n\nArguments:\n\n  -run - (Optional) Launch iMPACT with the specified run. If no run is\n  specified, then iMPACT is launched with the active implementation run.\n\n  -ipf - (Optional) Specify the iMPACT project file to use to save the\n  results to. The iMPACT Project File (IPF) contains information from a\n  previous session of iMPACT. The target device is configured according to\n  the settings in the specified IPF file. If you do not specify -ipf, the\n  target device is configured according to the default settings.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example launches iMPACT using the specified implementation run:\n\n    launch_impact -run impl_3 \n    \n\nSee Also:\n\n   *  write_bitstream\n",
"validate_dsa": "",
"start_ip_gui": "start_ip_gui\n\nDescription: \nCustomize an instance of a configurable IP GUI\n\nSyntax: \nstart_ip_gui  [-vlnv <arg>] [-ip <args>] [-module_name <arg>] [-ipdef <args>]\n              [-quiet] [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-vlnv]         VLNV string for the Catalog IP from which the new IP will \n                  be created (colon delimited Vendor, Library, Name, Version)\n  [-ip]           IP Instance object\n  [-module_name]  Predefined name for the component\n  [-ipdef]        IP Catalog object\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nIPFlow\n",
"update_timing": "update_timing\n\nDescription: \nupdate timing\n\nSyntax: \nupdate_timing  [-full] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-full]     Perform a full timing update instead of an incremental one\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nTiming\n\nDescription:\n\n  Updates timing for the current design.\n\n  Update the timing data to reflect any timing constraints that were added to\n  the design since the timing engine was last run. This command updates the\n  in-memory view of the timing database, without incurring the time of a full\n  timing analysis.\n\n  Timing is automatically updated by commands that change timing or need\n  updated timing information, such as the report_timing command. The\n  update_timing command lets you manually trigger the timing update to insure\n  the latest constraints are applied to the timing engine.\n\n  The update_timing command uses an incremental analysis approach by default,\n  which updates only out-of-date information, to reduce process and analysis\n  time. You can also specify a complete or full update to insure a\n  comprehensive review of timing data in the design. However, to avoid long\n  timing analysis run times, you should use the -full option only when you\n  need to.\n\nArguments:\n\n  -full - (Optional) Perform a complete timing analysis rather than the\n  default incremental update of the timing data.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example performs a full update of the in-memory timing data:\n\n    update_timing -full \n    \n\nSee Also:\n\n   *  report_timing\n   *  report_timing_summary\n   *  reset_timing\n",
"delete_runs": "delete_runs\n\nDescription: \nDelete existing runs\n\nSyntax: \ndelete_runs  [-noclean_dir] [-quiet] [-verbose] <runs>\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-noclean_dir]  Do not remove all output files and directories from disk\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <runs>          Run to modify\n\nCategories: \nProject\n\nDescription:\n\n  Deletes the specified runs from the project, and deletes all results of the\n  run from the project directory on the hard drive unless otherwise\n  specified.\n\nArguments:\n\n  -noclean_dir - Do not delete the run results from the hard drive. The run\n  will be deleted from the project, but the run files will remain in the\n  project directory.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <runs> - (Required) The names of the synthesis or implementation runs to\n  delete from the project.\n\nExamples:\n\n  The following example deletes the first_pass run from the project:\n\n    delete_runs first_pass \n    \n\n  Note: In this example, all run results will also be removed from the\n  project directory on the hard drive.\n\n  The following command deletes the first_pass run, but leaves the run\n  results on the hard drive:\n\n    delete_runs -noclean_dir first_pass \n    \n\nSee Also:\n\n   *  create_run\n   *  current_run\n",
"start_gui": "start_gui\n\nDescription: \nStart GUI\n\nSyntax: \nstart_gui  [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  Launches the GUI when the tool is running in the Vivado Design Suite Tcl\n  shell. The GUI is invoked with the current project, design, and run\n  information.\n\nArguments:\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example is executed from the command prompt when the tool is\n  running in Tcl mode:\n\n    Vivado% start_gui \n    \n\nSee Also:\n\n   *  stop_gui\n",
"get_path_groups": "get_path_groups\n\nDescription: \nGet a list of path groups in the current design\n\nSyntax: \nget_path_groups  [-regexp] [-nocase] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of path groups\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match path group names against patterns\n                Default: *\n\nCategories: \nXDC, Object\n\nDescription:\n\n  Gets a list of timing path groups in the current project that match a\n  specified search pattern. The default command gets a list of all path\n  groups in the design.\n\n  Path groups are automatically created when a new clock is created in the\n  design, containing all paths in that clocks domain. Path groups can also be\n  manually created with the use of the group_path command.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match path groups against the specified patterns.\n  The default pattern is the wildcard `*` which gets all path groups in the\n  project.\n\nExamples:\n\n  The following example gets a list of all the path groups in the design.\n\n    get_path_groups \n    \n\n  The following example gets all path groups with the string 'Clk' somewhere\n  in the name:\n\n    get_path_groups *Clk* \n    \n\n  Note: If no path groups match the pattern you will get a warning.\n\nSee Also:\n\n   *  group_path\n",
"get_utilization": "get_utilization\n\nDescription: \nCompute utilization of device and returns a list of resources used for script processing\n\nSyntax: \nget_utilization  [-cells <args>] [-exclude_cells <args>] [-pblocks <args>]\n                 [-exclude_child_pblocks] [-exclude_non_assigned]\n                 [-supplyAsPblockAreaSLR] [-ranges <args>] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-cells]                  Report utilization of given list of cells\n  [-exclude_cells]          Report utilization of given list of excluded \n                            cells\n  [-pblocks]                get utilization of given pblock\n  [-exclude_child_pblocks]  get utilization with out child pblocks\n  [-exclude_non_assigned]   Pblock utilization with out Non-assigned Cells\n  [-supplyAsPblockAreaSLR]  For SLR wise report, Pblock supply per SLR is \n                            calculated on pblock area in the SLR\n  [-ranges]                 Site ranges(s)\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report the utilization of the device resources by the whole design, or the\n  utilization of a list of cells from the design. This command requires a\n  hierarchical cell name or names.\n\n  Note: This command can also generate the utilization of the device by the\n  whole design, excluding a list of cells.\n\n  The get_utilization command returns a summary form of the information\n  returned by report_utilization. This command returns the number of LUT,\n  REG, BRAM, and DSP resources consumed, as well as the available number of\n  each on the device.\n\nArguments:\n\n  -cells <args> - (Optional) Determine the device resource utilization by the\n  specified list of cells from the design.\n\n  -exclude_cells <args> - (Optional) Determine the device resource\n  utilization by the currrent design, excluding the specified list of cells.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example gets the utilization of the device by the current\n  design:\n\n    get_utilization \n    \n\n  The following example gets the device resource utilization for the\n  specified list of cells:\n\n    get_utilization -cells [get_cells cpuEngine] \n    \n\nSee Also:\n\n   *  get_cells\n   *  report_utilization\n",
"get_slrs": "get_slrs\n\nDescription: \nGet a list of slrs.\n\nSyntax: \nget_slrs  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n          [-verbose] [<patterns>]\n\nReturns: \nslr\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the slr of these device, tiles, sites, bels, sitepins, \n                 belpins, clock region, node, pip, pin, package pin, iobank, \n                 cell.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match slr against patterns\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Get a list of the super logic regions (SLRs) on the target device. On\n  Devices that do not contain multiple SLRs, the SLR0 is returned.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_slrs based on property values on the SLRs. You can find the properties\n  on an object with the report_property or list_property commands. In the\n  case of the SLR object, 'NUM_CHANNELS', 'NUM_SLLS' and 'NUM_TILES' are some\n  of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the SLRs associated with the specified\n  device, tiles, sites, bels, site_pins, bel_pins, clock_regions, nodes,\n  pips, pins, package_pins, iobanks, or cells.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match SLRs against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all SLRs in the\n  current design. More than one pattern can be specified to find multiple\n  SLRs based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces {} to present the\n  list as a single element.\n\nExamples:\n\n  The following example highlights each of the SLRs on the target device in a\n  different color:\n\n    foreach x [get_slrs] {  \n       incr i  \n       highlight_objects -color_index $i $x  \n    } \n    \n\n  Note: If there are no cells matching the pattern you will get a warning.\n\n  The following example returns the number of super long lines (SLLs) between\n  super logic regions on the current device:\n\n    get_property NUM_SLLS [get_slrs SLR0] \n    \n\nSee Also:\n\n   *  get_property\n   *  list_property\n   *  report_property\n",
"get_board_jumpers": "get_board_jumpers\n\nDescription: \nGets the list of board jumper objects\n\nSyntax: \nget_board_jumpers  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                   [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nlist of jumpers in the board\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board_jumper' objects of these types: 'board'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   match jumper names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of jumpers defined on the current board, as defined in the\n  Board Interface file.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The jumpers defined in the board file can be used to enable specific\n  component modes and interfaces of the board.\n\n  This command returns a list of jumpers, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_jumpers based on property values on the jumpers. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the board\n  jumper object, 'NAME' and 'CURRENT_VALUE' are two of the properties that\n  can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the jumpers of the specified boards.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match board jumpers against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  board jumpers defined on the current board.\n\nExamples:\n\n  The following example gets the jumpers defined in the Board Interface file\n  of the specified board:\n\n    get_board_jumpers -of_objects [get_boards kc705] \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_buses\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"get_gcc_versions": "get_gcc_versions\n\nDescription: \nGet supported GCC version(s) for the specified simulator\n\nSyntax: \nget_gcc_versions  [-quiet] [-verbose] [<name>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<name>]    Simulator name\n\nCategories: \nToolLaunch, Simulation\n",
"open_netlist_design": "open_netlist_design\n\nDescription: \nOpen a synthesis or netlist design\n\nSyntax: \nopen_netlist_design  [-name <arg>] [-run <arg>] [-part <arg>]\n                     [-constrset <arg>] [-top <arg>] [-mode <arg>] [-quiet]\n                     [-verbose]\n\nReturns: \ndesign object\n\nUsage: \n  Name          Description\n  -------------------------\n  [-name]       Design name\n  [-run]        Run to open into the netlist design\n  [-part]       Target part\n  [-constrset]  Constraint fileset to use\n  [-top]        Specify the top module name when the structural netlist is \n                Verilog\n  [-mode]       The design mode. Values: default, out_of_context\n                Default: default\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nProject\n",
"lrepeat": "lrepeat(n)            Tcl Built-In Commands            lrepeat(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lrepeat - Build a list by repeating elements\n\nSYNOPSIS\n       lrepeat number element1 ?element2 element3 ...?\n_________________________________________________________________\n\nDESCRIPTION\n       The lrepeat command creates a list of size number * number\n       of elements by repeating number times the sequence of ele-\n       ments  element1  element2  ....  number must be a positive\n       integer, elementn can be any Tcl value.  Note that lrepeat\n       1 arg ...  is identical to list arg ..., though the arg is\n       required with lrepeat.\n\nEXAMPLES\n              lrepeat 3 a\n                    -> a a a\n              lrepeat 3 [lrepeat 3 0]\n                    -> {0 0 0} {0 0 0} {0 0 0}\n              lrepeat 3 a b c\n                    -> a b c a b c a b c\n              lrepeat 3 [lrepeat 2 a] b c\n                    -> {a a} b c {a a} b c {a a} b c\n\nSEE ALSO\n       list(n), lappend(n), linsert(n), llength(n), lset(n)\n\n\nKEYWORDS\n       element, index, list\n\n\n\nTcl                            8.5                     lrepeat(n)\n",
"generate_vcd_ports": "generate_vcd_ports\n\nDescription: \nGenerate VCD ports for the instance\n\nSyntax: \ngenerate_vcd_ports  [-quiet] [-verbose] <scope>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <scope>     Instance scope hierarchy\n\nCategories: \nToolLaunch, Simulation\n\nDescription:\n\n  Open a VCD file handle for writing the port activity of the design unit\n  instance. The VCD file is read by create_testbench Tcl command to read the\n  port activity for writing stimuli source. The instance can be selected from\n  the scope window in Vivado simulator IDE or by specifying the hierarchical\n  path to the instance when executing this command from Tcl console.\n\n  The command creates dummports.vcd file that will get populated when running\n  simulation for the selected instance scope.\n\n  Note: The Vivado simulator must be up and running in order to generate this\n  file for the selected instance.\n\n  If running this command from Vivado IDE, then the dumpports.vcd file will\n  be created in the simulation run directory. If running this command from\n  Vivado simulator standalone GUI, then the dumpports.vcd file will be \n  created in vcd2tb sub-directory in the current directory.\n\nArguments:\n\n  -scope <arg> - (Required) Specify the instance scope hierarchy name.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose- (Optional) Temporarily override any message limits and return all\n  messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following commands will create VCD file for /top/DUT/fifo/buf_1\n  instance of type buf module, record waveform activity for 2000ns, and close\n  the VCD file handle:\n\n    generate_vcd_ports {/top/DUT/fifo/buf_1}\n        run 2000ns\n        close_vcd -ports\n\nSee Also:\n\n   *  close_vcd\n   *  create_testbench\n",
"write_noc_solution": "write_noc_solution\n\nDescription: \nWrite Solution To JSON File\n\nSyntax: \nwrite_noc_solution  -file <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -file       Output Solution File In JSON Format\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nNOC\n",
"create_xps": "create_xps\n\nDescription: \nCreate embedded source for XPS and add to the source fileset (Not supported anymore. Please use Vivado IP integrator.)\n\nSyntax: \ncreate_xps  [-quiet] [-verbose] <name>\n\nReturns: \nsource file name that was created\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Source name\n\nCategories: \nProject\n\nDescription:\n\n  Create an Embedded Processor source for use in the current project, and add\n  it to the source files.\n\n  This command will launch the Xilinx Platform Studio (XPS) to let you design\n  the hardware portion of the embedded processor system. In XPS you can\n  define and configure the microprocessor, peripherals, and the\n  interconnection of these components. After you exit XPS, the created files\n  for the Embedded Processor sub-design will be written to the local project\n  directory (<project_name>.srcs/sources_1/edk/<name> ), and added to the\n  source files.\n\n  For more information on using specific features of XPS refer to EDK\n  Concepts, Tools, and Techniques (UG683).\n\n  You can also add existing Xilinx Microprocessor Project (.xmp) files from\n  XPS in the current project using the add_files command.\n\n  The command returns the name of the Embedded Processor sub-design created.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the Embedded Processor sub-design to create\n  and add to the current project.\n\nExamples:\n\n  The following example launches XPS to define and configure the specified\n  Embedded Processor sub-design:\n\n    create_xps xpsTest1 \n    \n\nSee Also:\n\n   *  add_files\n   *  generate_target\n   *  list_targets\n   *  make_wrapper\n",
"set_annotated_delay": "set_annotated_delay\n\nDescription: \nset annotated delay\n\nSyntax: \nset_annotated_delay  [-from <args>] [-to <args>] [-cell] [-net] [-min] [-max]\n                     [-of_objects <args>] [-quiet] [-verbose] <delay>\n\nUsage: \n  Name           Description\n  --------------------------\n  [-from]        From pins or top level ports\n  [-to]          To pins or top level ports\n  [-cell]        Specifies that the annotated delay is for a cell\n  [-net]         Specifies that the annotated delay is for a net\n  [-min]         Specifies that the annotated delay is the minimum delay\n  [-max]         Specifies that the annotated delay is the maximum delay\n  [-of_objects]  List of timing arcs\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <delay>        Annotated delay value\n\nCategories: \nTiming\n",
"current_instance": "current_instance\n\nDescription: \nSet or get the current instance\n\nSyntax: \ncurrent_instance  [-quiet] [-verbose] [<instance>]\n\nReturns: \ninstance name\n\nUsage: \n  Name          Description\n  -------------------------\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<instance>]  Name of instance\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Set the current instance in the design hierarchy to the specified instance\n  cell or to the top of the current design. By default, current_instance\n  points to the top module of the current_design, which is not an\n  instantiated cell object. You can also set current_instance to reference an\n  instantiated hierarchical cell in the design.\n\n  Note: Since the top module is not an instantiated object, current_instance\n  returns an empty string rather than a design object, when set to the\n  top-level of the current design.\n\n  The current design and current instance are the target of most of the\n  commands and design changes you will make. The current design can be\n  defined using the current_design command.\n\n  You must specify the <instance> name relative to the currently defined\n  instance, and use the established hierarchy separator to define instance\n  paths. You can determine the current hierarchy separator with the\n  get_hierarchy_separator command.\n\n  Use `..` to traverse up the hierarchical instance path when specifying the\n  current instance.\n\n  This command returns the name of the design object of the current_instance,\n  or returns nothing when set to the top of current design.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <instance> - (Optional) The name of the instance to be set as the current\n  instance of the current design.\n\n   *  The <instance> is specified relative to the presently defined current\n      instance, using the defined hierarchy separator.\n\n   *  Use `..` to move up one level of the hierarchy relative to the current\n      instance.\n\n   *  If the <instance> argument is omitted, the current instance is reset to\n      the top module in the design hierarchy.\n\n   *  If the <instance> is specified as `.` then the name of the current\n      instance is returned, and the instance is not changed.\n\nExamples:\n\n  The following example sets the current instance to the top module of the\n  current design:\n\n    current_instance  \n       INFO: [Vivado 12-618] Current instance is the top level of design `netlist_1`. \n    \n\n  In this example you have selected an object in the Vivado IDE, and you want\n  to set that selected object as the current instance:\n\n    current_instance [lindex [get_selected_objects] 0]  \n    \n\n  Note: get_selected_objects returns a list, even of one object, so you must\n  use lindex to specify an object from that list.\n\n  The following example first sets the hierarchy separator character, and\n  then sets the current instance relative to the presently defined current\n  instance:\n\n    set_hierarchy_separator |  \n    current_instance ..|cpu_iwb_dat_o|buffer_fifo \n    \n\n  The following example returns the name of the presently defined current\n  instance:\n\n    current_instance .  \n    cpuEngine|cpu_iwb_dat_o|buffer_fifo \n    \n\nSee Also:\n\n   *  current_design\n   *  get_hierarchy_separator\n   *  get_selected_objects\n   *  set_hierarchy_separator\n",
"unset": "unset(n)              Tcl Built-In Commands              unset(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       unset - Delete variables\n\nSYNOPSIS\n       unset ?-nocomplain? ?--? ?name name name ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This  command removes one or more variables.  Each name is\n       a variable name, specified in any of the  ways  acceptable\n       to  the set command.  If a name refers to an element of an\n       array then that element is removed without  affecting  the\n       rest  of  the  array.  If a name consists of an array name\n       with no parenthesized index,  then  the  entire  array  is\n       deleted.   The  unset  command  returns an empty string as\n       result.  If -nocomplain is specified as  the  first  argu-\n       ment,  any possible errors are suppressed.  The option may\n       not be abbreviated, in order to disambiguate it from  pos-\n       sible  variable names.  The option -- indicates the end of\n       the options, and should be used if you wish  to  remove  a\n       variable  with the same name as any of the options.  If an\n       error occurs, any variables after the  named  one  causing\n       the  error not deleted.  An error can occur when the named\n       variable does not exist, or the name refers  to  an  array\n       element  but  the variable is a scalar, or the name refers\n       to a variable in a non-existent namespace.\n\nEXAMPLE\n       Create an array containing a mapping from some numbers  to\n       their  squares and remove the array elements for non-prime\n       numbers:\n              array set squares {\n                  1 1    6 36\n                  2 4    7 49\n                  3 9    8 64\n                  4 16   9 81\n                  5 25  10 100\n              }\n\n              puts 'The squares are:'\n              parray squares\n\n              unset squares(1) squares(4) squares(6)\n              unset squares(8) squares(9) squares(10)\n\n              puts 'The prime squares are:'\n              parray squares\n\nSEE ALSO\n       set(n), trace(n), upvar(n)\n\nKEYWORDS\n       remove, variable\n\n\n\nTcl                            8.4                       unset(n)\n",
"save_design": "",
"create_port": "create_port\n\nDescription: \nCreate scalar or bus port\n\nSyntax: \ncreate_port  -direction <arg> [-from <arg>] [-to <arg>] [-diff_pair]\n             [-interface <arg>] [-quiet] [-verbose] <name> [<negative_name>]\n\nReturns: \nlist of port objects that were created\n\nUsage: \n  Name               Description\n  ------------------------------\n  -direction         Direction of port. Valid arguments are IN, OUT and INOUT\n  [-from]            Beginning index of new bus\n  [-to]              Ending index of new bus\n  [-diff_pair]       Create differential pair of ports\n  [-interface]       Assign new port to this interface\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <name>             Name of the port\n  [<negative_name>]  Optional negative name of a diff-pair\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Creates a port and specifies such parameters as direction, width,\n  single-ended or differential, and optionally assigns it to an existing\n  interface. New ports are added at the top-level of the design hierarchy.\n\n  Bus ports can be created with increasing or decreasing bus indexes, using\n  negative and positive index values.\n\n  The create_port command can be used to create a new port in an I/O Planning\n  project, or while editing the netlist of an open Synthesized or Implemented\n  design.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -direction - (Required) The direction of the port. Valid arguments are IN,\n  OUT, and INOUT.\n\n  -from <arg> - (Optional) The beginning index of a new bus. A bus can start\n  from a negative index value.\n\n  -to <arg> - (Optional) The ending index of a new bus. A bus can end on a\n  negative index value.\n\n  -diff_pair - (Optional) Create the specified port as a differential pair of\n  ports. In this case both a positive and negative side port will be created.\n  If only <name> is specified, the positive side port will be assigned the\n  specified <name>, and the negative side port will be assigned <name_N>. If\n  both <name> and <negative_name> are specified, the positive side port will\n  be assigned <name>, and the negative side port will be assigned\n  <negative_name>.\n\n  -interface <arg> - (Optional) Assign the port to the specified interface.\n\n  Note: The interface must first be defined with the create_interface command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the port to create. If -diff_pair is\n  specified, <name> is assigned to the positive side port, and the negative\n  side port is <name>_N.\n\n  <negative_name> - (Optional) Use this option to specify the name of the\n  negative side port when -diff_pair is specified. In this case, <name> will\n  be assigned to the positive side port, and <negative_name> will be assigned\n  to the negative side port.\n\nExamples:\n\n  The following example creates a new input port, named PORT0:\n\n    create_port -direction IN PORT0 \n    \n\n  The following example creates a new interface called Group1, and then\n  creates a four-bit, differential pair output bus using the specified\n  interface. Since the bus ports are defined as differential pairs, and only\n  <name> is specified, the negative side ports are automatically named\n  D_BUS_N:\n\n    create_interface Group1  \n    create_port -direction OUT -from 0 -to 3 -diff_pair -interface Group1 D_BUS \n    \n\n  Note: This command results in the creation of eight ports: D_BUS[0]\n  D_BUS_N[0] D_BUS[1] D_BUS_N[1] D_BUS[2] D_BUS_N[2] D_BUS[3] D_BUS_N[3]\n\n  With only <name> specified, the following example creates differential pair\n  output ports named data and data_N.\n\n    create_port -direction OUT -diff_pair data \n    \n\n  With both <name> and <negative_name> specified, the following example\n  creates differential pair output ports named data_P and data_N.\n\n    create_port -direction OUT -diff_pair data_P data_N \n    \n\nSee Also:\n\n   *  create_interface\n   *  make_diff_pair_ports\n   *  place_ports\n   *  remove_port\n   *  resize_port_bus\n   *  split_diff_pair_ports\n",
"export_as_example_design": "export_as_example_design\n\nDescription: \nExport current design as a static example design\n\nSyntax: \nexport_as_example_design  -vlnv <arg> [-no_ip_version] [-force] [-quiet]\n                          [-verbose] -directory <arg>\n\nUsage: \n  Name              Description\n  -----------------------------\n  -vlnv             VLNV of the example design to be generated\n  [-no_ip_version]  Flag to not include the IP version as part of the IP VLNV\n                    in create_bd_cell commands.\n  [-force]          create a directory if it does not exist\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  -directory        Destination directory in which example design needs to be\n                    generated\n\nCategories: \nIPIntegrator\n",
"get_methodology_violations": "get_methodology_violations\n\nDescription: \nGet a list of Methodology violations from a previous report_methodology run\n\nSyntax: \nget_methodology_violations  [-name <arg>] [-regexp] [-filter <arg>] [-nocase]\n                            [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of Methodology violation objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-name]       Get the results with this name\n  [-regexp]     Patterns are full regular expressions\n  [-filter]     Filter list with expression\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match methodology_violations against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nMethodology, Object\n\nDescription:\n\n  Gets a list of violation objects found in the design when the\n  report_methodology command is run. The properties of individual violation\n  objects can be queried using report_property or list_property commands for\n  details of the violation.\n\n  Violation objects are associated with the cells, nets, pins, or ports in\n  the current design, or sites on the current device. The design objects\n  associated with a methodology violation object can be obtained using the\n  -of_objects option of the appropriate get_* command, such as get_cells, or\n  get_nets for instance.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -name <arg> - (Optional) Get the violations associated with the named\n  methodology result set. In this case the report_methodology command must\n  also have been run with the -name option.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_methodology_violations based on property values on the violations. You\n  can find the properties on an object with the report_property or\n  list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match violations against the specified patterns.\n  The default pattern is the wildcard `*` which gets all violations. More\n  than one pattern can be specified to find multiple violations based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example reports the methodology violations found in the\n  current design, then returns a list of all those violations:\n\n    report_methodology  \n    get_methodology_violations \n    \n\n  The following example generates list of violations in the named methodology\n  report, and then gets the pins associated with any violations found:\n\n    report_methodology -name method_1  \n    get_pins -of_objects [get_methodology_violations -name method_1] \n    \n\nSee Also:\n\n   *  get_methodology_checks\n   *  list_property\n   *  report_methodology\n   *  report_property\n",
"config_ip_cache": "config_ip_cache\n\nDescription: \nManage the IP instance Synthesis cache. Lists out the IP Cache entries if no options are specified.\n\nSyntax: \nconfig_ip_cache  [-use_cache_location <arg>] [-use_project_cache]\n                 [-disable_cache] [-clear_output_repo] [-clear_local_cache]\n                 [-cache_has_match] [-cache_was_used] [-disable_for_ip]\n                 [-enable_for_ip] [-is_ip_disabled] [-get_id]\n                 [-get_entry_location <arg>] [-disk_usage_output_repo]\n                 [-import_from_project] [-zip_cache <arg>] [-remove] [-purge]\n                 [-vlnv <arg>] [-old_swvers] [-unused] [-swver <arg>]\n                 [-num_days_old <arg>] [-num_days_unused <arg>]\n                 [-obs_synth_crc] [-report] [-rptfile <arg>] [-csvfile <arg>]\n                 [-dir <arg>] [-quiet] [-verbose] [<ip>]\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-use_cache_location]      Set current project properties to use the \n                             specified cache location\n  [-use_project_cache]       Set current project properties to use the \n                             default project IP cache location\n  [-disable_cache]           Disable cache use.\n  [-clear_output_repo]       Delete from disk and in memory all cache entries\n                             that exist in the current project's designated \n                             cache (local or remote).\n  [-clear_local_cache]       Delete from disk and in memory all local cache \n                             entries for this project.\n  [-cache_has_match]         Returns the cache-ID of the cache entry that \n                             would work for this IP instance; else ''.\n  [-cache_was_used]          Returns '1' if the cache was used to obtain the \n                             IP's current synthesis results; else '0'.\n  [-disable_for_ip]          Disable cache usage for a specific IP instance.\n  [-enable_for_ip]           Re-enable cache usage for a specific IP \n                             instance.\n  [-is_ip_disabled]          Returns '1' if the cache usage is disabled for \n                             the specified IP instance; else '0'.\n  [-get_id]                  Calculate and return IP cache ID string for \n                             specified <ip>\n  [-get_entry_location]      Return directory where this cache-ID entry is \n                             located.\n  [-disk_usage_output_repo]  Return total disk usage in MB for all cache \n                             entries in the current project's ip_output_repo.\n  [-import_from_project]     Import existing synthesized IP from the project \n                             into the cache.\n  [-zip_cache]               Zip up all cache entries used by IP instances in\n                             the current project and write to the given \n                             zipfilename.\n  [-remove]                  Remove the corresponding cache entry for the \n                             specified IP instance or specified cachedInst; \n                             return cache ID string if successful, otherwise \n                             blank.\n  [-purge]                   Delete all cache entries that match the \n                             specified type(s): -vlnv, -obs_swvers, \n                             -obs_synth_crc, and/or -swver. Returns the \n                             number of entries deleted.\n  [-vlnv]                    Used with -purge, specifies the VLNV of the IP \n                             the cache entries were created from. May use a \n                             wildcard ('*') in one or more fields in the \n                             VLNV.\n  [-old_swvers]              Used with -purge to delete cache entries created\n                             with old Vivado SW Versions.\n  [-unused]                  Used with -purge to delete cache entries that \n                             have never been used.\n  [-swver]                   Used with -purge to delete any cache entries \n                             created from this specific Vivado SW Version \n                             (i.e., '2017.1').\n  [-num_days_old]            Used with -purge to delete any cache entries \n                             that are this number of days old or older.\n  [-num_days_unused]         Used with -purge to delete any cache entries \n                             that have not been used for this number of days \n                             or longer.\n  [-obs_synth_crc]           Used with -purge to delete cache entries whose \n                             component synth checksum is not the same as the \n                             IP Catalog's current component synthesis \n                             checksum.\n  [-report]                  Report cache statistics for the specified IP or \n                             cache object, or for the current cache location \n                             if none specified. If -rptfile is specified, \n                             write statistics to that file. If -dir is \n                             specified, write statistics for cache entries \n                             found under that directory.\n  [-rptfile]                 Used with -report, specifies the text file to \n                             write the cache statistics to.\n  [-csvfile]                 Used with -report, specifies the csv file to \n                             write the cache statistics to, in csv format.\n  [-dir]                     Used eith -report, specifies the directory to \n                             report cache entry statistics for.\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n  [<ip>]                     IP instance object, IP file, or IP name pattern\n\nCategories: \nObject, IPFlow\n\nDescription:\n\n  This command lets you manage the Vivado Design Suite out-of-context (OOC)\n  IP cache. The Vivado Design Suite caches the synthesis results for\n  customized OOC IP in a cache repository, so multiple IP that use the same\n  customization profile can share OOC synthesis results to decrease run time.\n  The cached synthesis results can be reused in a single project from the\n  project cache, or across multiple projects using a remote cache location.\n\n  When generating the synthesis output products for an OOC IP, if a matching\n  IP customization is found in the cache repository, the cached synthesis\n  results will be used. If no suitable match is found in the cache\n  repository, the synthesis output products will be generated as usual and\n  the results, including the design checkpoint (DCP), will be copied into the\n  cache for future use.\n\n  Note: When cached results are used, an information message is displayed in\n  the Tcl console indicating the IP cache-ID of the results used. The\n  cache-ID is a string value calculated from the IP configuration settings,\n  as well as other pertinent data, such as the vivado software version, used\n  when the cached synthesis results were first generated. This string is also\n  used as the directory name under the cache repository where this entry's\n  files are stored.\n\n  You can specify a location for the cached IP synthesis results either\n  within the current project, or at an external location. The location of the\n  IP cache is defined by the IP_OUTPUT_REPO property on a project, with the\n  value of a string defining a valid file system directory. You can set this\n  property using the config_ip_cache command with either the\n  -use_cache_location or the -use_project_cache options. The default IP\n  synthesis cache location is in the current project folders.\n\n  The use of the IP synthesis cache is controlled by the IP_CACHE_PERMISSIONS\n  project property that can be set with the set_property command. The current\n  values are:\n\n   *  disabled - Do not use the IP synthesis cache.\n\n   *  read - Use the IP synthesis cache to read OOC synthesis results from\n      and apply as appropriate in the current project.\n\n   *  write - Use the IP synthesis cache to write OOC synthesis results into,\n      but do not use them to read IP into the current project.\n\n   *  read write - Use the IP synthesis cache for both writing results to,\n      and using those results in the current project. This is the default\n      setting.\n\n  Note: The IP synthesis cache can be enabled, and the cache repository\n  specified, in the Vivado Design Suite IDE using the Settings dialog box.\n  Refer to the Vivado Design Suite User Guide: Designing with IP (UG896) for\n  more information on using the cache.\n\n  Note: Cache entries created by one Vivado software version are not viable\n  in a different Vivado software version. Local project caches are\n  automatically cleared when updating a Vivado project to a new Vivado\n  release.\n\n  By default, without any of the arguments specified below, the\n  config_ip_cache command returns a list of entries in the IP synthesis\n  cache, or returns an error if it fails.\n\nArguments:\n\n  -use_cache_location <arg> - (Optional) Specify a directory pathname to use\n  as the IP cache repository for the current project. For example,\n  'config_ip_cache -use_cache_location /mydata/global_cache'.\n\n  -use_project_cache - (Optional) This is the default location for the cached\n  IP synthesis results. This option enables the current project to use the\n  default IP cache location inside the local project directory. You can use\n  this option to restore the default. For example, 'config_ip_cache\n  -use_project_cache'.\n\n  -disable_cache - (Optional) Disable the IP synthesis cache. This has the\n  effect of setting the IP_CACHE_PERMISSIONS property to 'disabled'. For\n  example, 'config_ip_cache -disable_cache'.\n\n  Note: To re-enable the cache after it has been disabled, you will need to\n  set the IP_CACHE_PERMISSIONS property, or use the Vivado Design Suite IDE.\n\n  -clear_output_repo - (Optional) This clears the IP synthesis cache of all\n  existing cached results, whether the cache is local to the project or a\n  remote directory that is shared across multiple projects. For example,\n  'config_ip_cache -clear_output_repo'.\n\n  Note: You will not be prompted to confirm this command before the cached\n  results are deleted.\n\n  -clear_local_cache - (Optional) This clears the IP synthesis cache of all\n  existing cached results, but only if using the local project cache. For\n  example, 'config_ip_cache -clear_local_cache'.\n\n  -cache_has_match - (Optional) Returns the cache-ID of the cached entry that\n  would work for the specified IP instance. For example, 'config_ip_cache\n  -cache_has_match [get_ips my_ip_0]'.\n\n  -cache_was_used - (Optional) Returns '1' if the cache was used to obtain\n  the specified IP's current synthesis results; else '0'. For example,\n  'config_ip_cache -cache_was_used [get_ips my_ip_0]'.\n\n  -get_id - (Optional) Calculates and returns the cache-ID string for the\n  specified IP instance. The cache-ID is unique to each cache entry,\n  generated based on the IP instance configuration and current Vivado version\n  and settings. For example, 'config_ip_cache -get_id [get_ips my_ip_0]'.\n\n  -disk_usage_output_repo - (Optional) Returns the total disk usage in MB for\n  all cache entries in the current project's IP Cache repository. For\n  example, 'config_ip_cache -disk_usage_output_repo'.\n\n  -import_from_project - (Optional) Populates the current IP cache with\n  synthesis results from the current design. This can be used to populate an\n  IP cache with the synthesis results of an existing project to be reused by\n  other projects or design iterations. For example, config_ip_cache\n  -import_from_project.\n\n  -zip_cache <file_name> - (Optional) Zips up all cache entries used by the\n  IP instances in the current project and writes to the specified\n  <file_name>. The cache entries could be found in the Cache repository, or\n  in any of the loaded user repositories. If any IP instance in the project\n  does not have a cache entry found, then the return string holds a message\n  that lists those IP instances. For example, 'config_ip_cache -zip_cache\n  /mydata/projCache.zip'.\n\n  -remove - (Optional) Removes the corresponding cache entry for the\n  specified IP instance or specified cache object. Returns cache-ID string if\n  successful, otherwise blank. For example, 'config_ip_cache -remove [get_ips\n  my_ip_0]'.\n\n  -purge - (Optional) Deletes all cache entries that match the specified\n  type(s): -vlnv, -old_swvers, -unused, -num_days_old, -num_days_unused,\n  -obs_synth_crc, and/or -swver. Returns the number of entries deleted. More\n  than one specified type can be used in a single -purge command. The\n  specific types of entries to purge are provided by the following options:\n\n   *  -vlnv <arg> - (Optional) Used with -purge, specifies the VLNV of the IP\n      the cache entries were created from. Entries created from IPs with the\n      specified VLNV will be deleted. May use a wildcard ('*') in one or more\n      fields in the VLNV. For example, 'config_ip_cache -purge -vlnv\n      xilinx.com:ip:axi_gpio:*'.\n\n      Note: The VLNV is the IPDEF property on an individual IP instance.\n\n   *  -swver <arg> - (Optional) Used with -purge, deletes cache entries\n      created by the specified software version. The software version can be\n      specified as <version>.<revision>, for example 2017.2. For example,\n      config_ip_cache -purge -swver 2017.2.\n\n   *  -old_swvers - (Optional) Used with -purge, deletes cache entries\n      created by an older software version than the one currently in use. For\n      example, 'config_ip_cache -purge -old_swvers'.\n\n   *  -unused - (Optional) Used with -purge, deletes cache entries that have\n      never been used. For example, 'config_ip_cache -purge -unused'.\n\n   *  -num_days_old <arg> - (Optional) Used with -purge, deletes any cache\n      entries older than the specified number of days. For example, to delete\n      cache entries that were created 10 days or longer ago, type\n      'config_ip_cache -purge -num_days_old 10'.\n\n   *  -num_days_unused <arg> - (Optional) Used with -purge, deletes cache\n      entries that have not been used for the specified number of days or\n      longer. For example, to delete cached entries that have not been used\n      for 10 days or longer, type 'config_ip_cache -purge -num_days_unused\n      10'.\n\n   *  -obs_synth_crc - (Optional) Used with -purge, deletes cache entries\n      that were generated with the component's synthesis checksum that is\n      different from the checksum found in the current IP catalog's\n      component. This is only relevant if the component has been modified\n      since the cache entry was generated. For example, 'config_ip_cache\n      -purge -obs_synth_crc'.\n\n  -report - (Optional) Reports cache statistics for the specified IP or cache\n  object, or for the current cache location if none specified. Use -rptfile\n  to have the report written to a text file, or -csvfile for a csv format\n  file. Use -dir to report statistics for cache entries found under that\n  directory. Cache statistics include the VLNV of the IP used to create the\n  cached synthesis results, the number of times the cache entry was used, the\n  date of the last time it was used, and the synthesis runtime when the entry\n  was created. For example, to write the current cache's statistics to the\n  return string, type config_ip_cache -report. To write the statistics for\n  the cache entry that would work for the specified IP instance, to the\n  return string, type 'config_ip_cache -report [get_ips my_ip_0]'.\n\n  -rptfile <arg> - (Optional) Used with the -report option to direct the\n  report output to the specified file name. For example, to write statistics\n  for the current cache to a text file, type 'config_ip_cache -report\n  /mydata/cacheStats/proj1_stats.txt'.\n\n  -csvfile <arg> - (Optional) Used with the -report option to direct the\n  report output in CSV format to the specified CSV file name. For example, to\n  write statistics for a specific IP instance's matching cache entry in CSV\n  format to a file, type 'config_ip_cache -report -csvfile\n  /mydata/mystats/proj1_stats.csv [get_ips my_ip_0]'.\n\n  -dir <arg> - (Optional) Used with the -report option to specify a directory\n  (that has cache entries under it) to get the statistics for the cache\n  entries found there. Use this to get statistics from a directory other than\n  the current cache setting. For example, to get statistics for all the cache\n  entries found under the specified directory to a text file, type\n  'config_ip_cache -report -dir /mytests/mycache -rptfile\n  /myresults/mycacheStats.txt'.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the contents of the current IP cache, one\n  cache entry per line:\n\n    join [config_ip_cache] \\n\n\n  The following example specifies the use of an external IP cache location,\n  and then updates the repository settings of the IP catalog:\n\n    config_ip_cache -use_cache_location C:/Data/ip\n\nSee Also:\n\n   *  get_ips\n   *  set_property\n   *  synth_design\n   *  synth_ip\n",
"set_input_delay": "set_input_delay\n\nDescription: \nSet input delay on ports\n\nSyntax: \nset_input_delay  [-clock <args>] [-reference_pin <args>] [-clock_fall] [-rise]\n                 [-fall] [-max] [-min] [-add_delay] [-network_latency_included]\n                 [-source_latency_included] [-quiet] [-verbose] <delay>\n                 <objects>\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-clock]                     Relative clock\n  [-reference_pin]             Relative pin or port\n  [-clock_fall]                Delay is relative to falling edge of clock\n  [-rise]                      Specifies rising delay\n  [-fall]                      Specifies falling delay\n  [-max]                       Specifies maximum delay\n  [-min]                       Specifies minimum delay\n  [-add_delay]                 Don't remove existing input delay\n  [-network_latency_included]  Specifies network latency of clock already \n                               included\n  [-source_latency_included]   Specifies source latency of clock already \n                               included\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n  <delay>                      Delay value\n  <objects>                    List of ports\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Specifies the external system-level path delay on a primary input port\n  relative to a clock edge at the interface of the design. The input delay\n  value is specified in nanoseconds (ns), and can be positive or negative,\n  depending on the clock and data relative phase at the interface of the\n  device.\n\n  To accurately model the system-level timing of your Xilinx FPGA design, you\n  must assign timing delays for objects external to the FPGA onto the primary\n  input or output ports in your design. These delays are defined by the\n  set_input_delay and set_output_delay commands.\n\n  Note: If the input port also has a set_max_delay constraint assigned, the\n  specified input delay value is considered part of the max_delay\n  computation. That is, the input delay consumes a portion of the max delay\n  on the timing path that includes the input port.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -clock <arg> - (Optional) Indicates that the input delay is relative to the\n  specified clock. By default the rising edge is used. However the\n  -clock_fall argument can be used to indicate that the falling edge should\n  be used instead.\n\n  -reference_pin <arg> - (Optional) Specifies that the delay is relative to\n  the active edge of a clock appearing on the specified pin or port rather\n  than a clock.\n\n  -clock_fall - (Optional) Specifies that the delay is relative to a falling\n  edge of the clock rather than rising edge.\n\n  -rise - (Optional) Specifies the input delay applies to rising transitions\n  on the specified ports. The default is to apply the delay for both rising\n  and falling transitions.\n\n  -fall - (Optional) Specifies the input delay applied to falling transitions\n  on the specified ports. The default is to apply the delay for both rising\n  and falling transitions.\n\n  -max - (Optional) Indicates the input delay specified is only used when\n  calculating the maximum (longest) path delays.\n\n  -min - (Optional) Indicates the input delay specified is only used when\n  calculating the minimum (shortest) path delays.\n\n  -add_delay - (Optional) Add the specified delay constraint to the port, to\n  coexist with any other set_input_delay constraints already defined on the\n  port. The default behavior is to replace the existing delays.\n\n  -network_latency_included - (Optional) Indicates that the clock network\n  latency of the reference clock is included in the delay value. The Vivado\n  timing engine considers the clock edge reaching the capture flop after the\n  clock latencies unless the specified input or output delay value includes\n  the source latency or network latency.\n\n  -source_latency_included - (Optional) Indicates that the source latency of\n  the relative clock is included in the specified delay value.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <delay> - (Required) The input delay specified as nanoseconds (ns) to apply\n  to the specified ports. Valid values are floating point numbers, with a\n  default value of 0.\n\n  <objects> - (Required) The list of ports to which the delay value will be\n  assigned.\n\nExamples:\n\n  The following example specifies the input delay on port DIN. The input\n  delay is 3 and is relative to the rising edge of clock clk1:\n\n    set_input_delay -clock clk1 3 DIN  \n    \n\n  The following example specifies the input delay on port DIN. The input\n  delay is 2 and is relative to the falling edge of the clock clk1:\n\n    set_input_delay -clock_fall -clock clk1 2 DIN \n    \n\n  The following example specifies the input delay on port reset. The input\n  delay is 2 and is relative to the rising edge of the clock that appears on\n  the pin wbClk_IBUF_BUFG_inst/O, originating from the clock wbClk:\n\n    set_input_delay -clock wbClk 2 -reference_pin \\  \n       [get_pin wbClk_IBUF_BUFG_inst/O] reset  \n    \n\n  This example creates a clock named clk_ddr, and defines input delay\n  constraints from data launched by both rising and falling edges of the\n  clock outside the device to the data input of the internal flip-flop that\n  is sensitive to both rising and falling clock edges:\n\n    create_clock -name clk_ddr -period 6 [get_ports DDR_CLK_IN]  \n    set_input_delay -clock clk_ddr -max 2.1 [get_ports DDR_IN]  \n    set_input_delay -clock clk_ddr -max 1.9 [get_ports DDR_IN] -clock_fall -add_delay  \n    set_input_delay -clock clk_ddr -min 0.9 [get_ports DDR_IN]  \n    set_input_delay -clock clk_ddr -min 1.1 [get_ports DDR_IN] -clock_fall -add_delay \n    \n\n  Note: The use of the -add_delay option allows the new min and max delay\n  constraints to exist alongside the first delays on the same port.\n\n  The following example specifies the input delay on all non clock input\n  ports of the design. Although all_inputs returns all ports of the design,\n  including clock ports, set_input_delay will skip setting input delays on\n  the clock ports. The input delay is 1 relative to the rising edge of the\n  clock wbClk:\n\n    set_input_delay -clock wbClk 1 [all_inputs] \n    \n\n  The following example sets an input delay of 4 relative to the rising edge\n  of the clock wbClk on the ports reset and wbDataForInput:\n\n    set_input_delay -clock wbClk 4 [list reset wbDataForInput] \n    \n\nSee Also:\n\n   *  all_clocks\n   *  all_inputs\n   *  check_timing\n   *  create_clock\n   *  get_ports\n   *  report_timing\n   *  set_max_delay\n   *  set_output_delay\n",
"report_sim_version": "report_sim_version\n\nDescription: \nReport the list of correct SIM_VERSION attribute values for cell types in the target part\n\nSyntax: \nreport_sim_version  [-part <arg>] [-file <arg>] [-append] [-return_string]\n                    [-unisim <arg>] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-part]           Part\n  [-file]           Output file\n  [-append]         Append the results to file\n  [-return_string]  Return report as string\n  [-unisim]         Return the SIM_VERSION for the unisim if present\n  [-quiet]          Quiet option\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Cells with the SIM_VERSION attribute may have slightly different behavior\n  when applied in different devices. The value of SIM_VERSION directs the\n  simulator to match the behavior of the cell to the target device. Use \n  report_sim_version to report the correct SIM_VERSION attribute value to \n  use for cell types in the target part.\n\n  Important: Unless -part is specified, the currently loaded part is used \n  as the target part for this command.\n\nArguments:\n\n  -part <arg> - (Optional) Target part\n\n  -file <arg> - (Optional) Write the SIM_VERSION report into the specified\n  file. The specified file will be overwritten if one already exists, unless\n  -append is also specified.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string. The Tcl\n  string can be captured by a variable definition and parsed or otherwise\n  processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -unisim <arg> - (Optional) Report the SIM_VERSION attribute value to use \n  only for the named unisim, if SIM_VERSION is an attribute of the unisim.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example generates the report of SIM_VERSION attributes and\n  correct values to use for the xcvu065-ffvc1517-1-i part.\n\n    report_sim_version -part xcvp1202-vsva2785-2LP-e-S\n\nSee also:\n\n   *  report_sim_device\n   *  get_primitives\n   *  get_parts\n",
"show_objects": "show_objects\n\nDescription: \nShow objects in Find Results view\n\nSyntax: \nshow_objects  [-name <arg>] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-name]     Tab title\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   Objects to show Find Results view\n\nCategories: \nGUIControl\n\nDescription:\n\n  Populates the specified objects into the Find Results window in the Vivado\n  IDE.\n\n  Note: This command is only useful when run in the Vivado IDE. When run in\n  Tcl or Batch mode the command simply returns without error or comment.\n\nArguments:\n\n  -name <arg> - The name of the report tab to open in the Find Results\n  window. If no name is specified, the default name of find_1 is provided.\n\n  Note: If the command is run multiple times, without the -name option, each\n  occurrence of show_objects will overwrite the prior results.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - The design objects to show in the Find Results window. The\n  objects must be specified as design objects, and not just specified by\n  name. Objects can be returned by commands like get_cells, get_pins,\n  get_nets, or by all_inputs, and all_rams.\n\nExamples:\n\n  The following example shows all DSP objects in the current design in the\n  Find Results window.\n\n    show_objects -name All_DSPs [all_dsps] \n    \n\n  The following example shows all of the cells in the design hierarchy that\n  are Clock or DSP PRIMITIVE_TYPEs:\n\n    show_objects -name find_1 [get_cells -hierarchical \\  \n    -filter { PRIMITIVE_TYPE =~ CLK.*.* || PRIMITIVE_TYPE =~ MULT.dsp.* } ] \n    \n\nSee Also:\n\n   *  all_inputs\n   *  all_rams\n   *  get_cells\n   *  get_nets\n   *  get_pins\n   *  get_ports\n",
"write_bxn": "write_bxn\n\nDescription: \nExport the current netlist as binary netlist\n\nSyntax: \nwrite_bxn  [-force] [-quiet] [-verbose] <file>\n\nReturns: \nthe name of the output file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrite existing file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Output file\n\nCategories: \nFileIO\n",
"package_xo": "package_xo\n\nDescription: \nUsed to package a Xilinx Object (XO) container\n\nSyntax: \npackage_xo  [-kernel_name <arg>] [-force] [-kernel_xml <arg>]\n            [-output_kernel_xml <arg>] [-design_xml <arg>]\n            [-ip_directory <arg>] [-parent_ip_directory <arg>]\n            [-kernel_files <args>] [-kernel_xml_args <args>]\n            [-kernel_xml_pipes <args>] [-kernel_xml_connections <args>]\n            [-ctrl_protocol <arg>] -xo_path <arg> [-quiet] [-verbose]\n\nReturns: \nThe path to the packaged XO container\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-kernel_name]             The name of the kernel\n  [-force]                   Overwrite existing kernel in XO file\n  [-kernel_xml]              The path to the existing kernel XML file\n  [-output_kernel_xml]       The path of the generated output kernel XML file\n  [-design_xml]              The path to the existing design XML file\n  [-ip_directory]            The path to the kernel IP directory\n  [-parent_ip_directory]     If the kernel IP directory specified contains \n                             multiple IPs, specify a directory path to the \n                             parent IP where its component.xml is located \n                             directly below.\n  [-kernel_files]            Kernel file name(s)\n  [-kernel_xml_args]         Generate kernel.xml with the arg(s). Each arg \n                             value should follow this format: \n                             {name:addressQualifier:id:port:size:offset:type:\n                             memSize} where memSize is optional.\n  [-kernel_xml_pipes]        Generate kernel.xml with the pipe(s). Each pipe \n                             value should follow this format: \n                             {name:width:depth}\n  [-kernel_xml_connections]  Generate kernel.xml with the connection(s). Each\n                             connection value should follow this format: \n                             {srcInst:srcPort:dstInst:dstPort}\n  [-ctrl_protocol]           Kernel control protocol. Valid values: \n                             ap_ctrl_hs, ap_ctrl_chain, ap_ctrl_none, \n                             user_managed. Default: ap_ctrl_hs\n                             Default: ap_ctrl_hs\n  -xo_path                   The path of the output XO container file\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n\nCategories: \nVitis, Acceleration, FileIO\n\nDescription:\n\n  Package a Xilinx IP, or Vivado IP Integrator Block Design, into a compiled\n  object file (XO) for use in the Vitis core development kit as a pre-defined\n  RTL Kernel.\n\n  This command returns the path to the packaged XO container.\n\nArguments:\n\n  -kernel_name <arg> - (Required) Specifies the name of the RTL kernel.\n\n  -force - (Optional) Overwrite an existing XO file if one exists.\n\n  -kernel_xml <arg> - (Optional) Specify the path to an existing kernel XML\n  file.\n\n  -design_xml <arg> - (Optional) Specify the path to an existing design XML\n  file.\n\n  -ip_directory <arg> - (Optional) Specify the path to the kernel IP directory.\n\n  -parent_ip_directory - (Optional) If the kernel IP directory specified\n  contains multiple IPs, specify a directory path to the parent IP where its\n  component.xml is located directly below.\n\n  -kernel_files - (Optional) Kernel file name(s).\n\n  -kernel_xml_args <args> - (Optional) Generate the kernel.xml with the\n  specified function arguments. Each argument value should use the following\n  format:\n\n    {name:addressQualifier:id:port:size:offset:type:memSize}\n\n  Note: memSize is optional.\n\n  -kernel_xml_pipes <args> - (Optional) Generate the kernel.xml with the\n  specified pipe(s). Each pipe value use the following format:\n\n    {name:width:depth}\n\n  -kernel_xml_connections <args> - (Optional) Generate the kernel.xml file\n  with the specified connections. Each connection value should use the\n  following format:\n\n    {srcInst:srcPort:dstInst:dstPort}\n\n  -xo_path <arg> - (Required) Specifies the path and file name of the\n  compiled object (XO) container file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example creates the specified XO file containing an RTL\n  kernel of the specified name:\n\n    package_xo -xo_path /temp/data/rtl_kernel/Vadd_A_B.xo -kernel_name Vadd_A_B \n    \n",
"interp": "interp(n)             Tcl Built-In Commands             interp(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       interp - Create and manipulate Tcl interpreters\n\nSYNOPSIS\n       interp subcommand ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This  command  makes it possible to create one or more new\n       Tcl interpreters that co-exist with  the  creating  inter-\n       preter  in the same application.  The creating interpreter\n       is called the master and the new interpreter is  called  a\n       slave.  A master can create any number of slaves, and each\n       slave can itself create additional slaves for which it  is\n       master, resulting in a hierarchy of interpreters.\n\n       Each  interpreter  is  independent from the others: it has\n       its own name space for commands,  procedures,  and  global\n       variables.   A  master  interpreter may create connections\n       between its slaves and itself using a mechanism called  an\n       alias.   An  alias  is  a  command  in a slave interpreter\n       which, when invoked, causes a command to be invoked in its\n       master  interpreter  or in another slave interpreter.  The\n       only other connections between  interpreters  are  through\n       environment  variables  (the env variable), which are nor-\n       mally shared among all interpreters  in  the  application, |\n       and  by  resource limit exceeded callbacks.  Note that the\n       name space for files (such as the names  returned  by  the\n       open  command)  is  no longer shared between interpreters.\n       Explicit commands are  provided  to  share  files  and  to\n       transfer  references to open files from one interpreter to\n       another.\n\n       The interp command also provides support for  safe  inter-\n       preters.   A  safe  interpreter is a slave whose functions\n       have been greatly restricted, so that it is safe  to  exe-\n       cute untrusted scripts without fear of them damaging other\n       interpreters or the application's environment.  For  exam-\n       ple,  all IO channel creation commands and subprocess cre-\n       ation commands are made inaccessible to safe interpreters.\n       See  SAFE  INTERPRETERS below for more information on what\n       features are present in a safe interpreter.  The dangerous\n       functionality  is  not  removed from the safe interpreter;\n       instead, it is hidden, so that only  trusted  interpreters\n       can  obtain  access  to  it. For a detailed explanation of\n       hidden commands, see HIDDEN COMMANDS,  below.   The  alias\n       mechanism  can be used for protected communication (analo-\n       gous to a kernel call) between a slave interpreter and its\n       master.   See ALIAS INVOCATION, below, for more details on\n       how the alias mechanism works.\n\n       A qualified interpreter name is a proper  Tcl  lists  con-\n       taining a subset of its ancestors in the interpreter hier-\n       archy, terminated by the string naming the interpreter  in\n       its  immediate  master.  Interpreter names are relative to\n       the interpreter in which they are used. For example, if  a\n       is  a  slave of the current interpreter and it has a slave\n       a1, which in turn has a slave a11, the qualified  name  of\n       a11 in a is the list a1 a11.\n\n       The  interp  command,  described  below, accepts qualified\n       interpreter names as arguments; the interpreter  in  which\n       the  command  is being evaluated can always be referred to\n       as {} (the empty list or string). Note that it is impossi-\n       ble to refer to a master (ancestor) interpreter by name in\n       a slave interpreter except through aliases. Also, there is\n       no  global name by which one can refer to the first inter-\n       preter created in an application.  Both  restrictions  are\n       motivated by safety concerns.\n\nTHE INTERP COMMAND\n       The  interp command is used to create, delete, and manipu-\n       late slave interpreters, and to share or transfer channels\n       between  interpreters.   It can have any of several forms,\n       depending on the subcommand argument:\n\n       interp alias srcPath srcToken\n              Returns a Tcl list whose elements are the targetCmd\n              and  args  associated with the alias represented by\n              srcToken (this is the value returned when the alias\n              was  created;  it  is possible that the name of the\n              source command in the slave is different from  src-\n              Token).\n\n       interp alias srcPath srcToken {}\n              Deletes  the alias for srcToken in the slave inter-\n              preter identified by srcPath.  srcToken  refers  to\n              the  value returned when the alias was created;  if\n              the source command has been  renamed,  the  renamed\n              command will be deleted.\n\n       interp  alias srcPath srcCmd targetPath targetCmd ?arg arg\n       ...?\n              This command creates an alias between one slave and\n              another (see the alias slave command below for cre-\n              ating  aliases between a slave and its master).  In\n              this command, either of the slave interpreters  may\n              be  anywhere in the hierarchy of interpreters under\n              the interpreter invoking the command.  SrcPath  and\n              srcCmd  identify  the source of the alias.  SrcPath\n              is a Tcl list whose elements  select  a  particular\n              interpreter.   For  example,  'a  b'  identifies an\n              interpreter b, which is a slave of  interpreter  a,\n              which  is  a slave of the invoking interpreter.  An\n              empty list specifies the interpreter  invoking  the\n              command.   srcCmd  gives the name of a new command,\n              which will be created in  the  source  interpreter.\n              TargetPath  and  targetCmd  specify a target inter-\n              preter and command, and the arg arguments, if  any,\n              specify additional arguments to targetCmd which are\n              prepended to any arguments specified in the invoca-\n              tion  of srcCmd.  TargetCmd may be undefined at the\n              time of this call, or it may already exist;  it  is\n              not  created  by  this command.  The alias arranges\n              for the given target command to be invoked  in  the\n              target  interpreter  whenever the given source com-\n              mand is invoked in  the  source  interpreter.   See\n              ALIAS  INVOCATION below for more details.  The com-\n              mand returns a token that uniquely  identifies  the\n              command  created  srcCmd,  even  if  the command is\n              renamed afterwards. The token may but does not have\n              to be equal to srcCmd.\n\n       interp aliases ?path?\n              This  command  returns  a Tcl list of the tokens of\n              all the source commands for aliases defined in  the\n              interpreter  identified  by path. The tokens corre-\n              spond to the values returned when the aliases  were\n              created  (which  may not be the same as the current\n              names of the commands).\n\n       interp bgerror path ?cmdPrefix?\n              This command either gets or sets the current  back- |\n              ground error handler for the interpreter identified |\n              by path. If cmdPrefix is absent, the current  back- |\n              ground  error  handler  is  returned,  and if it is |\n              present, it is a list of words (of  minimum  length |\n              one)  that  describes what to set the interpreter's |\n              background error to. See the BACKGROUND ERROR  HAN- |\n              DLING section for more details.\n\n       interp create ?-safe? ?--? ?path?\n              Creates  a slave interpreter identified by path and\n              a new command, called a slave command. The name  of\n              the  slave  command  is the last component of path.\n              The new slave interpreter and the slave command are\n              created  in  the interpreter identified by the path\n              obtained by removing the last component from  path.\n              For  example,  if  path  is  a b c then a new slave\n              interpreter and slave command named c  are  created\n              in the interpreter identified by the path a b.  The\n              slave command may be used  to  manipulate  the  new\n              interpreter as described below. If path is omitted,\n              Tcl creates a unique  name  of  the  form  interpx,\n              where  x  is an integer, and uses it for the inter-\n              preter and the slave command. If the  -safe  switch\n              is  specified  (or  if  the master interpreter is a\n              safe interpreter), the new slave  interpreter  will\n              be created as a safe interpreter with limited func-\n              tionality; otherwise the  slave  will  include  the\n              full  set  of  Tcl built-in commands and variables.\n              The -- switch can  be  used  to  mark  the  end  of\n              switches;   it  may be needed if path is an unusual\n              value such as -safe. The result of the  command  is\n              the  name  of  the  new  interpreter. The name of a\n              slave interpreter must  be  unique  among  all  the\n              slaves  for its master;  an error occurs if a slave\n              interpreter by the given  name  already  exists  in\n              this  master.   The  initial recursion limit of the\n              slave interpreter is set to the  current  recursion\n              limit of its parent interpreter.\n\n       interp delete ?path ...?\n              Deletes  zero  or  more  interpreters  given by the\n              optional path arguments, and for each  interpreter,\n              it  also  deletes  its  slaves.  The  command  also\n              deletes the  slave  command  for  each  interpreter\n              deleted.  For each path argument, if no interpreter\n              by that name exists, the command raises an error.\n\n       interp eval path arg ?arg ...?\n              This command concatenates all of the arg  arguments\n              in  the  same  fashion  as the concat command, then\n              evaluates the resulting string as a Tcl  script  in\n              the  slave  interpreter  identified  by  path.  The\n              result of this  evaluation  (including  all  return\n              options, such as -errorinfo and -errorcode informa-\n              tion, if an error occurs) is returned to the invok-\n              ing interpreter.  Note that the script will be exe-\n              cuted in the current context  stack  frame  of  the\n              path  interpreter;  this is so that the implementa-\n              tions (in a master interpreter)  of  aliases  in  a\n              slave  interpreter can execute scripts in the slave\n              that find out information about the slave's current\n              state and stack frame.\n\n       interp exists path\n              Returns  1  if a slave interpreter by the specified\n              path exists in this master, 0 otherwise. If path is\n              omitted, the invoking interpreter is used.\n\n       interp expose path hiddenName ?exposedCmdName?\n              Makes  the hidden command hiddenName exposed, even-\n              tually bringing it back under a new  exposedCmdName\n              name (this name is currently accepted only if it is\n              a valid global name space name without any ::),  in\n              the  interpreter  denoted  by  path.  If an exposed\n              command with the targeted name already exists, this\n              command  fails.   Hidden  commands are explained in\n              more detail in HIDDEN COMMANDS, below.\n\n       interp hide path exposedCmdName ?hiddenCmdName?\n              Makes the exposed  command  exposedCmdName  hidden,\n              renaming it to the hidden command hiddenCmdName, or\n              keeping the  same  name  if  hiddenCmdName  is  not\n              given,  in  the  interpreter denoted by path.  If a\n              hidden  command  with  the  targeted  name  already\n              exists,   this   command   fails.   Currently  both\n              exposedCmdName and hiddenCmdName  can  not  contain\n              namespace  qualifiers, or an error is raised.  Com-\n              mands to be hidden by interp hide are looked up  in\n              the  global namespace even if the current namespace\n              is not the global one. This  prevents  slaves  from\n              fooling  a master interpreter into hiding the wrong\n              command, by making the current namespace be differ-\n              ent  from  the  global  one.   Hidden  commands are\n              explained in more detail in HIDDEN COMMANDS, below.\n\n       interp hidden path\n              Returns  a list of the names of all hidden commands\n              in the interpreter identified by path.\n\n       interp invokehidden path ?-option ...? hiddenCmdName  ?arg\n       ...?\n              Invokes the hidden command hiddenCmdName  with  the\n              arguments  supplied  in  the interpreter denoted by\n              path. No substitutions or evaluation are applied to\n              the arguments. Three -options are supported, all of\n              which start with -: -namespace (which takes a  sin-\n              gle  argument afterwards, nsName), -global, and --.\n              If the -namespace flag is present, the hidden  com-\n              mand  is  invoked in the namespace called nsName in\n              the target interpreter.  If  the  -global  flag  is\n              present,  the  hidden  command  is  invoked  at the\n              global level in the target  interpreter;  otherwise\n              it  is  invoked  at  the current call frame and can\n              access local  variables  in  that  and  outer  call\n              frames.  The -- flag allows the hiddenCmdName argu-\n              ment to start with a '-' character, and  is  other-\n              wise  unnecessary.   If  both  the  -namespace  and\n              -global flags are present, the -namespace  flag  is\n              ignored.  Note that the hidden command will be exe-\n              cuted (by default) in  the  current  context  stack\n              frame of the path interpreter.  Hidden commands are\n              explained in more detail in HIDDEN COMMANDS, below.\n\n       interp limit path limitType ?-option? ?value ...?\n              Sets  up, manipulates and queries the configuration |\n              of the resource limit limitType for the interpreter |\n              denoted  by  path.   If  no  -option  is specified, |\n              return the current configuration of the limit.   If |\n              -option  is  the sole argument, return the value of |\n              that option.  Otherwise, a  list  of  -option/value |\n              argument  pairs  must supplied. See RESOURCE LIMITS |\n              below for a more detailed explanation of what  lim- |\n              its and options are supported.\n\n       interp issafe ?path?\n              Returns  1  if  the  interpreter  identified by the\n              specified path is safe, 0 otherwise.\n\n       interp marktrusted path\n              Marks  the  interpreter  identified  by   path   as\n              trusted.  Does not expose the hidden commands. This\n              command can only be invoked from a  trusted  inter-\n              preter.   The  command  has no effect if the inter-\n              preter identified by path is already trusted.\n\n       interp recursionlimit path ?newlimit?\n              Returns the maximum allowable nesting depth for the\n              interpreter  specified  by  path.   If  newlimit is\n              specified, the interpreter recursion limit will  be\n              set  so that nesting of more than newlimit calls to\n              Tcl_Eval() and related procedures  in  that  inter-\n              preter will return an error.  The newlimit value is\n              also returned.  The newlimit value must be a  posi-\n              tive  integer  between 1 and the maximum value of a\n              non-long integer on the platform.\n\n              The command sets the maximum size of the  Tcl  call\n              stack only. It cannot by itself prevent stack over-\n              flows on the C stack being used by the application.\n              If  your  machine  has a limit on the size of the C\n              stack, you may get stack overflows before  reaching\n              the  limit set by the command. If this happens, see\n              if there is a mechanism in your system for increas-\n              ing the maximum size of the C stack.\n\n       interp share srcPath channelId destPath\n              Causes  the  IO  channel identified by channelId to\n              become shared between the interpreter identified by\n              srcPath and the interpreter identified by destPath.\n              Both interpreters have the same permissions on  the\n              IO  channel.   Both  interpreters  must close it to\n              close the underlying IO channel; IO channels acces-\n              sible  in  an  interpreter are automatically closed\n              when an interpreter is destroyed.\n\n       interp slaves ?path?\n              Returns a Tcl list of the names of  all  the  slave\n              interpreters  associated with the interpreter iden-\n              tified by path. If path is  omitted,  the  invoking\n              interpreter is used.\n\n       interp target path alias\n              Returns  a  Tcl  list  describing the target inter-\n              preter for an alias. The alias is specified with an\n              interpreter  path  and source command name, just as\n              in interp alias  above.  The  name  of  the  target\n              interpreter  is  returned  as  an interpreter path,\n              relative to the invoking interpreter.  If the  tar-\n              get  interpreter  for  the  alias  is  the invoking\n              interpreter then an empty list is returned. If  the\n              target  interpreter for the alias is not the invok-\n              ing interpreter or one of its descendants  then  an\n              error  is  generated.   The target command does not\n              have to be defined at the time of this  invocation.\n\n       interp transfer srcPath channelId destPath\n              Causes  the  IO  channel identified by channelId to\n              become available in the interpreter  identified  by\n              destPath and unavailable in the interpreter identi-\n              fied by srcPath.\n\nSLAVE COMMAND\n       For each slave interpreter created with  the  interp  com-\n       mand,  a  new  Tcl command is created in the master inter-\n       preter with the same name as  the  new  interpreter.  This\n       command  may  be  used to invoke various operations on the\n       interpreter.  It has the following general form:\n              slave command ?arg arg ...?\n       Slave is the name of the interpreter, and command and  the\n       args  determine  the  exact  behavior of the command.  The\n       valid forms of this command are:\n\n       slave aliases\n              Returns a Tcl list whose elements are the tokens of\n              all the aliases in slave.  The tokens correspond to\n              the values returned when the aliases  were  created\n              (which  may not be the same as the current names of\n              the commands).\n\n       slave alias srcToken\n              Returns a Tcl list whose elements are the targetCmd\n              and  args  associated with the alias represented by\n              srcToken (this is the value returned when the alias\n              was  created; it is possible that the actual source\n              command in the slave is different from srcToken).\n\n       slave alias srcToken {}\n              Deletes the alias for srcToken in the slave  inter-\n              preter.  srcToken refers to the value returned when\n              the alias was created;  if the source  command  has\n              been  renamed, the renamed command will be deleted.\n\n       slave alias srcCmd targetCmd ?arg ..?\n              Creates an  alias  such  that  whenever  srcCmd  is\n              invoked  in slave, targetCmd is invoked in the mas-\n              ter.  The arg arguments will be passed to targetCmd\n              as additional arguments, prepended before any argu-\n              ments passed in  the  invocation  of  srcCmd.   See\n              ALIAS  INVOCATION  below  for details.  The command\n              returns a token that uniquely identifies  the  com-\n              mand created srcCmd, even if the command is renamed\n              afterwards. The token may but does not have  to  be\n              equal to srcCmd.\n\n       slave bgerror ?cmdPrefix?\n              This  command either gets or sets the current back- |\n              ground error handler for the slave interpreter.  If |\n              cmdPrefix  is  absent, the current background error |\n              handler is returned, and if it is present, it is  a |\n              list   of   words  (of  minimum  length  one)  that |\n              describes what to set the interpreter's  background |\n              error to. See the BACKGROUND ERROR HANDLING section |\n              for more details.\n\n       slave eval arg ?arg ..?\n              This command concatenates all of the arg  arguments\n              in  the  same  fashion  as the concat command, then\n              evaluates the resulting string as a Tcl  script  in\n              slave.   The  result  of this evaluation (including\n              all  return  options,  such   as   -errorinfo   and\n              -errorcode  information,  if  an  error  occurs) is\n              returned to the invoking  interpreter.   Note  that\n              the  script will be executed in the current context\n              stack frame of slave; this is so that the implemen-\n              tations  (in  a master interpreter) of aliases in a\n              slave interpreter can execute scripts in the  slave\n              that find out information about the slave's current\n              state and stack frame.\n\n       slave expose hiddenName ?exposedCmdName?\n              This command exposes the hidden command hiddenName,\n              eventually bringing it back under a new exposedCmd-\n              Name name (this name is currently accepted only  if\n              it  is  a  valid global name space name without any\n              ::), in slave.  If an exposed command with the tar-\n              geted name already exists, this command fails.  For\n              more details on hidden commands,  see  HIDDEN  COM-\n              MANDS, below.\n\n       slave hide exposedCmdName ?hiddenCmdName?\n              This  command hides the exposed command exposedCmd-\n              Name, renaming it to the hidden command  hiddenCmd-\n              Name,  or  keeping the same name if the argument is\n              not given, in the slave interpreter.  If  a  hidden\n              command with the targeted name already exists, this\n              command fails.  Currently both  exposedCmdName  and\n              hiddenCmdName can not contain namespace qualifiers,\n              or an error is raised.  Commands to be  hidden  are\n              looked  up in the global namespace even if the cur-\n              rent namespace is not the global one. This prevents\n              slaves  from fooling a master interpreter into hid-\n              ing the wrong command, by making the current names-\n              pace  be  different  from the global one.  For more\n              details on hidden commands,  see  HIDDEN  COMMANDS,\n              below.\n\n       slave hidden\n              Returns  a list of the names of all hidden commands\n              in slave.\n\n       slave invokehidden ?-option ...? hiddenName ?arg ..?\n              This command invokes the hidden command  hiddenName\n              with the supplied arguments, in slave. No substitu-\n              tions or evaluations are applied to the  arguments.\n              Three  -options  are  supported, all of which start\n              with -: -namespace (which takes a  single  argument\n              afterwards,  nsName),  -global,  and  --.   If  the\n              -namespace flag is given,  the  hidden  command  is\n              invoked  in  the  specified namespace in the slave.\n              If the  -global  flag  is  given,  the  command  is\n              invoked at the global level in the slave; otherwise\n              it is invoked at the current  call  frame  and  can\n              access  local  variables  in  that  or  outer  call\n              frames.  The -- flag allows the hiddenCmdName argu-\n              ment  to  start with a '-' character, and is other-\n              wise  unnecessary.   If  both  the  -namespace  and\n              -global  flags  are  given,  the -namespace flag is\n              ignored.  Note that the hidden command will be exe-\n              cuted  (by  default)  in  the current context stack\n              frame of slave.  For more details  on  hidden  com-\n              mands, see HIDDEN COMMANDS, below.\n\n       slave issafe\n              Returns  1 if the slave interpreter is safe, 0 oth-\n              erwise.\n\n       slave limit limitType ?-option? ?value ...?\n              Sets up, manipulates and queries the  configuration |\n              of  the  resource  limit  limitType  for  the slave |\n              interpreter.  If no -option  is  specified,  return |\n              the current configuration of the limit.  If -option |\n              is the sole argument,  return  the  value  of  that |\n              option.   Otherwise,  a list of -option/value argu- |\n              ment pairs must supplied. See RESOURCE LIMITS below |\n              for  a more detailed explanation of what limits and |\n              options are supported.\n\n       slave marktrusted\n              Marks the slave interpreter as trusted. Can only be\n              invoked by a trusted interpreter. This command does\n              not expose any hidden commands in the slave  inter-\n              preter.  The  command has no effect if the slave is\n              already trusted.\n\n       slave recursionlimit ?newlimit?\n              Returns the maximum allowable nesting depth for the\n              slave  interpreter.   If newlimit is specified, the\n              recursion limit in slave will be set so that  nest-\n              ing  of  more than newlimit calls to Tcl_Eval() and\n              related procedures in slave will return  an  error.\n              The  newlimit value is also returned.  The newlimit\n              value must be a positive integer between 1 and  the\n              maximum  value  of  a non-long integer on the plat-\n              form.\n\n              The command sets the maximum size of the  Tcl  call\n              stack only. It cannot by itself prevent stack over-\n              flows on the C stack being used by the application.\n              If  your  machine  has a limit on the size of the C\n              stack, you may get stack overflows before  reaching\n              the  limit set by the command. If this happens, see\n              if there is a mechanism in your system for increas-\n              ing the maximum size of the C stack.\n\nSAFE INTERPRETERS\n       A  safe  interpreter is one with restricted functionality,\n       so that is safe to execute an arbitrary script  from  your\n       worst  enemy  without  fear  of  that  script damaging the\n       enclosing application or the rest of your computing  envi-\n       ronment.   In  order  to make an interpreter safe, certain\n       commands and variables are removed from  the  interpreter.\n       For example, commands to create files on disk are removed,\n       and the exec command is removed, since it could be used to\n       cause  damage  through  subprocesses.   Limited  access to\n       these facilities can be provided, by creating  aliases  to\n       the  master  interpreter which check their arguments care-\n       fully and provide restricted access to a  safe  subset  of\n       facilities.   For  example, file creation might be allowed\n       in a particular  subdirectory  and  subprocess  invocation\n       might be allowed for a carefully selected and fixed set of\n       programs.\n\n       A safe interpreter is  created  by  specifying  the  -safe\n       switch  to  the  interp  create command.  Furthermore, any\n       slave created by a safe interpreter will also be safe.\n\n       A safe interpreter is created with exactly  the  following\n       set of built-in commands:\n\n              after       append      apply       array\n              binary      break       catch       chan\n              clock       close       concat      continue\n              dict        eof         error       eval\n              expr        fblocked    fcopy       fileevent\n              flush       for         foreach     format\n              gets        global      if          incr\n              info        interp      join        lappend\n              lassign     lindex      linsert     list\n              llength     lrange      lrepeat     lreplace\n              lsearch     lset        lsort       namespace\n              package     pid         proc        puts\n              read        regexp      regsub      rename\n              return      scan        seek        set\n              split       string      subst       switch\n              tell        time        trace       unset\n              update      uplevel     upvar       variable\n              vwait       while\n\n       The following commands are hidden by interp create when it\n       creates a safe interpreter:\n\n              cd          encoding    exec        exit\n              fconfigure  file        glob        load\n              open        pwd         socket      source\n              unload\n\n       These commands can be recreated later as Tcl procedures or\n       aliases, or re-exposed by interp expose.\n\n       The  following commands from Tcl's library of support pro-\n       cedures are not present in a safe interpreter:\n\n              auto_exec_ok    auto_import     auto_load\n              auto_load_index auto_qualify    unknown\n\n       Note in particular that safe interpreters have no  default\n       unknown  command,  so Tcl's default autoloading facilities\n       are not available.  Autoload access to Tcl's commands that\n       are normally autoloaded:\n\n              auto_mkindex         auto_mkindex_old\n              auto_reset           history\n              parray               pkg_mkIndex\n              ::pkg::create        ::safe::interpAddToAccessPath\n              ::safe::interpCreate ::safe::interpConfigure\n              ::safe::interpDelete ::safe::interpFindInAccessPath\n              ::safe::interpInit   ::safe::setLogCmd\n              tcl_endOfWord        tcl_findLibrary\n              tcl_startOfNextWord  tcl_startOfPreviousWord\n              tcl_wordBreakAfter   tcl_wordBreakBefore\n\n       can  only be provided by explicit definition of an unknown\n       command in the safe interpreter.  This will involve expos-\n       ing  the source command.  This is most easily accomplished\n       by creating the safe interpreter with Tcl's Safe-Tcl mech-\n       anism.   Safe-Tcl  provides safe versions of source, load,\n       and other Tcl commands needed to  support  autoloading  of\n       commands and the loading of packages.\n\n       In  addition,  the  env  variable is not present in a safe\n       interpreter, so it cannot share environment variables with\n       other  interpreters.  The  env  variable  poses a security\n       risk, because users can store sensitive information in  an\n       environment  variable.  For example, the PGP manual recom-\n       mends storing the PGP private key protection  password  in\n       the  environment  variable  PGPPASS.  Making this variable\n       available to untrusted code executing  in  a  safe  inter-\n       preter would incur a security risk.\n\n       If extensions are loaded into a safe interpreter, they may\n       also restrict their own functionality to eliminate  unsafe\n       commands. For a discussion of management of extensions for\n       safety see the manual entries for Safe-Tcl  and  the  load\n       Tcl command.\n\n       A  safe  interpreter  may not alter the recursion limit of\n       any interpreter, including itself.\n\nALIAS INVOCATION\n       The alias mechanism has been carefully designed so that it\n       can  be  used safely when an untrusted script is executing\n       in a safe slave and the target of the alias is  a  trusted\n       master.   The  most important thing in guaranteeing safety\n       is to ensure that information passed from the slave to the\n       master  is  never  evaluated or substituted in the master;\n       if this were to occur, it would enable an evil  script  in\n       the  slave  to  invoke  arbitrary functions in the master,\n       which would compromise security.\n\n       When the source for an  alias  is  invoked  in  the  slave\n       interpreter,  the  usual  Tcl  substitutions are performed\n       when parsing that command.  These substitutions  are  car-\n       ried  out  in the source interpreter just as they would be\n       for any other command invoked in  that  interpreter.   The\n       command  procedure  for the source command takes its argu-\n       ments and merges them with the targetCmd and args for  the\n       alias to create a new array of arguments.  If the words of\n       srcCmd were 'srcCmd arg1 arg2 ... argN', the  new  set  of\n       words  will  be  'targetCmd  arg arg ... arg arg1 arg2 ...\n       argN', where targetCmd and args are  the  values  supplied\n       when  the  alias  was  created.  TargetCmd is then used to\n       locate a command procedure in the target interpreter,  and\n       that  command  procedure  is  invoked  with the new set of\n       arguments.  An error occurs if there is no  command  named\n       targetCmd  in  the target interpreter.  No additional sub-\n       stitutions are performed on the words:  the target command\n       procedure  is  invoked directly, without going through the\n       normal Tcl evaluation mechanism.  Substitutions  are  thus\n       performed  on  each  word exactly once: targetCmd and args\n       were substituted when parsing the command that created the\n       alias,  and  arg1  - argN are substituted when the alias's\n       source command is parsed in the source interpreter.\n\n       When writing the targetCmds for  aliases  in  safe  inter-\n       preters,  it  is very important that the arguments to that\n       command never be  evaluated  or  substituted,  since  this\n       would provide an escape mechanism whereby the slave inter-\n       preter could execute arbitrary code in the  master.   This\n       in turn would compromise the security of the system.\n\nHIDDEN COMMANDS\n       Safe   interpreters  greatly  restrict  the  functionality\n       available to Tcl programs executing within them.  Allowing\n       the  untrusted  Tcl  program to have direct access to this\n       functionality is unsafe, because it  can  be  used  for  a\n       variety of attacks on the environment.  However, there are\n       times when there is a legitimate need to use the dangerous\n       functionality  in the context of the safe interpreter. For\n       example, sometimes a program  must  be  sourced  into  the\n       interpreter.   Another  example  is  Tk, where windows are\n       bound to the hierarchy of windows for  a  specific  inter-\n       preter; some potentially dangerous functions, e.g.  window\n       management, must be performed on these windows within  the\n       interpreter context.\n\n       The  interp command provides a solution to this problem in\n       the form of hidden commands. Instead of removing the  dan-\n       gerous  commands  entirely  from a safe interpreter, these\n       commands are hidden so  they  become  unavailable  to  Tcl\n       scripts executing in the interpreter. However, such hidden\n       commands can be invoked by any  trusted  ancestor  of  the\n       safe  interpreter, in the context of the safe interpreter,\n       using interp invoke. Hidden commands and exposed  commands\n       reside in separate name spaces. It is possible to define a\n       hidden command and an exposed command  by  the  same  name\n       within one interpreter.\n\n       Hidden  commands  in a slave interpreter can be invoked in\n       the body of procedures called in the master  during  alias\n       invocation. For example, an alias for source could be cre-\n       ated in a slave interpreter. When it  is  invoked  in  the\n       slave  interpreter,  a  procedure  is called in the master\n       interpreter to check that the operation is allowable (e.g.\n       it  asks  to  source  a file that the slave interpreter is\n       allowed to access). The procedure then it invokes the hid-\n       den  source  command  in the slave interpreter to actually\n       source in the contents of the file. Note that two commands\n       named  source  exist  in the slave interpreter: the alias,\n       and the hidden command.\n\n       Because a master interpreter may invoke a  hidden  command\n       as  part  of handling an alias invocation, great care must\n       be taken to  avoid  evaluating  any  arguments  passed  in\n       through  the alias invocation.  Otherwise, malicious slave\n       interpreters could cause a trusted master  interpreter  to\n       execute  dangerous  commands on their behalf. See the sec-\n       tion on ALIAS INVOCATION for a more complete discussion of\n       this  topic.  To help avoid this problem, no substitutions\n       or evaluations are applied to arguments of interp  invoke-\n       hidden.\n\n       Safe  interpreters  are  not allowed to invoke hidden com-\n       mands in themselves or in their descendants. This prevents\n       safe slaves from gaining access to hidden functionality in\n       themselves or their descendants.\n\n       The set of hidden commands in an interpreter can be manip-\n       ulated  by  a  trusted interpreter using interp expose and\n       interp hide. The interp expose command moves a hidden com-\n       mand  to  the  set  of exposed commands in the interpreter\n       identified by path, potentially renaming  the  command  in\n       the  process.  If  an exposed command by the targeted name\n       already exists, the  operation  fails.  Similarly,  interp\n       hide  moves  an  exposed command to the set of hidden com-\n       mands in  that  interpreter.  Safe  interpreters  are  not\n       allowed  to  move  commands  between the set of hidden and\n       exposed commands, in either themselves  or  their  descen-\n       dants.\n\n       Currently,  the  names  of  hidden commands cannot contain\n       namespace qualifiers, and you must first rename a  command\n       in a namespace to the global namespace before you can hide\n       it.  Commands to be hidden by interp hide are looked up in\n       the  global namespace even if the current namespace is not\n       the global one. This prevents slaves from fooling a master\n       interpreter  into  hiding the wrong command, by making the\n       current namespace be different from the global one.\n\nRESOURCE LIMITS\n       Every interpreter has two kinds of  resource  limits  that |\n       may  be imposed by any master interpreter upon its slaves. |\n       Command limits (of type command) restrict the total number |\n       of Tcl commands that may be executed by an interpreter (as |\n       can be inspected via the info cmdcount command), and  time |\n       limits  (of  type  time)  place a limit by which execution |\n       within the interpreter must complete. Note that time  lim- |\n       its  are expressed as absolute times (as in clock seconds) |\n       and not relative times (as in after) because they  may  be |\n       modified after creation.                                   |\n\n       When  a  limit  is  exceeded for an interpreter, first any |\n       handler  callbacks  defined  by  master  interpreters  are |\n       called.  If  those callbacks increase or remove the limit, |\n       execution within the (previously) limited interpreter con- |\n       tinues.  If  the  limit  is  still  in  force, an error is |\n       generated at that point and normal  processing  of  errors |\n       within the interpreter (by the catch command) is disabled, |\n       so the error propagates outwards (building  a  stack-trace |\n       as it goes) to the point where the limited interpreter was |\n       invoked (e.g. by interp eval) where it becomes the respon- |\n       sibility of the calling code to catch and handle.          |\n\n   LIMIT OPTIONS                                                  |\n       Every  limit  has  a number of options associated with it, |\n       some of which are common across all kinds of  limits,  and |\n       others of which are particular to the kind of limit.\n\n       -command\n              This  option (common for all limit types) specifies |\n              (if non-empty) a Tcl script to be executed  in  the |\n              global  namespace  of  the  interpreter reading and |\n              writing the option when the particular limit in the |\n              limited  interpreter is exceeded.  The callback may |\n              modify the limit on the interpreter  if  it  wishes |\n              the  limited  interpreter to continue executing. If |\n              the callback generates an  error,  it  is  reported |\n              through  the  background error mechanism (see BACK- |\n              GROUND ERROR HANDLING).  Note  that  the  callbacks |\n              defined  by one interpreter are completely isolated |\n              from the callbacks defined by another, and that the |\n              order  in which those callbacks are called is unde- |\n              fined.\n\n       -granularity\n              This option (common for all limit types)  specifies |\n              how  frequently  (out  of  the  points when the Tcl |\n              interpreter is in a consistent  state  where  limit |\n              checking  is  possible)  that the limit is actually |\n              checked. This allows the tuning of how frequently a |\n              limit  is  checked,  and hence how often the limit- |\n              checking overhead (which may be substantial in  the |\n              case of time limits) is incurred.\n\n       -milliseconds\n              This  option  specifies  the number of milliseconds |\n              after the moment defined  in  the  -seconds  option |\n              that  the time limit will fire. It should only ever |\n              be  specified  in  conjunction  with  the  -seconds |\n              option  (whether  it was set previously or is being |\n              set this invocation.)\n\n       -seconds\n              This option specifies the number of  seconds  after |\n              the  epoch  (see clock seconds) that the time limit |\n              for the interpreter will be  triggered.  The  limit |\n              will be triggered at the start of the second unless |\n              specified at a sub-second  level  using  the  -mil- |\n              liseconds  option.  This  option  may  be the empty |\n              string, which indicates that a time  limit  is  not |\n              set for the interpreter.\n\n       -value This  option  specifies the number of commands that |\n              the interpreter may execute before  triggering  the |\n              command limit. This option may be the empty string, |\n              which indicates that a command limit is not set for |\n              the interpreter.                                    |\n\n       Where  an interpreter with a resource limit set on it cre- |\n       ates a slave interpreter, that slave interpreter will have |\n       resource  limits  imposed  on  it  that  are  at  least as |\n       restrictive as the limits on the  creating  master  inter- |\n       preter.  If  the  master interpreter of the limited master |\n       wishes to relax  these  conditions,  it  should  hide  the |\n       interp  command  in the child and then use aliases and the |\n       interp invokehidden subcommand to provide such  access  as |\n       it  chooses to the interp command to the limited master as |\n       necessary.                                                 |\n\nBACKGROUND ERROR HANDLING                                         |\n       When an error happens in a situation where  it  cannot  be |\n       reported  directly  up  the  stack  (e.g.  when processing |\n       events in an update or vwait call) the  error  is  instead |\n       reported  through the background error handling mechanism. |\n       Every interpreter has a background  error  handler  regis- |\n       tered;  the default error handler arranges for the bgerror |\n       command  in  the  interpreter's  global  namespace  to  be |\n       called, but other error handlers may be installed and pro- |\n       cess background errors in substantially different ways.    |\n\n       A background error handler consists of a non-empty list of |\n       words to which will be appended two further words at invo- |\n       cation time. The first word  will  be  the  error  message |\n       string, and the second will a dictionary of return options |\n       (this is also the sort of information that can be obtained |\n       by  trapping  a  normal  error using catch of course.) The |\n       resulting list will then be executed in the  interpreter's |\n       global  namespace without further substitutions being per- |\n       formed.\n\nCREDITS\n       The safe interpreter mechanism is based  on  the  Safe-Tcl\n       prototype implemented by Nathaniel Borenstein and Marshall\n       Rose.\n\nEXAMPLES\n       Creating and using an alias for a command in  the  current\n       interpreter:\n              interp alias {} getIndex {} lsearch {alpha beta gamma delta}\n              set idx [getIndex delta]\n\n       Executing an arbitrary command in a safe interpreter where\n       every invocation of lappend is logged:\n              set i [interp create -safe]\n              interp hide $i lappend\n              interp alias $i lappend {} loggedLappend $i\n              proc loggedLappend {i args} {\n                 puts 'logged invocation of lappend $args'\n                 interp invokehidden $i lappend {*}$args\n              }\n              interp eval $i $someUntrustedScript\n\n       Setting a resource limit on  an  interpreter  so  that  an |\n       infinite loop terminates.                                  |\n              set i [interp create]                               |\n              interp limit $i command -value 1000                 |\n              interp eval $i {                                    |\n                 set x 0                                          |\n                 while {1} {                                      |\n                    puts 'Counting up... [incr x]'                |\n                 }                                                |\n              }                                                   |\n\nSEE ALSO\n       bgerror(n), load(n), safe(n), Tcl_CreateSlave(3)\n\nKEYWORDS\n       alias,  master interpreter, safe interpreter, slave inter-\n       preter\n\n\n\nTcl                            7.6                      interp(n)\n",
"validate_board_files": "validate_board_files\n\nDescription: \nCheck whether the XML files describing a board in the given directory are valid.\nOnly supported for board XML files with schema_version>=2.0.\nThe XML files must contain an appropriate DOCTYPE declaration to be fully validated. Examples:\n<!DOCTYPE board SYSTEM 'board.dtd'> <!-- for board.xml -->\n<!DOCTYPE ip_presets SYSTEM 'preset.dtd'> <!-- for preset.xml -->\n<!DOCTYPE part_info SYSTEM 'part0_pins.dtd'> <!-- for part0_pins.xml -->\n\nNote that if a project is open and an IP repository loaded, this command will also validate\ncertain IP and Interface attributes used in the board definition against the current IP repository.\n\nSyntax: \nvalidate_board_files  [-doctype_inject <arg>] [-quiet] [-verbose] [<dir>]\n\nReturns: \nok if all board files are valid\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-doctype_inject]  The name of a directory containing the dtd files \n                     (board.dtd, part0_pins.dtd, preset.dtd) for DOCTYPE \n                     injection in board files. If the path is invalid (or \n                     does not contain the dtd files), then the injection will\n                     not happen. Use '' to inject the default dtd files from \n                     the vivado install data path.\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  [<dir>]            The name of a directory containing the board files \n                     (board.xml, part0_pins.xml, preset.xml) to be checked\n\nCategories: \nObject, Project, XPS, Board\n",
"read_verilog": "read_verilog\n\nDescription: \nRead one or more Verilog files\n\nSyntax: \nread_verilog  [-library <arg>] [-sv] [-quiet] [-verbose] <files>...\n\nReturns: \nlist of file objects that were added\n\nUsage: \n  Name        Description\n  -----------------------\n  [-library]  Library name (ignored by Vivado synthesis)\n              Default: default lib\n  [-sv]       Enable system verilog compilation\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <files>     Verilog file name(s)\n\nCategories: \nFileIO\n\nDescription:\n\n  Reads Verilog or SystemVerilog source files. This command is similar to the\n  add_files command. The Verilog file is added to the source fileset as it is\n  read. If the -library argument is specified, the file is added with the\n  Library property defined appropriately.\n\n  You can use this command to read the contents of source files into the\n  in-memory design, when running the Vivado tool in Non Project mode, in\n  which there is no project file to maintain and manage the various project\n  source files. Refer to the Vivado Design Suite User Guide: Design Flows\n  Overview (UG892) for more information on Non Project mode.\n\n  Because SystemVerilog is a superset of the Verilog language, the\n  read_verilog command can read both file types. However, for SystemVerilog\n  files, the -sv option needs to be specified for read_verilog to enable\n  compilation in the SystemVerilog mode. In this mode, the tool recognizes\n  and honors the SystemVerilog keywords and constructs.\n\n  You can have a mixture of both Verilog files (.v files), and SystemVerilog\n  files (.sv files), as well as VHDL (using read_vhdl). When the tool\n  compiles these files for synthesis, it creates separate 'compilation units'\n  for each file type. All files of the same type are compiled together.\n\nArguments:\n\n  -library <arg> - (Optional) The library the Verilog file should reference.\n  The default Verilog library is xil_defaultlib. The library name is ignored\n  by Vivado synthesis.\n\n  -sv -(Optional) Read the files as a SystemVerilog compilation group.\n\n  Note: Since Verilog is a subset of SystemVerilog, unless a Verilog source\n  has user-defined names that collide with reserved SystemVerilog keywords,\n  reading Verilog files with the -sv switch enables SystemVerilog compilation\n  mode for those files. However, adding a SystemVerilog file in a Verilog\n  compilation unit (without -sv) will not work.\n\n  <files> - (Required) The name of one or more Verilog files to be read.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reads the specified Verilog file and adds it to the\n  source fileset:\n\n    read_verilog C:/Data/FPGA_Design/new_module.v \n    \n\n  The following example creates two compilation units, one for SystemVerilog\n  files and one for Verilog files:\n\n    read_verilog -sv { file1.sv file2.sv file3.sv }  \n    read_verilog { file1.v file2.v file3.v} \n    \n\nSee Also:\n\n   *  add_files\n   *  read_vhdl\n   *  remove_files\n",
"set_load": "set_load\n\nDescription: \nSet capacitance on output ports and output pins\n\nSyntax: \nset_load  [-rise] [-fall] [-max] [-min] [-quiet] [-verbose] <capacitance>\n          <objects>\n\nUsage: \n  Name           Description\n  --------------------------\n  [-rise]        Specify the rise capacitance value (for ports only)\n  [-fall]        Specify the fall capacitance value (for ports only)\n  [-max]         Specify the maximum capacitance value\n  [-min]         Specify the minimum capacitance value\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <capacitance>  Capacitance value\n  <objects>      List of output ports and output pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets the load capacitance on output ports to the specified value. The load\n  capacitance is used during power analysis when running the report_power\n  command, but is not used during timing analysis.\n\n  Note: The default unit of capacitance is picofarads (pF), but can be\n  changed using the set_units command.\n\n  This command operates silently and does not return direct feedback of its\n  operation.\n\nArguments:\n\n  -max - (Optional) Provided for SDC compatibility. Ignored by the Vivado\n  tools.\n\n  -min - (Optional) Provided for SDC compatibility. Ignored by the Vivado\n  tools.\n\n  -rise - (Optional) Provided for SDC compatibility. Ignored by the Vivado\n  tools.\n\n  -fall - (Optional) Provided for SDC compatibility. Ignored by the Vivado\n  tools.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <capacitance> - (Required) The value of the load capacitance. The value is\n  specified as a floating point value >= 0. The default is 0.\n\n  <objects> - (Required) A list of output port objects to assign the\n  capacitance load to. All outputs in the design may be obtained using the\n  all_outputs command.\n\nExamples:\n\n  The following example sets the specified load capacitance value for all\n  ports:\n\n    set_load 5.5 [all_outputs] \n    \n\n  The following example sets the rising and falling edge load capacitance for\n  the specified output ports:\n\n    set_load -rise -fall 8 [get_ports wbOutput*] \n    \n\nSee Also:\n\n   *  all_outputs\n   *  get_ports\n   *  report_power\n",
"report_run_status": "report_run_status\n\nDescription: \nReport reason for staleness of run.\n\nSyntax: \nreport_run_status  [-quiet] [-verbose] <runs>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <runs>      Run whose status needs to report\n\nCategories: \n\n",
"webtalk_transmit": "webtalk_transmit\n\nDescription: \nInternal task add data to the Webtalk manager's data model.\n\nSyntax: \nwebtalk_transmit  -clientid <arg> -regid <arg> -xml <arg> -html <arg>\n                  -wdm <arg> [-intro <arg>] [-curlverbose] [-quiet] [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  -clientid       integer value uniquely identifying the client.\n  -regid          string value that is the customer's registration id.\n  -xml            string value that is the name of the xml file to generate.\n  -html           string value that is the name of the html file to generate.\n  -wdm            string value that is the name of the webtalk data mapping \n                  file to use.\n  [-intro]        if specified will replace the standard intro verbage in the\n                  HTML report. Can use HTML markup in this string.\n                  Default: empty\n  [-curlverbose]  Run xilcurl with --verbose flag if true.\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \n\n",
"get_reconfig_modules": "get_reconfig_modules\n\nDescription: \nGet a list of ReconfigModules\n\nSyntax: \nget_reconfig_modules  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                      [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of ReconfigModule objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'reconfig_module' objects of these types: \n                 'partition_def'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match reconfigurable module names against patterns\n                 Default: *\n\nCategories: \nObject, Partition\n\nDescription:\n\n  Get a list of reconfigurable modules (RMs) in the current design that match\n  a specified search pattern. The default command returns a list of all RMs\n  in the current project.\n\n  This command returns a list of RM objects, or returns an error if the\n  command fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_reconfig_modules based on property values on the RMs. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the 'RM' object, 'IS_GATE_LEVEL' and 'PARTITION_DEF' are two\n  of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the reconfig_modules of specified\n  partition_def objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match reconfigurable modules (RMs) against the\n  specified search pattern. The default pattern is the wildcard `*` which\n  gets a list of all RMs in the project.\n\nExample:\n\n  The following example gets all gate level, or netlist-based RMs in the\n  project:\n\n    get_reconfig_modules -filter {IS_GATE_LEVEL} \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  create_pr_configuration\n   *  delete_reconfig_modules\n   *  get_partition_defs\n   *  set_property\n",
"all_outputs": "all_outputs\n\nDescription: \nGet a list of all output ports in the current design\n\nSyntax: \nall_outputs  [-quiet] [-verbose]\n\nReturns: \nlist of port objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Returns a list of all output port objects that have been declared in the\n  current design.\n\n  To get a list of specific outputs in the design, use the get_ports command,\n  or use the filter command to filter the results returned by all_outputs.\n\n  The all_outputs command is scoped to return the objects hierarchically,\n  from the top-level of the design or from the level of the current instance.\n  By default the current instance is defined as the top level of the design,\n  but can be changed by using the current_instance command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns all the output ports in the current design:\n\n    all_outputs \n    \n\n  The following example sets the output delay for all outputs in the design:\n\n    set_output_delay 5 -clock REFCLK [all_outputs] \n    \n\nSee Also:\n\n   *  all_inputs\n   *  current_instance\n   *  filter\n   *  get_ports\n   *  set_output_delay\n",
"list_hierarchical_cells": "list_hierarchical_cells\n\nDescription: \nReturns the hierarchical paths of instances for the named reference.\n\nSyntax: \nlist_hierarchical_cells  [-fileset <arg>] [-top_only] [-quiet] [-verbose]\n                         [<reference_name>]\n\nReturns: \nlist of hierarchical paths\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-fileset]          Specifies the fileset to operate on\n  [-top_only]         Only walk and list the hierarchy associated with the \n                      active top\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n  [<reference_name>]  Specifies the name of the module/entity\n\nCategories: \nProject\n",
"open_rtl_design": "open_rtl_design\n\nDescription: \nOpen an rtl design\n\nSyntax: \nopen_rtl_design  [-name <arg>] [-part <arg>] [-constrset <arg>] [-top <arg>]\n                 [-rtl_skip_mlo] [-rtl_skip_ip] [-rtl_skip_constraints]\n                 [-quiet] [-verbose]\n\nReturns: \ndesign object\n\nUsage: \n  Name                     Description\n  ------------------------------------\n  [-name]                  Design name\n  [-part]                  Target part\n  [-constrset]             Constraint fileset to use\n  [-top]                   Specify the top module name\n  [-rtl_skip_mlo]          Skip mandatory logic optimization for RTL \n                           elaboration of the design.\n  [-rtl_skip_ip]           Exclude subdesign checkpoints in the RTL \n                           elaboration of the design.\n  [-rtl_skip_constraints]  Do not load and validate constraints against \n                           elaborated design.\n  [-quiet]                 Ignore command errors\n  [-verbose]               Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Opens a new or existing RTL source design.\n\n  Note: Verilog or VHDL source files must be added to the source fileset, and\n  a top module identified, before opening an RTL design.\n\nArguments:\n\n  -name <arg> - The name of a new or existing RTL design.\n\n  -part <arg> - The Xilinx device to use when creating a new design. If the\n  part is not specified the default part will be used.\n\n  -constrset <arg> - The name of the constraint fileset to use when opening\n  the design.\n\n  Note: The -constrset argument must refer to a constraint fileset that\n  exists. It cannot be used to create a new fileset. Use create_fileset for\n  that purpose.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following creates a new RTL design called RTL1:\n\n    open_rtl_design -name RTL1  \n    \n\n  Note: The default source set, constraint set, and part will be used in this\n  case.\n\n  The following example opens an existing RTL design called RTL1, and\n  specifies the constraint set to be used:\n\n    \n    open_rtl_design -name RTL1 -constrset top  \n    \n\n  Note: The default source set and part will be used in this case.\n\nSee Also:\n\n   *  config_run\n   *  launch_runs\n   *  link_design\n   *  open_impl_design\n   *  open_run\n",
"lindex": "lindex(n)             Tcl Built-In Commands             lindex(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lindex - Retrieve an element from a list\n\nSYNOPSIS\n       lindex list ?index...?\n_________________________________________________________________\n\nDESCRIPTION\n       The  lindex  command  accepts  a parameter, list, which it\n       treats as a Tcl list. It also accepts zero or more indices\n       into  the  list.  The indices may be presented either con-\n       secutively on the command line, or grouped in a  Tcl  list\n       and presented as a single argument.\n\n       If no indices are presented, the command takes the form:\n              lindex list\n       or\n              lindex list {}\n       In  this  case,  the  return value of lindex is simply the\n       value of the list parameter.\n\n       When presented with a single  index,  the  lindex  command\n       treats list as a Tcl list and returns the index'th element\n       from it (0 refers to the first element of the  list).   In\n       extracting  the  element,  lindex  observes the same rules\n       concerning braces and quotes and backslashes  as  the  Tcl\n       command  interpreter;  however,  variable substitution and\n       command substitution do not occur.  If index  is  negative\n       or  greater  than  or  equal  to the number of elements in\n       value, then an empty string is returned.  The  interpreta- |\n       tion  of  each  simple  index value is the same as for the |\n       command string index, supporting simple  index  arithmetic |\n       and indices relative to the end of the list.\n\n       If  additional  index  arguments  are  supplied, then each\n       argument is used in turn to select  an  element  from  the\n       previous indexing operation, allowing the script to select\n       elements from sublists.  The command,\n              lindex $a 1 2 3\n       or\n              lindex $a {1 2 3}\n       is synonymous with\n              lindex [lindex [lindex $a 1] 2] 3\n\nEXAMPLES\n              lindex {a b c}\n                    -> a b c\n              lindex {a b c} {}\n                    -> a b c\n              lindex {a b c} 0\n                    -> a\n              lindex {a b c} 2\n                    -> c\n              lindex {a b c} end\n                    -> c\n              lindex {a b c} end-1\n                    -> b\n              lindex {{a b c} {d e f} {g h i}} 2 1\n                    -> h\n              lindex {{a b c} {d e f} {g h i}} {2 1}\n                    -> h\n              lindex {{{a b} {c d}} {{e f} {g h}}} 1 1 0\n                    -> g\n              lindex {{{a b} {c d}} {{e f} {g h}}} {1 1 0}\n                    -> g\n\nSEE ALSO\n       list(n), lappend(n), linsert(n),  llength(n),  lsearch(n),\n       lset(n), lsort(n), lrange(n), lreplace(n), string(n)       |\n\n\nKEYWORDS\n       element, index, list\n\n\n\nTcl                            8.4                      lindex(n)\n",
"import_files": "import_files\n\nDescription: \nImport files and/or directories into the active fileset\n\nSyntax: \nimport_files  [-fileset <arg>] [-force] [-of_objects <args>] [-norecurse]\n              [-flat] [-relative_to <arg>] [-quiet] [-verbose] [<files>...]\n\nReturns: \nA list of file objects that were imported\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-fileset]      Fileset name\n  [-force]        Overwrite files of the same name in project directory\n  [-of_objects]   RMs to import the files to\n  [-norecurse]    Disables the default behavior of recursive directory \n                  searches\n  [-flat]         Import the files into a flat directory structure\n  [-relative_to]  Import the files with respect to the given relative \n                  directory\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  [<files>]       Name of the files to import into fileset\n\nCategories: \nProject, Simulation\n\nDescription:\n\n  Imports one or more files or the source file contents of one or more\n  directories to the specified fileset.\n\n  For every file added to a project the Vivado Design Suite attempts to store\n  and maintain both a relative path and an absolute path to the file or\n  directory. When a project is opened, these paths are used to locate the\n  files and directories. By default the Vivado Design Suite applies a\n  Relative First approach to resolving paths, searching the relative path\n  first, then the absolute path. You can use the PATH_MODE property to change\n  how the Vivado tool resolves file paths or properties for specific objects.\n  For more information, see the Vivado Design Suite Properties Reference\n  Guide (UG912).\n\n  Note: Importing multiple files one at a time can cause noticeable\n  performance degradation. It is more efficient to use a single import_files\n  command to import a list of files:\n\n    import_files {file1 file2 file3 ... fileN} \n    \n\n  This command is different from the add_files command, which adds files by\n  reference into the specified fileset. This command imports the files into\n  the local project folders under project.srcs\\<fileset>\\imports and then\n  adds the file to the specified fileset.\n\nArguments:\n\n  -fileset <name> - (Optional) The fileset to which the specified source\n  files should be added. If the specified fileset does not exist, the tool\n  will return an error. If no fileset is specified the files will be added to\n  the source fileset by default.\n\n  -force - (Optional) Overwrite files of the same name in the local project\n  directory and in the fileset.\n\n  -norecurse - (Optional) Do not recurse through subdirectories of any\n  specified directories. Without this argument the tool will also search\n  through any subdirectories for additional source files that can be added to\n  a project.\n\n  -flat - (Optional) Import all files into the imports folder without\n  preserving their relative paths. By default the directory structure of\n  files is preserved as they are imported into the design.\n\n  -relative_to <arg> - (Optional) Import the files relative to the specified\n  directory. This allows you to preserve the path to the imported files in\n  the directory structure of the local project. The files will be imported to\n  the imports folder with the path relative to the specified directory.\n\n  Note: The -relative_to argument is ignored if the -flat argument is also\n  specified. The -flat command eliminates the directory structure of the\n  imported files.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Optional) One or more file names or directory names to be added\n  to the specified fileset. If a directory name is specified, all valid\n  source files found in the directory, and in subdirectories of the\n  directory, will be added. If no files are specified, the tool imports files\n  in the source set for the current project.\n\n  Note: If the path is not specified as part of the file name, the current\n  working directory is used, or the directory from which the tool was\n  launched.\n\nExamples:\n\n  The following example imports the top.ucf file into the constrs_1\n  constraint fileset.\n\n    import_files -fileset constrs_1 top.ucf  \n    \n\n  The following example imports the valid source files into the source\n  fileset (sources_1) as a default since the -fileset argument is not\n  specified. In addition, the -norecurse argument restricts the tool to\n  looking only in the specified \\level1 directory and not searching any\n  subdirectories. All valid source files will be imported into the \\imports\n  folder of the project because the -flat argument has been specified.\n\n    import_files C:/Data/FPGA_Design/level1 -norecurse -flat  \n    \n\n  Note: Without the -flat option a \\level1 directory would be created inside\n  of the \\imports folder of the project.\n\n  The following example imports files into the source fileset (sources_1)\n  because the -fileset argument is not specified. Valid source files are\n  imported from the \\level1 directory, and all subdirectories, and the files\n  will be written into the \\imports folder of the project starting at the\n  \\Data directory due to the use of the -relative_to argument.\n\n    import_files C:/Data/FPGA_Design/level1 -relative_to C:/Data  \n    \n\nSee Also:\n\n   *  add_files\n",
"upgrade_project": "upgrade_project\n\nDescription: \nUpgrade a project from a previous release to use the latest Vivado features.\n\nSyntax: \nupgrade_project  [-migrate_output_products] [-log <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-migrate_output_products]  Migrate the output products directory structure\n                              to the latest Vivado structure.\n  [-log]                      (Optional) Identifies the log file to which the\n                              project upgrade report will be concatenated. \n                              Default: An empty string, indicating that no \n                              log will be written\n                              Values: A file path to an existing writable \n                              file, or a non-existent file location in a \n                              writable directory\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n\nCategories: \nProject\n",
"add_to_power_rail": "add_to_power_rail\n\nDescription: \nAdd power sources to power Rail\n\nSyntax: \nadd_to_power_rail  [-power_sources <args>] [-phased_power_source <args>]\n                   [-quiet] [-verbose] <power_rail>\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-power_sources]        List of power_sources to add. Can be power rails \n                          and/or power supplies\n  [-phased_power_source]  Pair of phased power source and its phase value. \n                          Power source can be a phased power rail.\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  <power_rail>            Power rail to add sources to\n\nCategories: \nXDC, Floorplan\n",
"update_compile_order": "update_compile_order\n\nDescription: \nUpdates a fileset compile order and possibly top based on a design graph.\n\nSyntax: \nupdate_compile_order  [-force_gui] [-fileset <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-force_gui]  Execute this command, even when run interactively in the GUI.\n  [-fileset]    Fileset to update based on a design graph\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Update the compile order of the design sources in the current project, or\n  in the specified fileset.\n\nArguments:\n\n  -force_gui - Update the compile order in GUI mode of the Vivado IDE.\n\n  -fileset <arg> - Update the compile order of the specified fileset.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example updates the compile order of the source files in the\n  simulation fileset:\n\n    update_compile_order -fileset sim_1 \n    \n\nSee Also:\n\n   *  add_files\n   *  import_files\n",
"write_ncd": "",
"set_attribute": "",
"read_csv": "read_csv\n\nDescription: \nImport package pin and port placement information\n\nSyntax: \nread_csv  [-quiet_diff_pairs] [-quiet] [-verbose] <file>\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-quiet_diff_pairs]  Suppress warnings about differential pair inference \n                       when importing I/O ports\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <file>               Pin Planning CSV file\n\nCategories: \nFileIO\n\nDescription:\n\n  Imports port definition and package pin placement information from a comma\n  separated value (CSV) file.\n\n  The port definitions in a CSV file can be imported into an I/O Pin Planning\n  project. In a Pin Planning project, importing a CSV file replaces the\n  current port definitions. Any ports in the design that are not found in the\n  imported CSV file will be removed.\n\n  In all other projects the port definitions are defined in the source design\n  data, however package pin assignments and port attributes can be read from\n  the specified CSV file.\n\n  The ports read from the CSV file can not have spaces in the name, or the\n  tool will return an error. The specific format and requirements of the CSV\n  file are described in the Vivado Design Suite User Guide: I/O and Clock\n  Planning (UG899).\n\nArguments:\n\n  -quiet_diff_pairs - (Optional) The tool transcripts messages related to\n  pins that may be inferred as differential pairs when importing the CSV\n  file. This option suppresses messages related to inferring differential\n  pairs.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The file name of the CSV file to be imported.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example imports a CSV file into an open project:\n\n    read_csv C/Data/pinList.csv \n    \n\n  The following example sets up a new IO Pin Planning project, and then\n  imports the specified CSV file into it, and infers any differential pairs\n  in the CSV file:\n\n    create_project myPinPlan C:/Data/myPinPlan -part xc7v285tffg1157-1  \n    set_property design_mode PinPlanning [current_fileset]  \n    open_io_design -name io_1  \n    read_csv C:/Data/import.csv  \n    infer_diff_pairs -filetype csv C:/Data/import.csv \n    \n\n  Note: The design_mode property on the source fileset is what determines the\n  nature of the project.\n\nSee Also:\n\n   *  create_project\n   *  infer_diff_pairs\n   *  open_io_design\n   *  set_property\n   *  write_csv\n",
"remove_custom_timing_model": "remove_custom_timing_model\n\nDescription: \nremoving Custom timing model\n\nSyntax: \nremove_custom_timing_model  [-all] [-quiet] [-verbose] [<cells>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-all]      remove all CTM cells\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<cells>]   cells to be deleted\n\nCategories: \nTiming\n",
"delete_ip_run": "delete_ip_run\n\nDescription: \nDeletes the block fileset and run associated with a given IP.\n\nSyntax: \ndelete_ip_run  [-force] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force the deletion of the block fileset and run.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   All of the IP objects (from get_ips or get_files) for which the\n              block fileset and run will be deleted.\n\nCategories: \nProject, IPFlow\n\nDescription:\n\n  Deletes the out-of-context (OOC) synthesis and implementation runs for the\n  specified IP module.\n\n  The contents of the run directory are deleted from the project as well as\n  the run. However, the output products created by the run and copied to the\n  IP sources folder, the DCP file and Verilog and VHDL structural netlists,\n  are not deleted from the project. You must use the reset_target or\n  generate_target command to update the IP output products.\n\n  Note: The command requires an IP object as specified by the get_ips or\n  get_files command, and will not delete a run based on either the name of\n  the run, or a run object as returned by get_runs.\n\nArguments:\n\n  -force - Force the deletion of the run.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) The IP object or file to delete the run from. An IP\n  can be specified as an object using the get_ips command, or as a file (XCI)\n  using the get_files command.\n\nExamples:\n\n  The following example deletes the OOC synthesis and implementation runs\n  from the specified IP module:\n\n    delete_ip_run [get_ips add1] \n    \n\n  Note: In this example, all run results will also be removed from the run\n  directory on the hard drive.\n\nSee Also:\n\n   *  create_ip_run\n   *  generate_target\n   *  get_files\n   *  get_ips\n   *  reset_target\n",
"get_drc_checks": "get_drc_checks\n\nDescription: \nGet a list of DRC rule check objects\n\nSyntax: \nget_drc_checks  [-of_objects <args>] [-regexp] [-nocase] [-filter <arg>]\n                [-abbrev <arg>] [-ruledecks <args>] [-quiet] [-verbose]\n                [<patterns>]\n\nReturns: \nlist of DRC rule_check objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-of_objects]  Get 'rule_check' objects of these types: 'drc_ruledeck'.\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-abbrev]      Get the largest ID for this abbrev\n  [-ruledecks]   Containers of Report DRC rule checks\n                 Default: default\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match the 'rule_check' objects against patterns.\n                 Default: *\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Gets a list of the currently defined DRC checks. This list includes both\n  factory defined design rule checks, and user-defined checks created by the\n  create_drc_check command.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -of_objects <args> - (Optional) Get the design rule checks associated with\n  a rule deck object. The ruledeck object must be specified by the\n  get_drc_ruledecks command.\n\n  Note: -of_objects cannot be used with a search <pattern>.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of rule checks returned\n  by get_drc_checks based on property values on the rule checks. You can find\n  the properties on an object with the report_property or list_property\n  commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -abbrev <arg> - (Optional) Get the design rule checks associated with the\n  specified rule name or abbreviation.\n\n  -ruledecks <args> - (Optional) Get the design rule checks associated with\n  the specified rule decks.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match design rule checks against the specified\n  patterns. The default pattern is the wildcard `*` which gets all rule\n  checks. More than one pattern can be specified to find multiple rule checks\n  based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following command gets a list of all AVAL design rule checks:\n\n    get_drc_checks AVAL* \n    \n\n  The following example gets the checks associated with the specified rule\n  deck:\n\n    get_drc_checks -of_objects [get_drc_ruledecks placer_checks] \n    \n\nSee Also:\n\n   *  create_drc_check\n   *  get_drc_ruledecks\n   *  list_property\n   *  report_drc\n   *  report_property\n",
"report_high_fanout_nets": "report_high_fanout_nets\n\nDescription: \nReport high fanout nets\n\nSyntax: \nreport_high_fanout_nets  [-file <arg>] [-format <arg>] [-append] [-ascending]\n                         [-timing] [-histogram] [-load_types] [-clock_regions]\n                         [-slr] [-max_nets <arg>] [-fanout_greater_than <arg>]\n                         [-fanout_lesser_than <arg>] [-name <arg>]\n                         [-cells <args>] [-clocks <args>] [-return_string]\n                         [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-file]                 Filename to output results to. (send output to \n                          console if -file is not used)\n  [-format]               Specifies how to format the report: text, xml. \n                          Default is 'text'. Only applies if -file is used. \n                          If xml output is used, -append is not allowed.\n                          Default: text\n  [-append]               Append to existing file\n  [-ascending]            Report nets in ascending order\n  [-timing]               Report worst slack and worst delay values on nets\n  [-histogram]            Report histogram for high fanout nets\n  [-load_types]           Report load  details\n  [-clock_regions]        Report clock region wise load distribution\n  [-slr]                  Report SLR wise load distribution\n  [-max_nets]             Number of nets for which report is to be generated\n                          Default: 10\n  [-fanout_greater_than]  Report nets that have fanout greater than the \n                          specified integer, default 0\n                          Default: 0\n  [-fanout_lesser_than]   Report nets that have fanout less than the \n                          specified integer, default INT_MAX\n                          Default: INT_MAX\n  [-name]                 Output the results to GUI panel with this name\n  [-cells]                Report the nets of the specified cells\n  [-clocks]               Report the nets of the specified clocks\n  [-return_string]        Return report as string\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Report the fanout of nets in the design, starting with the highest fanout\n  nets, and working down. Options allow you to control various aspects of the\n  report.\n\n  This command can be run on an implemented design, or on the synthesized\n  netlist. However, the results will be more complete on the implemented\n  design.\n\n  The command returns the fanout report of nets in the design, or returns an\n  error if it fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -format [ text | xml ] - (Optional) The default format of the output report\n  is text. You can also output an XML report. XML output is only valid when\n  -file is specified, and cannot be used with -append.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -ascending - (Optional) Report nets in ascending order.\n\n  -timing - (Optional) Add timing data to the report to display the worst\n  slack (WNS) and worst delay on high fanout nets.\n\n  Note: The -timing option will slow the run time of report_high_fanout_nets,\n  and is not supported for use with -histogram.\n\n  -histogram - (Optional) Format the report as a histogram showing the number\n  of fanouts, and the number and percentage of nets with that many fanouts in\n  the design.\n\n  Note: This option cannot be used with the following options: -ascending,\n  -timing, -load_types, -clock_regions, -slr, -max_nets,\n  -fanout_greater_than, and -fanout_lesser_than.\n\n  -load_types - (Optional) Reports the various load types on the net sorted\n  in two different ways: by load types (data/clock/set/reset...) and by\n  device resource at which loads are placed (Slices/IO...). When\n  report_high_fanout_nets is run on the unplaced synthesized design only the\n  load type is reported.\n\n  -clock_regions - (Optional) Report the load distribution across clock\n  regions. This option can only be used after placement, and reports the\n  clock regions the various loads on the net are located in.\n\n  -slr - (Optional) Report the load distribution across SLRs. This option can\n  only be used after placement, and reports the SLRs that various loads on\n  the net are located in, after placement.\n\n  Note: The -load_types, -slr, and -clock_regions options cannot be used\n  together.\n\n  -max_nets <arg> - (Optional) Number of nets to report. Default: 10\n\n  -fanout_greater_than <arg> - (Optional) Report only nets that have fanout\n  greater than the specified limit. The value can be specified as an integer,\n  with a default value of 0.\n\n  -fanout_lesser_than <arg> - (Optional) Report only nets that have fanout\n  less than the specified limit. The value can be specified as an integer,\n  with a default value of INT_MAX.\n\n  -name <arg> - (Optional) The name of the High Fanout Nets Report view to\n  display in the Vivado IDE when run in GUI mode. If the name has already\n  been used in an open Report view, that view will be closed and a new report\n  opened.\n\n  -cells <args> - (Optional) Report the nets attached to the specified cell\n  instances in the design. Cells can be passed by name, or as cell objects\n  returned by the get_cells command.\n\n  -clocks <args> - (Optional) Report the nets of the specified clocks. The\n  clocks can be passed by name, or as clock objects returned by the\n  get_clocks command.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the fanout of nets for the specified clocks:\n\n    report_high_fanout_nets -clocks [get_clocks gt*] \n    \n\n  The following example reports the nets with fanouts less than 10 loads, and\n  returns the results to a string stored as a Tcl variable:\n\n    set myRep [report_high_fanout_nets -fanout_lesser_than 10 -return_string] \n    \n\nSee Also:\n\n   *  get_cells\n",
"get_pplocs": "get_pplocs\n\nDescription: \nInternal TCL task for reporting PPLOCs on pins or nets: (1) -nets option returns PPLOCs on given nets; (2) -pins option returns PPLOCs on given pins; (3) if option -nets and option -pins are both not specificed, it returns all PPLOCs in the design.\n\nSyntax: \nget_pplocs  -nets <args> -pins <args> [-count] [-unlocked] [-locked]\n            [-level <arg>] [-quiet] [-verbose]\n\nReturns: \nPPLOC nodes or number of PPLOCs\n\nUsage: \n  Name         Description\n  ------------------------\n  -nets        List of nets to report its PPLOCs\n  -pins        List of pins to report its PPLOCs\n  [-count]     Count number of PPLOCs;; Do not report PPLOC or node names.\n  [-unlocked]  Report unlocked/unfixed PPLOCs only \n  [-locked]    Report locked/fixed PPLOCs only; use -level to specify locked \n               level.\n  [-level]     Specify locked level; Valid values are placement and routing.\n               Default: placement\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n\nCategories: \nReport\n",
"import_xst": "import_xst\n\nDescription: \nImports the given XST project file\n\nSyntax: \nimport_xst  [-copy_sources] [-quiet] [-verbose] <file>\n\nReturns: \nlist of files object that were imported from the XST file\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-copy_sources]  Copy all the sources from xst project file into the \n                   created project\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <file>           Name of the XST project file to be imported\n\nCategories: \nProject\n\nDescription:\n\n  Imports XST synthesis project files into the current project, including the\n  various source files used in the XST run.\n\nArguments:\n\n  -copy_sources - (Optional) Copy XST project source files to the local\n  project directory structure rather than referencing them from their current\n  location. The default is to reference source files from their current\n  location.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the XST project file from which to import\n  the source files.\n\nExamples:\n\n  The following example creates a new project called xst_test, and imports\n  the drp_des.xst file:\n\n    create_project xst_test C:/Data/FPGA_Design/xst_test   \n    import_xst C:/Data/ise_designs/drp_des.xst \n    \n\nSee Also:\n\n   *  create_project\n",
"writeback_frames": "writeback_frames\n\nDescription: \nCreate a partial bitstream to modify selected frames in a bitfile\n\nSyntax: \nwriteback_frames  -reference_file <arg> -update_file <arg> [-force] [-quiet]\n                  [-verbose] <file>\n\nUsage: \n  Name             Description\n  ----------------------------\n  -reference_file  Input bitfile (.bit or .rbt)\n  -update_file     File containing details of bits to be modified\n  [-force]         Overwrite existing file\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <file>           Output partial bitfile (.bit, .bin or .rbt)\n\nCategories: \nFileIO\n",
"implement_debug_core": "implement_debug_core\n\nDescription: \nImplement debug core\n\nSyntax: \nimplement_debug_core  [-quiet] [-verbose] [<cores>...]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<cores>]   Debug core\n\nCategories: \nDebug\n\nDescription:\n\n  Implements the Vivado logic analyzer debug cores in the current project.\n  The tools will be run once for any ILA debug cores specified, and run one\n  more time for the Debug Hub core if all cores are specified. The ILA core\n  (labtools_ila_v3) is the only core type currently supported by the\n  create_debug_core command. The tool automatically adds a Debug Hub core\n  (labtools_xsdbmasterlib_v2) to contain and configure the ILA cores in the\n  project.\n\n  The Vivado tool creates Debug Hub core and ILA cores initially as black\n  boxes. These cores must be implemented prior to running through place and\n  route. After the core is created with create_debug_core, and while ports\n  are being added and connected with create_debug_port and\n  connect_debug_port, the content of the debug core is not defined or visible\n  within the design.\n\n  Debug core implementation is automatic when you launch an implementation\n  run using the launch_runs command, or during design optimization using\n  opt_design. However, you can also use the implement_debug_core command to\n  implement one or more of the cores in the design without having to\n  implement the whole design.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cores> - (Optional) One or more debug cores to implement. All debug cores\n  will be implemented if no cores are specified.\n\nExamples:\n\n  The following example implements all debug cores in the current project:\n\n    implement_debug_core [get_debug_cores] \n    \n\nSee Also:\n\n   *  connect_debug_port\n   *  create_debug_core\n   *  create_debug_port\n   *  get_debug_cores\n   *  launch_runs\n",
"lock_design": "lock_design\n\nDescription: \nLocks or unlocks netlist, placement or routing of a design. The 'lock/unlock' will only applied on physically placed cells and routed nets\n\nSyntax: \nlock_design  [-level <arg>] [-unlock] [-export] [-quiet] [-verbose] [<cell>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-level]    specify the locking and unlocking level;  Valid values are \n              logical, placement, and routing.\n              Default: placement\n  [-unlock]   Unlock cells, if cells are not specified, whole design is \n              unlocked;  '-level' parameter must be specified for unlocking.\n  [-export]   mark that the constraints can be exported.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<cell>]    Lock cells, if cells are not specified, whole design is locked.\n              Notice only placed cells and routed nets will be locked.\n              Default: *\n\nCategories: \nProject\n\nDescription:\n\n  This command is used in the Hierarchical Design Flows for Design\n  Preservation and Dynamic Function eXchange (DFX). Refer to the Vivado Design Suite\n  User Guide: Hierarchical Design (UG905) for more information on these\n  design flows, and the use of this command.\n\n  The lock_design command is used to lock down the placement and/or routing\n  of a design, or of the specified cell of a design. After reading in an\n  Out-of-Context (OOC) design checkpoint using the read_checkpoint command,\n  the preservation level for the module must be defined.\n\n  This command sets the IS_LOC_FIXED, IS_BEL_FIXED, and IS_ROUTE_FIXED\n  properties of the specified logic.\n\nArguments:\n\n    lock_design  [-level <arg>] [-unlock] [-export] [-quiet] [-verbose] [<cell>]\n\n  -level <arg> - (Optional) Specify the level of the cell or design to\n  preserve in the current design. As a default, the placement data is\n  preserved. Accepted values are:\n\n   *  logical - Preserves the logical design. Any placement or routing\n      information is still used, but can be changed if the tools can achieve\n      better results.\n\n   *  placement - Preserves the logical and placed design. Any routing\n      information is still used, but can be changed if the tools can achieve\n      better results. This is the default setting.\n\n   *  routing - Preserves the logical, placed and routed design. Internal\n      routes are preserved, but interface nets are not. In order to preserve\n      routing, the CONTAIN_ROUTING property must have been used on the Pblock\n      during the OOC implementation. This ensures that there will be no\n      routing conflicts when the OOC implementation is reused.\n\n  -unlock - (Optional) Unlock cells. If cells are not specified, the whole\n  design is unlocked. The -level option must be specified for unlocking, just\n  as it was for locking.\n\n  Note: Locking -level routing locks the logical, placement, and routing data\n  of the design. However -unlock -level routing only unlocks the routing\n  data. You must use -unlock -level logical to unlock the routing, placement,\n  and logical data of the design.\n\n  -export - (Optional) Permit the export the placement and routing data as an\n  XDC file. The constraints of a locked design or cell can be exported using\n  the write_xdc command. By default, the constraints of a locked design or\n  cell cannot be exported.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cell> - (Optional) Lock the specified cells in the design, if cells are\n  not specified, the whole design is locked. The default is to lock all cells\n  in the design.\n\n  Note: Only placed cells and routed nets will be locked at the level\n  specified.\n\nExamples:\n\n  The following example locks the netlist, placement, and routing data for\n  the specified cells of the current design:\n\n    lock_design -level routing [get_cells usbEngine*]\n\n  This example unlocks the routing data for the specified cells of the\n  current design, while leaving the netlist and placement data locked from\n  the prior example:\n\n    lock_design -unlock -level routing [get_cells usbEngine*]\n\n  The following example unlocks the routing, placement, and netlist data for\n  the specified cells of the current design:\n\n    lock_design -unlock -level logical [get_cells usbEngine*]\n\nSee Also:\n\n   *  read_checkpoint\n   *  write_xdc\n",
"report_clocks": "report_clocks\n\nDescription: \nReport clocks\n\nSyntax: \nreport_clocks  [-file <arg>] [-append] [-return_string] [-quiet] [-verbose]\n               [<clocks>]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-return_string]  return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  [<clocks>]        List of clocks\n                    Default: *\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Returns a table showing all the clocks in a design, including propagated\n  clocks, generated and auto-generated clocks, virtual clocks, and inverted\n  clocks in the current synthesized or implemented design. More detailed\n  information about each clock net can be obtained with the\n  report_clock_utilization command.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <clocks> - (Optional) The clocks to match against the specified patterns.\n  The default pattern is the wildcard `*` which returns all clocks in the\n  design. More than one pattern can be specified to find multiple clocks\n  based on different search criteria.\n\nExamples:\n\n  The following example returns the name, period, waveform, and sources of\n  the clocks in the current design:\n\n    report_clocks -file C:/Data/FPGA_Design/clock_out.txt  \n    \n\n  The following example reports the clocks in the design with 'Clock' in the\n  name:\n\n    report_clocks *Clock* \n    \n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n   *  report_clock_utilization\n",
"delete_dashboard": "delete_dashboard\n\nDescription: \nDelete the Project summary dashboard\n\nSyntax: \ndelete_dashboard  -name <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -name       Name of the dashboard\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n",
"eof": "eof(n)                Tcl Built-In Commands                eof(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       eof - Check for end of file condition on channel\n\nSYNOPSIS\n       eof channelId\n_________________________________________________________________\n\n\nDESCRIPTION\n       Returns  1 if an end of file condition occurred during the\n       most recent input operation on channelId (such as gets), 0\n       otherwise.\n\n       ChannelId  must  be an identifier for an open channel such\n       as a Tcl standard channel (stdin, stdout, or stderr),  the\n       return  value from an invocation of open or socket, or the\n       result of a channel creation command  provided  by  a  Tcl\n       extension.\n\nEXAMPLES\n       Read and print out the contents of a file line-by-line:\n              set f [open somefile.txt]\n              while {1} {\n                  set line [gets $f]\n                  if {[eof $f]} {\n                      close $f\n                      break\n                  }\n                  puts 'Read line: $line'\n              }\n\n       Read  and  print  out the contents of a file by fixed-size\n       records:\n              set f [open somefile.dat]\n              fconfigure $f -translation binary\n              set recordSize 40\n              while {1} {\n                  set record [read $f $recordSize]\n                  if {[eof $f]} {\n                      close $f\n                      break\n                  }\n                  puts 'Read record: $record'\n              }\n\n\nSEE ALSO\n       file(n), open(n), close(n), fblocked(n), Tcl_StandardChan-\n       nels(3)\n\n\nKEYWORDS\n       channel, end of file\n\n\n\nTcl                            7.5                         eof(n)\n",
"get_pr_configurations": "get_pr_configurations\n\nDescription: \nGet a list of partition configurations\n\nSyntax: \nget_pr_configurations  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n                       [<patterns>]\n\nReturns: \nlist of Configuration objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match partition configuration names against patterns\n                Default: *\n\nCategories: \nObject, Partition\n\nDescription:\n\n  Get a list of PR configuration objects in the current project.\n\n  In the Dynamic Function eXchange (DFX) design flow, the PR configuration lets\n  you specify a reconfigurable module (RM) to assign to a specific instance\n  of a Partition Definition (partitionDef). This flow lets you create unique\n  configurations of the design based on the combination of the core design\n  and one or more RMs. The DFX design flow requires the implementation of each\n  PR configuration, resulting in partial bitstreams for the RMs, but complete\n  bitstreams for each integrated configuration. Refer to the Vivado Design\n  Suite User Guide: Dynamic Function eXchange (UG909) for more information.\n\n  This command returns a list of PR configuration objects, or returns an\n  error if the command fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_pr_configurations based on property values on the configurations. You\n  can find the properties on an object with the report_property or\n  list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match PR configurations against the specified\n  search pattern. The default pattern is the wildcard `*` which gets a list\n  of all PR configurations in the project.\n\nExample:\n\n  The following example gets all of the PR configuration objects in the\n  project:\n\n    get_pr_configurations \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  create_pr_configuration\n   *  create_reconfig_module\n   *  delete_pr_configurations\n   *  setup_pr_configurations\n",
"unregister_proc": "unregister_proc\n\nDescription: \nUnregister a previously registered Tcl proc.\n\nSyntax: \nunregister_proc  [-quiet] [-verbose] <tasknm>\n\nReturns: \nNothing\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <tasknm>    Name of Tcl task to unregister.  The task must be wrapping a \n              proc.\n\nCategories: \nTools\n\nDescription:\n\n  Unregister the Tcl command, or <tasknm>, from the Vivado Design Suite Tcl\n  interpretor.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <tasknm> - (Required) Name of Tcl task to unregister. The task must be\n  wrapping a registered Tcl procedure.\n\nExample:\n\n  The following example unregisters the findCmd Tcl task:\n\n    unregister_proc findCmd \n    \n\nSee Also:\n\n   *  register_proc\n",
"get_board_component_interfaces": "get_board_component_interfaces\n\nDescription: \nGets the list of interfaces in the board components that implement busdef specified by VLNV\n\nSyntax: \nget_board_component_interfaces  [-regexp] [-nocase] [-all] [-filter <arg>]\n                                [-of_objects <args>] [-quiet] [-verbose]\n                                [<patterns>...]\n\nReturns: \nlist of bus interfaces\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-all]         Returns all enabled as well as disabled interfaces\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board_component_interface' objects of these types: \n                 'board board_component'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match Bus Interface names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of interfaces defined on the components found on the current\n  board, as defined in the Board Interface file.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, defined components\n  and supported interfaces. You can create custom boards by defining a custom\n  Board Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The component interface defines related groups of signals that are found on\n  a component, or a component mode.\n\n  This command returns a list of component interfaces, or returns an error if\n  it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -all - (Optional) Return a list of all component interfaces defined in the\n  Board Interface file of the current board.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_component_interfaces based on property values on the component\n  interfaces. You can find the properties on an object with the\n  report_property or list_property commands. Any property/value pair can be\n  used as a filter. In the case of the component interface object, 'NAME' and\n  'BUSDEF_NAME' are two of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the component interfaces of the\n  specified board, or board_component objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match component interfaces against the specified\n  search patterns. The default pattern is the wildcard `*` which gets a list\n  of all component interfaces defined on the current board.\n\nExamples:\n\n  The following example gets the component interfaces defined in the Board\n  Interface file for the specified board component:\n\n    get_board_component_interfaces -of_objects [get_board_components *part0*] \n    \n\n  The following example gets the component interfaces defined in the Board\n  Interface file, and then uses that information to create interfaces in the\n  current project:\n\n    #Get and Create Interfaces for I/O Ports  \n    foreach x [get_board_component_interfaces] {  \n    create_interface $x } \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_buses\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"get_generated_clocks": "get_generated_clocks\n\nDescription: \nGet a list of generated clocks in the current design\n\nSyntax: \nget_generated_clocks  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                      [-match_style <arg>] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of clocks\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-regexp]       Patterns are full regular expressions\n  [-nocase]       Perform case-insensitive matching (valid only when -regexp \n                  specified)\n  [-filter]       Filter list with expression\n  [-of_objects]   Get generated clocks of these pins, ports or nets\n  [-match_style]  Style of pattern matching, valid values are ucf, sdc\n                  Default: sdc\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  [<patterns>]    Match generated clock names against patterns\n                  Default: *\n\nCategories: \nXDC, Object\n\nDescription:\n\n  Gets a list of generated clocks in the current project that match a\n  specified search pattern. The default command gets a list of all generated\n  clocks in the project.\n\n  A generated clock can be added to the design using the\n  create_generated_clock command, or can be automatically generated by the\n  tool, at the output of an MMCM for instance.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - Filter the results list with the specified expression. The\n  -filter argument filters the list of objects returned by\n  get_generated_clocks based on property values on the generated clocks. You\n  can find the properties on an object with the report_property or\n  list_property commands. In the case of the generated_clock object,\n  'DUTY_CYCLE' and 'MASTER_CLOCK' are some of the properties that can be used\n  to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the generated clocks connected to the\n  specified port, pin, or net objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -match_style - (Optional) Indicates that the search pattern matches UCF\n  constraints or SDC constraints. The default is SDC.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match generated clocks against the specified\n  patterns. The default pattern is the wildcard `*` which gets all generated\n  clocks in the project.\n\nExamples:\n\n  The following example gets the names of all generated clocks in the current\n  project:\n\n    get_generated_clocks \n    \n\nSee Also:\n\n   *  create_generated_clock\n   *  get_clocks\n   *  report_property\n",
"list": "list(n)               Tcl Built-In Commands               list(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       list - Create a list\n\nSYNOPSIS\n       list ?arg arg ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command returns a list comprised of all the args, or\n       an empty string if no  args  are  specified.   Braces  and\n       backslashes  get  added  as  necessary, so that the lindex\n       command may be used on the result to re-extract the origi-\n       nal  arguments,  and also so that eval may be used to exe-\n       cute the resulting list, with  arg1  comprising  the  com-\n       mand's  name  and the other args comprising its arguments.\n       List produces  slightly  different  results  than  concat:\n       concat  removes  one  level of grouping before forming the\n       list, while list works directly from  the  original  argu-\n       ments.\n\nEXAMPLE\n       The command\n              list a b 'c d e  ' '  f {g h}'\n       will return\n              a b {c d e  } {  f {g h}}\n       while concat with the same arguments will return\n              a b c d e f {g h}\n\n\nSEE ALSO\n       lappend(n),  lindex(n), linsert(n), llength(n), lrange(n), |\n       lrepeat(n), lreplace(n), lsearch(n), lset(n), lsort(n)\n\n\nKEYWORDS\n       element, list\n\n\n\nTcl                                                       list(n)\n",
"encrypt": "encrypt\n\nDescription: \nEncrypt files in place with a language specific key file in IEEE 1735. no default\n\nSyntax: \nencrypt  [-key <arg>] -lang <arg> [-ext <arg>] [-quiet] [-verbose] <files>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-key]      key file to be used to encrypt; if absent, use embedded keys\n  -lang       HDL language of the input/output file\n  [-ext]      extension to use for encrypted file; the original source files \n              will be preserved.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <files>     Files to be encrypted in place\n\nCategories: \nFileIO\n\nDescription:\n\n  Note: The encrypt command is provided with limited access, and requires a\n  special license to use.\n\n  Allows anyone with an encryption license to encrypt Verilog or VHDL files\n  using the IEEE 1735 encryption standard.\n\n  Encrypted files can be provided by third-party IP providers to protect\n  their intellectual property, while still enabling the Vivado Design Suite\n  to read the encrypted files for synthesis and simulation. The data is in\n  plain text prior to encryption.\n\n  Note: Unless the -ext option is used, the specified files are encrypted in\n  place, overwriting the input files with the encrypted files.\n\nArguments:\n\n  -key <arg> - (Optional) Specifies an RSA key file that includes the Xilinx\n  public key. If the -key is not specified, the Vivado tool looks for keys\n  embedded within the specified files. These are 1735 supported pragmas, or\n  directives embedded into the specified files, that provide the encryption\n  key and indicate where the protected data begins and ends.\n\n  Note: The Xilinx public key can be obtained by members from the IEEE P1735\n  working group, or by contacting an appropriate Xilinx representative.\n\n  -lang [ vhdl | verilog ] - (Required) Specify the HDL language of the\n  source files to be encrypted. Supported values are VHDL or verilog.\n\n  -ext <arg> - (Optional) Specify an extension to use for the output\n  encrypted files. The original source files will be preserved.\n\n  Note: If this option is not specified, the original source files will be\n  overwritten with the encrypted output.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) The names of Verilog or VHDL files to encrypt.\n\nExample:\n\n  The following example encrypts the specified Verilog file, using the\n  specified key file:\n\n    encrypt -lang verilog -key C:/Data/xilinx_rsa_key.txt C:/Data/design_1.v \n    \n\n  Note: The specified source file is overwritten by the encrypted output file.\n\nSee Also:\n\n   *  write_verilog\n   *  write_vhdl\n",
"write_hw_platform_metadata": "write_hw_platform_metadata\n\nDescription: \nWrite the unified JSON metadata file for the current design\n\nSyntax: \nwrite_hw_platform_metadata  [-quiet] [-verbose] [<file>]\n\nReturns: \nThe name of the unified JSON metadata file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<file>]    Unified JSON metadata file\n              Values: A filename with alphanumeric characters and .json \n              extension.\n\nCategories: \nVitis, Platform, FileIO\n\nDescription:\n\n  Writes a JSON metadata file for the platform represented by the current\n  design.\n\n  This command returns the name of the JSON file written, or returns an error\n  if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the JSON file to write. Must use the .json\n  file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes the JSON file for the current project:\n\n    write_hw_platform_metadata C:/Data/zc102_platform.json\n\nSee Also:\n\n   *  open_hw_platform\n   *  validate_hw_platform\n   *  write_hw_platform\n",
"place_partpins": "place_partpins\n\nDescription: \nAutomatically place a set of partition pins in ooc mode\n\nSyntax: \nplace_partpins  [-num_locs_per_tile <arg>] [-start_tile <arg>]\n                [-end_tile <arg>] [-quiet] [-verbose] [<ports>...]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-num_locs_per_tile]  Number of locs per tile\n                        Default: 5\n  [-start_tile]         Lower Left Int tile\n  [-end_tile]           Upper Right Int tile\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n  [<ports>]             Ports to place (if omitted, all ports will be placed)\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Automatically place a set of partition pins (ports) onto the device in an\n  out-of-context flow.\n\nArguments:\n\n  -num_locs_per_tile <arg> - (Optional) Specify the number of locs to use per\n  tile when placing the partition pins. The default value is 5.\n\n  -start_tile <arg> - (Optional) Specify a range of tiles to place partition\n  pins into, starting in the low-left corner.\n\n  -end_tile <arg> - (Optional) Specify a range of tiles to place partition\n  pins into, ending with the upper right corner.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ports> - Specify the ports to be placed. The default is to place all ports.\n\nExamples:\n\n  The following example places partition pins:\n\n    place_partpins \n    \n",
"rename_net": "rename_net\n\nDescription: \nrename a net\n\nSyntax: \nrename_net  -to <arg> [-quiet] [-verbose] <net>...\n\nUsage: \n  Name        Description\n  -----------------------\n  -to         New name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <net>       Net to rename\n\nCategories: \nNetlist\n\nDescription:\n\n  Rename a net in the current synthesized or implemented design.\n\n  The following are limitations with regard to renaming nets:\n\n   *  You cannot rename nets that have DONT_TOUCH or MARK_DEBUG properties\n      set to TRUE.\n\n   *  You cannot rename individual bits of a bus net, but you can\n      collectively rename the whole bus.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  Changes to the names of cells, nets, pins, and ports, will also affect the\n  design constraints defined in the in-memory design. Constraints are\n  automatically modified to target the new object name, however these are not\n  written back to the source XDC file. Saving the modified in-memory design\n  using write_checkpoint will save both the renamed objects and modified\n  constraints.\n\n  This command returns nothing if successful, or an error if it fails.\n\nArguments:\n\n  -to <arg> - (Required) Specify the new name to assign to the specified net.\n  Specified names can not contain Tcl special characters: `'\\{};$#\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <net> - (Required) Name of a net to rename.\n\nExamples:\n\n  The following example renames the specified bus signal:\n\n    rename_net -to dataOut dout \n    \n\nSee Also:\n\n   *  connect_net\n   *  create_cell\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  remove_cell\n   *  set_hierarchy_separator\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"report_bus_skew": "report_bus_skew\n\nDescription: \nReport timing paths\n\nSyntax: \nreport_bus_skew  [-delay_type <arg>] [-setup] [-hold] [-no_detailed_paths]\n                 [-max_paths <arg>] [-nworst <arg>] [-unique_pins]\n                 [-path_type <arg>] [-sort_by_slack] [-input_pins] [-no_header]\n                 [-significant_digits <arg>] [-file <arg>] [-append]\n                 [-return_string] [-warn_on_violation] [-rpx <arg>]\n                 [-cells <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-delay_type]          Type of path delay: Values: max, min, min_max\n                         Default: min_max\n  [-setup]               Report max delay endpoint timing paths (equivalent \n                         to -delay_type max)\n  [-hold]                Report min delay endpoint timing paths (equivalent \n                         to -delay_type min)\n  [-no_detailed_paths]   Only report top level summary table\n  [-max_paths]           Maximum number of paths to output per bus skew \n                         constraint: Value >=1\n                         Default: 1\n  [-nworst]              List up to N worst paths per endpoint per \n                         constraint: Value >=1\n                         Default: 1\n  [-unique_pins]         For each unique set of pins, show at most 1 path per\n                         bus skew constraint\n  [-path_type]           Format for path report: Values: short, full, \n                         full_clock, full_clock_expanded\n                         Default: full_clock_expanded\n  [-sort_by_slack]       Sort summary and per-constraint sections by slack\n  [-input_pins]          Show input pins in path\n  [-no_header]           Do not generate a report header\n  [-significant_digits]  Number of digits to display: Range: 0 to 3\n                         Default: 3\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append the results to file, don't overwrite the \n                         results file\n  [-return_string]       Return report as string\n  [-warn_on_violation]   Issue a critical warning when the report contains a \n                         timing violation\n  [-rpx]                 Filename to output interactive results to.\n  [-cells]               run report_bus_skew on the specified hierarchical \n                         cell(s)\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Report the calculated bus skew among the signals constrained by set_bus_skew.\n\n  The bus skew requirement applies to both the slow and fast corners. The\n  Vivado tool determines the earliest and the latest arrival among all the\n  signals of the bus and calculates the bus skew for both the Slow and Fast\n  process corner, and reports the worst case skew. Each signal of the bus is\n  reported relative to a reference signal from the same bus. Note that the\n  reference signal can be different for each signal of the bus, which ever\n  results in the worst bus skew for that signal.\n\n  The bus skew report can be written to the Tcl console or command shell,\n  assigned to a return string, or saved to a file.\n\n  This command returns the bus skew report as specified, or returns an error\n  if it fails.\n\nArguments:\n\n  -delay_type <arg> - (Optional) Specifies the type of delay to analyze when\n  running the bus skew report. The valid values are min, max, min_max,\n  max_rise, max_fall, min_rise, min_fall. The default setting for -delay_type\n  is max.\n\n  -setup - (Optional) Check for setup violations. This is the same as\n  specifying -delay_type max.\n\n  -hold - (Optional) Check for hold violations. This is the same as\n  specifying -delay_type min.\n\n  Note: -setup and -hold can be specified together, which is the same as\n  specifying -delay_type min_max.\n\n  -no_detailed_paths - (Optional) By default the bus skew report includes\n  detailed path analysis for the signals reported. This option disables the\n  detailed path in the bus skew report.\n\n  -max_paths <arg> - (Optional) The maximum number of paths to report per\n  constraint. This is specified as a value greater than or equal to 1. By\n  default the report_bus_skew command will report the single worst timing\n  path per bus skew constraint.\n\n  -nworst <arg> - (Optional) The number of timing paths per endpoint to\n  output in the bus skew report. The report will return the <N> worst paths\n  based on the specified value, greater than or equal to 1. The default\n  setting is 1.\n\n  -unique_pins - (Optional) Show only one timing path for each unique set of\n  pins.\n\n  -path_type <arg> - (Optional) Specify the path data to output in the bus\n  skew report. The default format is full_clock_expanded. The valid path\n  types are:\n\n   *  short - Displays the startpoints and endpoints with calculated timing\n      values.\n\n   *  full - Displays the full timing path, including startpoints, through\n      points, and endpoints.\n\n   *  full_clock - Displays full clock paths in addition to the full timing\n      path.\n\n   *  full_clock_expanded - Displays full clock paths between a master clock\n      and generated clocks in addition to the full_clock timing path. This is\n      the default setting.\n\n  -sort_by_slack - (Optional) Sort the Summary and Per Constraint sections of\n  the report by the slack value.\n\n  -input_pins - (Optional) Show input pins in the timing path report. For use\n  with -path_type full, full_clock, and full_clock_expanded.\n\n  -no_header - (Optional) Do not write a header to the report.\n\n  -significant_digits <arg> - (Optional) The number of significant digits in\n  the output results. The valid range is 0 to 3. The default setting is 3\n  significant digits.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -warn_on_violation - (Optional) Specify that a Critical Warning will be\n  generated by the Vivado Design Suite when the report contains a violation.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -cells <arg> - (Option) Generate the report for the specified hierarchical\n  cells. The details of the report will be based on the specified cells\n  rather than the whole design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the bus skew for the 32 worst signals of each\n  bus skew constraints in the design, reporting 1 path per bit of the bus\n  with the full timing path, including input pins, with timing values:\n\n    report_bus_skew -max 32 -nworst 1 -path_type full -input_pins \n    \n\nSee Also:\n\n   *  open_report\n   *  set_bus_skew\n",
"rename_cell": "rename_cell\n\nDescription: \nrename a cell\n\nSyntax: \nrename_cell  -to <arg> [-quiet] [-verbose] <cell>...\n\nUsage: \n  Name        Description\n  -----------------------\n  -to         New name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <cell>      Cell to rename\n\nCategories: \nNetlist\n\nDescription:\n\n  Rename a single hierarchical or leaf-level cell in the current synthesized\n  or implemented design.\n\n  Note: You cannot rename cells with DONT_TOUCH property set to TRUE.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  Changes to the names of cells, nets, pins, and ports, will also affect the\n  design constraints defined in the in-memory design. Constraints are\n  automatically modified to target the new object name, however these are not\n  written back to the source XDC file. Saving the modified in-memory design\n  using write_checkpoint will save both the renamed objects and modified\n  constraints.\n\n  This command returns nothing if successful, or an error if it fails.\n\nArguments:\n\n  -to <arg> - (Required) Specify the new name to assign to the specified\n  cell. Specified names can not contain Tcl special characters: `'\\{};$#\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cell> - (Required) Instance name of the cell to rename.\n\nExamples:\n\n  The following example changes the name of the hierarchical or1200_cpu cell\n  as specified:\n\n    rename_cell -to or1200_gpu or1200_cpu \n    \n\nSee Also:\n\n   *  connect_net\n   *  create_cell\n   *  create_net\n   *  remove_cell\n   *  set_hierarchy_separator\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"get_lib_pins": "get_lib_pins\n\nDescription: \nGet a list of Library Cell Pins\n\nSyntax: \nget_lib_pins  [-regexp] [-filter <arg>] [-nocase] [-of_objects <args>] [-quiet]\n              [-verbose] <patterns>\n\nReturns: \nlist of library cell pins\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are regular expressions\n  [-filter]      Filter list with expression\n  [-nocase]      Perform case-insensitive matching when a pattern has been \n                 specified. This argument applies to the use of -regexp only.\n  [-of_objects]  Get the library cell pins of the objects passed in here. \n                 Valid objects are cells or instances (ie, get_cells), cell \n                 pins (ie, get_pins) and library cells (ie get_lib_cells).\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <patterns>     Match library cell pin names against patterns of the form \n                 <library cell pattern>/<library pin pattern>.\n\nCategories: \nObject\n\nDescription:\n\n  Gets a list of the pins on a specified cell of the cell library for the\n  target part in the current design.\n\n  Note: This command requires a hierarchical name which includes the library\n  name and cell name as well as the pins: lib_name/cell_name/pins.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_lib_pins based on property values on the pins. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get a list of library cell pins of the\n  specified cells, library cells, or pin objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Required) Match lib pins against the specified patterns. The\n  pattern must specify the library name, cell name, and the pins.\n\nExamples:\n\n  The following example gets a list of all library cell pins:\n\n    get_lib_pins xt_virtex6/AND2/* \n    \n\n  The following example gets a list of all pins, of all cells in the cell\n  library for the target device:\n\n    get_lib_pins [get_libs]/*/* \n    \n\nSee Also:\n\n   *  get_libs\n   *  get_lib_cells\n   *  list_property\n   *  report_property\n",
"auto_load_index": "",
"route_design": "route_design\n\nDescription: \nRoute the current design\n\nSyntax: \nroute_design  [-unroute] [-release_memory] [-nets <args>] [-physical_nets]\n              [-pins <arg>] [-directive <arg>] [-tns_cleanup]\n              [-no_timing_driven] [-preserve] [-delay] [-auto_delay]\n              -max_delay <arg> -min_delay <arg> [-timing_summary] [-finalize]\n              [-ultrathreads] [-eco] [-quiet] [-verbose]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-unroute]           Unroute whole design or the given nets/pins if used \n                       with -nets or -pins.\n  [-release_memory]    Release Router memory. Not compatible with any other \n                       options.\n  [-nets]              Operate on the given nets.\n  [-physical_nets]     Operate on all physical nets.\n  [-pins]              Operate on the given pins.\n  [-directive]         Mode of behavior (directive) for this command. Please \n                       refer to Arguments section of this help for values for\n                       this option.\n                       Default: Default\n  [-tns_cleanup]       Do optional TNS clean up.\n  [-no_timing_driven]  Do not run in timing driven mode.\n  [-preserve]          Preserve existing routing.\n  [-delay]             Use with -nets or -pins option to route in delay \n                       driven mode.\n  [-auto_delay]        Use with -nets or -pins option to route in constraint \n                       driven mode.\n  -max_delay           Use with -pins option to specify the max_delay \n                       constraint on the pins.When specified -delay is \n                       implicit.\n  -min_delay           Use with -pins option to specify the max_delay \n                       constraint on the pins.When specified -delay is \n                       implicit.\n  [-timing_summary]    Enable post-router signoff timing summary.\n  [-finalize]          finalize route_design in interactive mode.\n  [-ultrathreads]      Enable Turbo mode routing.\n  [-eco]               runs incremental router if there was eco modification \n                       on routed netlist.\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nTools\n\nDescription:\n\n  Route the nets in the current design to complete logic connections on the\n  target part.\n\n  Predefined routing strategies can be quickly selected using the\n  route_design -directive command, or specific route options can be\n  configured to define your own routing strategy.\n\n  Routing can be completed automatically with route_design, or can be\n  completed iteratively using the various options of the route_design command\n  to achieve route completion and timing closure. Iterative routing provides\n  you some control over the routing process to route critical nets first and\n  then route less critical nets, and to control the level of effort and the\n  timing algorithms for these various route passes.\n\n  Routing is one step of the complete design implementation process, which\n  can be run automatically through the use of the launch_runs command when\n  running the Vivado tools in Project Mode.\n\n  In Non-Project Mode, the implementation process must be run manually with\n  the individual commands: opt_design, place_design, phys_opt_design,\n  power_opt_design, and route_design. Refer to the Vivado Design Suite User\n  Guide: Design Flows Overview (UG892) for a complete description of Project\n  Mode and Non-Project Mode.\n\n  Note: The route_design can be multi-threaded to speed the process. Refer to\n  the set_param command for more information on setting the\n  general.maxThreads parameter.\n\n  Both placement and routing can be completed incrementally, based on prior\n  results stored in a Design Checkpoint file (DCP), using the incremental\n  implementation flow. Refer to the read_checkpoint command, or to Vivado\n  Design Suite User Guide: Implementation (UG904) for more information on\n  incremental place and route.\n\n  This command requires a placed design, and it is recommended that you have\n  optimized the design with opt_design prior to placement.\n\nArguments:\n\n  -unroute <arg> - (Optional) Unroute nets in the design. If no arguments are\n  specified, all nets in the design are unrouted. The route_design command\n  will not route any nets when the -unroute option is specified.\n\n   *  Combine with the -nets option to limit unrouting to a list of nets.\n\n   *  Combine with the -pins option to unroute from a specified pin to the\n      nearest branch of the net.\n\n   *  Combine with the -physical_nets option to unroute all logic 1 and logic\n      0 nets.\n\n  -release_memory - (Optional) Free router memory resources for subsequent\n  route passes. This option does not run route passes, but only releases\n  memory held by the router to reduce router initialization. The router will\n  need to reload design data for subsequent route passes.\n\n  -nets <args> - (Optional) Route or unroute only the specified net objects.\n  Net objects must be specified using the get_nets command.\n\n  Note: The router uses a quick route approach to find a routing solution for\n  the specified nets, ignoring timing delays, when routing with -nets,\n  -physical_nets, or -pins specified. Use -delay to find a route with the\n  shortest delay.\n\n  -physical_nets - (Optional) Route or unroute only logic zero and logic one\n  nets.\n\n  -pins <args> - (Optional) Route or unroute to the specified pins, which\n  must be input pins. If a specified pin is driven by a multiple fanout net,\n  only the route segment between the net and pin is affected.\n\n  -directive <arg> - (Optional) Direct routing to achieve specific design\n  objectives. Only one directive can be specified for a single route_design\n  command, and values are case-sensitive. Supported values are:\n\n   *  Explore - Causes the Vivado router to explore different critical path\n      routes based on timing, after an initial route.\n\n   *  AggressiveExplore - Directs the router to further expand its\n      exploration of critical path routes while maintaining original timing\n      budgets. The router runtime might be significantly higher compared to\n      the Explore directive as the router uses more aggressive optimization\n      thresholds to attempt to meet timing constraints.\n\n   *  NoTimingRelaxation - Prevents the router from relaxing timing to\n      complete routing. If the router has difficulty meeting timing, it will\n      run longer to try to meet the original timing constraints.\n\n   *  MoreGlobalIterations - Uses detailed timing analysis throughout all\n      stages instead of just the final stages, and will run more global\n      iterations even when timing improves only slightly.\n\n   *  HigherDelayCost - Adjusts the router`s internal cost functions to\n      emphasize delay over iterations, allowing a trade-off of runtime for\n      better performance.\n\n   *  AdvancedSkewModeling - Uses more accurate skew modeling throughout all\n      routing stages which may improve design performance on higher-skew\n      clock networks.\n\n   *  AlternateCLBRouting - (UltraScale only) Chooses alternate routing\n      algorithms that require extra runtime but may help resolve routing\n      congestion.\n\n   *  RuntimeOptimized - Run fewest iterations, trade higher design\n      performance for faster runtime.\n\n   *  Quick - Absolute fastest runtime, non-timing-driven, performs the\n      minimum required routing for a legal design.\n\n   *  Default - Run route_design with default settings.\n\n  Note: The -directive option controls the overall routing strategy, and is\n  not compatible with any specific route_design options, except -preserve and\n  -tns_cleanup. It can also be used with -quiet and -verbose. Only the\n  Explore, Quick, and Default directives are compatible with high reuse\n  designs and the incremental implementation flow as defined by\n  read_checkpoint -incremental. Refer to the Vivado Design Suite User Guide:\n  Implementation (UG904) for more information on the use of the -directive\n  option.\n\n  -tns_cleanup - (Optional) By default, to reduce runtime, the router focuses\n  on optimizing the Worst Negative Slack (WNS) path as opposed to Total\n  Negative Slack (TNS) paths. This option invokes an optional phase at the\n  end of routing where the router attempts to fix the TNS paths, those\n  failing paths other than the WNS path. This option may reduce TNS at the\n  cost of added runtime, but will not affect WNS. The -tns_cleanup option is\n  recommended when using post-route phys_opt_design to ensure that\n  optimization focuses on the WNS path and does not waste effort on TNS paths\n  that can be fixed by the router. This option can be used in combination\n  with -directive.\n\n  -no_timing_driven - (Optional) Disables the default timing driven routing\n  algorithm. This results in faster routing results, but ignores any timing\n  constraints during the routing process.\n\n  -preserve - (Optional) Existing completed routes will be preserved and not\n  subject to the rip-up and reroute phase. This does not apply to routing\n  that is fixed using the IS_ROUTE_FIXED or FIXED_ROUTE properties, which is\n  not subject to being rerouted. Routing is preserved only for the current\n  route_design command.\n\n  Note: Partially routed nets are subject to rerouting to complete the\n  connection. If you want to preserve the routing of a partially routed net,\n  you should apply the FIXED_ROUTE property to the portion of the route you\n  want to preserve.\n\n  -delay - (Optional) Can only be used in combination with the -nets or -pins\n  options. By default nets are routed to achieve the fastest routing runtime,\n  ignoring timing constraints, when using -nets and -pins options. The -delay\n  option directs the router to try to achieve the shortest routed\n  interconnect delay, but still ignores timing constraints.\n\n  Note: You can specify multiple nets to route at the same time using the\n  -delay option, but this can result in conflicts for routing resources. The\n  Vivado router may create node overlap errors if the nets are in close\n  proximity to each other because the -delay option will reuse routing\n  resources to achieve the shortest routes for all specified nets. Therefore\n  it is recommended to route nets and pins individually using the -delay\n  option, beginning with the most critical.\n\n  -auto_delay - (Optional) Can only be used in combination with the -nets or\n  -pins options. It is recommended to use the -auto_delay option on a placed\n  design, and limit the specified number of nets or pins to less than 100.\n  The -auto_delay option directs the router to prioritize setup and hold\n  critical paths using the defined timing constraints.\n\n  -max_delay <arg> - (Optional) Can only be used with -pins. Directs the\n  router to try to achieve an interconnect delay less than or equal to the\n  specified delay given in picoseconds. When this options is specified, the\n  -delay option is implied.\n\n  Note: The -max_delay and -min_delay options specify the delay limits for\n  the interconnect only, not the logic or intra-site delay. The router\n  attempts to satisfy the delay restrictions on the interconnect.\n\n  -min_delay <arg> - (Optional) Can only be used with -pins. Directs the\n  router to try to achieve an interconnect delay greater than or equal to the\n  specified delay given in picoseconds. When this option is specified, the\n  -delay option is implied.\n\n  -timing_summary - (Optional) By default, the router outputs a final timing\n  summary to the log, based on Vivado router internal estimated timing which\n  might differ slightly from the actual routed timing due to pessimism in the\n  delay estimates. The -timing_summary option forces the router to launch the\n  Vivado static timing analyzer to report the timing summary based on actual\n  routed delays, but incurs additional run time for the static timing\n  analysis. The timing summary consists of the Worst Negative Slack (WNS),\n  Total Negative Slack (TNS), Worst Hold Slack (WHS), and Total Hold Slack\n  (THS). The values are identical to that of report_timing_summary when run\n  on the post-route design.\n\n  Note: The Vivado static timing analyzer is also launched by the -directive\n  Explore option.\n\n  -finalize - (Optional) When routing interactively you can specify\n  route_design -finalize to complete any partially routed connections.\n\n  -ultrathreads - (Optional) Reduces router runtime at the expense of\n  repeatability. This option enables the router to run faster, but there will\n  be some variation in routing results between otherwise identical runs.\n\n  -eco - (Optional) Run router in incremental mode when there is an eco\n  modification. When in incremental mode, as well as routing new nets, the\n  router can modify existing nets to improve routability and the ability to\n  meet timing. This option can be called by itself, or it can be used with\n  the -no_timing_driven switch or the Quick directive. These options run the\n  router with timing off for a faster result.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Route the entire design, and direct the router to try multiple algorithms\n  for improving critical path delay:\n\n    route_design -directive Explore\n\n  The following example routes the set of timing critical nets,\n  $criticalNets, to the shortest interconnect delay, marks the nets as fixed\n  using the IS_ROUTE_FIXED property, and then routes the rest of the design\n  using a low effort directive for fast results:\n\n    route_design -delay -nets $criticalNets   \n    set_property IS_ROUTE_FIXED 1 $criticalNets   \n    route_design -directive RuntimeOptimized\n\n  Route the specified nets using the fastest runtime:\n\n    route_design -nets [get_nets ctrl0/ctr*]\n\n  Route the specified nets to get the shortest interconnect delays:\n\n    route_design -nets [get_nets ctrl0/ctr*] -delay\n\n  Route to the specified pins:\n\n    route_design -pins [get_pins ctrl0/reset_reg/D ctrl0/ram0/ADDRARDADDR]\n\n  Route to a particular pin, try to achieve less than 500 ps delay:\n\n    route_design -pins [get_pins ctrl0/reset_reg/D] -max_delay 500\n\n  Route to a particular pin, try to achieve more than 200 ps delay:\n\n    route_design -pins [get_pins ctrl0/ram0/ADDRARDADDR] -min_delay 200\n\nSee Also:\n\n   *  get_nets\n   *  get_pins\n   *  launch_runs\n   *  opt_design\n   *  phys_opt_design\n   *  place_design\n   *  power_opt_design\n   *  read_checkpoint\n   *  set_property\n   *  write_checkpoint\n",
"get_qor_checks": "get_qor_checks\n\nDescription: \nGet a list of available QoR suggestions\n\nSyntax: \nget_qor_checks  [-family <arg>] [-filter <arg>] [-quiet] [-verbose] [<IDs>]\n\nReturns: \nList of available qor suggestions\n\nUsage: \n  Name        Description\n  -----------------------\n  [-family]   Reports available QoR suggestions for given family\n  [-filter]   Filter list with given expression\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<IDs>]     Match suggestion names against given IDs\n\nCategories: \nObject, Timing\n\nDescription:\n\n  Get all available QoR suggestion objects.\n\n  This command returns a list of all available QoR suggestion objects.\n\nArguments:\n\n  -filter <arg> - (Optional) Filter the returned available suggestion objects\n  with the specified expression. The -filter argument filters the list of \n  objects returned by the command based on property values on the objects. \n  You can find the properties on an object with the report_property or \n  list_property commands. In the case of the available_suggestion object, \n  CATEGORY, AUTO and INCR_FRIENDLY are a few of properties you might use to \n  filter the list of available suggestions.\n\n  -family <arg> - (Optional) Filter the returned available suggestion objects\n  with the specified family name. Some valid device family names are zynquplus, \n  kintexu and versalpremium.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <IDs> - (Optional) Specify a list of QoR suggestion IDs to select the\n  specified objects.\n\nExamples:\n\n  To return an individual suggestion, you can supply the full ID:\n\n    get_qor_checks RQS_CLOCK-5_1\n\n  To get available suggestion objects based on the device family (Ultrascale, \n  Ultrascale+ or Versal)\n\n    get_qor_checks -family Versal\n\n  You can also filter suggestions objects within a given category. Available\n  categories include: Timing, Congestion, Utilization, XDC and Clocking.\n  For example, the following returns suggestions related to the Timing \n  category:\n\n    get_qor_checks -filter {CATEGORY==Timing}\n\nSee Also:\n\n   *  get_qor_suggestions\n   *  report_qor_suggestions\n   *  read_qor_suggestions\n   *  write_qor_suggestions\n",
"write_ibis": "write_ibis\n\nDescription: \nWrite IBIS models for current floorplan\n\nSyntax: \nwrite_ibis  [-force] [-allmodels] [-nopin] [-no_pin_mapping] [-truncate <arg>]\n            [-component_name <arg>] [-ibs <arg>] [-pkg <arg>] [-quiet]\n            [-verbose] <file>\n\nReturns: \nname of the output file\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-force]           Overwrite existing .ibs file\n  [-allmodels]       Include all available buffer models for this \n                     architecture.  By default, only buffer models used by \n                     the floorplan are included.\n                     \n  [-nopin]           Disable inclusion of the per-pin modeling of the package\n                     (path from the die pad to the package pin). Package is \n                     reduced to a single RLC transmission line model applied \n                     to all pins and defined in the [Package] section.\n                     Default: This option is not set. IBISWriter includes \n                     per-pin modeling of the package as RLC matrices in the \n                     [Define Package Model] section if this data is \n                     available.\n                     \n  [-no_pin_mapping]  Do not output the [Pin Mapping] section for ultrascale, \n                     ultrascale plus, and versal.\n                     \n  [-truncate]        Maximum length for a signal name in the output file. \n                     Names longer than this will be truncated. This property \n                     can be set to truncate  signal name length to 20, 40, or\n                     0 (unlimited).\n                     Default: Truncate signal name length to 40 characters in\n                     accordance with the IBIS version 4.2 specification.\n                     \n                     Default: 40\n  [-component_name]  Specify a new component name for use in multiple FPGA \n                     designs to replace the default.\n                     \n  [-ibs]             Specify an updated generic IBIS models file.\n  [-pkg]             Specify an updated per pin parasitic package data file.\n                     \n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <file>             Output file name. The .ibs extension is optional.\n\nCategories: \nFileIO\n\nDescription:\n\n  Writes the IBIS models for the target device in the current design. The\n  netlist and implementation details from the design are combined with the\n  per-pin parasitic package information to create a custom IBIS model for the\n  design.\n\n  Because the write_ibis command incorporates design information into the\n  IBIS Model, you must have an RTL, Netlist, or Implemented Design open when\n  running this command.\n\nArguments:\n\n  -force - (Optional) Overwrite the IBIS file if it already exists.\n\n  -allmodels - (Optional) Export all buffer models for the target device. By\n  default the tool will only write buffer models used by the design.\n\n  -nopin - (Optional) Disable per-pin modeling of the path from the die pad\n  to the package pin. The IBIS model will include a single RLC transmission\n  line model representation for all pins in the [Package] section. By default\n  the file will include per-pin modeling of the package as RLC matrices in\n  the [Define Package Model] section if this data is available.\n\n  -no_pin_mapping - (Optional) Do not output the Pin Mapping section for\n  UltraScale, UltraScale+, and Versal devices.\n\n  -truncate <arg> - (Optional) The maximum length for a signal name in the\n  output file. Names longer than this will be truncated. Valid values are 20,\n  40, or 0 (unlimited). By default the signal names are truncated to 40\n  characters in accordance with the IBIS version 4.2 specification.\n\n  -component_name <arg> - (Optional) Specify a new component name to change\n  the default value, which is the device family.\n\n  -ibs <arg> - (Optional) Specify an updated generic IBIS models file. This\n  is used to override the IBIS models found in the tool installation under\n  the parts directory. This argument is required for any parts that do not\n  have generic models in the installation directory.\n\n  -pkg <arg> - (Optional) Specify an updated per pin parasitic package data\n  file. This is used to override the parasitic package file found in the tool\n  installation hierarchy under the parts directory. This argument is required\n  for any parts that do not have generic models in the installation\n  directory.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The filename of the IBIS file to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example exports all buffer models for the target device,\n  eliminates truncation of signal names, and specifies the file name and path\n  to write:\n\n    write_ibis -allmodels -truncate 0 C:/Data/FPGA_Design/ibisOut.txt \n    \n",
"remove_cluster_configurations": "remove_cluster_configurations\n\nDescription: \nRemoves list of cluster configurations\n\nSyntax: \nremove_cluster_configurations  [-quiet] [-verbose] <cluster_configurations>\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n  <cluster_configurations>  List of cluster configurations\n\nCategories: \ncluster_configuration\n\nDescription:\n\n  Removes a list of cluster configurations. The list of cluster\n  configurations to be removed is specified as input. This command can only\n  remove user defined cluster configurations and cannot remove Vivado default\n  cluster configurations. To identify if a cluster configuration is default\n  or user-defined, use the following snippet:\n\n    # if it returns 1 cluster configuration is Vivado default otherwise user defined. \n    get_property IS_DEFAULT [get_cluster_configurations <cluster configuration name>]\n\n  Currently, Vivado supports following clusters management tools:\n\n      Load Sharing Facility (LSF)\n\n      Sun Grid Engine (SGE)\n\n      Simple Linux Utility For Resource Management (SLURM)\n\nArguments:\n\n  <cluster_configurations> - (Required) List of cluster configurations object\n  to be removed. You can get a list of existing cluster configurations with\n  the get_cluster_configurations command and provide it as input to the\n  remove_cluster_configurations command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example removes the cluster configuration with name lsf_medium.\n\n    remove_cluster_configurations [get_cluster_configurations lsf_medium]\n\n  The following example removes all the user defined cluster configurations.\n\n    remove_cluster_configurations [get_cluster_configurations -filter {IS_DEFAULT == 0}]\n\nSee Also:\n\n   *  create_cluster_configuration\n   *  get_cluster_configurations\n   *  validate_cluster_configurations\n",
"write_checkpoint": "write_checkpoint\n\nDescription: \nWrite a checkpoint of the current design\n\nSyntax: \nwrite_checkpoint  [-force] [-cell <arg>] [-logic_function_stripped] [-encrypt]\n                  [-key <arg>] [-quiet] [-verbose] [<file>]\n\nReturns: \nThe name of the checkpoint file\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-force]                    Overwrite existing checkpoint file\n  [-cell]                     Write a checkpoint of this cell\n  [-logic_function_stripped]  Convert INIT strings on LUTs & RAMBs to fixed \n                              values. Note that the resulting netlist will be\n                              nonfunctional.\n  [-encrypt]                  Encrypt unprotected modules using IEEE 1735 IP \n                              security version 2\n  [-key]                      Key file to be used with -encrypt option; \n                              Otherwise, use Xilinx public key\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n  [<file>]                    Design checkpoint file\n                              Values: A filename with alphanumeric characters\n                              and .dcp extension.\n\nCategories: \nFileIO\n\nDescription:\n\n  Saves the design at any point in the design process so that you can quickly\n  import it back into the tool as needed. A design checkpoint (DCP) can\n  contain the netlist, the constraints, and any placement and routing\n  information from the implemented design. Parameters and non-netlist properties\n  are not saved inside dcp archive.\n\n\n  Tip: In the Project mode, a DCP will not have timing constraints after\n  synthesis. The timing constraints are annotated against the design during\n  open_run or link_design commands, or when launching an implementation run.\n  To create a DCP with timing constraints, create the design checkpoint after\n  opt_design, or after the implementation run completes.\n\n  Use the open_checkpoint command to load a design from a saved checkpoint file.\n\nArguments:\n\n  -force - (Optional) Overwrite an existing checkpoint file of the same name\n  if it already exists.\n\n  -cell <arg> - (Optional) Instructs the tool to output the contents of the\n  specified hierarchical cell into a checkpoint file. Only one cell can be\n  specified for output.\n\n  -logic_function_stripped - (Optional) Hides the INIT values for LUTs and\n  RAMs by converting them to fixed values. This creates a checkpoint for\n  debug purposes that does not behave as expected during simulation or\n  synthesis. The fixed value uses hex values 6 and 9 (binary 0110 and 1001\n  respectively) to represent a XOR function and enable constant propagation.\n  For example, a 64-bit value will be changed to 64'h6996966996696996.\n\n  Note: The INIT values are not changed if they already match this pattern.\n\n  -encrypt - (Optional) Encrypt the checkpoint netlist.\n\n  -key <arg> - (Optional) Specify the key to use in encrypting and decrypting\n  the checkpoint. If not specified, the Xilinx public key is used by default.\n\n  -incremental_synth - (Optional) Enable the synthesis checkpoint to be used\n  for incremental synthesis. The checkpoint must be enabled for incremental\n  synthesis to be used for subsequent incremental synthesis runs.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the checkpoint file to be created. A .dcp\n  extension will be added if no extension is specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example creates the specified checkpoint file, overwriting a\n  file of the same name if one already exists:\n\n    write_checkpoint C:/Data/checkpoint1 -force\n\n  Note: The tool will add the .dcp extension to the specified file name, and\n  will overwrite an existing checkpoint1.dcp file.\n  \nSee Also:\n\n   *  open_checkpoint\n\n   *  read_checkpoint\n\n   *  link_design\n",
"read_xdc": "read_xdc\n\nDescription: \nread physical and timing constraints from one of more files.\n\nSyntax: \nread_xdc  [-cells <args>] [-ref <arg>] [-quiet_diff_pairs] [-mode <arg>]\n          [-unmanaged] [-no_add] [-quiet] [-verbose] <files>\n\nReturns: \nlist of files\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-cells]             Import constraints for these cells\n  [-ref]               Import constraints for this ref\n  [-quiet_diff_pairs]  Suppress warnings about differential pair inference \n                       when importing I/O ports\n  [-mode]              Import constraints as out_of_context. Values: default,\n                       out_of_context\n                       Default: default\n  [-unmanaged]         treat this file as unmanaged constraints file\n  [-no_add]            don't add this file to constraints fileset\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <files>              Input file(s) to read\n\nCategories: \nFileIO\n\nDescription:\n\n  Imports physical and timing constraints from a Xilinx Design Constraints\n  file (XDC). The XDC is imported into the current_instance level of the\n  design hierarchy, which defaults to the top-level of the design, or can be\n  imported into specified cells. When imported at the top-level, the\n  specified XDC file is added to the active constraint fileset.\n\n  Note: Constraints from the XDC file will overwrite any current constraints\n  of the same name. Therefore, exercise some caution when reading a XDC file\n  to be sure you will not overwrite important constraints.\n\n  This command is similar to the add_files command in that the XDC file is\n  added by reference rather than imported into the local project directory.\n\n  You can use this command to read the contents of source files into the\n  in-memory design, when running the Vivado tool in Non Project mode, in\n  which there is no project file to maintain and manage the various project\n  source files. Refer to the Vivado Design Suite User Guide: Design Flows\n  Overview (UG892) for more information on Non Project mode.\n\nArguments:\n\n  -cells <args> - (Optional) Apply the constraints from the XDC file to the\n  specified instance names. The constraints will be applied ONLY to the\n  specified cell instances, and the XDC file will not be added to the active\n  constraint fileset.\n\n  Note: A design must be open when specifying the -cells option.\n\n  -ref <arg> - (Optional) Read the constraints from the XDC file and apply\n  them to ALL instances of the referenced module, wherever they happen to be\n  instantiated in the current design.\n\n  -quiet_diff_pairs - (Optional) Suppress warnings about differential pair\n  inference when importing I/O constraints.\n\n  -mode [ default | out_of_context ] - (Optional) Import the specified\n  constraint files as in-context with the top-level design, or as\n  out_of_context constraints to be used when generating output products for\n  hierarchical modules or IP cores. For more information on the\n  out-of-context design flow, refer to the Vivado Design Suite User Guide:\n  Design Flows Overview (UG892).\n\n  Note: Out-of-context constraints should be added to specified cells or cell\n  instances.\n\n  -unmanaged - (Optional) Treat the added files as unmanaged Tcl constraint\n  files. The Vivado tool will not save constraint changes back into these\n  unmanaged Tcl files. For more information on unmanaged Tcl constraints,\n  refer to the Vivado Design Suite User Guide: Using Constraints (UG903).\n\n  -no_add - (Optional) Read the constraints from the file, and integrate them\n  into the in-memory design, but do not add the XDC file to the list of files\n  in the current constraint set.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) The filenames of the XDC files to be imported.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example reads the XDC file and applies it to the current\n  design:\n\n    read_xdc file_1.xdc \n    \n\n  The following example reads the XDC file and applies it ALL instances of\n  the referenced module found in the current design:\n\n    read_xdc -ref hex2led file_2.xdc \n    \n\n  The following example reads the XDC file and applies it ONLY to the\n  specified instance within the referenced module:\n\n    read_xdc -ref sixty -cells lsbcount file_3.xdc  \n    \n\n  The following example reads the XDC file and applies it to the specified\n  instances in the current design, even though they are instances of\n  different modules:\n\n    read_xdc -cells {one_decode sixty/msbcount} file_4.xdc  \n    \n\n  Note: Multiple cells must be enclosed in quotes, '', or braces, {}.\n\nSee Also:\n\n   *  add_files\n   *  current_instance\n   *  infer_diff_pairs\n   *  write_xdc\n",
"current_dashboard": "current_dashboard\n\nDescription: \nGet the current Project summary dashboard\n\nSyntax: \ncurrent_dashboard  [-quiet] [-verbose] [<dashboard>...]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<dashboard>]  Specify the dashboard to be set as current_dashboard\n\nCategories: \nProject\n",
"fblocked": "fblocked(n)           Tcl Built-In Commands           fblocked(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       fblocked - Test whether the last input operation exhausted\n       all available input\n\nSYNOPSIS\n       fblocked channelId\n_________________________________________________________________\n\n\nDESCRIPTION\n       The fblocked command returns 1 if the  most  recent  input\n       operation  on  channelId  returned  less  information than\n       requested because all available input was exhausted.   For\n       example,  if  gets  is  invoked  when there are only three\n       characters  available  for  input   and   no   end-of-line\n       sequence,  gets  returns  an empty string and a subsequent\n       call to fblocked will return 1.\n\n       ChannelId must be an identifier for an open  channel  such\n       as  a Tcl standard channel (stdin, stdout, or stderr), the\n       return value from an invocation of open or socket, or  the\n       result  of  a  channel  creation command provided by a Tcl\n       extension.\n\nEXAMPLE\n       The fblocked command is particularly useful  when  writing\n       network  servers, as it allows you to write your code in a\n       line-by-line style without  preventing  the  servicing  of\n       other  connections.  This can be seen in this simple echo-\n       service:\n\n              # This is called whenever a new client connects to the server\n              proc connect {chan host port} {\n                  set clientName [format <%s:%d> $host $port]\n                  puts 'connection from $clientName'\n                  fconfigure $chan -blocking 0 -buffering line\n                  fileevent $chan readable [list echoLine $chan $clientName]\n              }\n\n              # This is called whenever either at least one byte of input\n              # data is available, or the channel was closed by the client.\n              proc echoLine {chan clientName} {\n                  gets $chan line\n                  if {[eof $chan]} {\n                      puts 'finishing connection from $clientName'\n                      close $chan\n                  } elseif {![fblocked $chan]} {\n                      # Didn't block waiting for end-of-line\n                      puts '$clientName - $line'\n                      puts $chan $line\n                  }\n              }\n\n              # Create the server socket and enter the event-loop to wait\n              # for incoming connections...\n              socket -server connect 12345\n              vwait forever\n\n\nSEE ALSO\n       gets(n), open(n),  read(n),  socket(n),  Tcl_StandardChan-\n       nels(3)\n\n\nKEYWORDS\n       blocking, nonblocking\n\n\n\nTcl                            7.5                    fblocked(n)\n",
"lsearch": "lsearch(n)            Tcl Built-In Commands            lsearch(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lsearch - See if a list contains a particular element\n\nSYNOPSIS\n       lsearch ?options? list pattern\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  searches the elements of list to see if one\n       of them matches pattern.  If so, the command  returns  the\n       index  of  the  first matching element (unless the options\n       -all or -inline  are  specified.)   If  not,  the  command\n       returns  -1.   The option arguments indicates how the ele-\n       ments of the list are to be matched  against  pattern  and\n       must have one of the values below:\n\n   MATCHING STYLE OPTIONS\n       If  all  matching  style  options are omitted, the default\n       matching style is -glob.  If more than one matching  style\n       is  specified,  the last matching style given takes prece-\n       dence.\n\n       -exact Pattern is a literal string that  is  compared  for\n              exact equality against each list element.\n\n       -glob  Pattern  is  a  glob-style pattern which is matched\n              against each list element using the same  rules  as\n              the string match command.\n\n       -regexp\n              Pattern  is  treated  as  a  regular expression and\n              matched against each list element using  the  rules\n              described in the re_syntax reference page.\n\n       -sorted\n              The  list  elements  are  in sorted order.  If this\n              option is specified, lsearch will use a more  effi-\n              cient  searching  algorithm  to search list.  If no\n              other options are specified, list is assumed to  be\n              sorted  in  increasing  order, and to contain ASCII\n              strings.  This option is  mutually  exclusive  with\n              -glob  and  -regexp,  and  is  treated exactly like\n              -exact when either -all or -not are specified.\n\n   GENERAL MODIFIER OPTIONS\n       These options may be given with all matching styles.\n\n       -all   Changes the result to be the list of  all  matching\n              indices (or all matching values if -inline is spec-\n              ified  as  well.)  If  indices  are  returned,  the\n              indices  will  be  in  numeric order. If values are\n              returned, the order of the values will be the order\n              of those values within the input list.\n\n       -inline\n              The matching value is returned instead of its index\n              (or an empty string if no value matches.)  If  -all\n              is  also  specified, then the result of the command\n              is the list of all values that matched.\n\n       -not   This negates the sense of the match, returning  the\n              index  of the first non-matching value in the list.\n\n       -start index\n              The list is searched starting  at  position  index. |\n              The  interpretation  of the index value is the same |\n              as for the command string index, supporting  simple |\n              index arithmetic and indices relative to the end of |\n              the list.\n\n   CONTENTS DESCRIPTION OPTIONS\n       These options describe how to interpret the items  in  the\n       list  being  searched.  They are only meaningful when used\n       with the -exact and -sorted options.  If more than one  is\n       specified,  the last one takes precedence.  The default is\n       -ascii.\n\n       -ascii The list elements are to  be  examined  as  Unicode\n              strings  (the  name  is  for backward-compatibility\n              reasons.)\n\n       -dictionary\n              The list elements are to be compared using  dictio-\n              nary-style  comparisons  (see  lsort  for  a fuller\n              description). Note that this only makes a  meaning-\n              ful  difference  from  the  -ascii  option when the\n              -sorted option is given, because  values  are  only\n              dictionary-equal when exactly equal.\n\n       -integer\n              The list elements are to be compared as integers.   |\n\n       -nocase                                                    ||\n              Causes comparisons to be handled in a case-insensi- |\n              tive  manner.   Has  no effect if combined with the |\n              -dictionary, -integer, or -real options.\n\n       -real  The list elements are to be compared  as  floating-\n              point values.\n\n   SORTED LIST OPTIONS\n       These  options  (only  meaningful with the -sorted option)\n       specify how the list is  sorted.   If  more  than  one  is\n       given,  the last one takes precedence.  The default option\n       is -increasing.\n\n       -decreasing\n              The list elements are sorted in  decreasing  order.\n              This  option  is  only  meaningful  when  used with\n              -sorted.\n\n       -increasing\n              The list elements are sorted in  increasing  order.\n              This  option  is  only  meaningful  when  used with\n              -sorted.\n\n   NESTED LIST OPTIONS\n       These options are used to search lists of lists.  They may |\n       be used with any other options.                            |\n\n       -index indexList                                           ||\n              This option is  designed  for  use  when  searching |\n              within  nested lists.  The indexList argument gives |\n              a path of indices (much as might be used  with  the |\n              lindex  or  lset  commands)  within each element to |\n              allow  the  location  of  the  term  being  matched |\n              against.                                            |\n\n       -subindices                                                ||\n              If this option is given, the index result from this |\n              command  (or  every  index result when -all is also |\n              specified) will be a complete  path  (suitable  for |\n              use with lindex or lset) within the overall list to |\n              the term found.  This option has no  effect  unless |\n              the  -index is also specified, and is just a conve- |\n              nience short-cut.\n\nEXAMPLES\n       Basic searching:\n              lsearch {a b c d e} c\n                    -> 2\n              lsearch -all {a b c a b c} c\n                    -> 2 5\n\n       Using lsearch to filter lists:\n              lsearch -inline {a20 b35 c47} b*\n                    -> b35\n              lsearch -inline -not {a20 b35 c47} b*\n                    -> a20\n              lsearch -all -inline -not {a20 b35 c47} b*\n                    -> a20 c47\n              lsearch -all -not {a20 b35 c47} b*\n                    -> 0 2\n\n       This can even do a 'set-like' removal operation:\n              lsearch -all -inline -not -exact {a b c a d e a f g a} a\n                    -> b c d e f g\n\n       Searching may start part-way through the list:\n              lsearch -start 3 {a b c a b c} c\n                    -> 5\n\n       It is also possible to search inside elements:\n              lsearch -index 1 -all -inline {{a abc} {b bcd} {c cde}} *bc*\n                    -> {a abc} {b bcd}\n\nSEE ALSO\n       foreach(n), list(n),  lappend(n),  lindex(n),  linsert(n),\n       llength(n),  lset(n),  lsort(n),  lrange(n),  lreplace(n), |\n       string(n)\n\nKEYWORDS\n       list, match, pattern, regular expression, search, string\n\n\n\nTcl                            8.5                     lsearch(n)\n",
"report_sim_device": "report_sim_device\n\nDescription: \nReport the list of correct SIM_DEVICE attribute values for cell types in the target part\n\nSyntax: \nreport_sim_device  [-part <arg>] [-file <arg>] [-append] [-return_string]\n                   [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-part]           Part\n  [-file]           Output file\n  [-append]         Append the results to file\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Cells with the SIM_DEVICE attribute may have slightly different behavior\n  when applied in different families of devices. The value of SIM_DEVICE\n  directs the simulator to match the behavior of the cell to the target\n  device. Use report_sim_device to report the correct SIM_DEVICE attribute\n  value to use for cell types in the target part.\n\n  Important: Unless -part is specified, the currently loaded part is used\n  as the target part for this command.\n\nArguments:\n\n  -part <arg> - (Optional) Target part\n\n  -file <arg> - (Optional) Write the SIM_DEVICE report into the specified\n  file. The specified file will be overwritten if one already exists, unless\n  -append is also specified.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string. The Tcl\n  string can be captured by a variable definition and parsed or otherwise\n  processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example generates the report of SIM_DEVICE attributes and\n  correct values to use for the xcvu065-ffvc1517-1-i part.\n\n    report_sim_device -part xcvu065-ffvc1517-1-i\n\nSee also:\n\n   *  report_sim_version\n   *  get_primitives\n   *  get_parts\n",
"open_impl_design": "open_impl_design\n\nDescription: \nOpen an implementation design\n\nSyntax: \nopen_impl_design  [-quiet] [-verbose] [<run>]\n\nReturns: \ndesign object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<run>]     Run to open\n\nCategories: \nProject\n",
"proc": "proc(n)               Tcl Built-In Commands               proc(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       proc - Create a Tcl procedure\n\nSYNOPSIS\n       proc name args body\n_________________________________________________________________\n\n\nDESCRIPTION\n       The  proc  command creates a new Tcl procedure named name,\n       replacing any existing command or procedure there may have\n       been  by  that name.  Whenever the new command is invoked,\n       the contents of body will be executed by  the  Tcl  inter-\n       preter.   Normally,  name is unqualified (does not include\n       the names of any containing namespaces), and the new  pro-\n       cedure  is  created  in  the  current  namespace.  If name\n       includes any namespace qualifiers, the procedure  is  cre-\n       ated  in the specified namespace.  Args specifies the for-\n       mal arguments to the procedure.  It consists  of  a  list,\n       possibly empty, each of whose elements specifies one argu-\n       ment.  Each argument specifier is also a list with  either\n       one or two fields.  If there is only a single field in the\n       specifier then it is the name of the  argument;  if  there\n       are  two  fields,  then the first is the argument name and\n       the second is its default value.  Arguments  with  default\n       values that are followed by non-defaulted arguments become\n       required arguments.  In 8.6 this  will  be  considered  an\n       error.\n\n       When  name is invoked a local variable will be created for\n       each of the formal arguments to the procedure;  its  value\n       will  be the value of corresponding argument in the invok-\n       ing command or the argument's default value.  Actual argu-\n       ments  are assigned to formal arguments strictly in order.\n       Arguments with default values need not be specified  in  a\n       procedure  invocation.   However,  there  must  be  enough\n       actual arguments for all the formal arguments that do  not\n       have  defaults,  and  there  must  not be any extra actual\n       arguments.  Arguments with default values  that  are  fol-\n       lowed by non-defaulted arguments become required arguments\n       (in 8.6 it will be considered an  error).   There  is  one\n       special case to permit procedures with variable numbers of\n       arguments.  If the last formal argument has the name args,\n       then a call to the procedure may contain more actual argu-\n       ments than the procedure has formals.  In this  case,  all\n       of  the actual arguments starting at the one that would be\n       assigned to args are combined into a list (as if the  list\n       command had been used); this combined value is assigned to\n       the local variable args.\n\n       When body is being executed, variable names normally refer\n       to  local  variables, which are created automatically when\n       referenced and deleted when the  procedure  returns.   One\n       local  variable  is  automatically created for each of the\n       procedure's  arguments.   Other  variables  can  only   be\n       accessed by invoking one of the global, variable, upvar or\n       namespace upvar commands.\n\n       The proc command returns an empty string.  When  a  proce-\n       dure is invoked, the procedure's return value is the value\n       specified in a return command.  If the procedure does  not\n       execute  an  explicit return, then its return value is the\n       value of the last  command  executed  in  the  procedure's\n       body.   If  an  error occurs while executing the procedure\n       body, then the procedure-as-a-whole will return that  same\n       error.\n\nEXAMPLES\n       This  is  a  procedure that accepts arbitrarily many argu-\n       ments and prints them out, one by one.\n              proc printArguments args {\n                 foreach arg $args {\n                    puts $arg\n                 }\n              }\n\n       This procedure is a bit like the incr command,  except  it\n       multiplies  the  contents  of  the  named  variable by the\n       value, which defaults to 2:\n              proc mult {varName {multiplier 2}} {\n                 upvar 1 $varName var\n                 set var [expr {$var * $multiplier}]\n              }\n\n\nSEE ALSO\n       info(n), unknown(n)\n\n\nKEYWORDS\n       argument, procedure\n\n\n\nTcl                                                       proc(n)\n",
"lappend": "lappend(n)            Tcl Built-In Commands            lappend(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lappend - Append list elements onto a variable\n\nSYNOPSIS\n       lappend varName ?value value value ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  treats  the  variable given by varName as a\n       list and appends each of the value arguments to that  list\n       as  a  separate element, with spaces between elements.  If\n       varName does not exist, it is created as a list with  ele-\n       ments given by the value arguments.  Lappend is similar to\n       append except that the values are appended  as  list  ele-\n       ments rather than raw text.  This command provides a rela-\n       tively efficient way to build up large lists.   For  exam-\n       ple,  'lappend  a  $b'  is much more efficient than 'set a\n       [concat $a [list $b]]' when $a is long.\n\nEXAMPLE\n       Using lappend to build up a list of numbers.\n              % set var 1\n              1\n              % lappend var 2\n              1 2\n              % lappend var 3 4 5\n              1 2 3 4 5\n\n\nSEE ALSO\n       list(n),  lindex(n),  linsert(n),   llength(n),   lset(n),\n       lsort(n), lrange(n)\n\n\nKEYWORDS\n       append, element, list, variable\n\n\n\nTcl                                                    lappend(n)\n",
"list_param": "list_param\n\nDescription: \nGet all parameter names\n\nSyntax: \nlist_param  [-quiet] [-verbose]\n\nReturns: \nlist\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nPropertyAndParameter\n\nDescription:\n\n  Gets a list of user-definable configuration parameters. These parameters\n  configure a variety of settings and behaviors of the tool. For more\n  information on a specific parameter use the report_param command, which\n  returns a description of the parameter as well as its current value.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns a list of all user-definable parameters:\n\n    list_param \n    \n\nSee Also:\n\n   *  get_param\n   *  report_param\n   *  reset_param\n   *  set_param\n",
"send_msg_id": "send_msg_id\n\nDescription: \nSend message by id\n\nSyntax: \nsend_msg_id  [-continue] [-quiet] [-verbose] [<id>] <severity> <msg>\n\nUsage: \n  Name         Description\n  ------------------------\n  [-continue]  Continue the execution of the current tcl script (if any) in \n               cases where severity is ERROR. Default behavior is to \n               terminate the currently executing script on ERROR.\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<id>]       Unique message prefix and id to be sent e.g. 'Common 17-1'.\n  <severity>   Message severity to send, e.g. 'ALL', 'ERROR' or 'CRITICAL \n               WARNING'\n  <msg>        Complete formated message text in double quotes\n\nCategories: \nReport\n\n\nDescription:\n\n  Send a message to the Tcl Console and the application log file.\n\n  Use this command to send a specific message from a Tcl script for instance,\n  under certain conditions.\n\n  The command returns the specified message.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <id> - (Optional) Defines the message ID, consisting of a prefix name, and\n  a numeric identifier of the form XX-YYY, where XX is a number assigned to\n  the subsystem, and YYY is a unique identifier. The ID requires a dash\n  between the two values, but cannot contain any other non-alphanumeric\n  characters. Messages are then formatted for display as: [PREFIX XX-YYY]\n\n  <severity> - (Optional) Specifies the severity of the message to send.\n  There are five message severities:\n\n   *  ERROR - An ERROR condition implies an issue has been encountered which\n      will render design results unusable and cannot be resolved without user\n      intervention.\n\n   *  {CRITICAL WARNING} - A CRITICAL WARNING message indicates that certain\n      input/constraints will either not be applied or are outside the best\n      practices for a FPGA family. User action is strongly recommended.\n\n      Note: Since this is a two word value, it must be enclosed in '' or {}.\n\n   *  WARNING - A WARNING message indicates that design results may be\n      sub-optimal because constraints or specifications may not be applied as\n      intended. User action may be taken or may be reserved.\n\n   *  INFO - An INFO message is the same as a STATUS message, but includes a\n      severity and message ID tag. An INFO message includes a message ID to\n      allow further investigation through answer records if needed.\n\n   *  STATUS - A STATUS message communicates general status of the process\n      and feedback to the user regarding design processing. A STATUS message\n      does not include a message ID.\n\n  <msg> - Defines the text of the message to send. The message must be\n  enclosed in quotes ('') or braces ({}).\n\nExamples:\n\n  The following are some examples messages:\n\n    send_msg_id {USER 23-100} 'INFO' 'This is a test message.'   \n    send_msg_id {USER 22-22} WARNING 'This is it!'   \n    send_msg_id 'MyApp 10-101' {CRITICAL WARNING} {Too much information.}\n",
"remove_cells_from_pblock": "remove_cells_from_pblock\n\nDescription: \nRemove cells from a Pblock\n\nSyntax: \nremove_cells_from_pblock  [-quiet] [-verbose] <pblock> <cells>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <pblock>    Pblock to remove cells from\n  <cells>     Cells to remove\n\nCategories: \nFloorplan, XDC\n\nDescription:\n\n  Removes the specified logic instances from a Pblock. Cells are added to a\n  Pblock with the add_cells_to_pblock command.\n\n  Note: Cells that have been placed will not be unplaced as they are removed\n  from a Pblock. Any current LOC assignments are left intact.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pblock> - (Required) The name of the Pblock from which to remove the\n  specified instances.\n\n  <cells> - (Required) One or more cell objects to remove from the specified\n  Pblock.\n\nExamples:\n\n  The following example removes the specified cells from the pb_cpuEngine\n  Pblock:\n\n    remove_cells_from_pblock pb_cpuEngine [get_cells cpuEngine/cpu_dwb_dat_o/*] \n    \n\nSee Also:\n\n   *  add_cells_to_pblock\n",
"get_debug_ports": "get_debug_ports\n\nDescription: \nGet a list of debug ports in the current design\n\nSyntax: \nget_debug_ports  [-filter <arg>] [-of_objects <args>] [-regexp] [-nocase]\n                 [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of debug_port objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-filter]      Filter list with expression\n  [-of_objects]  Get ports of these debug cores\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match debug ports against patterns\n                 Default: *\n\nCategories: \nObject, Debug, XDC\n\nDescription:\n\n  Gets a list of ports defined on ILA debug cores in the current project that\n  match a specified search pattern. The default command gets a list of all\n  debug ports in the project.\n\n  Debug ports are defined when ILA debug cores are created with the\n  create_debug_core command. Ports can be added to existing debug cores with\n  the create_debug_port command.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_debug_ports based on property values on the debug ports. You can find\n  the properties on an object with the report_property or list_property\n  commands. Any property/value pair can be used as a filter. In the case of\n  the debug_port object, 'PORT_WIDTH', and 'MATCH_TYPE' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the ChipScope debug ports associated\n  with the specified debug cores.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match debug ports against the specified patterns.\n  The default pattern is the wildcard `*` which gets all debug ports. More\n  than one pattern can be specified to find multiple debug ports based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following command gets a list of the ports from the ILA debug cores in\n  the current project, with a PORT_WIDTH property of 8:\n\n    get_debug_ports -filter {PORT_WIDTH==8} \n    \n\n  The following example gets the properties attached to the specified debug\n  port:\n\n    report_property [get_debug_ports myCore/PROBE1] \n    \n\n  Note: The debug port is defined by the core_name/port_name combination.\n\nSee Also:\n\n   *  create_debug_core\n   *  create_debug_port\n   *  list_property\n   *  report_property\n",
"report_methodology": "report_methodology\n\nDescription: \nMethodology Checks\n\nSyntax: \nreport_methodology  [-name <arg>] [-cells <args>] [-checks <args>]\n                    [-file <arg>] [-rpx <arg>] [-append] [-waived]\n                    [-no_waivers] [-slack_lesser_than <arg>] [-return_string]\n                    [-merge_exceptions <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-name]               Output the results to GUI panel with this name\n  [-cells]              Run report_methodology on the specified cell(s).\n  [-checks]             Report Methodology checks (see get_methodology_checks\n                        for available checks)\n  [-file]               Filename to output results to. (send output to \n                        console if -file is not used)\n  [-rpx]                Report filename for persisted results.\n  [-append]             Append the results to file, do not overwrite the \n                        results file\n  [-waived]             Output result is Waived checks\n  [-no_waivers]         Disable waivers for checks\n  [-slack_lesser_than]  Set SYNTH rules Slack Threshold value in 'ns' (float)\n                        Default: 2.0\n  [-return_string]      Return report as string\n  [-merge_exceptions]   Allow/Prevent the timing engine from merging timing \n                        exceptions. Valid values are auto/true/false\n                        Default: auto\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nMethodology, Report, Timing\n\nDescription:\n\n  Check the current design against a specified set of methodology checks and\n  report any errors or violations that are found.\n\n  Methodology checks are a special class of design rule checks (DRC) that are\n  accessible through this separate Tcl command. The methodology checks are a\n  necessary part of the design flow, and should be considered mandatory after\n  implementation and prior to generating the bitstream.\n\n  Tip: Other than their availability through the separate report_methodology\n  command, the checks are standard design rule checks in every other way.\n\n  The report_methodology command requires an open design to check the design\n  rules against. The command returns a report with the results of violations\n  found by the design rule checks. Violations are returned as Vivado objects\n  that can be listed with the get_methodology_violations command, and are\n  associated with cells, pins, ports, nets, and sites in the current design.\n  You can get the cells, nets, and other design objects that are associated\n  with methodology violation objects, using the -of_objects option of the\n  get_cells command for instance.\n\n  The report_methodology command runs the methodology rule deck, or you can\n  use the -checks option to specify the set of checks to run. Methodology\n  checks can also be enabled or disabled in the default rule decks using the\n  IS_ENABLED property on the rule check object:\n\n    set_property IS_ENABLED FALSE [get_methodology_checks PDRC-190]\n\n  If a rule IS_ENABLED false, the rule will not be run by the\n  report_methodology command.\n\n  Tip: You can reset the properties of a methodology rule to the factory\n  default settings using the reset_methodology_check command.\n\n  You can reset the current results of the report_methodology command,\n  clearing any found violations, using the reset_methodology command.\n\nArguments:\n\n  -name <arg> - (Optional) The name to assign to the results when run in GUI\n  mode.\n\n  -cells <arg> - (Optional) Specify the cells to use when running\n  report_methodology. Cells should be hierarchical modules of the design. Use\n  this option to specify a cell other than the top cell for analysis. Cells\n  can be specified by name, or as objects returned by the get_cells command.\n\n  -checks <args> - (Optional) A list of rule checks to run the methodology\n  report against. All specified rules will be checked against the current\n  design. Rules are listed by their group name or full key. Using the -checks\n  option creates a temporary user-defined rule deck, with the specified\n  design rule checks, and uses the temporary rule deck for the run.\n\n  -file <arg> - (Optional) Write the methodology report into the specified\n  file. The specified file will be overwritten if one already exists, unless\n  -append is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -waived - (Optional) Causes only the methodology checks waived by the\n  create_waiver command to be run and reported. This returns the actual\n  violation rather than the definition of the waiver, which can be reported\n  by the report_waivers command.\n\n  -no_waivers - (Optional) Ignore the waivers defined by the create_waivers\n  command and report all methodology violations.\n\n  -slack_lesser_than <arg> - (Optional) Only report SYNTH methodology\n  violations when the calculated slack value on a path is less than the\n  specified value.\n\n  -merge_exceptions [ auto | true | false ] - (Optional) Allow or prevent the\n  timing engine from merging the timing exceptions. Some methodology\n  violations include the constraint position number inside the message. This\n  information can only be reported when the exceptions are not merged, but at\n  the expense of runtime and memory. In auto mode, when the tool estimates\n  that the complexity of the timing constraints could result in a significant\n  higher runtime, the exceptions are not merged. The user can override the\n  default behavior by forcing the exceptions to be always merged (true) or\n  never merged (false).\n\n  Note: The valid values are true, false or auto with a default setting of\n  auto.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Run the default methodology checks against the current design and write the\n  results to the specified file.\n\n    report_methodology -file C:/Data/methodology_Rpt1.txt -append\n\n  Note: The -append option adds the result to the specified file.\n\nSee Also:\n\n   *  get_methodology_checks\n   *  get_methodology_violations\n   *  open_report\n   *  report_drc\n   *  reset_methodology\n",
"remove_drc_checks": "remove_drc_checks\n\nDescription: \nRemove DRC rule check objects from a user rule deck\n\nSyntax: \nremove_drc_checks  [-of_objects <args>] [-regexp] [-nocase] [-filter <arg>]\n                   -ruledeck <arg> [-quiet] [-verbose] [<patterns>]\n\nReturns: \ndrc_check\n\nUsage: \n  Name           Description\n  --------------------------\n  [-of_objects]  Get 'rule_check' objects of these types: 'drc_ruledeck'.\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  -ruledeck      DRC rule deck to modify\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match the 'rule_check' objects against patterns.\n                 Default: *\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Remove the specified design rule checks from a drc_ruledeck object.\n\n  A rule deck is a collection of design rule checks grouped for convenience,\n  to be run with the report_drc command at different stages of the FPGA\n  design flow, such as during I/O planning or placement. The tool comes with\n  a set of factory defined rule decks, but you can also create new\n  user-defined rule decks with the create_drc_ruledeck command.\n\n  Checks are added to a rule deck using the add_drc_checks command.\n\n  The DRC rule check object features the IS_ENABLED property that can be set\n  to true or false using the set_property command. When a new rule check is\n  created, the IS_ENABLED property is set to true as a default. Set the\n  IS_ENABLED property to false to disable the rule check from being used by\n  report_drc without having to remove the rule from the rule deck.\n\n  Note: Use the reset_drc_check command to restore the DRC rule, and its\n  properties, to the default settings.\n\n  This command returns the list of design rule checks that were removed from\n  the specified rule deck.\n\nArguments:\n\n  -of_objects <arg> - (Optional) Remove the rule checks of the specified\n  drc_ruledeck object from the specified rule deck. This has the effect of\n  removing all the rules in one rule deck from the target rule deck.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  the search pattern, based on specified property values. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -ruledeck <arg> - (Required) The name of the rule deck to remove the\n  specified design rule checks from.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Remove the design rule checks that match the\n  specified patterns from the rule deck. The default pattern is the wildcard\n  `*` which removes all rule checks from the specified rule deck. More than\n  one pattern can be specified to remove multiple rule checks based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example removes the rule checks matching the specified filter\n  pattern from the my_rules rule deck:\n\n    remove_drc_checks -filter {GROUP == AVAL} -ruledeck my_rules \n    \n\n  The following example disables the specified DRC check without removing it\n  from the rule deck:\n\n    set_property IS_ENABLED FALSE [get_drc_checks RAMW-1] \n    \n\n  The following example removes all rule checks from the specified rule deck:\n\n    remove_drc_checks -ruledeck my_rules \n    \n\nSee Also:\n\n   *  add_drc_checks\n   *  create_drc_check\n   *  create_drc_ruledeck\n   *  get_drc_checks\n   *  get_drc_ruledecks\n   *  list_property\n   *  report_drc\n   *  report_property\n   *  reset_drc_check\n",
"create_slack_histogram": "create_slack_histogram\n\nDescription: \nCreate histogram\n\nSyntax: \ncreate_slack_histogram  [-to <args>] [-delay_type <arg>] [-num_bins <arg>]\n                        [-max_paths <arg>] [-slack_less_than <arg>]\n                        [-slack_greater_than <arg>] [-group <args>]\n                        [-significant_digits <arg>] [-scale <arg>]\n                        [-file <arg>] [-append] [-details] [-no_header]\n                        [-name <arg>] [-cells <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-to]                  To clock\n  [-delay_type]          Type of path delay: Values: max, min, min_max\n                         Default: max\n  [-num_bins]            Maximum number of bins: Valid Range (1-100)\n                         Default: 10\n  [-max_paths]           Number of paths to consider for -timing option\n                         Default: INT_MAX\n  [-slack_less_than]     Display paths with slack less than this\n                         Default: 1e+30\n  [-slack_greater_than]  Display paths with slack greater than this\n                         Default: -1e+30\n  [-group]               Limit report to paths in this group(s)\n  [-significant_digits]  Number of digits to display: Range: 0 to 3\n                         Default: 3\n  [-scale]               Type of scale on which to draw the histogram; \n                         Values: linear, logarithmic\n                         Default: linear\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append the results to file, don't overwrite the \n                         results file\n  [-details]             Report will generate detailed table\n  [-no_header]           do not generate a report header\n  [-name]                Output the results to GUI panel with this name\n  [-cells]               run create_slack_histogram on the specified cell(s)\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Create a slack histogram grouping paths into slack ranges, and displaying\n  the results graphically or in text format.\n\n  Inside the text report, this command generates some slack tables based on\n  the timing corners and number of paths that are analyzed. An optional\n  detailed table provides specific information for all the analyzed\n  endpoints.\n\n  In GUI report, this command creates a slack histogram grouping paths into\n  slack ranges, and displaying the results graphically.\n\n  Tip: This command provides a graphical slack histogram that requires the\n  tool to be running in GUI mode.\n\nArguments:\n\n  -to <args> - (Optional) Specify a clock name, to analyze paths that end in\n  the specified clock domain.\n\n  -delay_type <arg> - (Optional) Specifies the type of path delay to analyze\n  when creating the slack report. The valid values are min, max, and min_max.\n  The default setting for -delay_type is max.\n\n  -num_bins <args> - (Optional) Specify the number of slack bins to divide\n  the results into. The number of bins determines the granularity of the\n  histogram returned. The range of slack values calculated is divided evenly\n  into the specified number of bins, and the paths are grouped into the bins\n  according to their slack values. The value can be specified as a number\n  between 1 and 100, with a default value of 10.\n\n  -max_paths <arg> - (Optional) The maximum number of paths to analyze. This\n  is specified as a value greater than or equal to 1. By default the\n  create_slack_histogram command will report all existing critical paths.\n\n  -slack_less_than <arg> - (Optional) Report slack on paths with a calculated\n  slack value less than the specified value. Can be used with\n  -slack_greater_than to provide a range of slack values of specific\n  interest.\n\n  -slack_greater_than <arg> - (Optional) Report slack on paths with a\n  calculated slack value greater than the specified value. Can be used with\n  -slack_less_than to provide a range of slack values of specific interest.\n\n  -group <args> - (Optional) Report slack for paths in the specified path\n  groups. Currently defined path groups can be determined with the\n  get_path_groups command.\n\n  -significant_digits <arg> - (Optional) The number of significant digits in\n  the output results. The valid range is 0 to 3. The default setting is 3\n  significant digits.\n\n  -scale [ linear | logarithmic ] - (Optional) Specify the Y-axis scale to\n  use when presenting the slack histogram. Logarithmic allows for a smoother\n  presentation of greatly different values, but linear is the default.\n\n  Note: -scale is specific to the GUI report.\n\n  -details - (Optional) Provide a detailed table of the timing paths that are\n  analyzed. The table lists each endpoint pin or port with the\n  source/destination clock, and timing corner used for analysis.\n\n  -no_header - (Optional) Do not write a header to the report.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) Specifies the name of the results set for the GUI.\n  If the name specified is currently opened, the create_slack_histogram will\n  overwrite the current results.\n\n  -cells <arg> - (Option) Generate the report for the specified hierarchical\n  cells. The details of the report will be based on the specified cells\n  rather than the whole design or current_instance.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Create a slack histogram of the current design, using the default values\n  and outputting the results to the named result set in the GUI.\n\n    create_slack_histogram -name slack1\n\n  Generate a slack histogram text report (including detailed table) of the\n  current design, using the default values and outputting the results to the\n  specified file.\n\n    create_slack_histogram -details -file text_report.txt\n\nSee Also:\n\n   *  delete_timing_results\n   *  get_path_groups\n   *  report_timing\n",
"implement_xphy_cores": "implement_xphy_cores\n\nDescription: \nCall IP Services to regenerate an IP, then stitch it into the current netlist\n\nSyntax: \nimplement_xphy_cores  [-output_dir <arg>] [-rtl_only] [-force] [-debug_output]\n                      [-update_delay_value_only] [-quiet] [-verbose]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-output_dir]               Target Output Directory for PHY IP Generated \n                              Files\n                              Default: empty\n  [-rtl_only]                 Run the complete process to generate the PHY \n                              RTL code but do not replace the PHY core \n                              netlist\n  [-force]                    Implement all non-optimized memory cores.  When\n                              use with -rtl_only, optimized cores will be \n                              included, as well.\n  [-debug_output]             Enable debugging output.\n  [-update_delay_value_only]  Update latest Delay value.\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n\nCategories: \nMemory\n",
"get_filesets": "get_filesets\n\nDescription: \nGet a list of filesets in the current project\n\nSyntax: \nget_filesets  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n              [-verbose] [<patterns>]\n\nReturns: \nlist of fileset objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'fileset' objects of these types: 'reconfig_module'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match fileset names against patterns\n                 Default: *\n\nCategories: \nObject, Project\n\nDescription:\n\n  Gets a list of filesets in the current project that match a specified\n  search pattern. The default command gets a list of all filesets in the\n  project.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_filesets based on property values on the filesets. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the fileset object, 'DESIGN_MODE', and 'FILESET_TYPE' are\n  some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the filesets that are associated with\n  the specified reconfig_module objects. The default is to search all\n  filesets.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match fileset names against the specified patterns.\n  The default pattern is the wildcard `*` which gets all filesets. More than\n  one pattern can be specified to find filesets based on multiple search\n  criteria.\n\nExamples:\n\n  The following example returns the source files in the Source Set:\n\n    get_files -of_objects [get_filesets sources_1] \n    \n\n  The following example makes project_2 the active project, and then gets a\n  list of filesets beginning with the letter s or the letter r:\n\n    current_project project_2  \n    get_filesets s* r* -quiet \n    \n\n  Note: If there are no filesets matching the pattern, such as r*, you will\n  get a warning that no filesets matched the specified pattern. However, in\n  the above example the use of -quiet will suppress that warning message.\n\n  The following example gets filesets beginning with the letter C, using a\n  case insensitive regular expression:\n\n    get_filesets C.* -regexp -nocase \n    \n\n  In the above example, constrs_1 and constrs_2 constraint sets would be\n  returned if defined in the current project.\n\nSee Also:\n\n   *  get_files\n   *  report_property\n",
"make_wrapper": "make_wrapper\n\nDescription: \nGenerate HDL wrapper for the specified source\n\nSyntax: \nmake_wrapper  [-top] [-testbench] [-inst_template] [-fileset <arg>] [-import]\n              [-force] [-quiet] [-verbose] <files>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-top]            Create a top-level wrapper for the specified source\n  [-testbench]      Create a testbench for the specified source\n  [-inst_template]  Create an instantiation template for the specified \n                    source. The template will not be added to the project and\n                    will be generated for reference purposes only.\n  [-fileset]        Fileset name\n  [-import]         Import generated wrapper to the project\n  [-force]          Overwrite existing source(s)\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <files>           Source file for which the wrapper needs to be generated\n\nCategories: \nProject, SysGen\n\nDescription:\n\n  Create a Verilog or VHDL wrapper for instantiating a sub-design into the\n  project.\n\n  The make_wrapper command will create a wrapper for Embedded Processor\n  Designs from the IP integrator of the Vivado Design Suite, or any IP\n  integrator block design, as well as DSP modules created in System Generator\n  or MathWorks MatLab.\n\n  You can generate a wrapper to make the sub-design the top-level of a\n  stand-alone design, or for instantiating a sub-design into an existing\n  design. You can also generate a wrapper for a simulation test bench of\n  System Generator sub-designs.\n\n  Note: The wrapper is generated in Verilog or VHDL according to the\n  TARGET_LANGUAGE property on the project.\n\n  The command returns information related to the creation of the wrappers, or\n  returns an error if it fails.\n\nArguments:\n\n  -top - (Optional) Create a top-level Verilog or VHDL wrapper for the\n  specified source. The wrapper instantiates the sub-design as the top-level\n  of the design hierarchy.\n\n  -testbench - (Optional) Create a simulation test bench template for the\n  specified sub-design. This includes the DUT module instantiation, but does\n  not include the stimulus for simulation.\n\n  Note: This option is only valid for SysGen composite files. All other\n  sources will produce an error.\n\n  -inst_template - (Optional) Create an instantiation template for the\n  specified source. The template will not be added to the project and will be\n  generated for reference purposes only. The instantiation template can be\n  cut and paste into another RTL file to create an instance of the module in\n  the hierarchy.\n\n  -fileset - (Optional) Specify the destination fileset for importing the\n  wrapper file into the project. By default, the wrapper will be imported\n  into sources_1.\n\n  -import - (Optional) Import the wrapper file into the project, adding it to\n  the appropriate fileset.\n\n  -force - (Optional) Overwrite an existing wrapper file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) Specify the source files to generate the wrapper from.\n  The make_wrapper command only supports the .mdl file format from System\n  Generator for DSP, the .slx format from MathWorks MATLAB, and the .bd file\n  format from the IP integrator of the Vivado Design Suite.\n\nExamples:\n\n  The following example creates the instantiation template to integrate the\n  specified IP integrator block design into the design hierarchy of the\n  current project:\n\n    make_wrapper -inst_template -fileset [get_filesets sources_1] \\  \n    -files [get_files C:/Data/design_1/design_1.bd] \n    \n\nSee Also:\n\n   *  add_files\n   *  create_bd_design\n   *  create_sysgen\n   *  generate_target\n   *  get_filesets\n   *  list_targets\n",
"launch_simulation": "launch_simulation\n\nDescription: \nGenerate simulation scripts of the design and launch steps for the target simulator.\n\n\nSyntax: \nlaunch_simulation  [-step <arg>] [-simset <arg>] [-mode <arg>] [-type <arg>]\n                   [-scripts_only] [-gui] [-exec] [-of_objects <args>]\n                   [-absolute_path] [-install_path <arg>]\n                   [-gcc_install_path <arg>] [-noclean_dir] [-quiet] [-verbose]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-step]              Launch a simulation step. Values: all, compile, \n                       elaborate, simulate. Default:all (launch all steps).\n                       Default: all\n  [-simset]            Name of the simulation fileset\n  [-mode]              Simulation mode. Values: behavioral, post-synthesis, \n                       post-implementation\n                       Default: behavioral\n  [-type]              Netlist type. Values: functional, timing. This is only\n                       applicable when mode is set to post-synthesis or \n                       post-implementation\n  [-scripts_only]      Only generate scripts\n  [-gui]               Invoke simulator GUI (applicable for -scripts_only \n                       mode)\n  [-exec]              Execute existing script for the step specified with \n                       the -step switch\n  [-of_objects]        Generate compile order file for this object \n                       (applicable with -scripts_only option only)\n  [-absolute_path]     Make design source file paths in 'absolute' format\n  [-install_path]      Custom installation directory path\n  [-gcc_install_path]  Specify GNU compiler installation directory path for \n                       the g++/gcc executables\n  [-noclean_dir]       Do not remove simulation run directory files\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nToolLaunch, Simulation\n\nDescription:\n\n  Launch a simulator to perform analysis and verification of a design.\n\n  The launch_simulation command creates a script file for the target\n  simulator and then executes this file in the simulation run directory. The\n  simulation results are saved in the log files created in the run directory.\n\n  To run simulation for a specific simulator, you must first define the\n  target simulator by setting the TARGET_SIMULATOR property on the design\n  project:\n\n    set_property TARGET_SIMULATOR <name> [current_project]\n\n  The TARGET_SIMULATOR property can have a value of XSim, ModelSim, Xcelium,\n  VCS, Riviera, or ActiveHDL. The default value is XSim, the Vivado\n  simulator.\n\n  The target simulator can also be defined from the Vivado IDE. Create or\n  open a project, select Tools > Settings > Simulation menu item, and select\n  the Target simulator from the drop-down menu. The available choices are:\n  Vivado simulator, ModelSim Simulator, Questa Advanced Simulator, Xcelium\n  Parallel Simulator, Verilog Compiler Simulator (VCS), Riviera-PRO\n  Simulator, and Active-HDL Simulator.\n\n  Tip: Some of these simulators are only available on Linux and some are only\n  available on Windows.\n\n  The launch_simulation command uses a three-step process comprised of\n  compile, elaborate, and simulate steps. A script file for the target\n  simulator is created for each step in the process, (compile.bat,\n  elaborate.bat, simulate.bat), and written to the simulation run directory.\n\n  Tip: On Linux the script files are named with the .sh suffix instead of .bat.\n\n  By default, launch_simulation will run these script files in sequence to\n  run the simulation. You can create the scripts without running them by\n  using the -scripts_only option.\n\n  This command returns a transcript of its process, or returns an error if it\n  fails.\n\nArguments:\n\n  -simset <arg> - (Optional) The name of the simulation fileset containing\n  the simulation test benches and sources to be used during simulation. If\n  not specified, the current simulation fileset is used.\n\n  -mode [ behavioral | post-synthesis | post-implementation ] - (Optional)\n  Specifies either a behavioral simulation of the HDL design sources to\n  verify syntax and confirm that the design performs as intended, a\n  functional or timing simulation of the post-synthesis netlist, or a\n  functional or timing simulation of the post implementation design to verify\n  circuit operation after place and route. The default mode is behavioral.\n\n  -type [ functional | timing ] - (Optional) Specifies functional simulation\n  of just the netlist, or timing simulation of the netlist and SDF file. This\n  option must be specified with -mode for post-synthesis or\n  post-implementation, but cannot be used with -mode behavioral.\n  Post-synthesis timing simulation uses SDF component delays from the\n  synth_design command. Post-implementation timing simulation uses SDF delays\n  from the place_design and route_design commands.\n\n  Important: Do not use -type with -mode behavioral, or the tool will return\n  an error.\n\n  -scripts_only - (Optional) Only generate the simulation scripts for the\n  target simulator, rather than actually launching these scripts to start the\n  'compile', 'elaborate' and 'simulate' steps. You can use the scripts to\n  launch the simulation flow at a later time.\n\n  -gui - (Optional) Invoke simulator in GUI mode when executing the simulate\n  script (applicable for scripts only mode)\n\n  -of_objects <arg> - (Optional) Run simulation for a single specified\n  sub-design, or composite file. The sub-design must be specified as a design\n  object as returned by the get_files command, rather than simply specified\n  by name.\n\n  -absolute_path - (Optional) Specify this option to define the source and\n  include paths used in the simulation scripts as absolute paths. By default,\n  all paths are written as relative to the simulation run directory. Relative\n  paths include an 'origin_dir' variable that is set in the simulation script\n  to the current run directory, but you can edit the $origin_dir variable to\n  point to a path of your choice when relocating the design and simulation\n  scripts.\n\n  -install_path <arg> - (Optional) Specifies the directory containing\n  simulator executables ( e.g. vlog.exe, ncvlog, vlogan). If this option is\n  not specified, the target simulator will be looked for in the current\n  $PATH.\n\n  -gcc_install_path <arg> - (Optional) Specifies the directory containing\n  simulator GCC executables (e.g. gcc, g++). If this switch is not specified,\n  then the directory path will be determined from the project property named\n  'simulator.<name>_gcc_install_dir'. If this property is not set, then the\n  path set by the GCC_SIM_EXE_PATH environment variable will be used. If this\n  variable is not set, then launch_simulation will automatically try to\n  calculate the path from the simulator installation. If not able to\n  determine, the path will then be searched from the $PATH (Linux) or %PATH%\n  (Windows) environment variable.\n\n  Supported GCC versions.\n\n   *  questa - 7.4.0\n\n   *  xcelium - 9.3.0\n\n   *  vcs - 9.2.0\n\n   *  riviera - 9.3.0\n\n  -noclean_dir - (Optional) Do not remove files from the simulation run\n  directory prior to launching the simulator. The default behavior is to\n  remove files from the simulation run directory to create a clean start.\n  With the -noclean_dir option, existing files in the run directory are left\n  in place. However, some of the files generated for use by the simulator\n  will be overwritten or updated by re-launching the simulator.\n\n  -step - (Optional) Specifies the simulation step to be launched. The valid\n  steps are: compile, elaborate, and simulate.\n\n  Tip: By default, all the steps will be executed.\n\n  -exec - (Optional) Execute script for the step specified with the -step\n  switch. The script must be generated first and should be present in the\n  simulation run directory.\n\n  Note: This switch is applicable with the -step only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following commands run behavioral simulation of the design using the\n  Vivado simulator:\n\n    set_property target_simulator 'XSim' [current_project]\n    launch_simulation\n\n  The following commands run post-synthesis functional simulation of the\n  design using the ModelSim Simulator:\n\n    set_property target_simulator 'ModelSim' [current_project]\n    launch_simulation -mode 'post-synthesis' -type 'functional'\n\n  The following commands run post-implementation functional simulation of the\n  design using the Cadence Xcelium Simulator:\n\n    set_property target_simulator 'Xcelium' [current_project]\n    launch_simulation -mode 'post-implementation' -type 'functional'\n\n  The following commands run post-implementation timing simulation of the\n  design using the Synopsys VCS Simulator:\n\n    set_property target_simulator 'VCS' [current_project]\n    launch_simulation -mode 'post-implementation' -type 'timing'\n\n  The following command generates behavioral simulation scripts for the\n  target simulator in the simulation run directory:\n\n    launch_simulation -scripts_only\n\n  The following command will setup the target simulator command in the script\n  to run in the GUI mode:\n\n    launch_simulation -scripts_only -gui\n\n  The following command will generate and execute compile step:\n\n    launch_simulation -step compile\n\n  The following command will execute elaborate step by executing the existing\n  elaborate script in the simulation run directory:\n\n    launch_simulation -step elaborate -exec\n\n  The following commands run behavioral simulation flow of the design for the\n  my_simset simulation fileset for the target simulator in the simulation run\n  directory:\n\n    launch_simulation -simset [get_filesets my_simset]\n\n  The following command runs behavioral simulation flow for the char_fifo.xci\n  IP for the target simulator in the simulation run directory, and does not\n  clean up prior simulation files:\n\n    launch_simulation -noclean_dir -of_objects [get_files char_fifo.xci]\n\n  The following command generates absolute paths for the source files in the\n  generated script files:\n\n    launch_simulation -absolute_path\n\n  The following command will pick the Xcelium simulator tools from the\n  specified installation path instead of from the PATH variable:\n\n  launch_simulation -install_path /tools/20.09.006/tools/xcelium/bin\n\nSee Also:\n\n   *  close_sim\n   *  current_sim\n   *  relaunch_sim\n   *  xsim\n",
"get_board_bus_nets": "get_board_bus_nets\n\nDescription: \nGets the list of board bus net objects\n\nSyntax: \nget_board_bus_nets  [-regexp] [-nocase] [-all] [-filter <arg>]\n                    -of_objects <args> [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nlist of bus nets in the board\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching\n  [-all]        Returns all enabled as well as disabled buses\n  [-filter]     Filter list with expression\n  -of_objects   Get 'board_bus_net' objects of these types: 'board_bus \n                board_component board_component_pin'.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  match board net names against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of individual connection bus nets of the specified connection\n  bus object, or the board component or board component pin objects.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  Connection buses define the connections between the Xilinx device (part0)\n  and other components on the board. Bus nets define individual connections\n  of the connection bus.\n\n  This command returns a list of connection bus nets, or returns an error if\n  it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -all - (Optional) Return a list of all connection bus nets defined in Board\n  Interface file of the specified object.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_bus_nets based on property values on the bus nets. You can find\n  the properties on an object with the report_property or list_property\n  commands. Any property/value pair can be used as a filter. In the case of\n  the board bus net object, 'BUS', 'NAME', and 'DELAY' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Required) Get the nets of connection buses of the\n  specified board_bus, board_component, or board_component_pin objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match board bus nets against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  connection bus nets of the specified objects.\n\nExamples:\n\n  The following example gets the connection bus nets associated with the\n  specified component of the current board:\n\n    get_board_bus_nets -of_objects [get_board_components {*iic_main*}] \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_buses\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"read_ucf": "read_ucf\n\nDescription: \nImport physical constraints from a file.\n\nSyntax: \nread_ucf  [-cells <args>] [-ref <arg>] [-quiet_diff_pairs] [-quiet] [-verbose]\n          <file>\n\nReturns: \nlist of added files\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-cells]             Import constraints for these cells\n  [-ref]               Import constraints for this ref\n  [-quiet_diff_pairs]  Suppress warnings about differential pair inference \n                       when importing I/O ports\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <file>               Input UCF file name\n\nCategories: \nFileIO\n\nDescription:\n\n  Imports physical constraints from a user constraint file (UCF). The UCF can\n  be imported at the top-level, which is the default, or at a specific\n  cell-level. When imported at the top-level, the specified UCF file is added\n  to the active constraint fileset.\n\n  Note: Constraints from the UCF file will overwrite any current constraints\n  of the same name. Therefore, exercise some caution when reading a UCF file\n  to be sure you will not overwrite important constraints.\n\n  This command is similar to the add_files command in that the UCF file is\n  added by reference rather than imported into the local project directory.\n\nArguments:\n\n  -cells <args> - The name of hierarchical cells in the current design to\n  import the UCF file into. The constraints will be applied to the specified\n  block, and the imported UCF file will not be added to the active constraint\n  fileset.\n\n  Note: A design must be open when specifying the -cell option.\n\n  -ref <arg> - Import constraints for this ref. The constraints will be\n  applied to the specified block, and the imported UCF file will not be added\n  to the active constraint fileset.\n\n  -quiet_diff_pairs - (Optional) The tool transcripts messages related to\n  pins that may be inferred as differential pairs when importing the UCF\n  file. This option suppresses messages related to inferring differential\n  pairs.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - The file name of the UCF file to be imported.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example reads the specified UCF file into the top-level of\n  the design:\n\n    read_ucf C:/Data/FPGA_Design/top1.ucf \n    \n\nSee Also:\n\n   *  add_files\n   *  infer_diff_pairs\n   *  save_design\n   *  write_ucf\n",
"get_board_parameters": "get_board_parameters\n\nDescription: \nGets the list of board parameter objects\n\nSyntax: \nget_board_parameters  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                      [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nlist of parameters in the board\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board_parameter' objects of these types: 'board \n                 board_component board_component_interface'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   match parameter names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of parameters defined on the current board, as defined in the\n  Board Interface file.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The parameters defined in the board file specify custom or user-defined\n  characteristics of the board.\n\n  This command returns a list of board parameters, or returns an error if it\n  fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_parameters based on property values on the parameter objects. You\n  can find the properties on an object with the report_property or\n  list_property commands. Any property/value pair can be used as a filter. In\n  the case of the board parameter object, 'NAME', 'VALUE', and 'VALUE_TYPE'\n  are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the parameters of the specified boards,\n  board components, or board component interfaces.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match board parameters against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  board parameters defined on the current board.\n\nExamples:\n\n  The following example gets the parameters defined in the Board Interface\n  file of the current board:\n\n    get_board_parameters \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_buses\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"create_debug_core": "create_debug_core\n\nDescription: \nCreate a new Integrated Logic Analyzer debug core\n\nSyntax: \ncreate_debug_core  [-quiet] [-verbose] <name> <type>\n\nReturns: \nnew debug_core object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of the new debug core instance\n  <type>      Type of the new debug core\n\nCategories: \nDebug, XDC\n\nDescription:\n\n  Adds a new Integrated Logic Analyzer (ILA) debug core to an open netlist\n  design in the current project. The ILA debug core defines ports for\n  connecting nets to for debugging the design in the logic analyzer feature\n  of the Vivado Design Suite available through the open_hw command.\n\n  ILA debug cores can be added to the RTL source files of the design using\n  debug cores from the Xilinx IP catalog, or added to the netlist design\n  after synthesis using this command. Refer to the Vivado Design Suite User\n  Guide: Vivado Programming and Debugging (UG908) for more information on\n  using ILA debug cores.\n\n  Note: A debug core can only be added to an open netlist design using this\n  command.\n\n  The ILA core is created with a CLK port and a PROBE port by default. The\n  CLK port defines the clock domain for the ILA core, and allows you to probe\n  signals that are common to that domain. The CLK port only supports one\n  clock signal, and so you must create a separate debug core for each clock\n  domain. The PROBE port provides a probe point for nets marked for debug\n  with the MARK_DEBUG property. The PROBE port offers multiple channels to\n  probe multiple nets from a single ILA core.\n\n  You can add new ports to an existing ILA core with the create_debug_port\n  command, and connect signals to the ports using the connect_debug_port\n  command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the ILA debug core to add to the project.\n\n  <type> - (Required) The type of debug core to insert. Only the ILA debug\n  core is currently supported in the Vivado tool. The ILA debug core simply\n  adds another load onto a connected net without otherwise altering it.\n\n  Note: When the ILA core is added to the project, the tool also adds a Debug\n  Hub core (labtools_xsdbm_v1) as a container for one or more ILA cores.\n  However, you cannot directly add a Debug Hub to the project.\n\nExamples:\n\n  The following example opens the synthesis run, creating the specified\n  netlist design name, and then creates a new ILA debug core in that design:\n\n    open_run -name netlist_1 synth_1  \n    create_debug_core myCore ila \n    \n\n  The properties of the debug core can be customized by using the\n  set_property command as in the following example:\n\n    set_property C_DATA_DEPTH 2048 [get_debug_cores myCore] \n    \n\n  This example marks a sequence of nets for debugging using the MARK_DEBUG\n  property, creates a new debug core, connects the CLK port to the\n  appropriate clock domain, and assigns the debug nets to the PROBE ports on\n  the core:\n\n    set_property MARK_DEBUG true [get_nets [list {control_reg[0]} {control_reg[1]} \\  \n       {control_reg[2]} {control_reg[3]} {control_reg[4]} {control_reg[5]} \\  \n       {control_reg[6]} {control_reg[7]} {control_reg[8]} {control_reg[9]} \\  \n       {control_reg[10]} {control_reg[11]} {control_reg[12]} {control_reg[13]} \\  \n       {control_reg[14]} {control_reg[15]} {control_reg[16]} {control_reg[17]} \\  \n       {control_reg[18]} {control_reg[19]} {control_reg[20]} {control_reg[21]} \\  \n       {control_reg[22]} {control_reg[23]} {control_reg[24]} {control_reg[25]} \\  \n       {control_reg[26]} {control_reg[27]} {control_reg[28]} {control_reg[29]} \\  \n       {control_reg[30]} {control_reg[31]}]]  \n    create_debug_core u_ila_0 ila  \n    set_property port_width 1 [get_debug_ports u_ila_0/CLK]  \n    connect_debug_port u_ila_0/CLK [get_nets [list wbClk ]]  \n    set_property port_width 32 [get_debug_ports u_ila_0/PROBE0]  \n    connect_debug_port u_ila_0/PROBE0 [get_nets [list {control_reg[0]}  \n       {control_reg[1]} {control_reg[2]} {control_reg[3]} {control_reg[4]} \\  \n       {control_reg[5]} {control_reg[6]} {control_reg[7]} {control_reg[8]} \\  \n       {control_reg[9]} {control_reg[10]} {control_reg[11]} {control_reg[12]} \\  \n       {control_reg[13]} {control_reg[14]} {control_reg[15]} {control_reg[16]} \\  \n       {control_reg[17]} {control_reg[18]} {control_reg[19]} {control_reg[20]} \\  \n       {control_reg[21]} {control_reg[22]} {control_reg[23]} {control_reg[24]} \\  \n       {control_reg[25]} {control_reg[26]} {control_reg[27]} {control_reg[28]} \\  \n       {control_reg[29]} {control_reg[30]} {control_reg[31]} ]] \n    \n\nSee Also:\n\n   *  connect_debug_port\n   *  create_debug_port\n   *  delete_debug_core\n   *  get_debug_cores\n   *  implement_debug_core\n   *  open_hw\n   *  open_run\n   *  report_debug_core\n   *  report_property\n   *  set_property\n",
"get_power_rails": "get_power_rails\n\nDescription: \nGet a list of Power Rails in the current design\n\nSyntax: \nget_power_rails  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n                 [<patterns>]\n\nReturns: \nlist of power rail objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match Power rail names against patterns\n                Default: *\n\nCategories: \nXDC, Floorplan\n",
"set_clock_groups": "set_clock_groups\n\nDescription: \nSet exclusive or asynchronous clock groups\n\nSyntax: \nset_clock_groups  [-name <arg>] [-logically_exclusive] [-physically_exclusive]\n                  [-asynchronous] [-group <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                     Description\n  ------------------------------------\n  [-name]                  Name for clock grouping\n  [-logically_exclusive]   Specify logically exclusive clock groups\n  [-physically_exclusive]  Specify physically exclusive clock groups\n  [-asynchronous]          Specify asynchronous clock groups\n  [-group]                 Clocks List\n  [-quiet]                 Ignore command errors\n  [-verbose]               Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Define clocks, or groups of clocks, that are exclusive with or asynchronous\n  to other clocks in the design. Exclusive clocks are not active at the same\n  time, and paths between them can be ignored during timing analysis.\n  Asynchronous clocks are clocks with no known phase relationship, which\n  typically happens when they do not share the same primary clock or do not\n  have a common period.\n\n  Using this command is similar to defining false path constraints for data\n  paths moving between exclusive or asynchronous clock domains. See the\n  Vivado Design Suite User Guide: Using Constraints (UG903) for more\n  information.\n\n  If only one group is specified, the clocks in that group are asynchronous\n  or exclusive to all other clocks in the design, but not to each other. If a\n  new clock is created after the set_clock_groups command, it is asynchronous\n  to that group as well.\n\n  This command can also be used for multiple clocks that are derived from a\n  single BUFGMUX as both of the clocks will not be active at the same time.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -name <group_name> - (Optional) Name of the clock group to be created. A\n  name will be automatically assigned if one is not specified.\n\n  -logically_exclusive - (Optional) The specified clocks are logically\n  exclusive.\n\n  Note: -logically_exclusive, -physically_exclusive and -asynchronous are\n  mutually exclusive arguments.\n\n  -physically_exclusive - (Optional) The specified clocks are physically\n  exclusive, and cannot exist in the design at the same time.\n\n  -asynchronous - (Optional) The specified clocks are asynchronous to one\n  another.\n\n  -group <args> - (Optional) The list of clocks to be included in the clock\n  group. Each group of clocks is exclusive with or asynchronous with the\n  clocks specified in all other groups.\n\n  Note: If only one group of clocks is specified, that group is exclusive\n  with or asynchronous to all other clocks in the design. Clocks can be\n  specified by name, or as clock objects returned by the get_clocks command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Group all the elements driven by src_clk and sync_clk into separate clock\n  groups. The clock groups are asynchronous to each other:\n\n    set_clock_groups -group src_clk -group sync_clk -asynchronous \n    \n\n  The following example includes the generated clocks of the specified\n  clocks, and adds those to the clock group:\n\n    set_clock_groups -group [get_clocks -include_generated_clocks src_clk] \\  \n    -group [get_clocks -include_generated_clocks sync_clk]  -asynchronous \n    \n\n  Note: In the preceding example, src_clk and sync_clk, and all their\n  generated clocks, are asynchronous. Otherwise the generated clocks would be\n  timed against each other and the other master clock.\n\n  In this example, the specified clocks are grouped together, and are\n  asynchronous to all other clocks in the design:\n\n    set_clock_groups -async -group [get_clocks {J_CLK U_CLK}] \n    \n\nSee Also:\n\n   *  get_clocks\n   *  set_false_path\n",
"create_dashboard_gadget": "create_dashboard_gadget\n\nDescription: \nCreate the Gadget for Project summary dashboard\n\nSyntax: \ncreate_dashboard_gadget  -name <arg> -type <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -name       Name of the gadget\n  -type       Type of the gadget\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Note: This command is primarily intended to be used in the Vivado IDE, with\n  the Project Summary, and the Add Gadget command.\n\n  Create a new 'gadget' for a dashboard, such as the Project Summary\n  dashboard that lets you view different aspects of the synthesized or\n  implemented design run. Aspects of the design include timing information,\n  resource utilization, DRC and methodology violations, and power analysis.\n\n  A dashboard gadget has a series of properties that define the information\n  displayed, and the way it is displayed. These properties can be set using\n  the set_property command. To determine the properties on a gadget, you can\n  use the following command:\n\n    report_property -all [get_dashboard_gadget <gadget_name>]\n\n  Properties of a dashboard gadget can be set using the set_property command.\n  Some of the properties of a gadget that can be set include:\n\n   *  TYPE: Indicates the type of information presented by the gadget as\n      defined by the -type option.\n\n   *  ROW: Indicates the row placement in the dashboard.\n\n   *  COL: Indicates the column placement of the gadget in the dashboard.\n\n   *  REPORTS: specifies the reports associated with the gadget.\n\n   *  RUN.STEP and TYPE: specifies the synthesis or implementation run step\n      that the gadget applies to.\n\n   *  VIEW.TYPE and ORIENTATION: Specifies the presentation of information as\n      a graph or table, and indicates the orientation of the data.\n\nArguments:\n\n  -name <arg> - (Required) Specify the name of the gadget to create.\n\n  -type <arg> - (Required) Specify the type of dashboard gadget to create.\n  The type is specified as one of an enumerated set which includes the\n  following types: DRC, Methodology, Power, Timing, and Utilization.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example creates a power type gadget, and defines the reports\n  and run stages the gadget applies to:\n\n    create_dashboard_gadget -name gadget_power -type power \n    set_property reports {impl_1#impl_1_route_report_power_0} [get_dashboard_gadgets [list {gadget_power}]] \n    set_property active_reports {impl_1#impl_1_route_report_power_0} [get_dashboard_gadgets [list {gadget_power}]] \n    set_property run.step all_stages [get_dashboard_gadgets [list {gadget_power}]] \n    \n\nSee Also:\n\n   *  delete_dashboard_gadgets\n   *  get_dashboard_gadgets\n   *  move_dashboard_gadget\n",
"get_timing_arcs": "get_timing_arcs\n\nDescription: \nGet a list of timing arcs\n\nSyntax: \nget_timing_arcs  [-from <args>] [-to <args>] [-filter <arg>]\n                 [-of_objects <args>] [-quiet] [-verbose]\n\nReturns: \nlist of timing arc objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-from]        List of pin or ports\n  [-to]          List of pin or ports\n  [-filter]      Filter list with expression\n  [-of_objects]  Get timing arcs for these cells\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nXDC, Object, Timing\n\nDescription:\n\n  Gets a list of timing arcs for the specified objects. You can filter the\n  timing arcs according to specified properties.\n\n  Timing arcs are a part of a timing path. A timing arc can be a wire between\n  two pins, or can be the internal path of a logic instance between an input\n  pin and output pin, or clock input and data output pins.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -from <args> - (Optional) The starting points of the timing arcs to be\n  returned. Ports, pins, or nets can be specified as startpoints.\n\n  -to <args> - (Optional) The endpoints or destination objects of timing arcs\n  to be returned. Ports, pins, or nets can be specified as endpoints.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_timing_arcs based on property values on the timing arcs. You can find\n  the properties on an object with the report_property or list_property\n  commands. In the case of the 'timing arc' object, 'FROM_PIN', 'TO_PIN' and\n  'LIB_CELL' are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get timing arcs from the Specified cell\n  objects. If a cell is specified, all cell_arcs of that cell are returned.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the timing arc from the output pin of the\n  specified buffer:\n\n    \n    report_property -all [get_timing_arcs -of_objects [get_cells go_IBUF_inst]] \n    \n\n  The following example returns the timing arcs of the specified cell:\n\n    get_timing_arcs -of_objects [get_cells count_reg[6]]  \n    {count_reg[6]/C --> count_reg[6]/Q [Reg Clk to Q] }   \n    {count_reg[6]/C --> count_reg[6]/D [setup] }   \n    {count_reg[6]/C --> count_reg[6]/D [hold] }   \n    {count_reg[6]/C --> count_reg[6]/CLR [recovery] }   \n    {count_reg[6]/C --> count_reg[6]/CE [hold] }   \n    {count_reg[6]/C --> count_reg[6]/CLR [removal] }   \n    {count_reg[6]/C --> count_reg[6]/CE [setup] }   \n    {count_reg[6]/CLR --> count_reg[6]/Q [Reg Set/Clr] } \n    \n\nSee Also:\n\n   *  get_timing_path\n   *  report_timing\n   *  set_msg_limit\n",
"report_pr_configuration_analysis": "report_pr_configuration_analysis\n\nDescription: \nReport reconfigurable partition analysis across multiple configurations\n\nSyntax: \nreport_pr_configuration_analysis  [-complexity] [-clocking] [-timing]\n                                  [-cells <args>] [-dcps <args>] [-rent]\n                                  [-nworst <arg>] [-file <arg>] [-quiet]\n                                  [-verbose]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-complexity]  Run complexity analysis\n  [-clocking]    Run clocking analysis\n  [-timing]      Run boundary net timing analysis\n  [-cells]       List of reconfigurable cell names\n  [-dcps]        List of design checkpoints for each reconfigurable cell. The\n                 order of dcps must match that of the -cells option.\n  [-rent]        Compute Rents component as part of complexity analysis.  \n                 Runtime intensive for large designs.\n  [-nworst]      Specifies the N worst boundary paths.\n                 Default: 10\n  [-file]        Filename to output results to. (send output to console if \n                 -file is not used)\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Note: You must first define the project as a Dynamic Function eXchange (DFX)\n  project by setting the PR_FLOW property on the project to TRUE, or by using\n  the Tools > Enable Dynamic Function eXchange command.\n\n  Report reconfigurable partition analysis across multiple configurations as\n  defined by create_pr_configuration. This report compares each\n  Reconfigurable Module that you select to give you input on your DFX design.\n  It examines resource usage, floorplanning, clocking, and timing metrics to\n  help you manage the overall DFX design. For more information on this command\n  refer to the Vivado Design Suite User Guide: Dynamic Function eXchange\n  (UG909).\n\n  When this analysis is done, each RM is examined based on information in the\n  checkpoints provided. While post-synthesis checkpoints can be supplied, the\n  most complete information is not available until after opt_design when all\n  the linking and expansion has been done.\n\nArguments:\n\n  -complexity - (Optional) Perform complexity analysis of the design and\n  report the Rent Exponent, Average Fanout, and Primitive Histogram.\n\n  Note: The -complexity option can be specified with -cells to control the\n  analysis of the design or cells.\n\n  -clocking - (Optional) This option focuses the report on clock usage and\n  loads for each RM, helping you plan the overall clocking distribution of\n  the design.\n\n  -timing - (Optional) This option focuses the report on boundary interface\n  timing details, allowing you analyze bottlenecks in and out of RMs.\n\n  -cells <args> - (Option) Generate the report on the specified list of\n  reconfigurable cells. The details of the report will be based on the\n  specified cells rather than the whole design, or current_instance.\n\n  -dcps <args> - (Optional) List of design checkpoints (DCP) for each\n  reconfigurable cell.\n\n  Note: The order of DCP files specified must match the order of the -cells\n  option.\n\n  -rent - (Optional) Adds Rent metrics to the complexity analysis. This is\n  runtime intensive for large designs, which is why it is not included in\n  complexity analysis by default.\n\n  -nworst <arg> - (Optional) Reports the N worst boundary paths. The default\n  is 10.\n\n  -file <arg> - (Optional) Write the analysis results into the specified file\n  instead of to the Tcl console. The specified file will be overwritten if\n  one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example performs complexity analysis of the design:\n\n    report_pr_configuration_analysis -complexity  \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  create_pr_configuration\n   *  delete_reconfig_modules\n   *  get_partition_defs\n   *  get_reconfig_modules\n   *  set_property\n",
"delete_utilization_results": "delete_utilization_results\n\nDescription: \nDelete utilization results that were stored in memory under a given name.\n\nSyntax: \ndelete_utilization_results  -name <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -name       Name for the set of results to clear\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Clear the specified utilization results from the named result set.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  -name <arg> - (Required) Specifies the name of the results to be cleared.\n\nExamples:\n\n  The following example clears the specified results set from memory:\n\n    delete_utilization_results -name SSO1 \n    \n\nSee Also:\n\n   *  report_utilization\n",
"link_design": "link_design\n\nDescription: \nOpen a netlist design\n\nSyntax: \nlink_design  [-name <arg>] [-part <arg>] [-constrset <arg>] [-top <arg>]\n             [-mode <arg>] [-pr_config <arg>] [-reconfig_partitions <args>]\n             [-partitions <args>] [-ignore_timing] [-quiet] [-verbose]\n\nReturns: \ndesign object\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-name]                 Design name\n  [-part]                 Target part\n  [-constrset]            Constraint fileset to use\n  [-top]                  Specify the top module name when the structural \n                          netlist is Verilog\n  [-mode]                 The design mode. Values: default, out_of_context\n                          Default: default\n  [-pr_config]            PR Configuration to apply while opening the design\n  [-reconfig_partitions]  List of reconfigurable partitions to load while \n                          opening the design\n  [-partitions]           List of partitions to load while opening the design\n  [-ignore_timing]        open a netlist design without the timing \n                          constraints.\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n\nCategories: \nTools\n\nDescription:\n\n  Opens a new or existing netlist design, linking the netlist files and\n  constraints with the target part to create the design. This command is\n  intended for use with netlist source files, such as files generated by\n  third party synthesis tools, or Vivado synthesis through the synth_design\n  command.\n\n  The DESIGN_MODE property for the current source fileset must be defined as\n  GateLvl in order to open a netlist design. If not, you will get the\n  following error:\n\n    ERROR: The design mode of `sources_1` must be GateLvl. \n    \n\n  The -top switch is required for third-party synthesis designs. The netlist\n  for the design must be rooted in a specific module. For project-based\n  designs you can specify the TOP property on the project. However, in\n  non-project mode, you must use the -top option for the link_design command.\n\n  For project based designs with RTL source files, use launch_runs to launch\n  synthesis or implementation, and then use the open_run command to open the\n  design.\n\n  For non-project based designs, use the open_checkpoint command to open a\n  checkpoint into memory, opening the design in Non-Project Mode. Refer to\n  the Vivado Design Suite User Guide: Design Flows Overview (UG892) for more\n  information on Project Mode and Non-Project Mode.\n\nArguments:\n\n  -name <arg> - (Optional) This is the name assigned to the netlist design\n  when it is opened by the Vivado tool. This name is for reference purposes,\n  and has nothing to do with the top-level of the design or any logic\n  contained within.\n\n  -part <arg> - (Optional) The Xilinx device to use when creating a new\n  design. If the part is not specified the default part will be used.\n\n  -constrset <arg> - (Optional) The name of the constraint fileset to use\n  when opening the design.\n\n  Note: The -constrset argument must refer to a constraint fileset that\n  exists. It cannot be used to create a new fileset. Use create_fileset for\n  that purpose.\n\n  -top <arg> - (Optional) The name of the top module of the design hierarchy\n  of the netlist.\n\n  Note: When specifying -top with an EDIF netlist-based design, or design\n  checkpoint (DCP) file, the name of the top-level cell must match the\n  top-level cell defined in the EDIF or DCP file.\n\n  -mode [ default | out_of_context ] - (Optional) If you have synthesized a\n  block, and disabled IO buffer insertion, you can load the resulting EDIF\n  into the Vivado Design Suite using -mode out_of_context. This enables\n  implementation of the module without IO buffers, prevents optimization due\n  to unconnected inputs or outputs, and adjusts DRC rules appropriately for\n  the design. Refer to the Vivado Design Suite User Guide: Hierarchical\n  Design (UG905) for more information.\n\n  -pr_config <arg> - (Optional) For the Dynamic Function eXchange (DFX)\n  project-based design flow, this option specifies the PR Configuration to\n  apply while opening the design. For DFX designs, the create_pr_configuration\n  command lets you associate a Reconfigurable Module (RM) with each Partition\n  Definition in the design. This option tells the Vivado tool to link the\n  design checkpoint files for the RMs into the design. See the Vivado Design\n  Suite User Guide: Dynamic Function eXchange (UG909) for more information.\n\n  -reconfig_partitions <args> - (Optional) Specify a list of reconfigurable\n  partitions to load while opening the design. The specified reconfigurable\n  partitions are marked with the HD.RECONFIGURABLE property for proper\n  handling in the design.\n\n  -partitions <args> - (Optional) List of hierarchical design partitions to\n  load while opening the design. Hierarchical design partitions are marked\n  with the HD.PARTITION property. See the Vivado Design Suite User Guide:\n  Hierarchical Design (UG905) for more information.\n\n  -ignore_timing - (Optional) open a netlist design without the timing\n  constraints. This can be used to quickly open a design for evaluation,\n  separate from the timing constraints.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following creates a new netlist design called Net1:\n\n    link_design -name Net1  \n    \n\n  Note: The default source set, constraint set, and part will be used in this\n  example.\n\n  The following example opens a netlist design called Net1, and specifies the\n  constraint set to be used:\n\n    link_design -name Net1 -constrset con1  \n    \n\nSee Also:\n\n   *  launch_runs\n   *  open_checkpoint\n   *  open_run\n   *  synth_design\n",
"delete_dashboard_gadgets": "delete_dashboard_gadgets\n\nDescription: \nDeletes the gadgets from project summary dashboard\n\nSyntax: \ndelete_dashboard_gadgets  [-quiet] [-verbose] <gadgets>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <gadgets>   Gadgets to delete\n\nCategories: \nProject\n\nDescription:\n\n  This command removes the gadget from the Project Summary dashboard, and\n  removes it from the project.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <gadgets> - (Required) Specifies the dashboard gadgets to delete. Gadgets\n  can be specified by name, or returned by the get_dashboard_gadgets command.\n\nExample:\n\n  The following example deletes the specified gadget:\n\n    delete_dashboard_gadget gadget_power\n\nSee Also:\n\n   *  create_dashboard_gadget\n   *  get_dashboard_gadgets\n   *  move_dashboard_gadget\n",
"fconfigure": "fconfigure(n)         Tcl Built-In Commands         fconfigure(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       fconfigure - Set and get options on a channel\n\nSYNOPSIS\n       fconfigure channelId\n       fconfigure channelId name\n       fconfigure channelId name value ?name value ...?\n_________________________________________________________________\n\nDESCRIPTION\n       The  fconfigure  command  sets  and  retrieves options for\n       channels.\n\n       ChannelId identifies the channel for which to set or query\n       an  option and must refer to an open channel such as a Tcl\n       standard channel (stdin, stdout, or  stderr),  the  return\n       value  from an invocation of open or socket, or the result\n       of a channel creation command provided by a Tcl extension.\n\n       If  no  name  or value arguments are supplied, the command\n       returns a list containing  alternating  option  names  and\n       values  for the channel.  If name is supplied but no value\n       then the command returns the current value  of  the  given\n       option.   If  one or more pairs of name and value are sup-\n       plied, the command sets each of the named options  to  the\n       corresponding  value;  in this case the return value is an\n       empty string.\n\n       The options described below are supported  for  all  chan-\n       nels.  In addition, each channel type may add options that\n       only it supports. See the manual  entry  for  the  command\n       that  creates  each  type of channels for the options that\n       that specific type of channel supports. For  example,  see\n       the manual entry for the socket command for its additional\n       options.\n\n       -blocking boolean\n              The -blocking option determines whether I/O  opera-\n              tions on the channel can cause the process to block\n              indefinitely.  The value of the option  must  be  a\n              proper  boolean  value.   Channels  are normally in\n              blocking mode;  if a channel is  placed  into  non-\n              blocking  mode  it will affect the operation of the\n              gets, read, puts,  flush,  and  close  commands  by\n              allowing  them  to  operate asynchronously; see the\n              documentation for those commands for details.   For\n              nonblocking mode to work correctly, the application\n              must be using the Tcl event loop (e.g.  by  calling\n              Tcl_DoOneEvent or invoking the vwait command).\n\n       -buffering newValue\n              If newValue is full then the I/O system will buffer\n              output until its internal buffer is full  or  until\n              the  flush command is invoked. If newValue is line,\n              then the I/O system will automatically flush output\n              for  the  channel  whenever  a newline character is\n              output. If newValue is none, the  I/O  system  will\n              flush  automatically  after every output operation.\n              The default is for -buffering to  be  set  to  full\n              except  for  channels that connect to terminal-like\n              devices; for these channels the initial setting  is\n              line.  Additionally, stdin and stdout are initially\n              set to line, and stderr is set to none.\n\n       -buffersize newSize\n              Newvalue must be an integer; its value is  used  to\n              set  the  size  of  buffers, in bytes, subsequently\n              allocated for this channel to store input  or  out-\n              put.  Newvalue must be between ten and one million,\n              allowing buffers of ten to  one  million  bytes  in\n              size.\n\n       -encoding name\n              This  option is used to specify the encoding of the\n              channel, so that the data can be converted  to  and\n              from  Unicode  for  use  in  Tcl.  For instance, in\n              order for Tcl to read characters  from  a  Japanese\n              file  in  shiftjis and properly process and display\n              the  contents,  the  encoding  would  be   set   to\n              shiftjis.   Thereafter, when reading from the chan-\n              nel, the bytes in the Japanese file would  be  con-\n              verted  to  Unicode  as  they are read.  Writing is\n              also supported - as Tcl strings are written to  the\n              channel they will automatically be converted to the\n              specified encoding on output.\n\n              If a file contains pure binary data (for  instance,\n              a  JPEG image), the encoding for the channel should\n              be configured to be binary.  Tcl will  then  assign\n              no  interpretation to the data in the file and sim-\n              ply read or write raw bytes.  The Tcl  binary  com-\n              mand  can  be used to manipulate this byte-oriented\n              data.  It is usually better to set the -translation\n              option  to  binary when you want to transfer binary\n              data, as this turns off the other automatic  inter-\n              pretations of the bytes in the stream as well.\n\n              The  default  encoding for newly opened channels is\n              the  same  platform-  and  locale-dependent  system\n              encoding  used  for  interfacing with the operating\n              system, as returned by encoding system.\n\n       -eofchar char\n\n       -eofchar {inChar outChar}\n              This option supports DOS file systems that use Con-\n              trol-z (\\x1a) as an end of file marker.  If char is\n              not an empty string, then  this  character  signals\n              end-of-file  when  it  is encountered during input.\n              For output, the  end-of-file  character  is  output\n              when  the  channel is closed.  If char is the empty\n              string, then there is no special end of file  char-\n              acter  marker.  For read-write channels, a two-ele-\n              ment list specifies the  end  of  file  marker  for\n              input  and output, respectively.  As a convenience,\n              when setting the end-of-file character for a  read-\n              write  channel  you can specify a single value that\n              will apply  to  both  reading  and  writing.   When\n              querying  the end-of-file character of a read-write\n              channel,  a  two-element  list   will   always   be\n              returned.   The  default  value for -eofchar is the\n              empty string in all cases except  for  files  under\n              Windows.   In  that  case the -eofchar is Control-z\n              (\\x1a) for reading and the empty string  for  writ-\n              ing.   The  acceptable range for -eofchar values is\n              \\x01 - \\x7f; attempting to set -eofchar to a  value\n              outside of this range will generate an error.\n\n       -translation mode\n\n       -translation {inMode outMode}\n              In  Tcl  scripts the end of a line is always repre-\n              sented using a single newline character (\\n).  How-\n              ever, in actual files and devices the end of a line\n              may be represented differently on  different  plat-\n              forms,  or  even  for different devices on the same\n              platform.  For example,  under  UNIX  newlines  are\n              used  in  files,  whereas  carriage-return-linefeed\n              sequences are normally used in network connections.\n              On  input  (i.e.,  with  gets and read) the Tcl I/O\n              system automatically translates the  external  end-\n              of-line  representation  into  newline  characters.\n              Upon output  (i.e.,  with  puts),  the  I/O  system\n              translates  newlines  to  the  external end-of-line\n              representation.   The  default  translation   mode,\n              auto,  handles  all the common cases automatically,\n              but the -translation option provides explicit  con-\n              trol over the end of line translations.\n\n              The  value associated with -translation is a single\n              item for read-only and  write-only  channels.   The\n              value  is  a  two-element list for read-write chan-\n              nels; the read translation mode is the  first  ele-\n              ment of the list, and the write translation mode is\n              the second element.  As a convenience, when setting\n              the  translation  mode for a read-write channel you\n              can specify a single value that will apply to  both\n              reading and writing.  When querying the translation\n              mode of a read-write channel,  a  two-element  list\n              will  always be returned.  The following values are\n              currently supported:\n\n              auto   As the input translation mode,  auto  treats\n                     any  of  newline (lf), carriage return (cr),\n                     or carriage return  followed  by  a  newline\n                     (crlf)  as  the  end of line representation.\n                     The end  of  line  representation  can  even\n                     change  from line-to-line, and all cases are\n                     translated to  a  newline.   As  the  output\n                     translation  mode,  auto  chooses a platform\n                     specific representation; for sockets on  all\n                     platforms  Tcl  chooses  crlf,  for all Unix\n                     flavors, it chooses lf, and for the  various\n                     flavors  of  Windows  it  chooses crlf.  The\n                     default setting for -translation is auto for\n                     both input and output.\n\n              binary No  end-of-line  translations are performed.\n                     This is nearly identical to lf mode,  except\n                     that  in  addition binary mode also sets the\n                     end-of-file character to  the  empty  string\n                     (which disables it) and sets the encoding to\n                     binary (which disables encoding  filtering).\n                     See  the description of -eofchar and -encod-\n                     ing for more information.\n\n                     Internally, i.e. when it comes to the actual\n                     behaviour  of  the  translator this value is\n                     identical to lf and is therefore reported as\n                     such  when  queried. Even if binary was used\n                     to set the translation.\n\n              cr     The end of a line in the underlying file  or\n                     device  is  represented by a single carriage\n                     return character.  As the input  translation\n                     mode,  cr  mode converts carriage returns to\n                     newline characters.  As the output  transla-\n                     tion  mode, cr mode translates newline char-\n                     acters to carriage returns.\n\n              crlf   The end of a line in the underlying file  or\n                     device  is  represented by a carriage return\n                     character followed by a linefeed  character.\n                     As  the  input  translation  mode, crlf mode\n                     converts carriage-return-linefeed  sequences\n                     to newline characters.  As the output trans-\n                     lation mode, crlf  mode  translates  newline\n                     characters    to    carriage-return-linefeed\n                     sequences.  This mode is typically  used  on\n                     Windows  platforms  and  for network connec-\n                     tions.\n\n              lf     The end of a line in the underlying file  or\n                     device  is  represented  by a single newline\n                     (linefeed)  character.   In  this  mode   no\n                     translations  occur  during  either input or\n                     output.  This mode is typically used on UNIX\n                     platforms.\n\n\nSTANDARD CHANNELS\n       The  Tcl standard channels (stdin, stdout, and stderr) can\n       be configured through this command like every other  chan-\n       nel opened by the Tcl library. Beyond the standard options\n       described above they will also support any special  option\n       according  to  their current type.  If, for example, a Tcl\n       application is started by the inet super-server common  on\n       Unix  system its Tcl standard channels will be sockets and\n       thus support the socket options.\n\nEXAMPLES\n       Instruct Tcl to always send output to stdout  immediately,\n       whether or not it is to a terminal:\n              fconfigure stdout -buffering none\n\n       Open a socket and read lines from it without ever blocking\n       the processing of other events:\n              set s [socket some.where.com 12345]\n              fconfigure $s -blocking 0\n              fileevent $s readable 'readMe $s'\n              proc readMe chan {\n                 if {[gets $chan line] < 0} {\n                    if {[eof $chan]} {\n                       close $chan\n                       return\n                    }\n                    # Could not read a complete line this time; Tcl's\n                    # internal buffering will hold the partial line for us\n                    # until some more data is available over the socket.\n                 } else {\n                    puts stdout $line\n                 }\n              }\n\n       Read a PPM-format image from a file:\n              # Open the file and put it into Unix ASCII mode\n              set f [open teapot.ppm]\n              fconfigure $f -encoding ascii -translation lf\n\n              # Get the header\n              if {[gets $f] ne 'P6'} {\n                 error 'not a raw-bits PPM'\n              }\n\n              # Read lines until we have got non-comment lines\n              # that supply us with three decimal values.\n              set words {}\n              while {[llength $words] < 3} {\n                 gets $f line\n                 if {[string match '#*' $line]} continue\n                 lappend words {*}[join [scan $line %d%d%d]]\n              }\n\n              # Those words supply the size of the image and its\n              # overall depth per channel. Assign to variables.\n              lassign $words xSize ySize depth\n\n              # Now switch to binary mode to pull in the data,\n              # one byte per channel (red,green,blue) per pixel.\n              fconfigure $f -translation binary\n              set numDataBytes [expr {3 * $xSize * $ySize}]\n              set data [read $f $numDataBytes]\n\n              close $f\n\n\nSEE ALSO\n       close(n), flush(n), gets(n),  open(n),  puts(n),  read(n),\n       socket(n), Tcl_StandardChannels(3)\n\n\nKEYWORDS\n       blocking,  buffering, carriage return, end of line, flush-\n       ing, linemode, newline,  nonblocking,  platform,  transla-\n       tion, encoding, filter, byte array, binary\n\n\n\nTcl                            8.3                  fconfigure(n)\n",
"add_drc_checks": "add_drc_checks\n\nDescription: \nAdd DRC rule check objects to a rule deck\n\nSyntax: \nadd_drc_checks  [-of_objects <args>] [-regexp] [-nocase] [-filter <arg>]\n                -ruledeck <arg> [-quiet] [-verbose] [<patterns>]\n\nReturns: \ndrc_check\n\nUsage: \n  Name           Description\n  --------------------------\n  [-of_objects]  Get 'rule_check' objects of these types: 'drc_ruledeck'.\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  -ruledeck      DRC rule deck to modify\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match the 'rule_check' objects against patterns.\n                 Default: *\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Add design rule checks to the specified drc_ruledeck object.\n\n  A rule deck is a collection of design rule checks grouped for convenience,\n  to be run with the report_drc command at different stages of the Xilinx\n  design flow, such as during I/O planning or placement. The tool comes with\n  a set of factory defined rule decks, but you can also create new\n  user-defined rule decks with the create_drc_ruledeck command.\n\n  Use the get_drc_ruledecks command to return a list of the currently defined\n  rule decks available for use in the report_drc command.\n\n  You can add standard factory defined rule checks to the rule deck, or add\n  user-defined rule checks that were created using the create_drc_check\n  command. Use the get_drc_checks command to get a list of checks that can be\n  added to a rule deck.\n\n  Checks can also be removed from a rule deck using the remove_drc_checks\n  command.\n\n  Note: To temporarily disable a specific DRC rule, use the set_property\n  command to set the IS_ENABLED property for the rule to false. This will\n  disable the rule from being run in report_drc, without having to remove the\n  rule from the rule deck. Use reset_drc_check to restore the rule to its\n  default setting.\n\n  This command returns the list of design rule checks that were added to the\n  rule deck.\n\nArguments:\n\n  -of_objects <arg> - (Optional) Add the rule checks of the specified\n  drc_ruledeck object to the specified rule deck. This has the effect of\n  copying the rules from one rule deck into another.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  the search pattern, based on specified property values. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -ruledeck <arg> - (Required) The name of the rule deck to add the specified\n  design rule checks to.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Add the design rule checks that match the specified\n  patterns to the rule deck. The default pattern is the wildcard `*` which\n  adds all rule checks to the specified rule deck. More than one pattern can\n  be specified to find multiple rule checks based on different search\n  criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example adds the rule checks matching the specified search\n  pattern to the project_rules rule deck:\n\n    add_drc_checks -ruledeck project_rules {*DCI* *BUF*} \n    \n\n  The following example creates a new rule deck called placer+, copies all of\n  the rule checks from the placer_checks rule deck into the placer+ rule\n  deck, then adds some additional checks:\n\n    \n    create_drc_ruledeck placer+  \n    add_drc_checks -of_objects [get_drc_ruledecks placer_checks] \\  \n       -ruledeck placer+  \n    add_drc_checks -ruledeck placer+ *IO* \n    \n\n  The following example adds only the rule checks with a severity of Warning\n  to the rule deck:\n\n    add_drc_checks -filter {SEVERITY == Warning} -ruledeck warn_only \n    \n\nSee Also:\n\n   *  create_drc_check\n   *  create_drc_ruledeck\n   *  get_drc_checks\n   *  get_drc_ruledecks\n   *  list_property\n   *  remove_drc_checks\n   *  report_drc\n   *  report_property\n   *  reset_drc_check\n   *  set_property\n",
"open_dsa": "",
"delete_rpm": "delete_rpm\n\nDescription: \nDelete an RPM\n\nSyntax: \ndelete_rpm  [-quiet] [-verbose] <rpm>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <rpm>       RPM to delete\n\nCategories: \nFloorplan\n\nDescription:\n\n  Deletes the specified Relationally Placed Macro (RPM) from the design.\n\n  An RPM is a list of logic elements (FFS, LUT, CY4, RAM, etc.) collected\n  into a set (U_SET, H_SET, and HU_SET). The placement of each element within\n  the set, relative to other elements of the set, is controlled by Relative\n  Location Constraints (RLOCs). Logic elements with RLOC constraints and\n  common set names are associated in an RPM. Refer to the Constraints Guide\n  (UG625) for more information on defining these constraints.\n\n  Only user-defined RPMs can be deleted from the design. RPMs defined by the\n  hierarchy or defined in the netlist cannot be deleted by this command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <rpm> - (Required) The RPM to be deleted.\n\nExamples:\n\n  The following example deletes the specified RPM (cs_ila_0/U0) from the\n  design:\n\n    delete_rpm cs_ila_0/U0 \n    \n",
"set_system_jitter": "set_system_jitter\n\nDescription: \nSet system jitter\n\nSyntax: \nset_system_jitter  [-quiet] [-verbose] <system_jitter>\n\nReturns: \nsystem_jitter\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <system_jitter>  System jitter: Value >= 0\n\nCategories: \nXDC\n\nDescription:\n\n  Sets the system jitter specified in nanoseconds (ns) for all clocks in the\n  design, including primary and generated clocks. System jitter is used to\n  account for excessive noise that affects all the clocks within the FPGA,\n  like power supply noise and board noise. The default system jitter is\n  technology-dependent and is predefined for each Xilinx FPGA family based on\n  device characterization with several power supplies under all supported\n  operating conditions.\n\n  System Jitter is a component of the Total System Jitter (Tsj) used in the\n  calculation of clock uncertainty for a path. It is due to the maximum noise\n  (in time) that can be seen on the Vccint rail due to simultaneous switching\n  of internal nodes, cross talk and other phenomenon that can impact timing\n  on any path in the design.\n\n  Note: The jitter calculated by Xilinx takes into consideration the\n  uncertainty introduced by the clocking resources, the input jitter and the\n  system jitter. Using the set_system_jitter command overrides the default\n  system jitter value calculated by Xilinx, and is not recommended.\n\n  The System Jitter and the Input Jitter are random jitters which typically\n  follow a Gaussian distribution and are added in a quadratic manner to\n  represent the worst case combination. When the Input Jitter is null, the\n  Total System Jitter (Tsj) for an internal register-to-register path has the\n  following equation:\n\n   *  Tsj = sqrt(SourceClockSystemJitter^2 + DestinationClockSystemJitter^2)\n\n  For example, when using the default value for system jitter of 50ps:\n\n   *  Tsj = sqrt(0.050^2 + 0.050^2) = 0.071ns = 71ps\n\n  The set_system_jitter command applies to all the clocks in the design. Use\n  the set_input_jitter command to specify additional jitter for a specific\n  primary clock.\n\n  Note: SYSTEM_JITTER is reported as a property of clocks, although it\n  applies to all clocks in the design. INPUT_JITTER is also a property of\n  primary clocks. These properties can be returned by the get_property or\n  report_property commands.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <system_jitter> - (Required) Specifies the system jitter specified in\n  nanoseconds (ns) to be applied system-wide. The jitter specified by the\n  set_system_jitter command overwrites the default value.\n\nExamples:\n\n  This example defines the primary clock, sysClk, and specifies a system wide\n  jitter of 0.1 ns:\n\n    create_clock -period 10 -name sysClk [get_ports sysClk]  \n    set_system_jitter 0.1 \n    \n\n  The following example defines a primary clock, sysClk, and a generated\n  clock, sysClkDiv2, that is a divide by two version of the primary clock. A\n  system jitter of 0.2 ns is specified that applies to all the clocks in the\n  design. An additional input jitter of 0.09 ns is specified on only the\n  primary clock:\n\n    create_clock -period 10 -name sysClk [get_ports sysClk]  \n    create_generated_clock  -name sysClkDiv2 -source [get_ports sysClk] \\  \n       -divide_by 2 [get_pins clkgen/sysClkDiv/Q]  \n    set_system_jitter 0.2  \n    set_input_jitter sysClk 0.09 \n    \n\n  The follow example defines two primary clocks, sysClk and procClk. A system\n  jitter of 0.2 ns is defined for all the clocks in the system. An additional\n  input jitter of 0.05 ns is specified for the clock procClk:\n\n    create_clock -period 10 -name sysClk [get_ports sysClk]  \n    create_clock -period 25 -name procClk [get_ports procClk]  \n    set_system_jitter 0.2  \n    set_input_jitter procClk 0.05 \n    \n\nSee Also:\n\n   *  report_timing\n   *  set_clock_uncertainty\n   *  set_input_delay\n   *  set_input_jitter\n",
"help": "help\n\nDescription: \nDisplay help for one or more topics\n\nSyntax: \nhelp  [-category <arg>] [-args] [-syntax] [-long] [-prop <arg>] [-class <arg>]\n      [-message <arg>] [-quiet] [-verbose] [<pattern_or_object>]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-category]            Search for topics in the specified category\n  [-args]                Display arguments description\n  [-syntax]              Display syntax description\n  [-long]                Display long help description\n  [-prop]                Display property help for matching property names\n                         Default: *\n  [-class]               Display object type help\n  [-message]             Display information about the message with the given \n                         message. Every message delivered by the tool has a \n                         unique global message ID that consists of an \n                         application sub-system code and a message identifier. \n                         Example: -message {Common 17-8}.\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n  [<pattern_or_object>]  Display help for topics that match the specified \n                         pattern\n                         Default: *\n\nCategories: \nProject\n\nDescription:\n\n  Returns a long description of the specified Tcl command; or a list of\n  available Xilinx Tcl command categories; or a list of commands matching a\n  specific pattern.\n\n  The default help command without any arguments returns a list of Tcl\n  command categories that can be further explored. Command categories are\n  groups of commands performing a specific function, like File I/O commands\n  for instance.\n\n  Available options for the help command can return just the command syntax\n  for a quick reminder of how the command should be structured; the command\n  syntax and a brief description of each argument; or the long form of the\n  command with more detailed descriptions and examples of the command.\n\n  To limit the memory usage of the Vivado Design Suite, some features of the\n  tool are only loaded into memory when that feature set is used. To access\n  the complete list of Tcl commands and help text associated with a given\n  feature, you must load the feature into memory using the load_features\n  command.\n\n  The help command can also return any available information related to\n  various properties assignable to design objects. Use the -prop and -class\n  options to return help information for properties.\n\n  This command returns the specified help text, or an error.\n\nArguments:\n\n  -category <arg> - (Optional) Get a list of the commands grouped under the\n  specified command category.\n\n  -args - (Optional) Get abbreviated help text for the specified command. The\n  default is to return the extended help for the specified command. Use this\n  argument to keep it brief.\n\n  -syntax - (Optional) Returns only the syntax line for the command as a\n  quick reminder of the proper form for using the command.\n\n  -long - (Optional) Returns the extended help description for the command,\n  including the syntax, a brief description of the arguments, and a more\n  detailed description of the command with examples. This is the default\n  setting for the help command.\n\n  -prop <arg> - (Optional) Return the specified property of an object class,\n  or the properties assigned to a specific object in the current design.\n\n  Note: This option requires the use of -class, or the specification of a\n  single design object.\n\n  -class <arg> - (Optional) Return information related to the specified class\n  of objects.\n\n  -message <arg> - (Optional) Return information related to the specified\n  message. Messages are specified in the form of a unique global message ID,\n  that consists of an application sub-system code and a message identifier:\n  'Common 17-24', or {Common 17-24}. Refer to the set_msg_config command for\n  more information.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pattern_or_object> - (Optional) Returns information related to the\n  specified command, or a list of commands that match the specified pattern.\n\n  Note: A Vivado first class object, like a cell or site, must be specified\n  when used with -class and -prop to return information about properties.\n\nExamples:\n\n  The following example returns a list of Xilinx Tcl command categories:\n\n    help \n    \n\n  This example loads the simulator feature of the Vivado Design Suite, and\n  then returns a list of Tcl commands in the simulation and waveform\n  categories:\n\n    load_features simulator  \n    help -category simulation  \n    help -category waveform \n    \n\n  Returns a list of all commands matching the specified search pattern:\n\n    help *file* \n    \n\n  This list can be used to quickly locate a command for a specific purpose,\n  such as remove_files or delete_files.\n\n  The following help command returns a long description of the remove_files\n  command and its arguments:\n\n    help remove_files \n    \n\n  Note: You can also use the -args option to get a brief description of the\n  command.\n\n  This example defines a procedure called short, and returns the -args form\n  of help for the specified command:\n\n    proc short cmdName {help -args $cmdName} \n    \n\n  Note: You can add this procedure to your init.tcl file to load this command\n  every time the tool is launched. Refer to Chapter 1, Introduction of the\n  Vivado Design Suite Tcl Command Reference (UG835) for more information on\n  the init.tcl file.\n\n  The following examples show how to obtain help for properties of design\n  objects, or a class of design objects:\n\n    help -class cell -prop NAME   \n    help -prop NAME [get_cells cpuEngine] \n    \n\n  Note: In the preceding example, the first command returns general\n  information related to the NAME property, while the second command also\n  returns the value of the NAME property on the specified design object.\n\nSee Also:\n\n   *  get_cells\n\n   *  list_features\n\n   *  list_property\n\n   *  load_features\n\n   *  report_property\n\n   *  set_msg_config\n",
"switch": "switch(n)             Tcl Built-In Commands             switch(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       switch  -  Evaluate one of several scripts, depending on a\n       given value\n\nSYNOPSIS\n       switch ?options? string pattern body ?pattern body ...?\n\n       switch ?options? string {pattern body ?pattern body ...?}\n_________________________________________________________________\n\nDESCRIPTION\n       The switch command matches  its  string  argument  against\n       each  of  the  pattern  arguments in order.  As soon as it\n       finds a pattern that matches string it evaluates the  fol-\n       lowing  body argument by passing it recursively to the Tcl\n       interpreter and returns the result of that evaluation.  If\n       the  last pattern argument is default then it matches any-\n       thing.  If no  pattern  argument  matches  string  and  no\n       default is given, then the switch command returns an empty\n       string.\n\n       If the initial arguments to switch start with - then  they\n       are  treated as options unless there are exactly two argu- |\n       ments to switch (in which case the first must  the  string |\n       and  the  second must be the pattern/body list).  The fol-\n       lowing options are currently supported:\n\n       -exact    Use exact matching when comparing  string  to  a\n                 pattern.  This is the default.\n\n       -glob     When  matching string to the patterns, use glob-\n                 style matching (i.e. the same as implemented  by\n                 the string match command).\n\n       -regexp   When  matching string to the patterns, use regu-\n                 lar expression matching  (as  described  in  the\n                 re_syntax reference page).                       |\n\n       -nocase                                                    ||\n                 Causes comparisons to  be  handled  in  a  case- |\n                 insensitive manner.                              |\n\n       -matchvar var-                                             |\n       Name                                          |            |\n                 This option (only legal  when  -regexp  is  also |\n                 specified) specifies the name of a variable into |\n                 which the list of matches found by  the  regular |\n                 expression  engine  will  be written.  The first |\n                 element of the list written will be the  overall |\n                 substring  of  the input string (i.e. the string |\n                 argument to switch) matched, the second  element |\n                 of the list will be the substring matched by the |\n                 first  capturing  parenthesis  in  the   regular |\n                 expression  that  matched,  and  so  on.  When a |\n                 default branch is taken, the variable will  have |\n                 the  empty  list written to it.  This option may |\n                 be specified at the same time as  the  -indexvar |\n                 option.                                          |\n\n       -indexvar var-                                             |\n       Name                                          |            |\n                 This option (only legal  when  -regexp  is  also |\n                 specified) specifies the name of a variable into |\n                 which the list of indices referring to  matching |\n                 substrings   found  by  the  regular  expression |\n                 engine will be written.  The  first  element  of |\n                 the  list  written  will  be  a two-element list |\n                 specifying the index of the start and  index  of |\n                 the first character after the end of the overall |\n                 substring of the input string (i.e.  the  string |\n                 argument to switch) matched, in a similar way to |\n                 the -indices option to the  regexp  can  obtain. |\n                 Similarly, the second element of the list refers |\n                 to the first capturing parenthesis in the  regu- |\n                 lar  expression that matched, and so on.  When a |\n                 default branch is taken, the variable will  have |\n                 the  empty  list written to it.  This option may |\n                 be specified at the same time as  the  -matchvar |\n                 option.\n\n       --        Marks  the end of options.  The argument follow-\n                 ing this one will be treated as string  even  if\n                 it  starts  with a -.  This is not required when |\n                 the matching patterns  and  bodies  are  grouped |\n                 together in a single argument.\n\n       Two  syntaxes  are provided for the pattern and body argu-\n       ments.  The first uses a separate argument for each of the\n       patterns  and commands; this form is convenient if substi-\n       tutions are desired on some of the patterns  or  commands.\n       The  second  form  places all of the patterns and commands\n       together into a single argument; the  argument  must  have\n       proper list structure, with the elements of the list being\n       the patterns and commands.  The second form makes it  easy\n       to  construct multi-line switch commands, since the braces\n       around the whole list make it  unnecessary  to  include  a\n       backslash  at  the  end  of  each line.  Since the pattern\n       arguments are in braces in the second form, no command  or\n       variable  substitutions are performed on them;  this makes\n       the behavior of the second form different than  the  first\n       form in some cases.\n\n       If  a  body is specified as '-' it means that the body for\n       the next pattern should also be used as the body for  this\n       pattern  (if  the next pattern also has a body of '-' then\n       the body after that is used, and  so  on).   This  feature\n       makes  it  possible  to  share a single body among several\n       patterns.\n\n       Beware of how you place comments in switch commands.  Com-\n       ments  should  only be placed inside the execution body of\n       one of the patterns, and not intermingled  with  the  pat-\n       terns.\n\nEXAMPLES\n       The  switch  command  can  match against variables and not\n       just literals, as shown here (the result is 2):\n              set foo 'abc'\n              switch abc a - b {expr {1}} $foo {expr {2}} default {expr {3}}\n\n       Using glob matching and the fall-through body is an alter-\n       native  to  writing regular expressions with alternations,\n       as can be seen here (this returns 1):\n              switch -glob aaab {\n                 a*b     -\n                 b       {expr {1}}\n                 a*      {expr {2}}\n                 default {expr {3}}\n              }\n\n       Whenever nothing matches, the default clause  (which  must\n       be last) is taken.  This example has a result of 3:\n              switch xyz {\n                 a -\n                 b {\n                    # Correct Comment Placement\n                    expr {1}\n                 }\n                 c {\n                    expr {2}\n                 }\n                 default {\n                    expr {3}\n                 }\n              }\n\n       When  matching  against  regular  expressions, information |\n       about what exactly matched is easily  obtained  using  the |\n       -matchvar option:                                          |\n              switch -regexp -matchvar foo -- $bar {              |\n                 a(b*)c {                                         |\n                    puts 'Found [string length [lindex $foo 1]] 'b's'|\n                 }                                                |\n                 d(e*)f(g*)h {                                    |\n                    puts 'Found [string length [lindex $foo 1]] 'e's and\\|\n                          [string length [lindex $foo 2]] 'g's'   |\n                 }                                                |\n              }                                                   |\n\nSEE ALSO\n       for(n), if(n), regexp(n)\n\nKEYWORDS\n       switch, match, regular expression\n\n\n\nTcl                            8.5                      switch(n)\n",
"write_waivers": "write_waivers\n\nDescription: \nWrite out one or more DRC/METHODOLOGY/CDC message waivers in command form\n\nSyntax: \nwrite_waivers  [-type <arg>] [-objects <args>] [-return_string] [-force]\n               [-quiet] [-verbose] [<file>]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-type]           Type of waiver(s) - ALL, DRC, METHODOLOGY, CDC, LINT to \n                    write\n  [-objects]        List of DRC/METHODOLOGY/CDC waiver objects to be written\n  [-return_string]  Return report results as a string object\n  [-force]          Overwrite existing file\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  [<file>]          Name of file to write waivers\n\nCategories: \nWaiver, Object\n\nDescription:\n\n  To save waivers from one design session to the next, you must use\n  write_waivers to create an XDC file of the waiver commands, and read_xdc to\n  read those waivers back into the design when it is reopened.\n\nArguments:\n\n  -type <arg> - (Optional) Specifies the type of waivers to write to the\n  file. Currently supports DRC, METHODOLOGY, and CDC.\n\n  -objects <args> - (Optional) Specifies a list of waiver objects to write.\n  Waiver objects can be specified by the get_waivers command.\n\n  -return_string - (Optional) Directs the output to a Tcl string. The Tcl\n  string can be captured by a variable definition and parsed or otherwise\n  processed.\n\n  -force - (Optional) This argument forces writing of waivers to the file. If\n  you receive a message that the waivers will not be written because the\n  counts will be invalid, you can use this option to write the file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Specifies the file name to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  This example writes all waivers in the current design:\n\n    write_waivers C:/Data/design_waivers.xdc \n    \n\n  The following example writes only DRC type waivers:\n\n    write_waivers -type DRC C:/Data/drc_waivers.xdc \n    \n\nSee Also:\n\n   *  create_waiver\n   *  delete_waivers\n   *  get_cdc_violations\n   *  get_drc_violations\n   *  get_methodology_violations\n   *  get_waivers\n   *  report_cdc\n   *  report_drc\n   *  report_methodology\n   *  report_waivers\n",
"auto_qualify": "",
"report_drc": "report_drc\n\nDescription: \nRun DRC\n\nSyntax: \nreport_drc  [-name <arg>] [-upgrade_cw] [-checks <args>] [-ruledecks <args>]\n            [-file <arg>] [-rpx <arg>] [-append] [-waived] [-no_waivers]\n            [-return_string] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-name]           Output the results to GUI panel with this name\n  [-upgrade_cw]     Specifies if report_drc should upgrade all \n                    CRITICAL_WARNING violations to ERROR.\n  [-checks]         DRC checks (see get_drc_checks for available checks)\n  [-ruledecks]      Containers of DRC rule checks\n                    Default: default\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-rpx]            Report filename for persisted results.\n  [-append]         Append the results to file, do not overwrite the results \n                    file\n  [-waived]         Output result is Waived checks\n  [-no_waivers]     Disable waivers for checks\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nDRC, Report, Timing\n\nDescription:\n\n  Check the current design against a specified set of design rule checks, or\n  rule decks, and report any errors or violations that are found.\n\n  The report_drc command requires an open design to check the design rules\n  against. The command returns a report with the results of violations found\n  by the design rule checks. Violations are returned as Vivado objects that\n  can be listed with the get_drc_violations command, and are associated with\n  cells, pins, ports, nets, and sites in the current design. You can get the\n  cells, nets, and other design objects that are associated with DRC\n  violation objects, using the -of_objects option of the get_cells command\n  for instance.\n\n  Note: The report_drc can be multi-threaded to speed the process. Refer to\n  the set_param command for more information on setting the\n  general.maxThreads parameter.\n\n  The Vivado tools include a large number of predefined design rule checks to\n  be used by the report_drc command. Use the get_drc_checks command to list\n  the currently defined design rule checks. You can also create new custom\n  design rule checks using the create_drc_check command.\n\n  A rule deck is a collection of design rule checks grouped for convenience,\n  to be run at different stages of the FPGA design flow, such as during I/O\n  planning or placement. The tool comes with a set of factory defined rule\n  decks, but you can also create new user-defined rule decks with the\n  create_drc_ruledeck command. Use the get_drc_ruledecks command to return a\n  list of the currently defined rule decks available for use in the\n  report_drc command.\n\n  The report_drc command runs a default rule deck when the -checks or\n  -ruledeck options are not specified. Creating a user-defined DRC\n  automatically adds the new design rule check to the default rule deck.\n\n  DRC rules can be enabled or disabled using the IS_ENABLED property on the\n  rule check object. If a rule IS_ENABLED false, the rule will not be run by\n  the report_drc command, whether it is specified directly using -checks, or\n  indirectly with -ruledeck.\n\n  Note: You can reset the properties of a DRC rule to the factory default\n  settings using the reset_drc_check command.\n\n  You can reset the current results of the report_drc command, clearing any\n  found violations, using the reset_drc command.\n\nArguments:\n\n  -name <arg> - (Optional) The name to assign to the results when run in GUI\n  mode.\n\n  -upgrade_cw <arg> - (Optional) Report all found Critical Warnings as Errors\n  for this report.\n\n  -checks <args> - (Optional) A list of rule checks to run the DRC report\n  against. All specified rules will be checked against the current design.\n  Rules are listed by their group name or full key. Using the -checks option\n  creates a temporary user-defined rule deck, with the specified design rule\n  checks, and uses the temporary rule deck for the run.\n\n  Note: -ruledeck and -checks cannot be used together.\n\n  -ruledecks <arg> - (Optional) The name of one or more DRC rule decks. A\n  rule deck is a list of DRC rule check names. You can provide the name of a\n  factory DRC rule deck or a user-defined rule deck. The report_drc command\n  checks the design against the rules that are added to the given rule deck.\n  Custom rule decks can be defined using the create_drc_ruledeck command. Use\n  the get_drc_ruledecks command to list the currently defined rule decks.\n\n  -file <arg> - (Optional) Write the DRC report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -waived - (Optional) Causes only the DRC checks waived by the create_waiver\n  command to be run and reported. This returns the actual violation rather\n  than the definition of the waiver, which can be reported by the\n  report_waivers command.\n\n  -no_waivers - (Optional) Ignore the waivers defined by the create_waivers\n  command and report all DRC violations.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example lists the available rule decks. The results include\n  all factory rule decks and all user-defined rule decks.\n\n    get_drc_ruledecks \n    \n\n  The following example returns the list of DRC rules defined in the\n  specified rule deck:\n\n    get_drc_checks -of_objects [get_drc_ruledecks placer_checks] \n    \n\n  The following examples run the specified DRC rule deck and rules against\n  the current design, and writes the results to the specified file:\n\n    report_drc -ruledecks placer_checks -file C:/Data/DRC_Rpt1.txt  \n    report_drc -checks {IOCNT-1 IOPCPR-1 IOPCMGT-1 IOCTMGT-1 IODIR-1}  \\  \n       -file C:/Data/DRC_Rpt1.txt -append  \n    \n\n  Note: The -append option adds the result of the second report_drc command\n  to the specified file.\n\nSee Also:\n\n   *  create_drc_check\n   *  create_drc_ruledeck\n   *  create_drc_violation\n   *  create_waiver\n   *  get_cells\n   *  get_drc_checks\n   *  get_drc_ruledecks\n   *  get_drc_violations\n   *  get_nets\n   *  get_pins\n   *  get_ports\n   *  get_sites\n   *  open_report\n   *  reset_drc\n   *  reset_drc_check\n   *  set_param\n",
"current_vivado_preferences": "current_vivado_preferences\n\nDescription: \nReturns the vivado prefernces object.\n\nSyntax: \ncurrent_vivado_preferences  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nvivado_preferences\n",
"all_fanin": "all_fanin\n\nDescription: \nGet a list of pins or cells in fanin of specified sinks\n\nSyntax: \nall_fanin  [-startpoints_only] [-flat] [-only_cells] [-levels <arg>]\n           [-pin_levels <arg>] [-trace_arcs <arg>] [-quiet] [-verbose] <to>\n\nReturns: \nlist of cell or pin objects\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-startpoints_only]  Find only the timing startpoints\n  [-flat]              Hierarchy is ignored\n  [-only_cells]        Only cells\n  [-levels]            Maximum number of cell levels to traverse:Value >= 0\n                       Default: 0\n  [-pin_levels]        Maximum number of pin levels to traverse:Value >= 0\n                       Default: 0\n  [-trace_arcs]        Type of network arcs to trace: Values: timing, \n                       enabled, all\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <to>                 List of sink pins, ports, or nets\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of port, pin or cell objects in the fan-in of the specified\n  sinks.\n\n  The all_fanin command is scoped to return objects from current level of the\n  hierarchy of the design, either from the top-level or from the level of the\n  current instance. By default the current instance is defined as the top\n  level of the design, but can be changed by using the current_instance\n  command. To return the fan-in across all levels of the hierarchy, use the\n  -flat option.\n\nArguments:\n\n  -startpoints_only - (Optional) Find only the timing start points. When this\n  option is used, none of the intermediate points in the fan-in network are\n  returned. This option can be used to identify the primary driver(s) of the\n  sinks.\n\n  -flat - (Optional) Ignore the hierarchy of the design. By default, only the\n  objects at the same level of hierarchy as the sinks are returned. When\n  using this option, all the objects in the fan-in network of the sinks are\n  considered, regardless of hierarchy.\n\n  -only_cells - (Optional) Return only the cell objects which are in the\n  fan-in path of the specified sinks. Do not return pins or ports.\n\n  -levels <value> - (Optional) Maximum number of cell levels to traverse. A\n  value of 1 means to traverse the top-level of the current instance. The\n  default value is 0 and indicates that the tool should traverse all levels\n  in the hierarchy.\n\n  -pin_levels <value> - (Optional) Maximum number of pin levels to traverse.\n  The default value is 0.\n\n  -trace_arcs <value> - (Optional) Type of network arcs to trace. Valid\n  values are 'timing', 'enabled', and 'all'\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <to> - (Required) The pins, ports, or nets from which you want the fan-in\n  objects reported.\n\nExamples:\n\n  The following example lists the timing fan-in of the led_pins output port:\n\n    all_fanin [get_ports led_pins[*] ] \n    \n\n  The following example traces back from the clock pin of the specified flip-\n  flop to the clock source (an MMCM output pin in this example):\n\n    all_fanin -flat -startpoints_only [get_pins cmd_parse_i0/prescale_reg[7]/C] \n    \n\n  The following examples returns the ports connected to the input pins of\n  IDELAYs, ignoring the hierarchy of the design:\n\n    all_fanin -flat -startpoints_only [get_pins IDELAY*/IDATAIN] \n    \n\nSee Also:\n\n   *  all_fanout\n   *  current_instance\n   *  get_cells\n   *  get_pins\n   *  get_ports\n",
"check_syntax": "check_syntax\n\nDescription: \nCheck HDL syntax in the supplied fileset or active fileset.\n\nSyntax: \ncheck_syntax  [-fileset <arg>] [-return_string] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-fileset]        Fileset to check for syntax\n  [-return_string]  Return the syntax check messages as a string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Parses Verilog, SystemVerilog, and VHDL source files and generates syntax\n  warnings and error messages for the design.\n\n  Note: The syntax is also checked automatically as the file is edited in the\n  Vivado text editor, or when the file is saved.\n\n  This command returns warnings or errors related to the files it examines,\n  or returns nothing if no problems are found.\n\nArguments:\n\n  -fileset <arg> - (Optional) Check the syntax of files in the specified\n  fileset.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example checks the syntax of files in the simulation fileset:\n\n    check_syntax -fileset sim_1 \n    \n\nSee Also:\n\n   *  get_fileset\n",
"tclPkgUnknown": "",
"get_bels": "get_bels\n\nDescription: \nGet a list of bels. If a design is loaded, gets the constructed site type bels.\n\nSyntax: \nget_bels  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n          [-include_routing_bels] [-include_routethru_bels] [-net_segment_only]\n          [-quiet] [-verbose] [<patterns>]\n\nReturns: \nbels\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-regexp]                  Patterns are full regular expressions\n  [-nocase]                  Perform case-insensitive matching. (valid only \n                             when -regexp specified)\n  [-filter]                  Filter list with expression\n  [-of_objects]              Get the bels of these slr, tiles, sites, cells, \n                             clock_regions, nets or pseudo pips.\n  [-include_routing_bels]    Also look for and include matching rbels.\n  [-include_routethru_bels]  Also look for and include routethru bels\n  [-net_segment_only]        Only look for the given net segment.\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n  [<patterns>]               Match bels against patterns\n                             Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Basic Elements, or BELs, are building blocks of logic, such as flip-flops,\n  LUTs, and carry logic, that make up a SLICE. This command returns a list of\n  BELs on the target part that match a specified search pattern in an open\n  design.\n\n  The default command gets a list of all BELs on the device.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_bels based on property values on the BELs. You can find the properties\n  on an object with the report_property or list_property commands. Any\n  property/value pair can be used as a filter. In the case of the BEL object,\n  'IS_OCCUPIED' and 'TYPE' are two of the properties that can be used to\n  filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the BELs associated with the specified\n  cells, nets, sites, clock_regions, or slrs.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match BELs against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all BELs on the\n  device. More than one search pattern can be specified to find BELs based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the total number of BELs on the target part:\n\n    llength [get_bels] \n    \n\n  The following example returns the BELs associated with the specified site:\n\n    get_bels -of_objects [get_sites PHASER_IN_PHY_X0Y5] \n    \n\nSee Also:\n\n   *  get_sites\n   *  list_property\n   *  report_property\n",
"extract_files": "extract_files\n\nDescription: \nExtract files from a core container to disk\n\nSyntax: \nextract_files  [-base_dir <arg>] [-force] [-no_ip_dir] [-no_paths] [-quiet]\n               [-verbose] <files>...\n\nReturns: \nlist of files that were extracted with the new paths\n\nUsage: \n  Name          Description\n  -------------------------\n  [-base_dir]   Base directory for extracted files\n                Default: ip_files\n  [-force]      Overwrite existing files\n  [-no_ip_dir]  Don't include the IP dir as part of the extract directory\n  [-no_paths]   Don't include directories when extracting files\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <files>       Name of the file(s) to be extracted\n\nCategories: \nIPFlow\n\nDescription:\n\n  Extract the files from an IP in core container format.\n\n  The core container format for IP is a compressed zip file that reduces the\n  file structure in the design, and increases tool performance.\n\n  This command returns a list of files extracted from the core container IP,\n  or returns an error if it fails.\n\nArguments:\n\n  -base_dir <arg> - (Optional) Specify the directory to write the extracted\n  files into. By default the extract_files command will write files into a\n  folder called ip_files inside of the current working directory.\n\n  -force - (Optional) Overwrite existing files of the same name if any exist.\n\n  -no_ip_dir - (Optional) Don`t include an IP sub-folder as part of path for\n  the the extracted files. In this case, the files will be exported to the\n  specified directory, without a sub-folder named after the core container\n  IP.\n\n  -no_paths - (Optional) Don`t include sub-folders of the core container in\n  the extracted files. This option will cause all files to be extracted to\n  the top-level ip_files folder, or the folder specified by the -base_dir\n  option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) Specify the name of the IP core container (.XCIX) file\n  to extract the files from.\n\nExamples:\n\n  The following example extracts the files from the specified core container\n  format IP to the specified base directory:\n\n    extract_files -base_dir C:/Data [get_files char_fifo.xcix] \n    \n\nSee Also:\n\n   *  convert_ips\n   *  create_ip\n   *  get_files\n   *  get_ips\n",
"list_board_parameters": "list_board_parameters\n\nDescription: \nGet the list of parameters supported by board.xml file\n\nSyntax: \nlist_board_parameters  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nObject, Board\n",
"place_design": "place_design\n\nDescription: \nAutomatically place ports and leaf-level instances\n\nSyntax: \nplace_design  [-directive <arg>] [-no_timing_driven] [-timing_summary]\n              [-unplace] [-post_place_opt] [-no_psip] [-no_bufg_opt]\n              [-ultrathreads] [-quiet] [-verbose]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-directive]         Mode of behavior (directive) for this command. Please \n                       refer to Arguments section of this help for values for\n                       this option.\n                       Default: Default\n  [-no_timing_driven]  Do not run in timing driven mode\n  [-timing_summary]    Enable accurate post-placement timing summary.\n  [-unplace]           Unplace all the instances which are not locked by \n                       Constraints.\n  [-post_place_opt]    Run only the post commit optimizer\n  [-no_psip]           Disable PSIP (Physical Synthesis In Placer) \n                       optimization during placement.\n  [-no_bufg_opt]       Disable global buffer insertion during placement\n  [-ultrathreads]      Enable ultra-threads mode to speed up place_design\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nTools\n\nDescription:\n\n  Place the specified ports and logic cells in the current design, or all\n  ports and logic cells, onto device resources on the target part. The tool\n  optimizes placement to minimize negative timing slack and reduce overall\n  wire length, while also attempting to spread out placement to reduce\n  routing congestion.\n\n  Placement is one step of the complete design implementation process, which\n  can be run automatically through the use of the launch_runs command when\n  running the Vivado tools in Project Mode.\n\n  In Non-Project Mode, the implementation process must be run manually with\n  the individual commands: opt_design, place_design, phys_opt_design,\n  power_opt_design, and route_design. Refer to the Vivado Design Suite User\n  Guide: Design Flows Overview (UG892) for a complete description of Project\n  Mode and Non-Project Mode.\n\n  Both placement and routing can be completed incrementally, based on prior\n  results stored in a Design Checkpoint file (DCP), using the incremental\n  implementation flow. Refer to the read_checkpoint command, or to Vivado\n  Design Suite User Guide: Implementation (UG904) for more information on\n  incremental place and route.\n\n  Tip: The place_design can be multi-threaded to speed the process. Refer to\n  the set_param command for more information on setting the\n  general.maxThreads parameter.\n\n  You can also manually place some elements of the design using place_ports,\n  or by setting LOC properties on the cell, and then automatically place the\n  remainder of the design using place_design.\n\n  This command requires an open synthesized design, and it is recommended\n  that you run the opt_design command prior to running place_design to avoid\n  placing a suboptimal netlist.\n\nArguments:\n\n  -directive <arg> - (Optional) Direct placement to achieve specific design\n  objectives. Only one directive can be specified for a single place_design\n  command, and values are case-sensitive. Supported values include:\n\n   *  Explore - Increased placer effort in detail placement and\n      post-placement optimization .\n\n   *  EarlyBlockPlacement - Timing-driven placement of RAM and DSP blocks.\n      The RAM and DSP block locations are finalized early in the placement\n      process and are used as anchors to place the remaining logic.\n\n   *  WLDrivenBlockPlacement - Wire length-driven placement of RAM and DSP\n      blocks. Override timing-driven placement by directing the Vivado placer\n      to minimize the distance of connections to and from blocks.\n\n   *  ExtraNetDelay_high - Increases estimated delay of high fanout and\n      long-distance nets. Three levels of pessimism are supported: high,\n      medium, and low. ExtraNetDelay_high applies the highest level of\n      pessimism.\n\n   *  ExtraNetDelay_low - Increases estimated delay of high fanout and\n      long-distance nets. Three levels of pessimism are supported: high,\n      medium, and low. ExtraNetDelay_low applies the lowest level of\n      pessimism.\n\n   *  AltSpreadLogic_high - Spreads logic throughout the device to avoid\n      creating congested regions. Three levels are supported: high, medium,\n      and low. AltSpreadLogic_high achieves the highest level of spreading.\n\n   *  AltSpreadLogic_medium - Spreads logic throughout the device to avoid\n      creating congested regions. Three levels are supported: high, medium,\n      and low. AltSpreadLogic_medium achieves a medium level of spreading\n      compared to low and high.\n\n   *  AltSpreadLogic_low - Spreads logic throughout the device to avoid\n      creating congested regions. Three levels are supported: high, medium,\n      and low. AltSpreadLogic_low achieves the lowest level of spreading.\n\n   *  ExtraPostPlacementOpt - Increased placer effort in post-placement\n      optimization.\n\n   *  ExtraTimingOpt - Use an alternate algorithm for timing-driven placement\n      with greater effort for timing.\n\n   *  SSI_SpreadLogic_high - Distribute logic across SLRs.\n      SSI_SpreadLogic_high achieves the highest level of distribution.\n\n   *  SSI_SpreadLogic_low - Distribute logic across SLRs. SSI_SpreadLogic_low\n      achieves a minimum level of logic distribution, while reducing\n      placement runtime.\n\n   *  SSI_SpreadSLLs - Partition across SLRs and allocate extra area for\n      regions of higher connectivity.\n\n   *  SSI_BalanceSLLs - Partition across SLRs while attempting to balance\n      SLLs between SLRs.\n\n   *  SSI_BalanceSLRs - Partition across SLRs to balance number of cells\n      between SLRs.\n\n   *  SSI_HighUtilSLRs - Direct the placer to attempt to place logic closer\n      together in each SLR.\n\n   *  RuntimeOptimized - Run fewest iterations, trade higher design\n      performance for faster runtime.\n\n   *  Quick - Absolute, fastest runtime, non-timing-driven, performs the\n      minimum required placement for a legal design.\n\n   *  RQS - Instructs place_design to select the place_design directive\n      specified by the report_qor_suggestion strategy suggestion. Requires an\n      RQS file with a strategy suggestion to be read in prior to calling this\n      directive. See report_qor_suggestions -help for more details.\n\n   *  Auto_1 - Instructs place_design to use machine learning to select the\n      best predicted directive.\n\n   *  Auto_2 - Instructs place_design to use machine learning to select the\n      second best predicted directive.\n\n   *  Auto_3 - Instructs place_design to use machine learning to select the\n      third best predicted directive.\n\n   *  Default - Run place_design with default settings.\n\n  Important: The -directive option controls the overall placement strategy,\n  and is not compatible with some place_design options. It can be used with\n  -no_psip, -no_bufg_opt, -quiet and -verbose. Only the Explore, Quick, and\n  Default directives are compatible with high reuse designs and the\n  incremental implementation flow as defined by read_checkpoint -incremental.\n  Refer to the Vivado Design Suite User Guide: Implementation (UG904) for\n  more information on placement strategies and the use of the -directive\n  option.\n\n  -no_timing_driven - (Optional) Disables the default timing driven placement\n  algorithm. This results in a faster placement based on wire lengths, but\n  ignores any timing constraints during the placement process.\n\n  -timing_summary - (Optional) Report the post-placement worst negative slack\n  (WNS) using results from static timing analysis. The WNS value is identical\n  to that of report_timing_summary when run on the post-placement design. By\n  default the placer reports an estimated WNS based on incremental placement\n  updates during the design implementation. The -timing_summary option incurs\n  additional runtime to run a full timing analysis.\n\n  -unplace - (Optional) Unplace all the instances which are not locked by\n  constraints. Cells with fixed placement (IS_LOC_FIXED set to TRUE), are not\n  affected.\n\n  Tip: Use the set_property to change IS_LOC_FIXED to FALSE prior to\n  unplacing fixed cells.\n\n  -post_place_opt - (Optional) Run optimization after placement to improve\n  critical path timing at the expense of additional placement and routing\n  runtime. This optimization can be run at any stage after placement. The\n  optimization examines the worst case timing paths and tries to improve\n  placement to reduce delay.\n\n  Tip: Any placement changes will result in unrouted connections, so\n  route_design will need to be run after -post_place_opt.\n\n  -no_psip - (Optional) Disable PSIP (Physical Synthesis In Placer)\n  optimization during placement. By default, to improve delay the Vivado\n  placer performs optimizations such as replicating drivers of high-fanout\n  nets and drivers of loads that are far-apart. This option disables those\n  optimizations.\n\n  -no_bufg_opt - (Optional) By default, global buffers are inserted during\n  placement to drive high-fanout nets. This option disables global buffer\n  insertion to reduce the number of routing resources consumed by high fanout\n  nets that are not timing-critical.\n\n  -ultrathreads - (Optional) This option (UltraScale+ SSI and vu440 devices \n  only) speeds up placement by distributing multiple threads indicated by \n  general.maxThreads as evenly as possible across multiple SLRs. \n  The ultrathreads option can be used with any place_design directive, however\n  it is automatically enabled for UltraScale+ SSI for the directives: Default, \n  RuntimeOptimized, and Quick. The ultrathreads option is only active when \n  available threads are greater than or equal to the number of device SLRs, \n  otherwise the option is ignored. Placement results will differ slightly \n  depending on whether or not ultrathreads is used.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example places the current design, runs optimization, routes\n  the design, runs post placement optimization, and then reroutes the design\n  to cleanup any unconnected nets as a result of post placement optimization:\n\n    place_design\n    phys_opt_design\n    route_design\n    place_design -post_place_opt\n    phys_opt_design\n    route_design\n\n  The following example directs the Vivado placer to try different placement\n  algorithms to achieve a better placement result:\n\n    place_design -directive Explore\n\n  The following example directs the Vivado placer to use the Machine Learning\n  based predictor to select the top directive:\n\n    place_design -directive Auto_1\n\n  This example unplaces the current design:\n\n    place_design -unplace\n\nSee Also:\n\n   *  launch_runs\n   *  opt_design\n   *  place_ports\n   *  phys_opt_design\n   *  power_opt_design\n   *  read_checkpoint\n   *  route_design\n   *  set_property\n",
"set_clock_latency": "set_clock_latency\n\nDescription: \nCapture actual or predicted clock latency\n\nSyntax: \nset_clock_latency  [-clock <args>] [-rise] [-fall] [-min] [-max] [-source]\n                   [-late] [-early] [-quiet] [-verbose] <latency> <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-clock]    List of relative clocks\n  [-rise]     Specify clock rise latency\n  [-fall]     Specify clock fall latency\n  [-min]      Specify clock rise and fall min condition latency\n  [-max]      Specify clock rise and fall max condition latency\n  [-source]   Specify clock rise and fall source latency\n  [-late]     Specify clock rise and fall late source latency\n  [-early]    Specify clock rise and fall early source latency\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <latency>   Latency value\n  <objects>   List of clocks, ports or pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  This command defines a clock`s source or network latency for specified\n  clocks, ports, or pins.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\n  Source latency is the time in nanoseconds that a clock signal takes to\n  propagate from its waveform origin to the clock definition point in the\n  design. For example, this would be the time delay for the clock to\n  propagate from its source (oscillator) on the system board to the FPGA\n  input port.\n\n  Network latency is the time a clock signal takes to propagate from its\n  definition point in the design to a register clock pin on the timing path.\n  The total clock latency at a register clock pin is the sum of a clock`s\n  source latency and network latency.\n\nArguments:\n\n  -clock <args> - (Optional) Specifies a list of clocks associated with the\n  <latency> assigned to the specified <objects>. If the -clock argument is\n  not used, the clock <latency> will be applied to all clocks passing through\n  the specified pins and ports.\n\n  -rise - (Optional) Defines the latency for the rising clock edge.\n\n  -fall - (Optional) Defines the latency for the falling clock edge.\n\n  -min - (Optional) Defines the minimum latency for the specified clocks for\n  multi-corner analysis.\n\n  -max - (Optional) Defines the maximum latency for the specified clocks for\n  multi-corner analysis.\n\n  Note: The -min and -max options are mutually exclusive.\n\n  -source - (Optional) Defines the specified <latency> as a source latency.\n  Clock source latencies can only be specified for clock objects and clock\n  source pins.\n\n  Note: Without the -source argument the <latency> is considered as network\n  latency.\n\n  -late - (Optional) The time delay specified by <latency> is how late the\n  clock edge arrives.\n\n  -early - (Optional) The time delay specified by <latency> is how early the\n  clock edge arrives.\n\n  Note: The -early and -late options are mutually exclusive, and can only be\n  specified when -source is also specified.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <latency> - (Required) The amount of clock latency, specified as\n  nanoseconds, to apply.\n\n  <objects> - (Required) The clock, port, or pin objects on which to apply\n  the latency. Specifying pin or port objects assigns the latency to all\n  register clock pins in the transitive fanout of the pins or ports. If\n  -clock is used, the latency is applied to all register clock pins of the\n  specified clocks.\n\n  Note: If <objects> specifies a clock, the -clock argument is unnecessary,\n  and is ignored.\n\nExamples:\n\n  This example will set an early latency on the rising edge of CLK_A.\n\n    set_clock_latency -source -rise -early 0.4 [get_ports CLK_A]\n\nSee Also:\n\n   *  report_timing\n",
"close": "close(n)              Tcl Built-In Commands              close(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       close - Close an open channel\n\nSYNOPSIS\n       close channelId\n_________________________________________________________________\n\n\nDESCRIPTION\n       Closes the channel given by channelId.\n\n       ChannelId  must  be an identifier for an open channel such\n       as a Tcl standard channel (stdin, stdout, or stderr),  the\n       return  value from an invocation of open or socket, or the\n       result of a channel creation command  provided  by  a  Tcl\n       extension.\n\n       All  buffered  output  is  flushed to the channel's output\n       device, any buffered input is  discarded,  the  underlying\n       file  or  device is closed, and channelId becomes unavail-\n       able for use.\n\n       If the channel is blocking, the command  does  not  return\n       until  all output is flushed.  If the channel is nonblock-\n       ing and there is unflushed  output,  the  channel  remains\n       open  and  the command returns immediately; output will be\n       flushed in the background and the channel will  be  closed\n       when all the flushing is complete.\n\n       If  channelId is a blocking channel for a command pipeline\n       then close waits for the child processes to complete.\n\n       If the channel is shared between interpreters, then  close\n       makes  channelId  unavailable  in the invoking interpreter\n       but has no other effect until all of  the  sharing  inter-\n       preters  have  closed  the  channel.  When the last inter-\n       preter in which the channel is registered  invokes  close,\n       the  cleanup actions described above occur. See the interp\n       command for a description of channel sharing.\n\n       Channels are automatically closed when an  interpreter  is\n       destroyed  and  when  the  process  exits.   Channels  are\n       switched to blocking mode, to ensure that  all  output  is\n       correctly flushed before the process exits.\n\n       The  command  returns an empty string, and may generate an\n       error if an error occurs while flushing output.  If a com-\n       mand  in  a  command pipeline created with open returns an\n       error, close generates an error (similar to the exec  com-\n       mand.)\n\nEXAMPLE\n       This  illustrates how you can use Tcl to ensure that files\n       get closed even when errors  happen  by  combining  catch,\n       close and return:\n              proc withOpenFile {filename channelVar script} {\n                  upvar 1 $channelVar chan\n                  set chan [open $filename]\n                  catch {\n                      uplevel 1 $script\n                  } result options\n                  close $chan\n                  return -options $options $result\n              }\n\n\nSEE ALSO\n       file(n),  open(n),  socket(n),  eof(n),  Tcl_StandardChan-\n       nels(3)\n\n\nKEYWORDS\n       blocking, channel, close, nonblocking\n\n\n\nTcl                            7.5                       close(n)\n",
"all_ffs": "all_ffs\n\nDescription: \nGet a list of flip flop cells in the current design\n\nSyntax: \nall_ffs  [-quiet] [-verbose]\n\nReturns: \nlist of flip flop cell objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of all flip flop instances in the current design.\n\n  You can use the get_cells command, or use the filter command to limit the\n  results from the all_ffs command to return a list of flip-flop cells\n  matching the specified properties.\n\n  The all_ffs command is scoped to return the objects hierarchically, from\n  the top-level of the design or from the level of the current instance. By\n  default the current instance is defined as the top level of the design, but\n  can be changed by using the current_instance command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the count of all flops in the design, then\n  returns the count of all flops in the fftEngine module:\n\n    current_instance  \n    INFO: [Vivado 12-618] Current instance is the top level of design `netlist_1`.  \n    top \n    llength [all_ffs]  \n    15741 \n    current_instance fftEngine  \n    fftEngine \n    llength [all_ffs]  \n    1519 \n    \n\n  This example filters the results of all_ffs to return only the FDRE flops:\n\n    filter [all_ffs] {REF_NAME == FDRE} \n    \n\nSee Also:\n\n   *  all_latches\n   *  all_registers\n   *  current_instance\n   *  filter\n   *  get_cells\n",
"reset_property": "reset_property\n\nDescription: \nReset property on object(s)\n\nSyntax: \nreset_property  [-quiet] [-verbose] <property_name> <objects>...\n\nReturns: \nThe value that was set if success, '' if failure\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <property_name>  Name of property to reset\n  <objects>        Objects to set properties\n\nCategories: \nObject, PropertyAndParameter\n\nDescription:\n\n  Restores the specified property to its default value on the specified\n  object or objects. If no default is defined for the property, the property\n  is unassigned on the specified object.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <property_name> - (Required) The name of the property to be reset.\n\n  <objects> - (Required) One or more objects on which the property will be\n  restored to its default value.\n\nExamples:\n\n  The following example sets the DOB_REG property on the specified Block RAM,\n  and then resets the property:\n\n    set_property DOB_REG 1 [get_cells usbEngine1/usbEngineSRAM/snoopyRam_reg_19]  \n    reset_property DOB_REG [get_cells usbEngine1/usbEngineSRAM/snoopyRam_reg_19] \n    \n\nSee Also:\n\n   *  create_property\n   *  get_cells\n   *  get_property\n   *  list_property\n   *  list_property_value\n   *  report_property\n   *  set_property\n",
"get_cdc_violations": "get_cdc_violations\n\nDescription: \nGet a list of CDC violations from a previous report_cdc run\n\nSyntax: \nget_cdc_violations  [-name <arg>] [-regexp] [-filter <arg>] [-nocase] [-quiet]\n                    [-verbose] [<patterns>]\n\nReturns: \nlist of CDC violation objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-name]       Get the results with this name\n  [-regexp]     Patterns are full regular expressions\n  [-filter]     Filter list with expression\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match CDC violations against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nCDC, Object\n\nDescription:\n\n  Gets a list of violation objects found in the design when the report_cdc\n  command is run. The properties of individual violation objects can be\n  queried using report_property or list_property commands for details of the\n  violation.\n\n  Violation objects are associated with the clock-domain crossing paths in\n  the current design. The design objects associated with a methodology\n  violation object can be obtained using the -of_objects option of the\n  appropriate get_* command, such as get_cells, or get_nets for instance.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -name <arg> - (Optional) Get the violations associated with the named CDC\n  result set. In this case the report_cdc command must also have been run\n  with the -name option.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_cdc_violations based on property values on the violations. You can find\n  the properties on an object with the report_property or list_property\n  commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match violations against the specified patterns.\n  The default pattern is the wildcard `*` which gets all violations. More\n  than one pattern can be specified to find multiple violations based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example reports the CDC violations found in the current\n  design, then returns a list of all those violations:\n\n    report_cdc  \n    get_cdc_violations \n    \n\n  The following example generates list of violations in the named CDC report,\n  and then gets the pins associated with any violations found:\n\n    report_cdc -name cdc_1  \n    get_pins -of_objects [get_cdc_violations -name cdc_1] \n    \n\nSee Also:\n\n   *  list_property\n   *  report_cdc\n   *  report_property\n",
"open_hw": "The command 'open_hw' is auto loaded by Tcl. To explicitly load the command type 'load_features labtools'.",
"make_diff_pair_ports": "make_diff_pair_ports\n\nDescription: \nMake differential pair for 2 ports\n\nSyntax: \nmake_diff_pair_ports  [-quiet] [-verbose] <ports>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <ports>     Ports to join\n\nCategories: \nXDC, PinPlanning\n\nDescription:\n\n  Joins two existing ports to create a differential pair. The port\n  directions, interfaces, and other properties must match in order for the\n  specified ports to be joined as a differential pair. Otherwise an error\n  will be returned.\n\n  Note: The two ports must first be created, either by using the create_port\n  command or by reading in an XDC file, prior to making them into a\n  differential pair.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ports> - (Required) Two port objects to join as a differential pair. The\n  first port specified will be the positive side of the differential pair.\n\nExamples:\n\n  The following example joins the two specified ports to create a\n  differential pair:\n\n    make_diff_pair_ports port_Pos1 port_Neg1  \n    \n\nSee Also:\n\n   *  create_interface\n   *  create_port\n   *  split_diff_pair_ports\n",
"connect_net": "connect_net\n\nDescription: \nConnect a net to pins or ports\n\nSyntax: \nconnect_net  [-hierarchical] [-basename <arg>] [-net <args>] [-objects <args>]\n             [-net_object_list <args>] [-dict <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-hierarchical]     Allow hierarchical connection, creating nets and pins \n                      as needed (see -basename).\n  [-basename]         base name to use for net / pin names needed when doing \n                      hierarchical connection (see -hier). Default value is \n                      inferred from the name of the net being connected (see \n                      -net).\n  [-net]              Net to connect to given objects.\n  [-objects]          List of pin and port objects to connect\n  [-net_object_list]  optional, a list of net and pin/port list pairs, each \n                      pin or port list element is connected to the \n                      corresponding net, e.g. { net_a { pin_b port_c } net_d \n                      pin_e }. Cannot be used with -net, -objects list is \n                      ignored when -net_object_list is used.\n  [-dict]             alternative to -net_object_list, faster, but requires a\n                      list of net and pin/port object pairs (must be a list \n                      of objects, not names or other TCL objects), each pin \n                      or port list element is connected to the corresponding \n                      net, e.g. { $net_1 $pin_1 $net_2 $pin_2 }. Cannot be \n                      used with -net, -objects list is ignored when -dict is \n                      used.\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n\nCategories: \nNetlist\n\nDescription:\n\n  This command allows the user to connect a specified net to one or more pins\n  or ports in the netlist of an open Synthesized or Implemented Design.\n\n  The connect_net command will also connect nets across levels of hierarchy\n  in the design, by adding pins and hierarchical nets as needed to complete\n  the connection. Added nets and pins can be assigned a custom basename to\n  make them easy to identify, or will be assigned a basename by the Vivado\n  tool.\n\n  Note: You can specify multiple nets, and a list of pins and ports to\n  connect those nets to, using a single connect_net command with the\n  -net_object_list or -dict options, to significantly speed the addition of\n  multiple nets to the current design.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -hierarchical - (Optional) Connect the net across different levels of the\n  hierarchy.\n\n  Note: If -hierarchical is not specified, attempting to connect to\n  hierarchical pins will fail with a warning.\n\n  -basename <arg> - (Optional) Specifies a custom name to use for any\n  hierarchical nets or pins that are needed to connect the specified net\n  across levels of the hierarchy. If this option is not used, the basename is\n  automatically derived from the net being connected.\n\n  -net <arg> - (Required) Specifies the net to connect.\n\n  Note: Although you can create a bus using the -from and -to arguments of\n  the create_net command, you must connect each bit of the bus separately\n  using the connect_net command.\n\n  -objects <args> - (Required) Specified the list of pins or ports to connect\n  the net to. You can connect a net to one or more pin or port objects.\n\n  -net_object_list <args> - (Optional) A list of multiple nets and the pins\n  and ports to connect those nets to. This option lets you connect multiple\n  nets with a single connect_net command. Nets, pins, and ports, can be\n  specified by name, or as objects as returned by get_nets, get_pins, or\n  get_ports commands. The nets and pins/ports to connect it to are listed in\n  the following form: {net1 {pin1 pin2...pinN} net2 {pin1 pin2} ...netN {pin1\n  pin2...pinN}}.\n\n  Note: When -net_object_list or -dict is specified, -net and -objects should\n  not be specified, and will be ignored by the tool. Although -net/-objects\n  and -net_object_list, or -dict are all listed as optional, you must specify\n  the net and objects to connect using one of those argument forms.\n\n  -dict <args> - (Optional) This provides an alternate syntax to the\n  -net_object_list option which offers some performance advantage. Specified\n  as a list of net/pin or net/port object pairs that must be specified as\n  objects, and not by name. For example:\n\n    set myNetA [get_nets netA]  \n    set myPin1 [get_pins pin1]  \n    set myPin2 [get_pins pin2]  \n    set myPin3 [get_pins pin3]  \n    connect_net -dict { $myNetA $myPin1 $myNetA $myPin2 $myNetA $myPin3 }  \n     \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example creates a port; creates a pin on the myDMA instance;\n  creates a net called myEnable; and connects the net to the newly created\n  port and pin:\n\n    create_port -direction IN enableIn  \n    create_pin -direction IN myDMA/en   \n    create_net myEnable  \n    connect_net -net myEnable -objects {enableIn myDMA/en} \n    \n\n  The following example creates 32-bit bus ports, pins, and nets, then\n  connects them together one bit at a time using a for loop to connect each\n  bit individually:\n\n    create_port -from 0 -to 31 -direction IN dataIN  \n    create_pin -from 0 -to 31 -direction IN myDMA/data  \n    create_net -from 0 -to 31 dataBus  \n    for {set x 0} {$x<32} {incr x} { \\  \n       connect_net -net dataBus[$x] -objects [list dataIN[$x] myDMA/data[$x]] } \n    \n\n  Note: Attempting to connect the dataBus will result in a 'Net not found\n  error.' Each bit of the bus must be separately connected.\n\n  This example creates a new cells, then uses the -net_object_list to connect\n  multiple nets in a single connect_net command:\n\n    create_cell -ref inv a2_i  \n    connect_net -net_object_list {top_I[2] {I[2] a2_i/I} \\  \n       top_O[2] {O[2] a2_i/O} top_clk a2_i/clk} \n    \n\nSee Also:\n\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  disconnect_net\n   *  remove_net\n   *  resize_net_bus\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"lreverse": "lreverse(n)           Tcl Built-In Commands           lreverse(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lreverse - Reverse the order of a list\n\nSYNOPSIS\n       lreverse list\n_________________________________________________________________\n\nDESCRIPTION\n       The lreverse command returns a list that has the same ele-\n       ments as its input list, list, except with the elements in\n       the reverse order.\n\nEXAMPLES\n              lreverse {a a b c}\n                    -> c b a a\n              lreverse {a b {c d} e f}\n                    -> f e {c d} b a\n\nSEE ALSO\n       list(n), lsearch(n), lsort(n)\n\n\nKEYWORDS\n       element, list, reverse\n\n\n\nTcl                            8.5                    lreverse(n)\n",
"get_param": "get_param\n\nDescription: \nGet a parameter value\n\nSyntax: \nget_param  [-quiet] [-verbose] <name>\n\nReturns: \nparameter value\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Parameter name\n\nCategories: \nPropertyAndParameter\n\nDescription:\n\n  This command gets the currently defined value for a specified tool\n  parameter. These parameters are user-definable configuration settings that\n  control various behaviors within the tool. Refer to report_param for a\n  description of what each parameter configures or controls.\n\nArguments:\n\n  <name> - (Required) The name of the parameter to get the value of. The list\n  of user-definable parameters can be obtained with list_param. This command\n  requires the full name of the desired parameter. It does not perform any\n  pattern matching, and accepts only one parameter at a time.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the current value of the MaxThreads parameter\n  used for multi-threaded processes:\n\n    get_param general.MaxThreads \n    \n\nSee Also:\n\n   *  list_param\n   *  report_param\n   *  reset_param\n   *  set_param\n",
"get_drc_ruledecks": "get_drc_ruledecks\n\nDescription: \nGet a list of DRC rule deck objects\n\nSyntax: \nget_drc_ruledecks  [-of_objects <args>] [-regexp] [-nocase] [-filter <arg>]\n                   [-quiet] [-verbose] [<patterns>]\n\nReturns: \ndrc_ruledeck\n\nUsage: \n  Name           Description\n  --------------------------\n  [-of_objects]  Get 'drc_ruledeck' objects of these types: 'rule_check'.\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match the 'drc_ruledeck' objects against patterns.\n                 Default: *\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Gets a list of currently defined rule decks for use with the report_drc\n  command.\n\n  A rule deck is a collection of design rule checks grouped for convenience,\n  to be run at different stages of the FPGA design flow, such as during I/O\n  planning or placement. The tool comes with a set of factory defined rule\n  decks, but you can also create new user-defined rule decks with the\n  create_drc_ruledeck command, and add checks to the rule deck using the\n  add_drc_checks command.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -of_objects <args> - (Optional) Get the DRC ruledeck object of the\n  associated rule check objects.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_drc_ruledecks based on property values on the rule decks. You can find\n  the properties on an object with the report_property or list_property\n  commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match rule decks against the specified patterns.\n  The default pattern is the wildcard `*` which gets all rule decks. More\n  than one pattern can be specified to find multiple rule decks based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example gets a list of rule decks defined in the current\n  project:\n\n    \n    get_drc_ruledecks \n    \n\n  The following example lists each of the checks associated with the\n  placer_checks rule deck on a separate line:\n\n    foreach rule [get_drc_checks -of_objects \\  \n       [get_drc_ruledecks placer_checks]] {puts $rule} \n    \n\nSee Also:\n\n   *  add_drc_checks\n   *  create_drc_ruledeck\n   *  list_property\n   *  report_drc\n   *  report_property\n",
"enable_beta_device": "enable_beta_device\n\nDescription: \nEnable all licensed beta devices matching an optional pattern\n\nSyntax: \nenable_beta_device  [-quiet] [-verbose] [<pattern>]\n\nUsage: \n  Name         Description\n  ------------------------\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<pattern>]  Enable parts matching pattern\n\nCategories: \nDevice\n",
"place_pblocks": "place_pblocks\n\nDescription: \nResize Pblocks according to SLICE demand and re-position them according to connectivity\n\nSyntax: \nplace_pblocks  [-effort <arg>] [-utilization <arg>] [-quiet] [-verbose]\n               <pblocks>...\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-effort]       Placer effort level (per Pblock)\n                  Values: LOW, MEDIUM, HIGH\n                  Default: HIGH\n  [-utilization]  Placer utilization (per Pblock)\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <pblocks>       List of Pblocks to place\n\nCategories: \nFloorplan\n\nDescription:\n\n  Places Pblocks onto the fabric of the FPGA. Pblocks must be created using\n  the create_pblock command, and should be populated with assigned logic\n  using the add_cells_to_pblock command.\n\n  Note: An empty Pblock will be placed as directed, but results in a Pblock\n  covering a single CLB tile (two SLICEs).\n\nArguments:\n\n  -effort <arg> - (Optional) Effort level that the Pblock placer should use\n  in placing each Pblock onto the fabric. Valid values are LOW, MEDIUM, HIGH,\n  with the default being HIGH.\n\n  -utilization <arg> - (Optional) The percentage of slice resources on the\n  target device that should be consumed by the logic elements assigned to a\n  Pblock. For instance, a utilization rate of 50% means that half of the\n  slice resources within the Pblock area should be allocated for use by the\n  Pblock, and half should be left for use by other logic in the design. A\n  high utilization value makes the Pblock smaller and more dense, but can\n  make the overall design more difficult to place.\n\n  Note: Pblock utilization considers only slice-based device resources, and\n  is estimated based on the post-synthesis logic assigned to a Pblock. Actual\n  placement results may vary, and may require you to resize the Pblock using\n  the resize_pblock command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pblocks> - (Required) One or more Pblocks to be placed onto the fabric of\n  the FPGA.\n\nExamples:\n\n  The following example places the specified Pblocks with a utilization of 75%:\n\n    place_pblocks -effort LOW -utilization 75 block1 block2 block3 block4 block5 \n    \n\nSee Also:\n\n   *  add_cells_to_pblock\n   *  create_pblock\n   *  resize_pblock\n",
"add_custom_timing_model": "add_custom_timing_model\n\nDescription: \nCustom timing model\n\nSyntax: \nadd_custom_timing_model  -from <args> -to <args> -delays <args> [-quiet]\n                         [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -from       From pin or port\n  -to         To pin or port\n  -delays     Delays in ns\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nTiming\n",
"save_design_as": "",
"get_interfaces": "get_interfaces\n\nDescription: \nGet a list of I/O port interfaces in the current design\n\nSyntax: \nget_interfaces  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of interface objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get interfaces of these pins or nets\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match I/O port interfaces against patterns\n                 Default: *\n\nCategories: \nObject\n\nDescription:\n\n  Gets a list of IO interfaces in the current project that match a specified\n  search pattern. The default command gets a list of all IO interfaces in the\n  project.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_interfaces based on property values on the interfaces. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) One or more pins or nets to which the\n  interfaces are assigned.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - Match interfaces against the specified pattern. The default\n  pattern is the wildcard `*` which gets a list of all interfaces in the\n  project.\n\nExamples:\n\n  The following example gets a list of all interfaces in the project:\n\n    get_interfaces \n    \n\nSee Also:\n\n   *  create_interface\n   *  delete_interface\n",
"get_primitives": "get_primitives\n\nDescription: \nGet a list of available unisim primitives for a part\n\nSyntax: \nget_primitives  [-regexp] [-nocase] [-filter <arg>] [-part <arg>] [-retarget]\n                [-macro] [-hierarchy] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nprimitive types\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching. (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-part]       Part to get primitives for\n  [-retarget]   Include primitive types that will be automatically retargeted\n                to the current (or specified) part\n  [-macro]      Include primitive types that always convert into more basic, \n                natively supported primitives, such as logic gates\n  [-hierarchy]  Include primitive types that will be automatically expanded \n                into a hierarchy of leaf cells during implementation\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match primitive types against patterns\n                Default: *\n\nCategories: \nObject\n\nDescription:\n\n  Get a list of all supported primitives for the specified device. This\n  command can be used on an open elaborated, synthesized, or implemented\n  design, in which case it will get the PART from the current design. You can\n  also specify the -part option to return the primitives for any device.\n\n  By default the command always returns native primitives that can be placed\n  on the target part without modification. The -retarget, -macro, and\n  -hierarchy options add additional primitives to the list returned.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_primitives based on property values on the object. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -part <arg> - (Optional) Get a list of primitives for the specified part.\n\n  -retarget - (Optional) Include primitives that are automatically\n  re-targeted to the current or specified part.\n\n  -macro - (Optional) Include macro primitives that convert into more basic\n  primitives, such as logic gates.\n\n  -hierarchy - (Optional) Include primitives that will be automatically\n  expanded into a hierarchy of leaf cells during implementation.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Required) Match primitives against the specified patterns.\n\nExamples:\n\n  The following example gets the native primitives for the current part, and\n  includes macro primitives:\n\n    get_primitives -macro \n    \n\nSee Also:\n\n   *  get_cells\n   *  get_libs\n   *  get_lib_pins\n   *  get_lib_cells\n   *  get_parts\n   *  list_property\n   *  report_property\n",
"get_bel_pins": "get_bel_pins\n\nDescription: \nGet a list of bel_pins. If a design is loaded, gets the constructed site type bels.\n\nSyntax: \nget_bel_pins  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n              [-verbose] [<patterns>]\n\nReturns: \nbel_pin\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the bel_pin of these bels, sites, pins, or nets.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match bel_pin against patterns\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Returns a list of pins on the specified BELs, or matching a specified\n  search pattern.\n\n  The default command gets a list of all pins on all BELs on the device.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_bel_pins based on property values on the bel_pins. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the bel_pin\n  object, 'NAME' and 'IS_INVERTED' are two of the properties that can be used\n  to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) This option can be used with the get_bels\n  command to return the pins of specified BELs.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match bel_pin objects against the specified\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  bel_pins on the device. More than one search pattern can be specified to\n  find pins based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the pins of the specified BELs associated\n  with the specified range of sites on the device:\n\n    get_bel_pins -of_objects [get_bels -of_objects [get_sites \\  \n       -range {SLICE_X0Y0 SLICE_X1Y1}] ] \n    \n\n  The following example returns the clock enable (CE) pins of all BELs on the\n  device:\n\n    get_bel_pins *CE \n    \n\nSee Also:\n\n   *  get_bels\n   *  get_sites\n   *  list_property\n   *  report_property\n",
"get_speed_models": "get_speed_models\n\nDescription: \nGet a list of speed_models in the device.\n\nSyntax: \nget_speed_models  [-of_objects <args>] [-regexp] [-nocase] [-patterns <arg>]\n                  [-filter <arg>] [-speed_pattern <arg>] [-quiet] [-verbose]\n\nReturns: \nspeed_models\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-of_objects]     Get 'speed_model' objects of these types: 'node bel pip \n                    cell'.\n  [-regexp]         Patterns are full regular expressions\n  [-nocase]         Perform case-insensitive matching. (valid only when \n                    -regexp specified)\n  [-patterns]       Match the 'speed_model' objects against patterns.\n                    Default: *\n  [-filter]         Filter list with expression\n  [-speed_pattern]  Returns a single model that exactly matches the pattern.\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Get speed models for UltraScale architecture device resources in the\n  current design.\n\n  Speed files are provided by Xilinx for each device and speed grade. Speed\n  files contain speed models. There are speed models for the various elements\n  of a device: nodes, pips, bels. There are speed models for setup and hold,\n  propagation delays, jitter, etc.\n\n  The speed models include information on the delays in nanoseconds (ns)\n  associated with device resources like BELs and SITEs and routing resources.\n  Speed models are used by the Vivado timing engine to perform analysis of\n  the current design in the context of the target part.\n\n  The objects returned are the speed models associated with specific physical\n  resources like pips and wires, drawn directly from the speed files. These\n  can include capacitance and resistance values and buffer models.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\n  This command returns the specified speed model objects, or returns an error\n  if the command fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_speed_models based on property values on the objects. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the speed_model object, 'NAME', 'TYPE' and 'DELAY' are some\n  of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the speed models for the specified node,\n  bel, pip, or cell objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the properties on the speed model for an A6LUT:\n\n    report_property -all [lindex [get_speed_models -of \\  \n    [get_bels SLICE_X0Y0/A6LUT]] 0]  \n    Property              Type    Read-only  Value  \n    CLASS                 string  true       speed_model  \n    DELAY                 double  true       0.043  \n    FAST_MAX              double  true       0.035  \n    FAST_MIN              double  true       0.028  \n    IS_INSTANCE_SPECIFIC  bool    true       1  \n    NAME                  string  true       bel_d_lut6_a1_o6  \n    NAME_LOGICAL          string  true       bel_d_lut6_a1_o6  \n    SLOW_MAX              double  true       0.043  \n    SLOW_MIN              double  true       0.036  \n    SPEED_INDEX           int     true       65535  \n    TYPE                  string  true       bel_delay \n    \n\n  The following example returns the delays, in nanoseconds, for a specific\n  A6LUT on the device, followed by the delay name for the specified object:\n\n    set x [get_speed_models -of [get_bels SLICE_X0Y0/A6LUT]]  \n    puts [format '%6.3f : %s' [get_property DELAY [lindex $x 0 ]] \\  \n    [get_property NAME [lindex $x 0 ]]] \n    \n\nSee Also:\n\n   *  get_bels\n   *  list_property\n   *  report_property\n",
"set": "set(n)                Tcl Built-In Commands                set(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       set - Read and write variables\n\nSYNOPSIS\n       set varName ?value?\n_________________________________________________________________\n\nDESCRIPTION\n       Returns the value of variable varName.  If value is speci-\n       fied, then set the value of varName to value,  creating  a\n       new variable if one does not already exist, and return its\n       value.  If varName contains an open parenthesis  and  ends\n       with  a close parenthesis, then it refers to an array ele-\n       ment:  the characters before the  first  open  parenthesis\n       are  the name of the array, and the characters between the\n       parentheses are the index  within  the  array.   Otherwise\n       varName refers to a scalar variable.\n\n       If  varName  includes  namespace  qualifiers (in the array\n       name if it refers to an array element), or if  varName  is\n       unqualified  (does not include the names of any containing\n       namespaces) but no procedure is active, varName refers  to\n       a  namespace  variable  resolved  according  to  the rules\n       described under NAME RESOLUTION in  the  namespace  manual\n       page.\n\n       If  a procedure is active and varName is unqualified, then\n       varName refers to a parameter or  local  variable  of  the\n       procedure,  unless varName was declared to resolve differ-\n       ently through one of the global, variable  or  upvar  com-\n       mands.\n\nEXAMPLES\n       Store a random number in the variable r:\n              set r [expr {rand()}]\n\n       Store a short message in an array element:\n              set anAry(msg) 'Hello, World!'\n\n       Store  a  short message in an array element specified by a\n       variable:\n              set elemName 'msg'\n              set anAry($elemName) 'Hello, World!'\n\n       Copy a value into the variable out from a  variable  whose\n       name is stored in the vbl (note that it is often easier to\n       use arrays in practice instead of doing double-dereferenc-\n       ing):\n              set in0 'small random'\n              set in1 'large random'\n              set vbl in[expr {rand() >= 0.5}]\n              set out [set $vbl]\n\nSEE ALSO\n       expr(n),   global(n),   namespace(n),  proc(n),  trace(n),\n       unset(n), upvar(n), variable(n)\n\nKEYWORDS\n       read, write, variable\n\n\n\nTcl                                                        set(n)\n",
"read": "read(n)               Tcl Built-In Commands               read(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       read - Read from a channel\n\nSYNOPSIS\n       read ?-nonewline? channelId\n\n       read channelId numChars\n_________________________________________________________________\n\n\nDESCRIPTION\n       In  the first form, the read command reads all of the data\n       from channelId up to the end of the file.  If the  -nonew-\n       line  switch  is  specified then the last character of the\n       file is discarded if it is a newline.  In the second form,\n       the  extra argument specifies how many characters to read.\n       Exactly that many characters will be  read  and  returned,\n       unless  there are fewer than numChars left in the file; in\n       this case all the remaining characters are  returned.   If\n       the  channel  is  configured to use a multi-byte encoding,\n       then the number of characters read may not be the same  as\n       the number of bytes read.\n\n       ChannelId  must  be an identifier for an open channel such\n       as the Tcl standard  input  channel  (stdin),  the  return\n       value  from an invocation of open or socket, or the result\n       of a channel creation command provided by a Tcl extension.\n       The channel must have been opened for input.\n\n       If  channelId  is in nonblocking mode, the command may not\n       read as many characters as requested: once  all  available\n       input has been read, the command will return the data that\n       is available rather than blocking for more input.  If  the\n       channel  is  configured to use a multi-byte encoding, then\n       there may actually be some bytes remaining in the internal\n       buffers  that  do  not  form  a complete character.  These\n       bytes will not be returned until a complete  character  is\n       available  or  end-of-file  is  reached.   The  -nonewline\n       switch is ignored if the command returns  before  reaching\n       the end of the file.\n\n       Read  translates  end-of-line  sequences in the input into\n       newline characters according to  the  -translation  option\n       for  the  channel.   See the fconfigure manual entry for a\n       discussion on ways in which fconfigure will alter input.\n\n\nUSE WITH SERIAL PORTS\n       For most applications a channel connected to a serial port\n       should  be  configured to be nonblocking: fconfigure chan-\n       nelId -blocking 0.  Then read behaves much like  described\n       above.   Care  must  be  taken when using read on blocking\n       serial ports:\n\n       read channelId numChars\n              In this form read blocks until numChars  have  been\n              received from the serial port.\n\n       read channelId\n              In this form read blocks until the reception of the\n              end-of-file character, see fconfigure -eofchar.  If\n              there  no end-of-file character has been configured\n              for the channel, then read will block forever.\n\nEXAMPLE\n       This example code reads a file all at once, and splits  it\n       into  a  list, with each line in the file corresponding to\n       an element in the list:\n              set fl [open /proc/meminfo]\n              set data [read $fl]\n              close $fl\n              set lines [split $data \\n]\n\n\nSEE ALSO\n       file(n), eof(n), fblocked(n), fconfigure(n), Tcl_Standard-\n       Channels(3)\n\n\nKEYWORDS\n       blocking,  channel, end of line, end of file, nonblocking,\n       read, translation, encoding\n\n\n\nTcl                            8.1                        read(n)\n",
"endgroup": "endgroup\n\nDescription: \nEnd a set of commands that can be undone/redone as a group\n\nSyntax: \nendgroup  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  Ends a sequence of commands that can be undone or redone as a series. Use\n  startgroup to start the sequence of commands.\n\n  You can have multiple command groups to undo or redo, but you cannot nest\n  command groups. You must use endgroup to end a command sequence before\n  using startgroup to create a new command sequence.\n\n  Note: The startgroup/endgroup commands are provided to support sequences of\n  related commands that can be undone via the undo command, or redone if\n  needed using the redo command. However, some Tcl commands can trigger an\n  endgroup unexpectedly, and certain commands do not support either UNDO or\n  REDO. The limitations are not fully defined.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example defines a startgroup, executes a sequence of related\n  commands, and then executes the endgroup. This sequence of commands can be\n  undone as a group:\n\n    startgroup  \n    create_pblock pblock_wbArbEngine  \n    create_pblock pblock_usbEng  \n    add_cells_to_pblock pblock_wbArbEngine \\  \n       [get_cells [list wbArbEngine]] -clear_locs  \n    add_cells_to_pblock pblock_usbEng \\  \n       [get_cells [list usbEngine1/usbEngineSRAM]] -clear_locs  \n    endgroup \n    \n\nSee Also:\n\n   *  startgroup\n   *  redo\n   *  undo\n",
"get_noc_net_routes": "get_noc_net_routes\n\nDescription: \nGet a list of NOC net physical routes\n\nSyntax: \nget_noc_net_routes  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                    [-quiet] [-verbose] [<patterns>]\n\nReturns: \nnoc_net_route\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the noc_net_route of these noc_logical_path.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match noc_net_route against patterns\n                 Default: *\n\nCategories: \nNOC, Object\n",
"write_csv": "write_csv\n\nDescription: \nExport package pin and port placement information\n\nSyntax: \nwrite_csv  [-force] [-quiet] [-verbose] <file>\n\nReturns: \nname of the output file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrite existing file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Pin Planning CSV file\n\nCategories: \nFileIO\n\nDescription:\n\n  Writes package pin and port placement information into a comma separated\n  value (CSV) file.\n\n  The specific format and requirements of the CSV file are described in the\n  Vivado Design Suite User Guide: I/O and Clock Planning (UG899).\n\nArguments:\n\n  -force - (Optional) Overwrite the CSV file if it already exists.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The filename of the CSV file to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example exports a CSV file from the current project:\n\n    write_csv C:/Data/pinList.csv \n    \n\nSee Also:\n\n   *  read_csv\n",
"reset_switching_activity": "reset_switching_activity\n\nDescription: \nReset switching activity on specified objects\n\nSyntax: \nreset_switching_activity  [-default] [-type <args>] [-hier] [-all]\n                          [-no_deassert_resets] [-quiet] [-verbose]\n                          [<objects>...]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-default]             Reset default static probability and default toggle \n                         rate\n  [-type]                Specify nodes in a specific category.  List of valid\n                         type values: io_output, io_bidir_enable, register, \n                         lut_ram, lut, dsp, bram_enable, bram_wr_enable, \n                         gt_txdata, gt_rxdata.\n  [-hier]                Hierarchically resets the switching activity on a \n                         hierarchical cells provided as <objects>.\n  [-all]                 Reset switching activity on all nets\n  [-no_deassert_resets]  A switch to undo the deassertion of resets via \n                         command set_switching_activity -deassert_resets\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n  [<objects>]            Objects to reset switching activity on\n\nCategories: \nPower, XDC\n\nDescription:\n\n  Resets the attributes of the switching activity on specified nets, ports,\n  pins, and cells in the design.\n\n  The switching activity is defined using the set_switching_activity command.\n  The current switching activity defined for a specific port, pin, net, or\n  cell can be found by using the report_switching_activity command.\n\n  Note: The reset_switching_activity is used to reset switching activity for\n  specified objects. Use set_switching_activity -default_toggle_rate or\n  -default_static_probability to change or reset the default values for the\n  current design.\n\n  This command operates silently and does not return direct feedback of its\n  operation.\n\nArguments:\n\n  -default - (Optional) Reset the static probability and signal rate of the\n  specified object.\n\n  -type <arg> - (Optional) Reset the switching activity for the specified\n  type of logic entity. By default, the command is applied to the top-level\n  of the current design, or to the specified <objects>. The -type option\n  applies the command to the specified type of logic objects in the top-level\n  of the current design. The -all option, or -hier option, can be used to\n  modify the scope of objects the command applies to. Valid logic types\n  include:\n\n   *  io_output - Primary outputs.\n\n   *  io_bidir_enable - Enable pin of Bidir ports.\n\n   *  register - All register outputs in the design/hierarchy specified.\n\n   *  lut - All LUT outputs in the design/hierarchy specified.\n\n   *  lut_ram - All distributed ram outputs in the design/hierarchy specified.\n\n   *  dsp - All DSP outputs in the design/hierarchy specified.\n\n   *  bram_enable - Enable pins (ENARDEN/ENBWREN) of BRAMs.\n\n   *  bram_wr_enable - Write enables of BRAMs (WEA/WEBWE).\n\n   *  gt_txdata - Output TX data pins of all GTs.\n\n   *  gt_rxdata - Output RX data pins of all GTs.\n\n  -hier - (Optional) Reset the switching activity across all levels of the\n  specified hierarchical object. Without -hier, the switching activity is\n  applied to the specified <objects> at the current level of the hierarchy.\n\n  -all - (Optional) Must be used with -type, reset the switching activity on\n  nets within all instances of the specified -type of logic object.\n\n  -no_deassert_resets - (Optional) Disables the -deassert_resets option if it\n  was previously enabled using set_switching_activity.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) The list of objects for which to reset the switching\n  activity. If not specified, the command resets the switching activity on\n  all objects.\n\nExamples:\n\n  The following example resets the signal_rate and static probability value\n  on all output ports:\n\n    reset_switching_activity -default [all_outputs] \n    \n\nSee Also:\n\n   *  power_opt_design\n   *  report_power\n   *  report_switching_activity\n   *  set_switching_activity\n",
"create_debug_port": "create_debug_port\n\nDescription: \nCreate a new debug port\n\nSyntax: \ncreate_debug_port  [-quiet] [-verbose] <name> <type>\n\nReturns: \nnew debug_port object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of the debug core instance\n  <type>      Type of the new debug port\n\nCategories: \nDebug, XDC\n\nDescription:\n\n  Defines a new port to be added to an existing Vivado ILA debug core that\n  was added to the design using the create_debug_core command. The port\n  provides connection points on an ILA core to attach nets from the design\n  for debugging.\n\n  When a new debug core is created using the create_debug_core command, it\n  includes a clk and probe port by default. However, you can add trigger\n  input/output port types as well. Refer to the Vivado Design Suite User\n  Guide: Programming and Debugging (UG908) for more information on port types\n  and purpose.\n\n  A port can have one or more connection points to support one or more nets\n  to debug. As a default new ports are defined as having a width of 1,\n  allowing only one net to be attached. You can change the port width of\n  probe ports to support multiple signals using the set_property port_width\n  command (see Examples).\n\n  Note: clk, trig_in, trig_in_ack, trig_out, and trig_out_ack ports can only\n  have a width of 1.\n\n  You can connect signals to ports using the connect_debug_port command,\n  modify existing probe connections using modify_debug_ports, and disconnect\n  signals with the disconnect_debug_port command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the ILA debug core to add the new port to.\n  The debug core must already exist in the project having been created with\n  create_debug_core.\n\n  <type> - (Required) The type of debug port to insert. The supported port\n  types are:\n\n   *  clk - Defines the clock port for connecting the ILA debug core to a\n      clock domain. Each debug core can only have one clk port, and each clk\n      port can only connect to one clock domain. Therefore you must use\n      multiple ILA cores to probe signals from different clock domains.\n\n      Note: Ensure that the connected clocks are free-running clocks. Failure\n      to do so could result in an inability to communicate with the debug\n      core when the design is loaded onto the device.\n\n   *  probe - Provides probe points to connect to signals that are marked for\n      debugging with the MARK_DEBUG property. The ILA debug core can contain\n      multiple probe ports, which are automatically numbered by the Vivado\n      tool when the port is added to the core. Each probe port can contain\n      one or more channels, or connection points, as defined by the\n      PORT_WIDTH property.\n\n   *  trig_in/trig_in_ack, and trig_out/trig_out_ack - The ILA probe trigger\n      comparators used to detect specific comparison conditions on the probe\n      inputs to the ILA core. trig_in and trig_in_ack, and trig_out and\n      trig_out_ack should be added to the debug core as port pairs when used.\n      Refer to the Vivado Design Suite User Guide: Programming and Debugging\n      (UG908) for more information.\n\nExamples:\n\n  The following example creates a new debug core, and then adds an additional\n  probe port to the core, then sets the width of that new port to 8, and\n  connects signals to the probe port:\n\n    create_debug_core myCore ila  \n    create_debug_port myCore probe  \n    set_property PORT_WIDTH 8 myCore/probe1   \n    connect_debug_port -channel_start_index 1 myCore/probe1 \\  \n    {m1_cyc_i m1_ack_o m1_err_o m1_rty_o} \n    \n\n  Note: Recall that the ILA core is created with a clk and probe port by\n  default, so the new probe port is automatically numbered as probe1.\n\nSee Also:\n\n   *  connect_debug_port\n   *  create_debug_core\n   *  disconnect_debug_port\n   *  set_property\n",
"create_power_rail": "create_power_rail\n\nDescription: \nCreate a new Power Rail\n\nSyntax: \ncreate_power_rail  [-power_sources <args>] [-phased_power_source <args>]\n                   [-direct] [-num_phases <arg>] [-quiet] [-verbose] <name>\n\nReturns: \nnew power_rail object\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-power_sources]        List of power sources. Can be power rails and/or \n                          power supplies\n  [-phased_power_source]  Pair of phased power source and its phase value. \n                          Power source can be a phased power rail.\n  [-direct]               Implies if the power is a direct rail\n  [-num_phases]           Number of phases\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  <name>                  Name of the new power rail\n\nCategories: \nXDC, Floorplan\n",
"get_net_delays": "get_net_delays\n\nDescription: \nGet the routed or estimated delays in picoseconds on a net from the driver to each load pin.\n\nSyntax: \nget_net_delays  -of_objects <args> [-regexp] [-nocase] [-patterns <arg>]\n                [-filter <arg>] [-to <args>] [-interconnect_only] [-quiet]\n                [-verbose]\n\nReturns: \nnet_delays\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  -of_objects           Get 'net_delay' objects of these types: 'net'.\n  [-regexp]             Patterns are full regular expressions\n  [-nocase]             Perform case-insensitive matching. (valid only when \n                        -regexp specified)\n  [-patterns]           Match the 'net_delay' objects against patterns.\n                        Default: *\n  [-filter]             Filter list with expression\n  [-to]                 Get the delay of the net to the given terminal(s) or \n                        port(s).\n  [-interconnect_only]  Include only interconnect delays. The default is to \n                        include the intra-site delay.\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nTiming, Netlist, Object\n\nDescription:\n\n  Get delay objects for the specified nets in the current design, from the\n  driver to each load pin, or to specified load pins, through specific pins.\n\n  The delay object contains properties defining the maximum and minimum\n  delays for the fast and slow process corners. Use the get_property command\n  to extract the property of interest from the delay object. Delay property\n  values on the delay object are specified in picoseconds.\n\n  Note: In most cases the Vivado tools return delay values specified in\n  nanoseconds, but the delay object uses picoseconds.\n\n  The values returned are calculated or estimated depending upon whether the\n  net is routed. Delay values can include the actual delay of routed\n  interconnect, or estimated net delays for unrouted nets. The net delay can\n  also include delay through logic elements or device sites, or just include\n  the interconnect delay.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\n  The get_net_delays command returns the delay objects for the specified\n  nets, or returns an error if it fails.\n\nArguments:\n\n  -of_objects <arg> - (Required) Get the net delays of the specified net\n  objects. This option can be used to reduce the amount of data returned by\n  the get_net_delays command.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_nets in the case of the get_net_delays command.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -patterns <arg> - (Optional) Match net_delays against the specified\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  net_delays in the project. More than one pattern can be specified to find\n  multiple pins based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_net_delays based on property values on the delay objects. You can find\n  the properties on an object with the report_property or list_property\n  commands. In the case of the delay object, 'NET', 'FAST_MAX' and 'FAST_MIN'\n  are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -to <args> - (Optional) Specifies the endpoints of nets for delay\n  calculation. Pin, port, and pip objects can be specified as endpoints.\n\n  -interconnect_only - (Optional) Include only interconnect delays to\n  determine the delay on the net due to routing. The default is to also\n  include the intra-site delay into the delay calculation.\n\n  Note: When using get_net_delays to define delay limits for the route_design\n  command -min_delay or -max_delay options, you should use the\n  -interconnect_only option to ensure the specified net delay includes just\n  the interconnect.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example gets the interconnect delay values for the specified\n  net, and returns it in the form of a delay object:\n\n    report_property -all [lindex [get_net_delays -interconnect_only \\  \n    -of_objects [get_nets control_reg[*]]] 16 ] \n    \n\n  Note: The FAST_MAX, FAST_MIN, SLOW_MAX, and SLOW_MIN properties on the\n  delay object are reported in picoseconds.\n\nSee Also:\n\n   *  get_pins\n   *  get_pips\n   *  get_ports\n   *  get_property\n   *  list_property\n   *  report_property\n",
"report_utilization": "report_utilization\n\nDescription: \nCompute utilization of device and display report\n\nSyntax: \nreport_utilization  [-file <arg>] [-append] [-pblocks <args>]\n                    [-evaluate_pblock] [-exclude_child_pblocks]\n                    [-exclude_non_assigned] [-cells <args>] [-return_string]\n                    [-slr] [-packthru] [-name <arg>] [-no_primitives]\n                    [-omit_locs] [-hierarchical] [-spreadsheet_file <arg>]\n                    [-spreadsheet_table <arg>] [-spreadsheet_depth <arg>]\n                    [-hierarchical_depth <arg>] [-hierarchical_percentages]\n                    [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-file]                      Filename to output results to. (send output to\n                               console if -file is not used)\n  [-append]                    Append the results to file, don't overwrite \n                               the results file\n  [-pblocks]                   Report utilization of given pblock\n  [-evaluate_pblock]           Report utilization with demand as specified \n                               cells and supply as specified pblock area\n  [-exclude_child_pblocks]     Report utilization with out child pblocks\n  [-exclude_non_assigned]      Pblock utilization with out Non-assigned Cells\n  [-cells]                     Report utilization of given list of cells\n  [-return_string]             Return report as string\n  [-slr]                       SLR wise utilization of resources\n  [-packthru]                  Reports LUTs used exclusively as pack-thru\n  [-name]                      Output the results to GUI panel with this name\n  [-no_primitives]             Removes 'Primitives Section' from \n                               report_utilization o/p.\n  [-omit_locs]                 Removes 'Loced' column from report_utilization\n                               o/p.\n  [-hierarchical]              Generates text-based hierarchical report.\n  [-spreadsheet_file]          Specify file for exporting utilization tables \n                               as spreadsheets. This feature is available \n                               only in GUI mode.\n  [-spreadsheet_table]         Choose a particular utilization table to \n                               export as spreadsheet file. Default value : \n                               Hierarchy\n  [-spreadsheet_depth]         Specifies the depth level for spreadsheet. \n                               Default value : 8\n                               Default: 8\n  [-hierarchical_depth]        Specifies the depth level for textual \n                               hierarchical report\n                               Default: 0\n  [-hierarchical_percentages]  Report percentages in textual hierarchical \n                               report\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n\nCategories: \nReport\n\nDescription:\n\n  Report resource usage on the target part by the current synthesized or\n  implemented design. The report is returned to the standard output, unless\n  the -file, -return_string, or -name arguments are specified.\n\n  Tip: Though resource usage can be reported early in the design process, the\n  report will be more accurate as the design progresses from synthesis\n  through implementation.\n\n  This command returns the requested information, or returns an error if it\n  fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -pblocks <arg> - (Optional) Report the resources utilized by a Pblock.\n\n  Note: -pblocks can not be used with the -name option.\n\n  -evaluate_pblock <arg> - (Optional) Performs a what-if analysis on the\n  specified -pblocks and the specified -cells. This option reports the\n  utilization of the Pblocks as if they were populated by the specified\n  cells. Percentages of utilization represent the ratio of the assigned cells\n  to the available resources. This option requires both -pblocks and -cells\n  to be specified.\n\n  -exclude_child_pblocks - (Optional) Report utilization of the specified\n  -pblocks excluding any nested Pblocks. This has the effect of reducing the\n  utilization of the region as it does not account for cells that are\n  assigned to a Pblock through a nested Pblock.\n\n  -exclude_non_assigned - (Optional) Exclude non-assigned cells from the\n  Utilization report when the -pblocks option is specified. This has the\n  effect of decreasing the utilization of the Pblock region as it does not\n  account for cells that are utilized, but are not assigned to the specified\n  Pblocks.\n\n  -cells <arg> - (Optional) Report the resources utilized by one or more\n  hierarchical cells in the current design.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -slr - (Optional) Reports the utilization for each separate SLR in devices\n  having SLRs.\n\n  -packthru - (Optional) Reports LUTs used for route through purposes. This\n  appears in the utilization report as 'LUTs used exclusively as\n  route-thrus'.\n\n  -name <arg> - (Optional) Specifies the name of the results to output to the\n  GUI.\n\n  -no_primitives - (Optional) Remove the Primitives section from the report.\n  The Primitives section reports the number and type of logic primitives used\n  on the device.\n\n  -omit_locs - (Optional) Omit the Fixed column from the report. The Fixed\n  column reports the quantity of logic elements that the user has fixed, or\n  manually placed onto the device.\n\n  -hierarchical - (Optional) Reports the utilization of the device broken\n  down according to the hierarchy of the design.\n\n  -hierarchical_depth <arg> - (Optional) Specifies the depth of the hierarchy\n  to report when reporting utilization according to the hierarchy. The\n  default depth is 0, which means that -hierarchical will report full design\n  hierarchy.\n\n  -hierarchical_percentages - (Optional) Specifies that utilization data in\n  the hierarchical report be reported as percentages.\n\n  -spreadsheet_file <arg> - (Optional) Export utilization tables to the\n  specified XLSX format spreadsheet. The ability to export a spreadsheet file\n  is only available when the -name option is also specified and the report is\n  generated in the GUI.\n\n  Tip: You should specify the .xlsx suffix for the specified file, as it is\n  not automatically assigned. If the path is not specified as part of the\n  file name, the file will be written into the current working directory,\n  which may be the directory from which the Vivado tool was launched.\n\n  -spreadsheet_table <arg> - (Optional) Specify a utilization table to export\n  to the spreadsheet file. The default is to export the Hierarchy table for\n  the whole design. This option requires the use of -spreadsheet_file. The\n  table name is displayed in the Report Utilization window when a specific\n  table is selected from the tree view. Some example table names are:\n\n   *  'Hierarchy'\n\n   *  'Slice Logic Distribution'\n\n   *  'Slice Logic Distribution - LUT as Memory'\n\n   *  'Slice Logic Distribution - LUT as Memory - LUT as Distributed RAM'\n\n   *  'Slice Logic Distribution - LUT as Memory - LUT as Shift Register'\n\n   *  'Slice Logic Distribution - LUT as Logic'\n\n   *  'Slice Logic - F8 Muxes'\n\n   *  'Slice Logic - Slice Registers'\n\n   *  'Slice Logic - Slice Registers - Registers as AND/OR'\n\n   *  'Memory - Block RAM Tile'\n\n   *  'Memory - Block RAM Tile - RAMB18'\n\n   *  'DSP - DSPs'\n\n   *  'Clocking - BUFGCTRL'\n\n   *  'Specific Feature - BSCANE2'\n\n   *  'Primitives'\n\n  -spreadsheet_depth <arg> - (Optional) Specifies the hierarchical depth,\n  starting from the top-level of the design, to export to the spreadsheet\n  file. The default value is 8. This options requires the use of\n  -spreadsheet_file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the resources used by a Pblock and write the\n  results to the specified file:\n\n    report_utilization -pblocks [get_pblocks <pblockName>] -file \\\n    ./pblocks_util.txt\n\n  This example reports the utilization for the whole design to the named\n  report in the GUI, but exports the 'Clocking - BUFGCTRL' table to the\n  specified spreadsheet file:\n\n    report_utilization -name utilization_1 -spreadsheet_file util_table.xlsx \\\n    -spreadsheet_table 'Clocking - BUFGCTRL'\n\n  The following example reports the resources utilized by each Pblock in the\n  design, appending the report for each Pblock to a single specified file:\n\n    foreach x [get_pblocks] {\n      puts 'Reporting Pblock: $x ----------------------------------'\n      report_utilization -append -file C:/Data/pblocks_util.txt -pblocks $x\n    }\n\nSee Also:\n\n   *  delete_utilization_results\n",
"archive_project": "archive_project\n\nDescription: \nArchive the current project\n\nSyntax: \narchive_project  [-temp_dir <arg>] [-force] [-exclude_run_results]\n                 [-include_config_settings] [-include_runs_in_progress]\n                 [-include_local_ip_cache] [-quiet] [-verbose] [<file>]\n\nReturns: \ntrue\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-temp_dir]                  specify temporary location to save project \n                               copy to archive\n                               Default: .\n  [-force]                     Overwrite existing archived file\n  [-exclude_run_results]       Exclude run results from the archive\n  [-include_config_settings]   Include current project environment \n                               configuration settings/files in archive\n  [-include_runs_in_progress]  Include run result even if the run is in \n                               progress, this switch will be ignored if \n                               -exclude_run_results is specified\n  [-include_local_ip_cache]    Include IP cache results in the archive\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n  [<file>]                     Name of the archive file\n\nCategories: \nProject\n\nDescription:\n\n  Archives a project to store as backup, or to encapsulate the design and\n  send it to a remote site. The tool parses the hierarchy of the design,\n  copies the required source files, include files, and remote files from the\n  library directories, copies the constraint files, copies the results of the\n  various synthesis, simulation, and implementation runs, and then creates a\n  ZIP file of the project.\n\n  Note: In order to archive the tcl.pre and tcl.post scripts, associated with\n  the synthesis and implementation steps in the Design Run Settings dialog\n  box, you must add these script files to the project as design sources.\n\n  An alternative method of archiving the project is using write_project_tcl\n  to create a Tcl script that will recreate the project in its current form.\n\nArguments:\n\n  -temp_dir <arg> - (Optional) Specify a temporary directory to copy files to\n  when creating the project archive. The temporary directory will be created\n  if it does not exist, and will be emptied when the archive process is\n  complete. By default, the Vivado tool will create a temporary directory\n  inside of the current working directory.\n\n  -force - (Optional) Overwrite an existing ZIP file of the same name. If the\n  ZIP file exists, the tool returns an error unless the -force argument is\n  specified.\n\n  -exclude_run_results - (Optional) Exclude the results of any synthesis or\n  implementation runs. This command can greatly reduce the size of a project\n  archive.\n\n  -include_config_settings - (Optional) Add any initialization Tcl commands\n  (init.tcl) to the archive file under the <project_name>/config_settings\n  folder.\n\n  -include_runs_in_progress - (Optional) Include data in the archive from the\n  directories of incomplete runs. This switch will be ignored if\n  -exclude_run_results is specified.\n\n  -include_local_ip_cache - (Optional) Include the cached IP synthesis\n  results in the project archive. This command only includes cached synthesis\n  results if the IP cache is local to the project rather than remote. Refer\n  to the config_ip_cache command for more information.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Optional) The name of the ZIP file to be created by the\n  archive_project command. If <file> is not specified, a ZIP file with the\n  same name as the project is created.\n\nExamples:\n\n  The following command archives the current project:\n\n    archive_project \n    \n\n  Note: The project archive is named <project_name>.zip because no file name\n  is specified.\n\n  The following example specifies project_3 as the current project, and then\n  archives that project into a file called proj3.zip:\n\n    current_project project_3  \n    archive_project -force -exclude_run_results proj3.zip \n    \n\n  Note: The use of the -force argument causes the tool to overwrite the\n  proj3.zip file if one exists. The use of the -exclude_run_results argument\n  causes the tool to leave any results from synthesis or implementation runs\n  out of the archive. The various runs defined in the project are included in\n  the archive, but not any of the results.\n\n  The following command archives the current project in the specified file,\n  overwrites an existing file if needed, excludes the run results, and\n  includes any configuration settings used when launching the Vivado tool:\n\n    archive_project -force mb1_archive.zip -temp_dir C:/Data/Temp \\  \n       -exclude_run_results -include_config_settings \n    \n\nSee Also:\n\n   *  current_project\n   *  write_project_tcl\n",
"seek": "seek(n)               Tcl Built-In Commands               seek(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       seek - Change the access position for an open channel\n\nSYNOPSIS\n       seek channelId offset ?origin?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Changes the current access position for channelId.\n\n       ChannelId  must  be an identifier for an open channel such\n       as a Tcl standard channel (stdin, stdout, or stderr),  the\n       return  value from an invocation of open or socket, or the\n       result of a channel creation command  provided  by  a  Tcl\n       extension.\n\n       The  offset  and  origin arguments specify the position at\n       which the next read or write  will  occur  for  channelId.\n       Offset must be an integer (which may be negative) and ori-\n       gin must be one of the following:\n\n       start     The new access position  will  be  offset  bytes\n                 from the start of the underlying file or device.\n\n       current   The new access position  will  be  offset  bytes\n                 from  the  current  access  position; a negative\n                 offset moves the access  position  backwards  in\n                 the underlying file or device.\n\n       end       The  new  access  position  will be offset bytes\n                 from the end of the file or device.  A  negative\n                 offset places the access position before the end\n                 of file, and a positive offset places the access\n                 position after the end of file.\n\n       The origin argument defaults to start.\n\n       The  command  flushes  all buffered output for the channel\n       before the command returns, even if the channel is in non-\n       blocking  mode.   It also discards any buffered and unread\n       input.  This command returns an empty  string.   An  error\n       occurs if this command is applied to channels whose under-\n       lying file or device does not support seeking.\n\n       Note that offset values are byte  offsets,  not  character\n       offsets.   Both  seek  and tell operate in terms of bytes,\n       not characters, unlike read.\n\nEXAMPLES\n       Read a file twice:\n              set f [open file.txt]\n              set data1 [read $f]\n              seek $f 0\n              set data2 [read $f]\n              close $f\n              # $data1 == $data2 if the file wasn't updated\n\n       Read the last 10 bytes from a file:\n              set f [open file.data]\n              # This is guaranteed to work with binary data but\n              # may fail with other encodings...\n              fconfigure $f -translation binary\n              seek $f -10 end\n              set data [read $f 10]\n              close $f\n\n\nSEE ALSO\n       file(n), open(n), close(n),  gets(n),  tell(n),  Tcl_Stan-\n       dardChannels(3)\n\n\nKEYWORDS\n       access position, file, seek\n\n\n\nTcl                            8.1                        seek(n)\n",
"while": "while(n)              Tcl Built-In Commands              while(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       while  -  Execute script repeatedly as long as a condition\n       is met\n\nSYNOPSIS\n       while test body\n_________________________________________________________________\n\n\nDESCRIPTION\n       The while command evaluates test as an expression (in  the\n       same  way that expr evaluates its argument).  The value of\n       the expression must a proper boolean value;  if  it  is  a\n       true  value then body is executed by passing it to the Tcl\n       interpreter.  Once body has been  executed  then  test  is\n       evaluated  again, and the process repeats until eventually\n       test evaluates to a false boolean  value.   Continue  com-\n       mands may be executed inside body to terminate the current\n       iteration of the loop, and break commands may be  executed\n       inside  body  to  cause immediate termination of the while\n       command.   The  while  command  always  returns  an  empty\n       string.\n\n       Note: test should almost always be enclosed in braces.  If\n       not, variable substitutions will be made before the  while\n       command   starts  executing,  which  means  that  variable\n       changes made by the loop body will not  be  considered  in\n       the  expression.   This is likely to result in an infinite\n       loop.  If test is enclosed in braces,  variable  substitu-\n       tions  are  delayed  until  the  expression  is  evaluated\n       (before each loop iteration), so changes in the  variables\n       will be visible.  For an example, try the following script\n       with and without the braces around $x<10:\n              set x 0\n              while {$x<10} {\n                  puts 'x is $x'\n                  incr x\n              }\n\nEXAMPLE\n       Read lines from a channel until we get to the end  of  the\n       stream, and print them out with a line-number prepended:\n              set lineCount 0\n              while {[gets $chan line] >= 0} {\n                  puts '[incr lineCount]: $line'\n              }\n\n\nSEE ALSO\n       break(n), continue(n), for(n), foreach(n)\n\n\nKEYWORDS\n       boolean value, loop, test, while\n\n\n\nTcl                                                      while(n)\n",
"close_msg_db": "close_msg_db\n\nDescription: \nClose Message Db file\n\nSyntax: \nclose_msg_db  [-file <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-file]     Message file to be closed\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nReport\n",
"delete_debug_core": "delete_debug_core\n\nDescription: \nDelete a debug core\n\nSyntax: \ndelete_debug_core  [-quiet] [-verbose] <cores>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <cores>     Debug cores to delete\n\nCategories: \nDebug\n\nDescription:\n\n  Removes Vivado Lab Edition debug cores from the current project that were\n  added by the create_debug_core command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cores> - (Required) One or more debug core names to remove from the\n  current project.\n\nExamples:\n\n  The following command deletes the myCore debug core from the current project:\n\n    delete_debug_core myCore \n    \n\n  The following command deletes all debug cores from the current project:\n\n    delete_debug_core [get_debug_cores] \n    \n\n  Note: The get_debug_cores command returns all debug cores as a default.\n\nSee Also:\n\n   *  create_debug_core\n   *  get_debug_cores\n",
"add_example_design_repo": "add_example_design_repo\n\nDescription: \nAdds a repository of user/custom example designs\n\nSyntax: \nadd_example_design_repo  -repo_path <arg> [-quiet] [-verbose]\n\nReturns: \nAdds a repository of user/custom example designs\n\nUsage: \n  Name        Description\n  -----------------------\n  -repo_path  Repo Path that contains Example design\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nIPIntegrator\n",
"create_pin": "create_pin\n\nDescription: \nCreate pins in the current design\n\nSyntax: \ncreate_pin  [-from <arg>] [-to <arg>] -direction <arg> [-quiet] [-verbose]\n            <pins>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-from]     Starting bus index\n  [-to]       Ending bus index\n  -direction  Pin direction\n              Values: IN, OUT, INOUT\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <pins>      Names of pins to create\n\nCategories: \nNetlist\n\nDescription:\n\n  Add single pins or bus pins to the current netlist of an open Synthesized\n  or Implemented Design. You may define attributes of the pin such as\n  direction and bus width, as well as the pin name.\n\n  Bus pins can be created with increasing or decreasing bus indexes, using\n  negative and positive index values.\n\n  The pins must be created on an existing cell instance, or it is considered\n  a top-level pin which should be created using the create_port command. If\n  the instance name of a cell is not specified as part of the pin name, an\n  error will be returned.\n\n  Note: You cannot add pins to library macros, or macro-primitives.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -from <arg> - (Optional) The starting index of a bus pin.\n\n  -to <arg> - (Optional) The ending index of a bus pin.\n\n  -direction - (Required) The direction of the pin. Valid values are IN, OUT,\n  and INOUT.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pins> - (Required) The name of the pins to create. You must specify the\n  pin names hierarchically from the cell instance the pin is assigned to.\n  Pins created at the top-level of the design are ports, and should be\n  created with the create_port command.\n\nExamples:\n\n  The following example creates a new input pin on the cpuEngine module with\n  the specified pin name:\n\n    create_pin -direction IN cpuEngine/inPin \n    \n\n  The following example sets the hierarchy separator, creates a new black box\n  instance of the reference cell, and creates a twenty-four bit bidirectional\n  bus for that instance:\n\n    set_hierarchy_separator |  \n    create_cell -reference dmaBlock -black_box usbEngine0|myDMA  \n    create_pin -direction INOUT -from 0 -to 23 usbEngine0|myDMA|dataBus \n    \n\nSee Also:\n\n   *  create_cell\n   *  create_net\n   *  create_port\n   *  connect_net\n   *  disconnect_net\n   *  remove_cell\n   *  remove_pin\n   *  resize_pin_bus\n   *  set_hierarchy_separator\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"report_control_sets": "report_control_sets\n\nDescription: \nReport the unique control sets in design\n\nSyntax: \nreport_control_sets  [-file <arg>] [-append] [-hierarchical]\n                     [-hierarchical_depth <arg>] [-sort_by <args>]\n                     [-cells <args>] [-return_string] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append to existing file\n  [-hierarchical]        Generates text-based hierarchical report.\n  [-hierarchical_depth]  Specifies the depth level for textual hierarchical \n                         report\n                         Default: 0\n  [-sort_by]             Sort criterion: can be used only when -verbose is \n                         used. Options are clk, clkEn, set. Ex: \n                         report_control_sets -verbose -sort_by {clk clkEn}\n  [-cells]               Cells/bel_instances for which to report control sets\n  [-return_string]       Return report as string\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report the control sets of the current design.\n\n  Control sets are the list of control signals (Clock, CE, SR) for SLICE\n  registers and LUTs. Registers must belong to the same control set in order\n  to be packed into the same device resource. Registers without a control\n  signal cannot be packed into devices with registers having control signals.\n  A high number of control sets can cause difficulty fitting the device and\n  can cause routing congestion and timing issues.\n\n  By default the report_control_sets command returns an abbreviated report\n  indicating only the number of unique control sets. However, the -verbose\n  arguments returns a detailed report of all control sets, for either the\n  whole design or for the specified cells.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -hierarchical - (Optional) Generate a hierarchical report of control sets\n  in the design.\n\n  -hierarchical_depth <args> - (Optional) Specifies the depth of the\n  hierarchy to report when the -hierarchical argument is enabled. The default\n  value is 0, which reports the full design hierarchy.\n\n  -sort_by <args> - (Optional) Sort the detailed report generated by the\n  -verbose argument according to the specified criteria. Valid sort criteria\n  are: clk, clkEn, and set.\n\n  Note: The -sort_by argument is used with -verbose.\n\n  -cells <args> - (Optional) Report control sets for the specified cell\n  objects.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the control sets of the current design,\n  sorted by the clk and clkEn signals:\n\n    report_control_sets -verbose -sort_by {clk clkEn} \n    \n\n  The following example reports the control sets of the specified cells,\n  sorted by clk and set:\n\n    report_control_sets -verbose -sort_by {clk set} -cells [get_cells usb*] \n    \n",
"report_pulse_width": "report_pulse_width\n\nDescription: \nReport pulse width check\n\nSyntax: \nreport_pulse_width  [-file <arg>] [-append] [-name <arg>] [-return_string]\n                    [-warn_on_violation] [-all_violators]\n                    [-significant_digits <arg>] [-limit <arg>] [-min_period]\n                    [-max_period] [-low_pulse] [-high_pulse] [-max_skew]\n                    [-clocks <args>] [-no_header] [-cells <args>] [-rpx <arg>]\n                    [-quiet] [-verbose] [<objects>]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append the results to file, don't overwrite the \n                         results file\n  [-name]                Results name in which to store output\n  [-return_string]       return report as string\n  [-warn_on_violation]   issue a critical warning when the report contains a \n                         timing violation\n  [-all_violators]       Only report pins/ports where check violations occur\n  [-significant_digits]  Number of digits to display: Range: 0 to 3\n                         Default: 3\n  [-limit]               Number of checks of a particular type to report per \n                         clock: Default is 1\n                         Default: 1\n  [-min_period]          Only report min period checks\n  [-max_period]          Only report max period checks\n  [-low_pulse]           Only report min low pulse width checks\n  [-high_pulse]          Only report min high pulse width checks\n  [-max_skew]            Only report max skew checks\n  [-clocks]              List of clocks for which to report min pulse \n                         width/min period checks\n  [-no_header]           Do not generate a report header\n  [-cells]               run report_pulse_width on the specified cell(s)\n  [-rpx]                 Filename to output interactive results to.\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n  [<objects>]            List of objects to check min pulse width with\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Reports the pulse width of the specified clock signals in the clock network\n  and upon reaching the flip-flop. This command also performs high pulse\n  width checking, using maximum delay for the rising edge and minimum delay\n  for the falling edge of the clock. Performs low pulse width checking using\n  minimum delay for the rising edge, and maximum delay for the falling edge.\n  This results in a worst case analysis for the current Synthesis or\n  Implemented Design because it assumes worst-case delays for both rising and\n  falling edges. This command also reports the maximum skew, or maximum\n  timing separation allowed between clock signals.\n\n  The report includes minimum pulse width, maximum pulse width, low pulse\n  width, high pulse width, and max skew checks by default. However, selecting\n  a specific check will disable the other checks unless they are also\n  specified.\n\n  The default report is returned to the standard output, but can be\n  redirected to a file, or to a Tcl string variable for further processing.\n  The report is returned to the standard output by default, unless the -file,\n  -return_string, or -name arguments are specified.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. If the\n  specified file already exists, it will be overwritten by the new report,\n  unless the -append option is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) Specifies the name of the results set for the GUI.\n  Pulse Width reports in the GUI can be deleted by the delete_timing_results\n  command.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -warn_on_violation - (Optional) Specify that a Critical Warning will be\n  generated by the Vivado Design Suite when the report contains a violation.\n\n  -all_violators - (Optional) Report only the <objects> where violations are\n  found.\n\n  -significant_digits <arg> - (Optional) The number of significant digits in\n  the output results. The valid range is 0 to 3. The default setting is 2\n  significant digits.\n\n  -limit <arg> - (Optional) The number of checks of a particular type to\n  report per clock. This is a value >= 1, and the default is 1.\n\n  -min_period - (Optional) Report minimum period checks.\n\n  -max_period - (Optional) Report maximum period checks.\n\n  -low_pulse - (Optional) Report minimum low pulse width checks.\n\n  -high_pulse - (Optional) Report minimum high pulse width checks.\n\n  -max_skew - (Optional) Check the skew constraints between two clock pins.\n\n  Note: The default of the report_pulse_width command is to report\n  min_period, max_period, low_pulse,high_pulse, and max_skew. Specifying one\n  or more of these options configures the command to only report the\n  specified checks.\n\n  -clocks <arg> - (Optional) Clocks to report pulse width and period checks.\n  All clocks are checked if the -clocks option is not specified.\n\n  -no_header - (Optional) Eliminate the report header from the results. This\n  can be especially useful when returning the results as a string with\n  -return_string.\n\n  -cells <arg> - (Option) Generate the report for the specified hierarchical\n  cells. The details of the report will be based on the specified cells\n  rather than the whole design.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) The pin objects to report the pulse width from. All\n  pins are checked if no <objects> are specified.\n\nExamples:\n\n  The following example performs the minimum period and low pulse width\n  check, returning the results to a named results set in the GUI:\n\n    report_pulse_width -min_period -low_pulse -name timing_1 \n    \n\nSee Also:\n\n   *  delete_timing_results\n",
"compile_c": "compile_c\n\nDescription: \nCompile C code into RTL\n\nSyntax: \ncompile_c  [-force] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force generate product state regeneration\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   The objects which need C to RTL conversion\n\nCategories: \nProject, IPFlow, IPIntegrator\n\nDescription:\n\n  In IP cores that are imported from Vivado HLS, the compile_c command\n  detects C, C++, and SystemC files and converts those files to RTL for\n  synthesis by the Vivado Design Suite.\n\n  This lets you use Vivado HLS to describe IP cores in a high-level language,\n  like C or C++ rather than RTL.\n\n  When HLS-based IP cores are generated, they only deliver the C source. When\n  the HLS-based IP is synthesized, either in the out-of-context flow, or with\n  the top-level design, the compile_c command launches Vivado HLS to convert\n  the C source files into RTL, and import the resulting RTL sources back into\n  the design prior to synthesis.\n\n  Note: The compile_c command is automatically called by the Vivado Design\n  Suite when it encounters IP with C code from the Vivado HLS system. You\n  should not need to manually call this command.\n\nArguments:\n\n  -force - (Optional) Force regeneration of the RTL in the HLS-based IP.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) Specify the IP objects in the current project to\n  convert files from C, C++, or SystemC to RTL code.\n\nExample:\n\n  The following example gets the C-language files from the specified IP\n  object and converts them to RTL:\n\n    compile_c [get_ips instance_name] \n    \n\nSee Also:\n\n   *  get_ips\n",
"webtalk_add_data": "webtalk_add_data\n\nDescription: \nInternal task add data to the Webtalk manager's data model.\n\nSyntax: \nwebtalk_add_data  -client <arg> [-context <arg>] -key <arg> [-value <arg>]\n                  [-desc <arg>] [-html <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -client     string value that is the client name. Must have been registered\n              via webtalk_register_client.\n  [-context]  string value that is the context for the data.\n              Default: empty\n  -key        string value that is the key for the data.\n  [-value]    string value that is the value for the data.\n              Default: empty\n  [-desc]     string value that is the description for the data.\n              Default: empty\n  [-html]     string value that is the html tag for the data.\n              Default: empty\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \n\n",
"report_pipeline_analysis": "report_pipeline_analysis\n\nDescription: \nPerform pipeline register insertion analysis and display report.\n\nSyntax: \nreport_pipeline_analysis  [-cells <args>] [-verbose] [-clocks <args>]\n                          [-file <arg>] [-include_paths_to_pipeline] [-append]\n                          [-max_added_latency <arg>] [-report_loops]\n                          [-return_string] [-quiet]\n\nUsage: \n  Name                          Description\n  -----------------------------------------\n  [-cells]                      Analyze each of the specified hierarchical \n                                cells separately and ignore feedback loops \n                                external to the cells.\n  [-verbose]                    Suspend message limits during command \n                                execution\n  [-clocks]                     Filter report output to show only the \n                                specified clocks\n  [-file]                       Filename to output results to. (send output \n                                to console if -file is not used)\n  [-include_paths_to_pipeline]  Report paths to cut. (only available if -file\n                                is used)\n  [-append]                     Append to existing file\n  [-max_added_latency]          Maximum extra latency that can be inserted \n                                into the system (0 = unlimited).\n                                Default: 100\n  [-report_loops]               Report loop information as well\n  [-return_string]              Return report as string\n  [-quiet]                      Ignore command errors\n\nCategories: \nTools, Tcl\n\nDescription:\n\n  This command performs an analysis of a synthesized design, hypothetically\n  inserting pipeline stages in the design and reports the potential frequency\n  (Fmax) increase of each clock domain. The analysis includes a search for\n  loops in the design, which may not be improved by pipelining, and\n  determines if such loops are critical paths in the design.\n\n  Returns a table showing the pipeline stages and the Fmax improvement. The\n  report begins with the original design and adds stages of latency (1, 2,\n  ... ) until there is no further improvement in Fmax. This reports a\n  theoretical upper limit to the frequency performance of the design.\n\n  The analysis is typically run on the un-placed synthesized netlist where\n  the logical netlist structure determines the performance. The report can be\n  run on the top-level design, or on out-of-context (OOC) sub-modules. This\n  report confirms whether the design frequency can be increased, as well as\n  how many pipeline registers must be added to the design to achieve the Fmax\n  improvement.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file.\n\nArguments:\n\n  -cells <args> - (Optional) Perform pipeline analysis for the specified\n  hierarchical cells. Specifying multiple cells causes the pipeline analysis\n  report to be generated for each cell. The cells of interest can be\n  specified by name, or returned as an object using the get_cells command.\n\n  -verbose <arg> - (Optional) Specify the level of detail in the returned\n  report. The argument can be specified with an integer value greater than 0.\n\n  -clocks <args> - (Optional) Specifies the clock domains to analyze when\n  generating the report. If not specified, the timing paths for all clocks\n  are analyzed. This limits results to paths groups involving the specified\n  clock domains.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -include_paths_to_pipeline - (Optional) Report recommendations for paths to\n  pipeline in the current design.\n\n  Note: The -file option must also be specified when this option is used.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -max_added_latency <arg> - (Optional) Specify the additional levels of\n  delay to add through pipeline insertion. The latency is specified as an\n  integer from 1 to 100, representing the maximum number of pipeline stages\n  to consider during the pipeline analysis. The default setting is 0, which\n  directs the tool to insert pipeline delays until there is no further\n  improvement in design performance. The tool analyzes the number of stages\n  up to the specified limit, or until there is not further gain in Fmax.\n\n  -report_loops - (Optional) Report the slowest path within a sequential\n  feedback loop. These are paths starting from and ending at the same\n  sequential cell, and may have zero, one, or more sequential cells in the\n  feedback path. Sequential loops cannot be pipelined.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\nExamples:\n\n  The following example returns the name, period, waveform, and sources of\n  the clocks in the current design:\n\n    report_pipeline_analysis -file C:/Data/FPGA_Design/pipeline_report.txt  \n    \n\nSee Also:\n\n   *  get_cells\n   *  get_clocks\n   *  report_cdc\n   *  report_design_analysis\n",
"create_interface": "create_interface\n\nDescription: \nCreate a new I/O port interface\n\nSyntax: \ncreate_interface  [-parent <arg>] [-quiet] [-verbose] <name>\n\nReturns: \nnew interface object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-parent]   Assign new interface to this parent interface\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name for new I/O port interface\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Creates a new interface for grouping scalar or differential I/O ports.\n\nArguments:\n\n  -parent <arg> - (Optional) Assign the new interface to the specified parent\n  interface.\n\n  Note: If the specified parent interface does not exist, an error will be\n  returned.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the I/O port interface to create.\n\nExamples:\n\n  Create a new USB interface:\n\n    create_interface USB0 \n    \n\n  Create an Ethernet interface within the specified parent interface:\n\n    create_interface -parent Top_Int ENET0 \n    \n\nSee Also:\n\n   *  delete_interface\n   *  create_port\n   *  make_diff_pair_ports\n   *  place_ports\n   *  remove_port\n   *  set_package_pin_val\n   *  split_diff_pair_ports\n",
"create_pr_configuration": "create_pr_configuration\n\nDescription: \nCreate new Configuration\n\nSyntax: \ncreate_pr_configuration  -name <arg> [-partitions <args>] [-greyboxes <args>]\n                         [-use_netlist] [-quiet] [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  -name           Name of the Configuration\n  [-partitions]   List of partition instances and reconfig modules pairs\n  [-greyboxes]    List of instances to which buffers need to be inserted for \n                  all ports\n  [-use_netlist]  Use netlist for getting instances of partition_defs to \n                  creating configurations\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nObject, Partition\n\nDescription:\n\n  Note: You must first define the project as a Dynamic Function eXchange (DFX)\n  project by setting the PR_FLOW property on the project to TRUE, or by using\n  the Tools > Enable Dynamic Function eXchange command.\n\n  The Dynamic Function eXchange flow lets you create Partition Definitions\n  (partitionDefs) from hierarchical cells in a design, and to specify\n  reconfigurable modules (RMs) to be assigned to these partitionDefs to\n  create unique configurations of the design based on the combination of the\n  core design and one or more RMs. The DFX design flow requires the\n  implementation of each PR configuration, resulting in partial bitstreams\n  for the RMs, but complete bitstreams for each integrated configuration.\n  Refer to the Vivado Design Suite User Guide: Dynamic Function eXchange\n  (UG909) for more information.\n\n  The create_pr_configuration command defines the combination of the static\n  logic and the RM to create a unique configuration of the design. The PR\n  configuration is the design that is implemented and the bitstream is\n  generated for.\n\n  You will also need to create implementation runs for the PR configuration\n  using the create_run -pr_config command.\n\n  This command returns the name of the newly created PR configuration, or\n  returns an error if the command fails.\n\nArguments:\n\n  -name <arg> - (Required) The name to give to the new PR configuration.\n\n  -partitions <arg> - (Optional) Specify the partition instance and\n  reconfigurable module to apply to that instance in the PR configuration.\n  The argument must be specified as <partitionInstance>:<RM>, and should be\n  specified as a list when multiple name/value pairs are defined. This format\n  lets you assign different RMs to multiple instances of a single\n  partitionDef in the design.\n\n  -greyboxes <arg> - (Optional) Indicates that the specified partition\n  instances will be defined as greyboxes, which are populated with LUT1s and\n  signal buffers. Refer to the Vivado Design Suite User Guide: Dynamic\n  Function eXchange (UG909) for more information.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example defines a new PR configuration and assigns the\n  partitions:\n\n    create_pr_configuration -name prConfig1 -partitions fftEngine:fftTop \n    \n\n  The following example defines three PR configurations, with two\n  partitionDefs and different RMs assigned to each partition, as well an\n  empty configuration with greyboxes:\n\n    create_pr_configuration -name cfg1 -partitions \\  \n    [list fftEngine:fftTop mgtEngine:mgtTop]  \n    create_pr_configuration -name cfg2 -partitions \\  \n    [list fftEngine:fftTop mgtEngine:mgtBottom]  \n    create_pr_configuration -name cfg3 -partitions { } \\  \n    -greyboxes [list fftEngine mgtEngine] \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  create_reconfig_module\n   *  current_pr_configuration\n   *  delete_pr_configurations\n   *  get_pr_configurations\n   *  report_pr_configuration_analysis\n   *  setup_pr_configurations\n",
"resize_pblock": "resize_pblock\n\nDescription: \nMove, resize, add and remove Pblock site-range constraints\n\nSyntax: \nresize_pblock  [-add <args>] [-remove <args>] [-from <args>] [-to <args>]\n               [-replace] [-locs <arg>] [-quiet] [-verbose] <pblock>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-add]      Add site ranges(s)\n  [-remove]   Remove site ranges(s)\n  [-from]     Site range(s) to move\n  [-to]       Site range destination(s)\n  [-replace]  Remove all existing ranges\n  [-locs]     LOC treatment\n              Default: keep_all\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <pblock>    Pblock to resize\n\nCategories: \nFloorplan, XDC\n\nDescription:\n\n  Place, resize, move, or remove the specified Pblock. The Pblock must have\n  been created using the create_pblock command.\n\n  A Pblock consists of a group of cells that can be assigned to one or more\n  independent or overlapping rectangles. Using the various options defined\n  below, you can add sites to a rectangle, or remove sites from a rectangle,\n  or define a new rectangle to be associated with an existing Pblock.\n\nArguments:\n\n  -add <args> - (Optional) Add the specified range of sites to the Pblock.\n  The range is specified as a rectangle from one corner to the diagonally\n  opposite corner. The specific objects that can be used to define a Pblock\n  range include the following: SLICE, DSP48, RAMB18, RAMB36, CLOCKREGION. For\n  example SLICE_X0Y0:SLICE_X20Y12.\n\n  Note: Multiple site types are added as separate rectangles.\n\n  -remove <args> - (Optional) Remove the specified range of sites from the\n  Pblock. Removing sites from a Pblock may result in the Pblock being broken\n  into multiple smaller rectangles to enforce the requirement that Pblocks\n  are defined as one or more rectangles.\n\n  -from <args> - (Optional) The -from and -to options must be used as a pair,\n  and specify a site or range of sites to relocate from one location to\n  another.\n\n  -to <args> - (Optional) The -from and -to options must be used as a pair,\n  and specify a site or range of sites to relocate from one location to\n  another.\n\n  -locs <args> - (Optional) Specifies how the placed logic in the Pblock will\n  be handled as the Pblock is moved or resized. Valid values are:\n\n   *  keep_all - leave all locs placed as they are currently. This is the\n      default setting when -locs is not specified. Logic that is placed\n      outside of the Pblock will no longer be assigned to the Pblock.\n\n   *  keep_only_fixed - Specifies that only user-placed logic (fixed) will be\n      preserved. Unfixed placed logic will be unplaced.\n\n   *  keep_none - Unplace all logic.\n\n   *  move - Specifies that all locs should be moved relative to the\n      coordinates of the Pblock.\n\n   *  move_unfixed - Specifies that only the unfixed placed elements should\n      be moved. Logic placed by the user (fixed) will not be moved.\n\n   *  trim - Specifies that logic that falls outside of the new Pblock\n      boundaries will be unplaced. Any placed logic that still falls inside\n      of the Pblock boundary will be left placed as it is.\n\n   *  trim_unfixed - Trim only the unfixed placed logic.\n\n  -replace - (Optional) Remove all rectangles associated with the Pblock.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pblock> - (Required) Specify the Pblock to be resized, moved, or removed.\n\nExamples:\n\n  The following example resizes the Pblock by adding a range of SLICEs, and\n  removing other SLICEs, but keeps all instances placed at their current\n  location:\n\n    resize_pblock block3 -add SLICE_X6Y67:SLICE_X11Y71 \\\n       -remove SLICE_X6Y71:SLICE_X7Y71 -locs keep_all\n\n  This example create a Pblock region, and defines the Pblock area by adding\n  a range of CLOCKREGIONs:\n\n    create_pblock pblock_1\n    resize_pblock pblock_1 -add {CLOCKREGION_X0Y10:CLOCKREGION_X1Y11}\n\n  The following example moves the specified Pblock by adding a range of\n  SLICEs, removing the existing range of SLICEs, and trims any placed logic\n  that falls outside the new Pblock. Then it adds a new range of SLICEs and\n  block ram to the specified Pblock in a second separate rectangle:\n\n    resize_pblock block3 -add SLICE_X3Y8:SLICE_X10Y3 \\\n       -remove SLICE_X6Y67:SLICE_X11Y71 -locs trim\n    resize_pblock block3 -add {SLICE_X6Y67:SLICE_X11Y71 \\\n       RAMB18_X0Y2:RAMB18_X1Y4}\n\n  The following example defines an SLR Pblock by specifying complete SLR:\n\n    resize_pblock pblock_SLR0 -add SLR0\n\n  Create a Pblock region and define the Pblock area by adding SLRs.\n\n    create_pblock pblock_slr0\n    resize_pblock pblock_slr0 -add SLR0\n\nSee Also:\n\n   *  add_cells_to_pblock\n   *  create_pblock\n   *  place_pblocks\n",
"set_param": "set_param\n\nDescription: \nSet a parameter value\n\nSyntax: \nset_param  [-quiet] [-verbose] <name> <value>\n\nReturns: \nnewly set parameter value\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Parameter name\n  <value>     Parameter value\n\nCategories: \nPropertyAndParameter\n\nDescription:\n\n  Sets the value of a user-definable configuration parameter. These\n  parameters configure and control various behaviors of the tool. Refer to\n  report_param for a description of currently defined parameters.\n\n  As an example, a specific param that can be defined is the\n  general.maxThreads parameter for the Vivado Design Suite. On multiprocessor\n  systems, the Vivado Design Suite use multi-threading to speed up certain\n  processes, including DRC reporting, static timing analysis, placement, and\n  routing. A default limit applies to all tasks and is based on the operating\n  system. For Windows systems, the default is 2; for Linux systems the\n  default is 8. The limit can be changed as follows:\n\n    set_param general.maxThreads <value>  \n    \n\n  Where <value> is an integer from 1 to 8, inclusive.\n\n  The maximum number of simultaneous threads that can be used also varies by\n  the task being run. You can change the maxThreads parameter prior to\n  running these processes. The maximum number of threads for specific Tcl\n  commands are:\n\n   *  phys_opt_design: 8\n\n   *  place_design: 8\n\n   *  report_drc: 8\n\n   *  report_timing and report_timing_summary: 8\n\n   *  route_design: 8\n\n   *  synth_design: 4\n\n  You can use the reset_param command to restore any parameter that has been\n  modified back to its default setting.\n\n  Note: Setting a specified parameter value to -1 will disable the feature.\n\nArguments:\n\n  <name> - (Required) The name of the parameter to set the value of. You can\n  only set the value of one parameter at a time.\n\n  <value> - (Required) The value to set the specified parameter to.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example sets the parameter defining how many threads to run\n  for multi-threaded processes, including Placement, Routing, and Timing\n  Analysis:\n\n    set_param general.maxThreads 4 \n    \n\n  Note: The Vivado tool supports between 1 to 8 threads. Use get_param to\n  determine the current setting.\n\n  The following example sets a new default value for message limit:\n\n    set_param messaging.defaultLimit 1000 \n    \n\nSee Also:\n\n   *  get_param\n   *  list_param\n   *  report_param\n   *  reset_param\n",
"connect_debug_port": "connect_debug_port\n\nDescription: \nConnect nets and pins to debug port channels\n\nSyntax: \nconnect_debug_port  [-channel_start_index <arg>] [-quiet] [-verbose] <port>\n                    <nets>...\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-channel_start_index]  Connect nets starting at channel index\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  <port>                  Debug port name\n  <nets>                  List of nets or pins\n\nCategories: \nDebug, XDC\n\nDescription:\n\n  Connects a signal from the netlist design to a port on an ILA debug core\n  that was added to the design using the create_debug_core command. The\n  signal can either be connected to a specific channel index on the port, or\n  simply connected to an available channel on the port.\n\n  If you try to connect too many signals to a port, or there are not enough\n  channels to support the connection, the tool will return an error.\n\n  Additional ports can be added to a debug core through the use of the\n  create_debug_port command, and you can increase the available channels on\n  an existing port with the set_property port_width command. See the examples\n  below.\n\n  You can disconnect signals from ports using the disconnect_debug_port\n  command.\n\n  When the debug core has been defined and connected, you can implement the\n  debug core as a block for inclusion in the netlist design. Use the\n  implement_debug_core command to implement the core.\n\nArguments:\n\n  -channel_start_index <arg> - (Optional) The channel index to use for the\n  connection. If more than one signal has been specified, this is the channel\n  index where connections will start to be added. Channel indexes are\n  numbered starting at 0.\n\n  Note: If this argument is not specified, the tool will place connections on\n  the first available channel index.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <port> - (Required) The name of the port to connect signals to. The port\n  must be referenced by the core_name/port_name.\n\n  <nets> - (Required) A list of one or more net names from the netlist design\n  to connect to the specified debug port.\n\nExamples:\n\n  The following example creates a new PROBE port on the myCore debug core,\n  increases the PORT_WIDTH property of the port in order to prepare it to\n  receive the number of signals to be connected, and connects signals to the\n  port starting at the third channel position (index 2).\n\n    create_debug_port myCore PROBE  \n    set_property PORT_WIDTH 8 [get_debug_ports myCore/PROBE1]  \n    connect_debug_port myCore/PROBE1 [get_nets [list m0_ack_o m0_cyc_i \\  \n       m0_err_o m0_rty_o m0_stb_i m0_we_i ]] -channel_start_index 2 \n    \n\n  Note: If you specify too many nets to connect to the available channels on\n  the port, the tool will return an error and will not connect the ports.\n\nSee Also:\n\n   *  create_debug_core\n   *  create_debug_port\n   *  disconnect_debug_port\n   *  get_debug_ports\n   *  get_nets\n   *  implement_debug_core\n   *  set_property\n",
"set_units": "set_units\n\nDescription: \nSet units for checking\n\nSyntax: \nset_units  [-capacitance <arg>] [-current <arg>] [-voltage <arg>]\n           [-power <arg>] [-resistance <arg>] [-altitude <arg>] [-quiet]\n           [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-capacitance]  Capacitance unit in farad. Valid values are from kF-fF.\n                  Default: pF\n  [-current]      Current unit in ampere. Valid values are from kA-fA.\n                  Default: mA\n  [-voltage]      Voltage unit in volt. Valid values are from kV-fV.\n                  Default: V\n  [-power]        Wattage unit in watts. Valid values are from kW-fW.\n                  Default: mW\n  [-resistance]   Resistance unit in ohm. Valid values are from kOhm-fOhm.\n                  Default: ohm\n  [-altitude]     Altitude in metric or standard units.  Valid values are \n                  meters and feet.\n                  Default: meters\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  This command specifies the default units to be assumed when the design is\n  analyzed. Specifically, the -current, -voltage, -power, and -resistance\n  options impact the values returned by the report_power command.\n\n  The set_units command can be used multiple times to define and redefine\n  units. If set_units includes a previously set unit value, the unit is\n  redefined.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -capacitance <arg> - (Optional) Specify the unit of capacitance in Farads.\n  Valid values range from kilofarads (kF) to femtofarads (fF). The default\n  unit of capacitance is picofarads (pF).\n\n  -current <arg> - (Optional) Specify the unit of current in amperes. Valid\n  values range from kiloAmps (kA) to femtoAmps (fA). The default unit of\n  amperes is milliAmps (mA).\n\n  -voltage <arg> - (Optional) Specify the unit of voltage in Volts. Valid\n  values range from kilovolts (kV) to femotovolts (fV). The default unit of\n  voltage is Volts (V).\n\n  -power <arg> - (Optional) Specify the unit of power in watts. Valid values\n  range from kilowatts (kW) to femtowatts (fW). The default unit of power is\n  milliwatts (mW).\n\n  -resistance <arg> - (Optional) Specify the unit of resistance in ohms.\n  Valid values range from kilo-ohm (kOhm) to femto-ohm (fOhm). The default\n  unit of resistance is ohms (Ohm).\n\n  -altitude [ meters | feet ] - (Optional) Specify the unit of altitude as\n  meters or feet. The default unit is meters.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Specify that voltage should be in millivolts and all values should use\n  three digits\n\n    set_units -voltage mV \n    \n\n  The following example changes the default unit for current to Amperes:\n\n    set_units -voltage kV -current A \n    \n\n  Note: The second example of set_units redefines the Voltage units defined\n  in the first example, as well as defining the units for current.\n\nSee Also:\n\n   *  report_power\n   *  set_operating_conditions\n",
"delete_fileset": "delete_fileset\n\nDescription: \nDelete a fileset\n\nSyntax: \ndelete_fileset  [-merge <arg>] [-quiet] [-verbose] <fileset>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-merge]    Fileset to merge files from the deleted fileset into\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <fileset>   Fileset to be deleted\n\nCategories: \nProject, Simulation\n\nDescription:\n\n  Deletes the specified fileset. However, if the fileset cannot be deleted,\n  then no message is returned.\n\nArguments:\n\n  -merge <arg> - (Optional) Specify a different fileset to merge the files\n  from the deleted fileset into. If the -merge option is not specified, then\n  all files in the fileset are removed from the project.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <fileset> - (Required) The name of the fileset to delete. The last\n  constraint or simulation fileset will not be deleted, and no error will be\n  returned under these circumstances.\n\nExamples:\n\n  The following example deletes the sim_2 fileset from the current project.\n\n    delete_fileset sim_2 \n    \n\n  Note: The fileset and all of its files are removed from the project. The\n  files are not removed from the hard drive.\n\nSee Also:\n\n   *  create_fileset\n   *  current_fileset\n",
"write_device_support_archive": "",
"report_incremental_reuse": "report_incremental_reuse\n\nDescription: \nCompute achievable incremental reuse for the given design-checkpoint and report\n\nSyntax: \nreport_incremental_reuse  [-file <arg>] [-append] [-cells <args>]\n                          [-hierarchical] [-hierarchical_depth <arg>]\n                          [-return_string] [-quiet] [-verbose]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append to existing file\n  [-cells]               Report incremental reuse of given list of cells\n  [-hierarchical]        Generates text-based hierarchical incremental reuse \n                         report.\n  [-hierarchical_depth]  Specifies the depth level for textual hierachical \n                         incremental reuse report\n                         Default: 0\n  [-return_string]       Return report as string\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  For use with the incremental implementation flow, this command reports on\n  the amount of design overlap between the current design and an incremental\n  checkpoint loaded using the read_checkpoint -incremental command.\n\n  This report analyzes the loaded incremental checkpoint against the current\n  design to see if the two are sufficiently correlated to drive incremental\n  placement and routing. A low correlation between the current design and the\n  checkpoint should discourage using the checkpoint as a basis for\n  incremental place and route. Refer to the Vivado Design Suite User Guide:\n  Implementation (UG904) for more information on incremental place and route.\n\n  If there is a low correlation of reuse between the current design and the\n  loaded incremental checkpoint, you will need to restore the original design\n  using open_run or read_checkpoint. Alternatively, you can overload the\n  incremental checkpoint in the current design by issuing the read_checkpoint\n  -incremental command again to specify a new incremental checkpoint.\n\n  For Dynamic Function eXchange (DFX) designs, the % of cells matching in\n  Reconfigurable Modules (RM) are reported, the % of cells reused in RMs, and\n  the % of cells fixed in RMs are also reported. There is also a\n  Reconfigurable Modules Summary table added to the report.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified. By default, the report will be written to the Tcl console.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -cells <args> - (Optional) Specifies the cells to use from the DCP file.\n\n  -hierarchical - (Optional) Generate a text-based hierarchical incremental\n  reuse report.\n\n  -hierarchical_depth <arg> - (Optional) Specifies the depth level for the\n  text-based hierarchical incremental reuse report. The default is 0.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example loads an incremental checkpoint into the current\n  design, and then reports the correlation of the loaded incremental\n  checkpoint to the current design:\n\n    read_checkpoint -incremental C:/Data/reuse_checkpoint1.dcp  \n    report_incremental_reuse \n    \n\nSee Also:\n\n   *  open_run\n   *  place_design\n   *  read_checkpoint\n   *  route_design\n",
"report_power": "report_power\n\nDescription: \nRun power estimation and display report\n\nSyntax: \nreport_power  [-no_propagation] [-hier <arg>] [-hierarchical_depth <arg>]\n              [-vid] [-advisory] [-file <arg>] [-name <arg>] [-format <arg>]\n              [-xpe <arg>] [-l <arg>] [-return_string] [-append] [-rpx <arg>]\n              [-quiet] [-verbose]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-no_propagation]      Disables the propagation engine to estimate the \n                         switching activity of nets.\n  [-hier]                Hierarchy report style (logic, power, or all)\n                         Default: power\n  [-hierarchical_depth]  Specifies the depth level for textual hierarchical \n                         report\n                         Default: 4\n  [-vid]                 Voltage ID (VID) of device is used\n  [-advisory]            Dump power advisory text report\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-name]                Output the results to GUI panel with this name\n  [-format]              Format for the power estimation report: text, xml\n                         Default: text\n  [-xpe]                 Output the results to XML file for importing into \n                         XPE\n  [-l]                   Maximum number of lines to report in detailed \n                         reports (l >= 0)\n                         Default: 10\n  [-return_string]       return report as string\n  [-append]              append power report to end of file\n  [-rpx]                 Filename to output interactive results to.\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport, Power\n\nDescription:\n\n  Run power analysis on the current design, and report details of power\n  consumption based on the current operating conditions of the device, and\n  the switching rates of the design. The operating conditions can be set\n  using the set_operating_conditions command. The switching activity can be\n  defined using the set_switching_activity command.\n\n  Switching activity can also be read in from an SAIF file with the read_saif\n  command. The Vivado tool will annotate the design nodes with activity from\n  the SAIF file and estimate power appropriately.\n\n  Power analysis requires an open synthesized design, or implemented design.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -no_propagation - (Optional) For all undefined nodes power analysis uses a\n  vector-less propagation engine to estimate activity. This argument disables\n  the propagation engine for a faster analysis of the design.\n\n  -hier [ power | logic | all ] - (Optional) Displays the summary power\n  consumption for each level of design hierarchy (power), or the power\n  broken-down for different logic elements of the hierarchy (logic), or both\n  the power summary and the different logic elements of the design hierarchy\n  (all). The default is power.\n\n  -hierarchical_depth <arg> - (Optional) Specifies the depth of the hierarchy\n  to report in the 'By hierarchy' section of the power report. The default\n  depth is 4, which means that it will report the top-level and three\n  hierarchical levels of child instances by default. A depth of 0 will report\n  all levels of hierarchy. This option is only for textual power report and\n  does not impact GUI or rpx reports.\n\n  -vid - (Optional) Use the Voltage ID bit of the target device. Voltage\n  identification is a form of adaptive voltage scaling (AVS) that enables\n  certain devices in the Virtex-7 family to be operated at a reduced voltage\n  of 0.9V while delivering the same specified performance of a device\n  operating at the nominal supply voltage of 1.0V. Voltage identification\n  capable devices consume approximately 30% lower worst case (maximum) static\n  power and correspondingly dissipate less heat.\n\n  -advisory - (Optional) Adds the Advisory table to the Power Report checking\n  the design for abnormal switching activity on control signals. This is the\n  same table produced by the Power Constraints Advisor feature in the Vivado\n  IDE.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) Specifies the name of the results set to report\n  the results to.\n\n  -format [ text | xml ] - (Optional) The default format of the output report\n  is text. You can also output an XML report. XML output is only valid when\n  -file is specified, and cannot be used with -append.\n\n  -xpe <arg> - (Optional) Output the results to an XML file for importing\n  into the Xilinx Power Estimator spreadsheet tool. Refer to Xilinx Power\n  Estimator User Guide (UG440) for more information.\n\n  -l <arg> - (Optional) Maximum number of lines to report in the Detailed\n  Reports section. Valid values are greater than or equal to 0.\n\n  Note: This options also triggers additional levels of detail in the\n  Detailed Report section that are not reported when -l is not specified.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example performs power analysis, without net propagation, and\n  writes the results to an XML file for use in XPE:\n\n    report_power -no_propagation -xpe C:/Data/design1.xpe\n\nSee Also:\n\n   *  read_saif\n   *  set_switching_activity\n   *  set_operating_conditions\n",
"write_xdef": "write_xdef\n\nDescription: \nWrite Xilinx physical design exchange to a file.  The XDEF contains placement, clustering, and routing information and relates logical design objects to the device model.\n\nSyntax: \nwrite_xdef  [-print_release_version] [-force] [-no_routing] [-mode <arg>]\n            [-cell <arg>] [-quiet] [-verbose] <file>\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-print_release_version]  Print out the release version of the file\n  [-force]                  Overwrite existing XDEF file if necessary\n  [-no_routing]             Do not write the routing data\n  [-mode]                   (Verilog|VHDL|EDIF) Rename logical cells and nets\n                            in the output XDEF to match names in the given \n                            output file type.\n  [-cell]                   Write the XDEF as if the given cell was the top \n                            level cell in the design.\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n  <file>                    Output file name\n\nCategories: \nFileIO\n",
"write_edf": "",
"write_xdc": "write_xdc\n\nDescription: \nWrites constraints to a Xilinx Design Constraints (XDC) file. The default file extension for a XDC file is .xdc. \n\nSyntax: \nwrite_xdc  [-no_fixed_only] [-constraints <arg>] [-cell <arg>] [-sdc]\n           [-no_tool_comments] [-force] [-exclude_timing] [-exclude_physical]\n           [-add_netlist_placement] [-logic_function_stripped] [-type <args>]\n           [-write_id] [-exclude_cells <args>] [-quiet] [-verbose] [<file>]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-no_fixed_only]            Export fixed and non-fixed placement (by \n                              default only fixed placement is exported)\n  [-constraints]              Include constraints that are flagged invalid\n                              Values: valid, invalid, all\n                              Default: valid\n  [-cell]                     Hierarchical cell for which constraints are \n                              exported.\n  [-sdc]                      Export all timing constriants in SDC compatible\n                              format.\n  [-no_tool_comments]         Don't write verbose tool generated comments to \n                              the xdc when translating from ucf.\n  [-force]                    Overwrite existing file.\n  [-exclude_timing]           Don't export timing constraints.\n  [-exclude_physical]         Don't export physical constraints.\n  [-add_netlist_placement]    Export netlist placement constraints.\n  [-logic_function_stripped]  Write disable_timing constraints which are \n                              associated with having previously run \n                              write_edif with its -logic_function_stripped \n                              option.\n  [-type]                     Types of constraint to export.\n                              Values: timing, io, misc, waiver and physical. \n                              If not specified, all constraints will be \n                              exported.\n  [-write_id]                 Write position number for timing constraints\n  [-exclude_cells]            Don't export constraints scoped to or below the\n                              specified hierarchical cell(s).\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n  [<file>]                    Output constraints to the specified XDC file.\n\nCategories: \nTiming, FileIO\n\nDescription:\n\n  Writes constraints to a Xilinx Design Constraints file (XDC). The XDC can\n  be exported from the top-level, which is the default, or from a specific\n  hierarchical cell.\n\n  Important:The write_xdc command writes the constraints to the specified\n  file in the same order they are added to or executed in the design.\n\n  The write_xdc command lets you write invalid XDC constraints so that you\n  can quickly report constraints that have been ignored by the Vivado Design\n  Suite due to a problem with the way the constraint is written or applied.\n  This is useful for debugging constraint files applied in specific designs.\n\n  This command can be used to create an XDC file from a design with UCF\n  files. All constraints from the active constraint fileset will be exported\n  to the XDC, even if they come from multiple files.\n\n  Tip:The write_xdc command will not convert all UCF constraints into XDC\n  format, and is not intended to automatically convert UCF based designs to\n  XDC. Refer to the Vivado Design Suite Migration Methodology Guide (UG911)\n  for more information on migrating UCF constraints to XDC.\n\nArguments:\n\n  -no_fixed_only - (Optional) Export both fixed and unfixed placement LOCs to\n  the constraint file being written. By default only the fixed LOCs will be\n  written to the XDC file. Fixed LOCs are associated with user-assigned\n  placements, while unfixed LOCs are associated with tool assigned\n  placements.\n\n  -constraints <arg> - (Optional) Export constraints that are flagged valid,\n  invalid, or all constraints (both valid and invalid). The default behavior\n  is to export only valid constraints to the XDC file. Valid values are\n  VALID, INVALID, or ALL.\n\n  -cell <arg> - (Optional) The name of a hierarchical cell in the current\n  design to export the constraints from. The constraints will be written to\n  the specified XDC file relative to the specified cell.\n\n  Note: A design must be open when using this option.\n\n  -exclude_cells <arg> - (Optional) Do not export constraints scoped to or \n  below the hierarchical cells listed in <arg>. All other constraints are \n  exported including constraints which refer hierarchically to the cells or \n  cell contents but are scoped above the specified cells.\n\n  -sdc - (Optional) Export only the timing constraints in a file format that\n  is 100% SDC compatible from the current design. Does not export any other\n  defined constraints.\n\n  -no_tool_comments - (Optional) Do not add tool generated comments into the\n  XDC file.\n\n  -force - (Optional) Overwrite a file of the same name if one already exists.\n\n  -exclude_timing - (Optional) Do not export timing constraints. This results\n  in an XDC file that contains only physical constraints.\n\n  -exclude_physical - (Optional) Do not export physical constraints. This\n  results in an XDC file that contains only timing constraints.\n\n  -add_netlist_placement - (Optional) Include placement constraints that are\n  defined in the netlist file as part of the written XDC file.\n\n  -type <arg> - (Optional) Specifies the types of constraint to export. Valid\n  values are: timing, io, misc, waiver and physical. Multiple types can be\n  specified at one time. If the type is not specified, all constraints will\n  be exported.\n\n  -logic_function_stripped - (Optional) Includes the set_disable_timing\n  constraints which are needed to preserve the constants propagation and\n  timing signoff after stripping the logic function of the LUTs. It should be\n  used in association with write_edif -logic_function_stripped.\n\n  -write_id - (Optional) Includes the constraint position number before each\n  timing constraint. The position number if also reported inside the Timing\n  Constraints Editor (TCE) and some of the Methodology violations.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The file name of the XDC file to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  Write the valid and invalid constraints, including both fixed and unfixed\n  cells, to the specified file.\n\n    write_xdc -no_fixed_only -constraints all C:/Data/design.xdc\n\n  Write only the invalid constraints, including both fixed and unfixed cells,\n  to the specified file.\n\n    write_xdc -constraints invalid C:/Data/bad_constraints.xdc\n\n  Write the physical constraints only, including placement constraints\n  defined in any netlist source files.\n\n    write_xdc -exclude_timing -add_netlist_placement C:/Data/physical.xdc\n\nSee Also:\n\n   *  read_xdc\n",
"resynth_module": "resynth_module\n\nDescription: \nRun synthesis to optimize a supplied verilog module\n\nSyntax: \nresynth_module  [-input <arg>] [-output <arg>] [-quiet] [-verbose]\n\nReturns: \nopt_design\n\nUsage: \n  Name        Description\n  -----------------------\n  [-input]    Input file name - Verilog file containing module to optimize\n  [-output]   Output file name - Verilog file created containing optimized \n              module\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nTools\n",
"delete_timing_results": "delete_timing_results\n\nDescription: \nClear a set of timing results from memory\n\nSyntax: \ndelete_timing_results  [-type <arg>] [-quiet] [-verbose] <name>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-type]     Type of timing results to clear; Values: bus_skew, \n              check_timing, clock_interaction, clock_domain_crossings, \n              config_timing, datasheet, pulse_width, slack_histogram, \n              timing_path, timing_summary\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name for the set of results to clear\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Clear the specified timing results from the named result set. Both the type\n  of the timing report, and the name of the timing report must be specified,\n  or the command will fail.\n\nArguments:\n\n  -type <arg> - (Optional) Specifies the type of timing results to be\n  cleared. The available types are:\n\n   *  bus_skew - Delete the named report_bus_skew report .\n\n   *  check_timing - Delete the named check_timing report.\n\n   *  clock_interaction - Delete the named report_clock_interaction report.\n\n   *  clock_domain_crossing - Delete the named CDC report.\n\n   *  config_timing - Delete the current Timing COnfig report.\n\n   *  datasheet - Delete the named report_datasheet report.\n\n   *  pulse_width - Delete the named report_pulse_width report.\n\n   *  slack_histogram - Delete the named create_slack_histogram report.\n\n   *  timing_path - Delete the named report_timing report.\n\n   *  timing_summary - Delete the named report_timing_summary report.\n\n  Note: The default -type is timing_path, to delete reports generated by the\n  report_timing command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) Specifies the name of the timing results to be cleared.\n\nExamples:\n\n  The following example clears the specified results set from memory:\n\n    delete_timing_results -type clock_interaction clkNets \n    \n\nSee Also:\n\n   *  check_timing\n   *  create_slack_histogram\n   *  report_bus_skew\n   *  report_clock_interaction\n   *  report_cdc\n   *  report_config_timing\n   *  report_datasheet\n   *  report_pulse_width\n   *  report_timing\n   *  report_timing_summary\n",
"register_simulator": "register_simulator\n\nDescription: \nRegister specified simulator with Vivado application\n\nSyntax: \nregister_simulator  -description <arg> [-bootstrap <arg>] [-quiet] [-verbose]\n                    <name>\n\nUsage: \n  Name          Description\n  -------------------------\n  -description  Specify a short description of the simulator\n  [-bootstrap]  Specify the command to 'load' a Tcl app or source a Tcl \n                script\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <name>        Specify the name of the simulator to register\n\nCategories: \nToolLaunch, Simulation\n",
"check_integrity": "check_integrity\n\nDescription: \nCheck the integrity of a design checkpoint\n\nSyntax: \ncheck_integrity  [-quiet] [-verbose] <file>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Design checkpoint file\n\nCategories: \nProject\n",
"set_operating_conditions": "set_operating_conditions\n\nDescription: \nSet operating conditions for power estimation\n\nSyntax: \nset_operating_conditions  [-voltage <args>] [-grade <arg>] [-process <arg>]\n                          [-junction_temp <arg>] [-ambient_temp <arg>]\n                          [-thetaja <arg>] [-thetasa <arg>] [-airflow <arg>]\n                          [-heatsink <arg>] [-thetajb <arg>] [-board <arg>]\n                          [-board_temp <arg>] [-board_layers <arg>]\n                          [-design_power_budget <arg>]\n                          [-supply_current_budget <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-voltage]                List of voltage pairs, e.g., {name value}.  \n                            Supported voltage supplies vary by family.\n  [-grade]                  Temperature grade.  Supported values vary by \n                            family.\n                            Default: commercial\n  [-process]                Process data: typical or maximum\n                            Default: typical\n  [-junction_temp]          Junction Temperature (C): auto|degC\n                            Default: auto\n  [-ambient_temp]           Ambient Temperature (C): default|degC\n                            Default: default\n  [-thetaja]                ThetaJA (C/W): auto|degC/W\n                            Default: auto\n  [-thetasa]                ThetaSA (C/W): auto|degC/W\n                            Default: auto\n  [-airflow]                Airflow (LFM): 0 to 750\n                            Default: varies by family\n  [-heatsink]               Dimensions of heatsink: none, low, medium, high, \n                            custom\n                            Default: medium\n  [-thetajb]                ThetaJB (C/W): auto|degC/W\n                            Default: auto\n  [-board]                  Board type: jedec, small, medium, large, custom\n                            Default: medium\n  [-board_temp]             Board Temperature degC\n  [-board_layers]           Board layers: 4to7, 8to11, 12to15, 16+\n                            Default: 8to11\n  [-design_power_budget]    Design Power Budget (W)\n                            Default: Unspecified\n  [-supply_current_budget]  Sets list of supply current budget 'name value' \n                            pairs.  Supported voltage supplies vary by \n                            family.\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n\nCategories: \nSDC, XDC, Power\n\nDescription:\n\n  Sets the real-world operating conditions that are used when performing\n  analysis of the design. The environmental operating conditions of the\n  device are used for power analysis when running the report_power command.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\n  Operating conditions can be restored to their default values with the use\n  of the reset_operating_conditions command.\n\n  Current operating conditions can be reported with the\n  report_operating_conditions command.\n\nArguments:\n\n  -voltage <arg> - (Optional) List of voltage supply names and their values\n  specified in pairs. Supported voltage supply names and their values vary by\n  family. For example if a family supports a voltage supply named Vccint, you\n  can set the supply voltage to 0.8 with the following argument and value:\n  -voltage {Vccint 0.8}\n\n  Note: If you specify a voltage that is outside the valid operating range\n  for the target device, the set_operating_conditions command can change the\n  device speedgrade to match the specified voltage. This can have an affect\n  on timing analysis. For UltraScale devices, when changing the Vccint\n  voltage, the Vivado tool will automatically change the device to or from a\n  low-voltage device as indicated by the voltage level specified.\n\n  -grade <arg> - (Optional) The temperature grade of the target device.\n  Supported values vary by family. The default value is 'commercial'.\n\n  -process <arg> - (Optional) The manufacturing process characteristics to\n  assume. Valid values are 'typical' or 'maximum'. The default value is\n  'typical'.\n\n  -junction_temp <arg> - (Optional) The device junction temperature used for\n  modeling. Valid values are 'auto' or an actual temperature specified in\n  degrees C. The default value is 'auto'.\n\n  -ambient_temp <arg> - (Optional) The environment ambient temperature in\n  degrees C. The default setting is 'default'.\n\n  -thetaja <arg> - (Optional) The Theta-JA thermal resistance used for\n  modeling in degrees C/W. The default setting is 'auto'.\n\n  -thetasa <arg> - (Optional) The Theta-SA thermal resistance used during\n  modeling in degrees C/W. The default setting is 'auto'.\n\n  -airflow <[0:750]> - (Optional) Linear Feet Per Minute (LFM) airflow to be\n  used for modeling. The default setting varies by device family.\n\n  -heatsink <arg> - (Optional) The heatsink profile to be used during\n  modeling. Valid values are: none, low, medium, high, custom. The default\n  setting is 'medium'.\n\n  -thetajb <arg> - (Optional) The Theta-JB thermal resistance used for\n  modeling in degrees C/W. The default setting is 'auto'.\n\n  -board <arg> - (Optional) The board size to be used for modeling. The valid\n  values are: jedec, small, medium, large, custom. The default value is\n  'medium'.\n\n  -board_temp <arg> - (Optional) The board temperature in degrees Centigrade\n  to be used for modeling.\n\n  -board_layers <arg> - (Optional) The number of board layers to be used for\n  modeling. Valid values are: '4to7' for boards with 4 to 7 layers, '8to11'\n  for boards with 8 to 11 layers, '12to15' for boards with 12 to 15 layers,\n  and '16+' for boards with 16 or more layers. The default setting is\n  '12to15'.\n\n  -design_power_budget <arg> - (Optional) The design power budget in Watts.\n  This value is used by the report_power command to report the difference\n  between the calculated on-chip power and the design power budget. When\n  unspecified, the difference is not reported. The default is 'unspecified'.\n\n  -supply_current_budget <arg> - (Optional) List of voltage supply names and\n  their current budget values specified in pairs. Supported voltage supply\n  names vary by family. For example if a family supports a voltage supply\n  named Vccint, you can set the supply current budget to 10 A with the\n  following argument and value: -supply_current_budget {Vccint 10}\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example specifies an industrial grade device with an ambient\n  operating temperature of 75 degrees C:\n\n    set_operating_conditions -grade industrial -ambient_temp 75 \n    \n\n  The following example sets the supply voltage Vccaux to a value of 1.9:\n\n    set_operating_conditions  -voltage {Vccaux 1.89} \n    \n\n  The following example sets the manufacturing process corner to maximum:\n\n    set_operating_conditions -process maximum \n    \n\n  The following example sets the manufacturing process corner to maximum and\n  the voltage supply Vccint to 0.875:\n\n    set_operating_conditions -process maximum -voltage {Vccint 0.875} \n    \n\nSee Also:\n\n   *  report_operating_conditions\n   *  report_power\n   *  reset_operating_conditions\n",
"write_bitstream": "write_bitstream\n\nDescription: \nWrite a bitstream for the current design\n\nSyntax: \nwrite_bitstream  [-force] [-verbose] [-raw_bitfile] [-no_binary_bitfile]\n                 [-mask_file] [-readback_file] [-logic_location_file]\n                 [-bin_file] [-reference_bitfile <arg>] [-cell <arg>]\n                 [-no_partial_bitfile] [-quiet] <file>\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-force]                Overwrite existing file\n  [-verbose]              Print write_bitstream options\n  [-raw_bitfile]          Write raw bit file (.rbt)\n  [-no_binary_bitfile]    Do not write binary bit file (.bit)\n  [-mask_file]            Write mask file (.msk)\n  [-readback_file]        Write readback files (.rbd, .msd)\n  [-logic_location_file]  Write logic location file (.ll)\n  [-bin_file]             Write binary bit file without header (.bin)\n  [-reference_bitfile]    Reference bitfile to be used for generating partial\n                          bitstream\n  [-cell]                 Create only partial bitstream for named cell\n  [-no_partial_bitfile]   Do not write partial bit files for a Dynamic \n                          Function eXchange design\n  [-quiet]                Ignore command errors\n  <file>                  The name of the .bit file to generate\n\nCategories: \nFileIO\n\nDescription:\n\n  Writes a bitstream file for the current project. This command must be run\n  on an Implemented Design. The bitstream written will be based on the open\n  Implemented Design.\n\n  The files that can be generated by the write_bitstream command include the\n  following:\n\n   *  Bit file: The binary bitstream file (.bit).\n\n   *  Raw (ASCII) Bit file: A raw bit file (.rbt) that contains the same\n      information as the binary bitstream file, but is in ASCII format.\n\n   *  Mask file: A mask file (.msk) that has mask data in place of the\n      configuration data in the bitstream file.\n\n   *  Logic Location file: An ASCII logic location file (.ll) that shows the\n      bitstream position of latches, flip-flops, LUTs, Block RAMs, and I/O\n      block inputs and outputs.\n\n   *  Bin file: A binary file (.bin) containing only the device programming\n      data, without the header information found in the standard binary Bit\n      file.\n\n   *  Reference Bit file: An incremental bitstream file containing only the\n      differences from the current bitstream and a specified reference\n      bitstream.\n\n  The Vivado tool can write a compressed bitstream, if you have enabled\n  compression by setting the BITSTREAM.GENERAL.COMPRESS property on the\n  implemented design. Refer to the Vivado Design Suite User Guide:\n  Programming and Debugging (UG908) for more information on Device\n  Configuration Properties. To enable compression use the following Tcl\n  command:\n\n    set_property BITSTREAM.GENERAL.COMPRESS TRUE [current_design] \n    \n\n  The Vivado Design Suite can also write an encrypted bitstream to protect\n  the intellectual property of the design in the bitstream. To create an\n  encrypted bitstream you must first define the type of encryption to be\n  used, and the encryption key. You can accomplish this most easily using the\n  Encryption page of the Edit Device Properties dialog box in the Vivado IDE.\n  Refer to the Vivado Design Suite User Guide: Programming and Debugging\n  (UG908) for more information on the Edit Device Properties dialog box.\n\n  You can also enable encryption by manually defining the appropriate\n  properties on the implemented design as follows:\n\n    set_property BITSTREAM.ENCRYPTION.ENCRYPT YES [get_designs impl_1]  \n    set_property BITSTREAM.ENCRYPTION.ENCRYPTKEYSELECT EFUSE [get_designs impl_1]  \n    set_property BITSTREAM.ENCRYPTION.KEY0 8675309 [get_designs impl_1] \n    \n\n  The properties associated with encryption include:\n\n   *  BITSTREAM.ENCRYPTION.ENCRYPT - Enables encryption when generating the\n      bitstream with write_bitstream. This property accepts a value of YES or\n      NO.\n\n   *  BITSTREAM.ENCRYPTION.ENCRYPTKEYSELECT - Specifies the method for\n      storing the encryption key on the hardware device. The accepted values\n      are BBRAM and EFUSE, referring to battery-backed SRAM or the eFUSE\n      registers on the device.\n\n      Note: eFUSEs are one-time programmable cells on the hardware device,\n      used to store the factory-programmed Device DNA, AES-GCM encryption\n      key, and user specified values. Refer to the UltraScale Architecture\n      Configuration User Guide (UG570) or 7 Series FPGAs Configuration User\n      Guide (UG470) for more information on eFUSE registers.\n\n   *  BITSTREAM.ENCRYPTION.KEY0 - Specifies the encryption key to apply to\n      the BBRAM, or the eFUSE FUSE_KEY registers on the device. The key can\n      be specified as a 256 bit value, and will be required when accessing an\n      encrypted bitstream to program, verify, or readback the hw_device.\n\n      Note: The write_bitstream command will write an NKY file of the same\n      name as the bitstream file (with the .nky extension) when the\n      BITSTREAM.ENCRYPTION.KEY0 property is specified. This encryption file\n      can then be used in other designs by setting the\n      BITSTREAM.ENCRYPTION.KEYFILE property.\n\n   *  BITSTREAM.ENCRYPTION.KEYFILE - Specifies an encryption key file (NKY or\n      NKZ) as an alternative to setting the ENCRYPTION.KEY0 property. The\n      specified encryption key file will be used during bitstream encryption.\n\n      Note: If both the BITSTREAM.ENCRYPTION.KEY0 and\n      BITSTREAM.ENCRYPTION.KEYFILE properties are defined, the tool will use\n      the encryption key specified by the BITSTREAM.ENCRYPTION.KEY0 property\n      and return a message to that effect.\n\nArguments:\n\n  -force - (Optional) Force the overwrite of an existing bitstream file of\n  the same name.\n\n  -verbose - (Optional) Print details of the options applied to the bitstream\n  when running the write_bitsream command.\n\n  -raw_bitfile - (Optional) Write a raw bit file (.rbt) which contains the\n  same information as the binary bitstream file, but is in ASCII format. The\n  output file will be named <file>.rbt.\n\n  -no_binary_bitfile - (Optional) Do not write the binary bitstream file\n  (.bit). Use this command when you want to generate the ASCII bitstream or\n  mask file, or to generate a bitstream report, without also generating the\n  binary bitstream file.\n\n  -mask_file - (Optional) Write a mask file (.msk), which has mask data where\n  the configuration data is in the bitstream file. This file determines which\n  bits in the bitstream should be compared to readback data for verification\n  purposes. If a mask bit is 0, that bit should be verified against the\n  bitstream data. If a mask bit is 1, that bit should not be verified. The\n  output file will be named <file>.msk.\n\n  -readback_file - (Optional) Lets you perform the Readback function by\n  creating the necessary readback files (.rbd, .msd).\n\n   *  .rbd - An ASCII file that contains only expected readback data,\n      including pad words and frames. No commands are included.\n\n   *  .msd - An ASCII file that contains only mask information for\n      verification, including pad words and frames. No commands are included.\n\n  -logic_location_file - (Optional) Creates an ASCII logic location file\n  (.ll) that shows the bitstream position of latches, flip-flops, LUTs, Block\n  RAMs, and I/O block inputs and outputs. Bits are referenced by frame and\n  bit number in the location file to help you observe the contents of FPGA\n  registers.\n\n  -bin_file - (Optional) Creates a binary file (.bin) containing only device\n  programming data, without the header information found in the standard\n  bitstream file (.bit).\n\n  -reference_bitfile <arg> - (Optional) Read a reference bitstream file, and\n  output an incremental bitstream file containing only the differences from\n  the specified reference file. This partial bitstream file can be used for\n  incrementally programming an existing device with an updated design.\n\n  -cell <arg> - (Optional) Write a partial bitstream file for the specified\n  cell or block level of the design hierarchy. The bitstream file will only\n  include programming data for the specified cell or module.\n\n  -no_partial_bitfile - (Optional) Do not output a partial bit file for a\n  Dynamic Function eXchange (DFX) module or design. Refer to the Vivado Design Suite\n  User Guide: Dynamic Function eXchange (UG909) for more information on the\n  DFX flow.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  <file> - (Required) The name of the bitstream file (.bit) to write. If you\n  do not specify a file extension, the .bit extension will be added by the\n  tool, but you cannot specify an extension other than .bit.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example enables compression and writes a bitstream file of\n  the specified name:\n\n    set_property BITSTREAM.GENERAL.COMPRESS TRUE [current_design]  \n    write_bitstream design1.bit \n    \n\n  The following example writes both the binary and ASCII forms of the\n  bitstream:\n\n    write_bitstream -raw_bitfile C:/Data/design1 \n    \n\n  Note: The appropriate file extension will be added by the tool.\n\nSee Also:\n\n   *  create_hw_bitsream\n   *  launch_runs\n   *  open_impl_design\n   *  program_hw_devices\n   *  readback_hw_devices\n   *  verify_hw_devices\n",
"delete_report_configs": "delete_report_configs\n\nDescription: \nDelete a set of existing configurable report objects\n\nSyntax: \ndelete_report_configs  [-quiet] [-verbose] <report_configs>...\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <report_configs>  List of configurable report objects to delete\n\nCategories: \nObject, Report\n\nDescription:\n\n  Removes specified report objects from the current project. The report\n  objects are created by the create_report_config command.\n\n  This command returns nothing if successful, or an error if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <report_configs> - (Required) Specifies the list of report objects to\n  remove from the current project. The reports must be specified as objects\n  returned by the get_report_configs command.\n\nExamples:\n\n  The following example deletes the specified report_config object:\n\n    delete_report_configs [get_report_configs post_route_datasheet] \n    \n\nSee Also:\n\n   *  create_report_config\n   *  get_report_configs\n",
"report_ram_utilization": "report_ram_utilization\n\nDescription: \nReport configuration about RAMs in design\n\nSyntax: \nreport_ram_utilization  [-append] [-file <arg>] [-csv <arg>] [-return_string]\n                        [-cells <args>] [-include_path_info] [-include_lutram]\n                        [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-append]             Append to existing file\n  [-file]               Filename to output results to. (send output to \n                        console if -file is not used)\n  [-csv]                Write detailed tables to the CSV filename specified\n  [-return_string]      Return report as string\n  [-cells]              Limits the reporting to only those memory arrays that\n                        are contained within the specified cells.\n  [-include_path_info]  Adds path info to the RAM inputs/outputs\n  [-include_lutram]     Adds LUTRAMs to the report\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Reports RAM usage in the current design at any stage after synthesis. It is\n  recommended to run this report after optimizations in opt_design have been\n  run. The report is returned to the standard output, unless the -file or\n  -return_string arguments are used.\n\n  The report details the following tables:\n\n   *  Summary: The Summary table shows the utilization by RAM type, broken\n      down into URAM, Block RAM and LUTRAM. For each RAM type, it is broken\n      down into the individual primitives. Also detailed is the inferred\n      primitive %. If using a synthesis tool other than Vivado Synthesis or\n      instantiation of primitives, then rams will be reported under\n      instantiated primitives.\n\n      The information in the summary can be used to determine if there are\n      imbalances in the utilization of different types of RAMs. Based on the\n      summary, a design might benefit from retargeting heavily used\n      primitives to lesser used ones at the cost of being less efficient.\n\n      Additionally LUTRAM implementation can be evaluated. LUTRAM primitives\n      vary in their efficiency of Bits/LUT. For example, a RAM32M16 uses 8\n      LUTs and can have up to 14 data bits. Using RAM32X1D primitives, 8 LUTs\n      yields a maximum of 8 bits when LUT combined.\n\n   *  Memory Description: The Memory Description table gives an RTL look at\n      the inferred memories. It refers to memories that are inferred directly\n      or indirectly using XPMs. The table is ordered by the total number of\n      bits in the memory array. Items reported are memory type and mapping.\n\n      The mapping format is <report>:<physical>:<depth>x<width>\n\n  The following tables are repeated for inferred and instantiated\n  primitives.Collectively they are refered to as the detailed tables.\n\n   *  Memory Utilization: The Memory Utilization table details how each\n      memory array is mapped to primitives. Also provided is information on\n      how efficient the mapping is and whether the mapping is limited by\n      depth or width.\n\n   *  Memory Performance: The Memory Performance table details performance\n      aspects of the RAM. It includes information whether the output register\n      is used, cascading has been used. If the -include_path_info switch is\n      specified there is extra information on the worst path from each pin\n      listed.\n\n   *  Memory Power: The Memory Power table details what power aspects of the\n      RAM have been used. It includes information on cascading and whether\n      the enable pin is tied to POWER or a signal.\n\n  This command returns the requested report to the Tcl console, to a file, or\n  as a string; or returns an error if it fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. Send\n  output to console if not specified. This command will overwrite any files\n  of the same name without warning.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -csv <arg> - (Optional) Write the report into the specified CSV file.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option is only valid for the text report specified using\n  the -file option and not the CSV file.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -cells <arg> - (Optional) Report the RAM resources utilized by one or more\n  hierarchical cells in the current design. The cells must be specified as\n  objects, using get_cells, rather than by name.\n\n  -include_lutram - (Optional) Include LUTRAMs in the detailed tables. By\n  default, only BlockRAMs and UltraRAMs are reported.\n\n  -include_path_info - (Optional) Include a shorthand representation of the\n  worst case timing path from the given pins under the Memory Performance\n  table of the report.\n\n  Note: This option can add significant runtime to the report.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example provides a full report of the inferred and\n  non-inferred BlockRAM and UltraRAM resources and writes the results to both\n  the specified text and CSV files:\n\n    report_ram_utilization -csv ./ram_util.csv -file ./ram_util.txt\n\n  The following example provides a full report of the inferred and\n  non-inferred BlockRAM, UltraRAM and LUTRAM resources and writes the results\n  to the specified CSV file:\n\n    report_ram_utilization -csv ./ram_util.csv -include_lutram\n\nSee Also:\n\n   *  get_cells\n   *  report_utilization\n",
"reset_msg_config": "reset_msg_config\n\nDescription: \nResets or removes a message control rule previously defined by the set_msg_config command.\n\nSyntax: \nreset_msg_config  [-string <args>] [-id <arg>] [-severity <arg>] [-limit]\n                  [-suppress] [-count] [-default_severity] [-regexp] [-quiet]\n                  [-verbose]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-string]            A qualifier, only a rule created with a matching \n                       string qualifier will be reset/removed\n                       Default: empty\n  [-id]                A qualifier, only a rule created with a matching id \n                       qualifier will be reset/removed\n  [-severity]          A qualifier, only a rule created with a matching \n                       severity qualifier will be reset/removed\n  [-limit]             reset the limit values for message controls that match\n                       the given qualifiers for the current project\n  [-suppress]          stop suppressing messages that match the given \n                       qualifiers for the current project\n  [-count]             reset the count of messages for all message controls \n                       that match the given qualifiers for the current \n                       project. This will prevent messages from being \n                       suppressed by a -limit control until the message count\n                       once again exceeds the specified limit.\n  [-default_severity]  reset the message severity of all messages controls \n                       for the current project that match the given \n                       qualifiers to their default value\n  [-regexp]            The values used for -string are full regular \n                       expressions\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  This command restores the default settings of the message limits or\n  severity for messages returned by the Vivado tool, or can unsuppress\n  previously suppressed messages, as configured by the set_msg_config\n  command.\n\n  You can only perform one reset action for each reset_msg_config command. An\n  error is returned if more than one action is attempted in a single\n  reset_msg_config command.\n\n  Message qualifiers of string, ID, and severity are used to determine which\n  messages are reset by the reset_msg_config command. Multiple qualifiers\n  have an AND relationship; only the messages matching the qualifiers will be\n  reset.\n\n  Note: You must supply at least one message qualifier to identify a message\n  or group of messages to apply the command to, or an error is returned.\n\n  To report the current rule configurations for messages, use the\n  get_msg_config command.\n\nArguments:\n\n  -string <args> - (Optional) Apply the selected operation only to messages\n  that contain the given list of strings. Strings must be enclosed in braces,\n  and multiple strings can be specified separated by spaces:\n\n    {{Vivado} {Synthesis}}\n\n  Note: Strings are case sensitive.\n\n  -id <arg> - (Optional) Reset messages matching the specified message ID.\n  The message ID is included in all returned messages. For example, 'Common\n  17-54' and 'Netlist 29-28'.\n\n  Note: A wildcard * indicates all message IDs should be reset.\n\n  -severity <arg> - Reset messages with the specified message severity. There\n  are five message severities:\n\n   *  ERROR - An ERROR condition implies an issue has been encountered which\n      will render design results unusable and cannot be resolved without user\n      intervention.\n\n   *  {CRITICAL WARNING} - A CRITICAL WARNING message indicates that certain\n      input/constraints will either not be applied or are outside the best\n      practices for a FPGA family. User action is strongly recommended.\n\n      Note: Since this is a two word value, it must be enclosed in {}.\n\n   *  WARNING - A WARNING message indicates that design results may be\n      sub-optimal because constraints or specifications may not be applied as\n      intended. User action may be taken or may be reserved.\n\n   *  INFO - An INFO message is the same as a STATUS message, but includes a\n      severity and message ID tag. An INFO message includes a message ID to\n      allow further investigation through answer records if needed.\n\n   *  STATUS - A STATUS message communicates general status of the process\n      and feedback to the user regarding design processing. A STATUS message\n      does not include a message ID.\n\n  -limit - (Optional) Reset the message limit for messages matching the\n  string, ID, or severity qualifiers.\n\n  -suppress - (Optional) Reset, or unsuppress messages matching the string,\n  ID, or severity qualifiers.\n\n  -count - (Optional) Reset the message count for messages matching the\n  string, ID, or severity qualifiers.\n\n  -default_severity - (Optional) Restore the default message severity for\n  messages matching the string, ID, or severity qualifiers.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example changes the severity of the specified message ID to a\n  Critical Warning, and then resets the message to its default severity:\n\n    set_msg_config -id 'Common 17-81' -new_severity 'CRITICAL WARNING'  \n    reset_msg_config -id 'Common 17-81' -default_severity \n    \n\n  This example changes the severity of messages with the specified message\n  ID, gets the current message configuration rules, and then shows two\n  different command forms to reset the specific rule and restore the message:\n\n    set_msg_config -id 'Common 17-361' -severity INFO -new_severity WARNING  \n    get_msg_config -rules  \n    ---------------------  \n    Message control rules currently in effect are:  \n    Rule Name  Rule                                                  Current Message Count    \n    1  set_msg_config -ruleid {1} -id {Common 17-361} -severity {INFO} -new_severity {WARNING} 0  \n    ---------------------  \n    reset_msg_config -id 'Common 17-361' -default_severity    \n    reset_msg_config -ruleid {1}\n\n  Note: In the preceding example, only one of the reset_msg_config commands\n  is needed to reset the message.\n\nSee Also:\n\n   *  get_msg_config\n   *  set_msg_config\n",
"copy_run": "copy_run\n\nDescription: \n(User-written application)\nCopy a run from an already existing run, source-run, to a new copy of that run, destination-run.\n\n\nSyntax: \ncopy_run  [-parent_run <arg>] [-verbose] -name <arg> [-quiet] <run>\n\nReturns: \nThe new run object\n\n\nUsage: \n  Name           Description\n  --------------------------\n  [-parent_run]  Specify the synthesis run for the new implementation run, \n                 accepts name or run object (Default: same as source run)\n                 Default: None\n  [-verbose]     Print detailed information as the copy progresses\n  -name          Specify the name of the new run\n  [-quiet]       Ignore command errors\n  <run>          The run to be copied, accepts name or run object\n\nCategories: \nxilinxtclstore, projutils, user-written\nDescription:\n\n  Copies a preexisting run.\n\nArguments:\n\n  -name <arg> - (Required) Specify the name for the new run.\n\n  -parent_run <arg> - (Optional) Specify the synthesis run for the new \n  implementation run. Can be either the run name or the run object.\n\n  -verbose - (Optional) Print detailed information as the copy progresses.\n\n  <run> - (Required) The run to be copied. . Can be either the run name or the \n  run object.\n\nExamples:\n\n  The following example will copy synth_1 run into a new synth_2 run:-\n  \n  % copy_run -name synth_2 [get_runs synth_1] \n  \n  The following example will copy impl_1 run into a new impl_2 run, and it \n  will set the copied run's parent run to synth_2:-\n  \n  % copy_run -name impl_3 [get_runs impl_1] -parent_run synth_2\n\nSee Also:\n\n   *  create_runs\n   *  current_run\n   *  get_runs\n",
"synth_design": "synth_design\n\nDescription: \nSynthesize a design using Vivado Synthesis and open that design\n\nSyntax: \nsynth_design  [-name <arg>] [-part <arg>] [-constrset <arg>] [-top <arg>]\n              [-include_dirs <args>] [-generic <args>] [-verilog_define <args>]\n              [-flatten_hierarchy <arg>] [-gated_clock_conversion <arg>]\n              [-directive <arg>] [-rtl] [-lint] [-file <arg>] [-dataflow]\n              [-bufg <arg>] [-no_lc] [-shreg_min_size <arg>] [-mode <arg>]\n              [-fsm_extraction <arg>] [-rtl_skip_mlo] [-rtl_skip_ip]\n              [-rtl_skip_constraints] [-srl_style <arg>]\n              [-keep_equivalent_registers] [-resource_sharing <arg>]\n              [-cascade_dsp <arg>] [-control_set_opt_threshold <arg>]\n              [-incremental_mode <arg>] [-max_bram <arg>] [-max_uram <arg>]\n              [-max_dsp <arg>] [-max_bram_cascade_height <arg>]\n              [-max_uram_cascade_height <arg>] [-retiming] [-no_retiming]\n              [-no_srlextract] [-assert] [-no_timing_driven] [-sfcu]\n              [-debug_log] [-quiet] [-verbose]\n\nReturns: \ndesign object\n\nUsage: \n  Name                          Description\n  -----------------------------------------\n  [-name]                       Design name\n  [-part]                       Target part\n  [-constrset]                  Constraint fileset to use\n  [-top]                        Specify the top module name\n  [-include_dirs]               Specify verilog search directories\n  [-generic]                    Specify generic parameters. Syntax: -generic \n                                <name>=<value> -generic <name>=<value> ...\n  [-verilog_define]             Specify verilog defines. Syntax: \n                                -verilog_define <macro_name>[=<macro_text>] \n                                -verilog_define <macro_name>[=<macro_text>] \n                                ...\n  [-flatten_hierarchy]          Flatten hierarchy during LUT mapping. Values:\n                                full, none, rebuilt\n                                Default: rebuilt\n  [-gated_clock_conversion]     Convert clock gating logic to flop enable. \n                                Values: off, on, auto\n                                Default: off\n  [-directive]                  Synthesis directive. Values: default, \n                                RuntimeOptimized, AreaOptimized_high, \n                                AreaOptimized_medium, AlternateRoutability, \n                                AreaMapLargeShiftRegToBRAM, \n                                AreaMultThresholdDSP, FewerCarryChains, \n                                PerformanceOptimized, LogicCompaction, \n                                PowerOptimized_high, PowerOptimized_medium\n                                Default: default\n  [-rtl]                        Elaborate and open an rtl design\n  [-lint]                       Run RTL Linter on source files. Recommended \n                                to run before RTL simulation and synthesis to\n                                identify potential issues at early design \n                                cycle.\n  [-file]                       Linter Filename to output results to. (send \n                                output to console if -file is not used)\n  [-dataflow]                   Present the Dataflow view of the RTL design\n  [-bufg]                       Max number of global clock buffers used by \n                                synthesis\n                                Default: 12\n  [-no_lc]                      Disable LUT combining. Do not allow combining\n                                LUT pairs into single dual output LUTs.\n  [-shreg_min_size]             Minimum length for chain of registers to be \n                                mapped onto SRL\n                                Default: 3\n  [-mode]                       The design mode. Values: default, \n                                out_of_context\n                                Default: default\n  [-fsm_extraction]             FSM Extraction Encoding. Values: off, \n                                one_hot, sequential, johnson, gray, \n                                user_encoding, auto\n                                Default: auto\n  [-rtl_skip_mlo]               Skip mandatory logic optimization for RTL \n                                elaboration of the design; requires -rtl \n                                option.\n  [-rtl_skip_ip]                Exclude subdesign checkpoints in the RTL \n                                elaboration of the design; requires -rtl \n                                option.\n  [-rtl_skip_constraints]       Do not load and validate constraints against \n                                elaborated design; requires -rtl option.\n  [-srl_style]                  Static SRL Implementation Style. Values: \n                                register, srl, srl_reg, reg_srl, reg_srl_reg\n  [-keep_equivalent_registers]  Prevents registers sourced by the same logic \n                                from being merged. (Note that the merging can\n                                otherwise be prevented using the synthesis \n                                KEEP attribute)\n  [-resource_sharing]           Sharing arithmetic operators. Value: auto, \n                                on, off\n                                Default: auto\n  [-cascade_dsp]                Controls how adders summing DSP block outputs\n                                will be implemented. Value: auto, tree, force\n                                Default: auto\n  [-control_set_opt_threshold]  Threshold for synchronous control set \n                                optimization to lower number of control sets.\n                                Valid values are 'auto' and non-negative \n                                integers. The higher the number, the more \n                                control set optimization will be performed \n                                and fewer control sets will result. To \n                                disable control set optimization completely, \n                                set to 0.\n                                Default: auto\n  [-incremental_mode]           Mode of incremental synthesis \n                                (aggressive/default/off/quick)\n                                Default: default\n  [-max_bram]                   Maximum number of block RAM allowed in \n                                design. (Note -1 means that the tool will \n                                choose the max number allowed for the part in\n                                question)\n                                Default: -1\n  [-max_uram]                   Maximum number of Ultra RAM blocks allowed in\n                                design. (Note -1 means that the tool will \n                                choose the max number allowed for the part in\n                                question)\n                                Default: -1\n  [-max_dsp]                    Maximum number of block DSP allowed in \n                                design. (Note -1 means that the tool will \n                                choose the max number allowed for the part in\n                                question)\n                                Default: -1\n  [-max_bram_cascade_height]    Controls the maximum number of BRAM that can \n                                be cascaded by the tool. (Note -1 means that \n                                the tool will choose the max number allowed \n                                for the part in question)\n                                Default: -1\n  [-max_uram_cascade_height]    Controls the maximum number of URAM that can \n                                be cascaded by the tool. (Note -1 means that \n                                the tool will choose the max number allowed \n                                for the part in question)\n                                Default: -1\n  [-retiming]                   For non-Versal devices where retiming is off \n                                by default. Seeks to improve circuit \n                                performance for intra-clock sequential paths \n                                by automatically moving registers (register \n                                balancing) across combinatorial gates or \n                                LUTs.  It maintains the original behavior and\n                                latency of the circuit and does not require \n                                changes to the RTL sources.\n  [-no_retiming]                Turn off retiming feature for Versal devices \n                                where retiming is on by default. If both \n                                -retiming and -no_retiming are set, retiming \n                                will not occur\n  [-no_srlextract]              Prevents the extraction of shift registers so\n                                that they get implemented as simple registers\n  [-assert]                     Enable VHDL assert statements to be \n                                evaluated. A severity level of failure will \n                                stop the synthesis flow and produce an error.\n  [-no_timing_driven]           Do not run in timing driven mode\n  [-sfcu]                       Run in single-file compilation unit mode\n  [-debug_log]                  Print detailed log files for debugging\n  [-quiet]                      Ignore command errors\n  [-verbose]                    Suspend message limits during command \n                                execution\n\nCategories: \nTools\n\nDescription:\n\n  Directly launches the Vivado synthesis engine to compile and synthesize a\n  design in either Project Mode or Non-Project Mode in the Vivado Design\n  Suite. Refer to the Vivado Design Suite User Guide: Design Flows Overview\n  (UG892) for a complete description of Project Mode and Non-Project Mode.\n\n  Vivado synthesis can be launched directly with the synth_design command in\n  the Non-Project Mode of the Vivado Design Suite.\n\n  Tip: The synth_design can be multi-threaded to speed the process. Refer to\n  the set_param command for more information on setting the\n  general.maxThreads parameter.\n\n  In Project Mode, synthesis should be launched from an existing synthesis\n  run created with the create_run command. The run is launched using the\n  launch_runs command, and this in turn calls synth_design for Vivado\n  synthesis.\n\n  You can also use the synth_design command to elaborate RTL source files,\n  and open an elaborated design:\n\n    synth_design -rtl -name rtl_1\n\n  This command returns a transcript of the synthesis process, or returns an\n  error if it fails.\n\nArguments:\n\n  -name <arg> - (Optional) This is the name assigned to the synthesized\n  design when it is opened by the Vivado tool after synthesis has completed.\n  This name is for reference purposes, and has nothing to do with the\n  top-level of the design or any logic contained within.\n\n  -part <arg> - (Optional) The target Xilinx device to use for the design. If\n  the part is not specified the default part assigned to the project will be\n  used.\n\n  -constrset <arg> - (Optional) The name of the XDC constraints to use when\n  synthesizing the design. Vivado synthesis requires the use of XDC, and does\n  not support UCF. The -constrset argument must refer to a constraint fileset\n  that exists. It cannot be used to create a new fileset. Use the\n  create_fileset command for that purpose.\n\n  -top <arg> - (Optional) The top module of the design hierarchy.\n\n  Important: If you use the find_top command to define the -top option, be\n  sure to specify only one top if find_top returns multiple prospects. See\n  the examples below.\n\n  -include_dirs <args> - (Optional) The directories to search for Verilog\n  `include files. You can specify multiple directories by creating a list to\n  contain them:\n\n    -include_dirs {C:/data/include1 C:/data/include2}\n\n  -generic <name>=<value> - (Optional) The value of a VHDL generic entity, or\n  of a Verilog parameter. The -generic option can be used to override the\n  assigned values of parameters in the RTL design sources. However it can\n  only override parameters at the top level of the design. The parameters of\n  lower-level modules can only be overridden at the time of instantiation and\n  not by the -generic option. The syntax for the -generic argument is\n  <name>=<value>, specifying the name of the generic or parameter, and the\n  value to be assigned. Repeat the -generic option multiple times in the\n  synth_design command for each generic or parameter value to be defined:\n\n    synth_design -generic width=32 -generic depth=512 ...\n\n  Important: When specifying binary values for boolean or std_logic VHDL\n  generic types, you must specify the value using the Verilog bit format,\n  rather than standard VHDL format:\n\n    0 = 1`b0\n    01010000 = 8`b01010000\n\n  -verilog_define <name>=<text> - (Optional) Set values for Verilog `define,\n  and `ifdef, statements. The syntax for the -verilog_define argument is\n  <name>=<text>, specifying the name of the define directive, and the value\n  to be assigned. The argument can be reused multiple times in a single\n  synth_design command.\n\n    synth_design -verilog_define <name>=<value> -verilog_define <name>=<value> ...\n\n  -flatten_hierarchy <arg> - (Optional) Flatten the hierarchy of the design\n  during LUT mapping. The valid values are:\n\n   *  rebuilt - This will attempt to rebuild the original hierarchy of the\n      RTL design after synthesis has completed. This is the default setting.\n\n   *  full - Flatten the hierarchy of the design.\n\n   *  none - Do not flatten the hierarchy of the design. This will preserve\n      the hierarchy of the design, but will also limit the design\n      optimization that can be performed by the synthesis tool.\n\n  -gated_clock_conversion <arg> - (Optional) Convert clock gating logic to\n  use the flop enable pins when available. This optimization can eliminate\n  logic and simplify the netlist. Refer to the GATED_CLOCK property in the\n  Vivado Design Suite User Guide: Synthesis (UG901) for more information.\n  Valid values for this option are:\n\n   *  off - Disables the conversion of clock gating logic during synthesis,\n      regardless of the use of the GATED_CLOCK property in the RTL design.\n\n   *  on - Converts clock gating logic based on the use of the GATED_CLOCK\n      property in the RTL design.\n\n   *  auto - lets Vivado synthesis perform gated clock conversion if either\n      the GATED_CLOCK property is present in the RTL, or if the Vivado tool\n      detects a gate with a valid clock constraint.\n\n  -directive <arg> - (Optional) Direct synthesis to achieve specific design\n  objectives. Only one directive can be specified for a single synth_design\n  command, and values are case-sensitive. Valid values are:\n\n   *  default - Run the default synthesis process.\n\n   *  runtimeoptimized - Perform fewer timing optimizations and eliminate\n      some RTL optimizations to reduce synthesis run time.\n\n   *  AreaOptimized_high - Perform general area optimizations including\n      AreaMapLargeShiftRegToBRAM, AreaThresholdUseDSP directives.\n\n   *  AreaOptimized_medium - Perform general area optimizations including\n      forcing ternary adder implementation, applying new thresholds for use\n      of carry chain in comparators, and implementing area optimized\n      multiplexers.\n\n   *  AlternateRoutability - Algorithms to improve routability with reduced\n      use of MUXFs and CARRYs.\n\n   *  AreaMapLargeShiftRegToBRAM - Detects large shift registers and\n      implements them using dedicated blocks of RAM.\n\n   *  AreaMultThresholdDSP - Lower threshold for dedicated DSP block\n      inference for packing multipliers.\n\n   *  FewerCarryChains - Higher operand size threshold to use LUTs instead of\n      the carry chain.\n\n   *  PerformanceOptimized - Perform general timing optimizations including\n      logic level reduction at the expense of area.\n\n   *  LogicCompaction - Configure LUTs and Carry chains for multipliers in a\n      way that makes it easier for the placer to pack these structures into\n      small areas.\n\n  -rtl - (Optional) Elaborate the HDL source files and open the RTL design.\n  In designs that use out-of-context (OOC) modules, such as IP from the\n  Xilinx IP catalog, the Vivado Design Suite will import synthesized design\n  checkpoints (DCP) for the OOC modules in the design, and import associated\n  constraint files (XDC) into the elaborated design. However, you can disable\n  the default behavior using the -rtl_skip_ip and -rtl_skip_constraints\n  options.\n\n  -lint - Run RTL Linter on source files against various rules. The following\n  are the supported rules.\n\n   *  ASSIGN-1(arithmetic overlfow)\n\n   *  ASSIGN-2(mixed operand signedness)\n\n   *  ASSIGN-3(shift overflow)\n\n   *  ASSIGN-4(unused scalar)\n\n   *  ASSIGN-5(bit in array not set)\n\n   *  ASSIGN-6(bit in array not used)\n\n   *  ASSIGN-7(mult-assign/multi-driver)\n\n   *  QOR-1(arithmetic operator not mergeable)\n\n   *  INFER-1(inferred latch)\n\n   *  INFER-2(incomplete case statement)\n\n   *  INFER-3(case equality)\n\n   *  CLOCK-1(module using both clock edges)\n\n   *  RESET-1(mixed asyncreset)\n\n   *  RESET-2(missing async reset logic)\n\n  Create_waiver -type LINT can be used to waive rules or individual linter\n  warnings. For example,\n\n    create_waiver -type LINT -id ASSIGN-3 -description {waive all warnings from ASSIGN-3 check}\n\n  -dataflow - (Optional) Elaborate the HDL source files and open the Dataflow\n  design. The Dataflow design is an abstracted view of the RTL that\n  simplifies tracing high bandwidth data paths through the design. Unlike the\n  fully elaborated view, it does not show low level logical items such as\n  LUTs and registers but will display cells that can significantly impact\n  placement later in the design flow such as RAMs, DSPs and other IP blocks.\n\n  Tip: It is recommended to also create a fully elaborated view and utilize\n  cross probing for more design details. This must be generated using\n  following two synth_design commands.\n\n   *  synth_design -rtl -name rtl_1\n\n   *  synth_design -dataflow -name dfv_1\n\n  -rtl_skip_ip - (Optional) This option requires the use of the -rtl option.\n  When elaborating the RTL design, this option causes the Vivado Design Suite\n  to skip loading the DCP files for OOC modules in the design, and instead\n  load a stub file to treat the OOC modules as black boxes. This can\n  significantly speed elaboration of the design.\n\n  Tip: An OOC synthesis run will be needed in either case to generate the DCP\n  file that is loaded during elaboration, or to generate the stub file needed\n  for the black box.\n\n  -rtl_skip_constraints - (Optional) This option requires the use of the -rtl\n  option. When elaborating the RTL design, this option causes the Vivado\n  Design Suite to skip loading any design constraints (XDC) into the\n  elaborated design. This can significantly speed elaboration of the design.\n\n  -bufg <arg> - (Optional) Specify the maximum number of global clock buffers\n  to be used on clock nets during synthesis. Specified as a value >= 1, which\n  should not exceed the BUFG count on the target device. The default value is\n  12.\n\n  Tip: Vivado synthesis infers up to the number of BUFGs specified, including\n  those instantiated in the RTL source. For example, with the default setting\n  of -bufg 12, if there are three BUFGs instantiated in the RTL, the tool\n  infers up to nine more for a total of 12.\n\n  -no_lc - (Optional) Disable the default LUT combining feature of Vivado\n  synthesis.\n\n  -shreg_min_size <arg> - (Optional) Specified as an integer, this is the\n  minimum length for a chain of registers to be mapped onto SRL. The default\n  is three.\n\n  -mode [ default | out_of_context ] - (Optional) Out of Context mode\n  specifies the synthesis of an IP module, or block module, for use in an\n  out-of-context design flow. This mode turns off I/O buffer insertion for\n  the module, and marks the module as OOC, to facilitate its use in the tool\n  flow. The block can also be implemented for analysis purposes. Refer to the\n  Vivado Design Suite User Guide: Designing with IP (UG896) or the Vivado\n  Design Suite User Guide: Hierarchical Design (UG905) for more information.\n\n  -fsm_extraction <arg> - (Optional) Finite state machine (FSM) encoding is\n  automatic (auto) in Vivado synthesis by default. This option enables state\n  machine identification and specifies the type of encoding that should be\n  applied. Valid values are: off, one_hot, sequential, johnson, gray, auto.\n  Automatic encoding (auto) allows the tool to choose the best encoding for\n  each state machine identified. In this case, the tool may use different\n  encoding styles for different FSMs in the same design.\n\n  Note: Use -fsm_extraction off to disable finite state machine extraction in\n  Vivado synthesis. This will override the FSM_ENCODING property when\n  specified.\n\n  -keep_equivalent_registers - (Optional) Works like the KEEP property to\n  prevent the merging of registers during optimization.\n\n  -resource_sharing <arg> - (Optional) Share arithmetic operators like adders\n  or subtractors between different signals, rather than creating new\n  operators. This can result in better area usage when it is turned on. Valid\n  values are: auto, on, off. The default is auto.\n\n  -cascade_dsp [ auto | tree | force ] - (Optional) Specifies how to\n  implement adders that add DSP block outputs. Valid values include auto,\n  tree, force. The default setting is auto.\n\n  -control_set_opt_threshold <arg> - (Optional) Threshold for synchronous\n  control set optimization to decrease the number of control sets. Specifies\n  how large the fanout of a control set should be before it starts using it\n  as a control set. For example, if -control_set_opt_threshold is set to 10,\n  a synchronous reset that only fans out to 5 registers would be moved to the\n  D input logic, rather than using the reset line of a register. However, if\n  -control_set_opt_threshold is set to 4, then the reset line is used. This\n  option can be specified as 'auto', or as an integer from 0 to 16. The\n  default setting is 'auto', and the actual threshold used under 'auto' can\n  vary depending on the selected device architecture.\n\n  -incremental - (Optional) Specify a DCP file for the incremental\n  compilation flow. In the incremental synthesis flow, the netlist from the\n  incremental DCP is applied to the design objects in the current design to\n  reuse existing synthesis results when possible.\n\n  -max_bram <arg> - (Optional) Specify the maximum number of Block RAM to add\n  to the design during synthesis. Specify a value >= 1, which should not\n  exceed the available Block RAM count on the target device. If a value of -1\n  is used, the Vivado synthesis tool will not exceed the available Block RAM\n  limit of the device. The default value is -1.\n\n  Note: A value of 0 directs Vivado synthesis to not infer Block RAMs in the\n  design, but is not a recommended value.\n\n  -max_uram <arg> - (Optional) Specify the maximum number of Ultra RAM blocks\n  (URAM) to add to the design during synthesis. Specify a value >= 1, which\n  should not exceed the available URAM count on the target device. If a value\n  of -1 is used, the Vivado synthesis tool will not exceed the available URAM\n  block limit of the device. The default value is -1.\n\n  Note: A value of 0 directs Vivado synthesis to not infer URAM in the\n  design, but is not a recommended value.\n\n  -max_dsp <arg> - (Optional) Specify the maximum number of DSPs to add to\n  the design during synthesis. Specify a value >= 1, which should not exceed\n  the available DSP count on the target device. If a value of -1 is used, the\n  Vivado synthesis tool will not exceed the available limit of the device.\n  The default value is -1.\n\n  Note: A value of 0 directs Vivado synthesis to not infer DSPs in the\n  design, but is not a recommended value.\n\n  -max_bram_cascade_height <arg> - (Optional) Controls the maximum number of\n  Block RAM that can be cascaded by the tool. A value of -1 lets Vivado\n  synthesis choose up to the maximum number allowed for the target part. The\n  default value is -1.\n\n  -max_uram_cascade_height <arg> - (Optional) Controls the maximum number of\n  URAM that can be cascaded by the tool. A value of -1 lets Vivado synthesis\n  choose up to the maximum number allowed for the target part. The default\n  value is -1.\n\n  -retiming - (Optional) For non-Versal devices who do not have retiming\n  turned On by default. Seeks to improve circuit performance for intra-clock\n  sequential paths by automatically moving registers (register balancing)\n  across combinatorial gates or LUTs. It maintains the original behavior and\n  latency of the circuit and does not require changes to the RTL sources.\n\n  Note: If both -retiming and -no_retiming are set, retiming will not occur.\n\n  -no_retiming - (Optional). This is for Versal devices where retiming is On\n  by default. Turns off the retiming feature.\n\n  Note: If both -retiming and -no_retiming are set, retiming will not occur.\n\n  -no_srlextract - (Optional) Prevents the extraction of shift registers so\n  that they get implemented as simple registers.\n\n  -assert - (Optional) Enable VHDL assert statements to be evaluated. A\n  severity level of failure stops the synthesis flow and produce an error.\n\n  -no_timing_driven - (Optional) Disables the default timing driven synthesis\n  algorithm. This results in a reduced synthesis runtime, but ignores the\n  effect of timing on synthesis.\n\n  -debug_log - (Optional) Prints an extended log file that is useful for\n  debugging. Will have extra information about logic that was trimmed along\n  with sections on the sizes of the RTL partitions and RTL Components. In\n  addition, there will be more INFO/WARNING messages that are often ignored.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example uses the set_property command to define the target\n  part for the active project, then elaborates the source files and opens an\n  RTL design:\n\n    set_property part xc7vx485tffg1158-1 [current_project]\n    synth_design -rtl -name rtl_1\n\n  Note: The default source set, constraint set, and part will be used in this\n  example.\n\n  The following example uses the find_top command to define the top of the\n  current design for synthesis:\n\n    synth_design -top [lindex [find_top] 0]\n\n  Note: Since find_top returns multiple possible candidates, choosing index 0\n  chooses the best top candidate for synthesis.\n\n  The following example runs synthesis on the current design, defining the\n  top module and the target part, and specifying no flattening of the\n  hierarchy. The results of the synthesis run are then opened in a netlist\n  design:\n\n    synth_design -top top -part xc7k70tfbg676-2 -flatten_hierarchy none\n    open_run synth_1 -name netlist_1\n\nSee Also:\n\n   *  create_ip_run\n   *  create_run\n   *  current_design\n   *  current_project\n   *  find_top\n   *  open_run\n   *  opt_design\n   *  set_property\n",
"all_clocks": "all_clocks\n\nDescription: \nGet a list of all clocks in the current design\n\nSyntax: \nall_clocks  [-quiet] [-verbose]\n\nReturns: \nlist of clock objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Returns a list of all clocks that have been declared in the current design.\n\n  To get a list of specific clocks in the design, use the get_clocks command,\n  or use the filter command to filter the results returned by all_clocks.\n\n  Clocks can be defined by using the create_clock or create_generated_clock\n  commands.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example shows all clocks in the sample CPU netlist project:\n\n    % all_clocks  \n    cpuClk wbClk usbClk phy_clk_pad_0_i phy_clk_pad_1_i fftClk \n    \n\n  The following example applies the set_propagated_clock command to all\n  clocks, and also demonstrates how the returned list (all_clocks) can be\n  passed to another command:\n\n    % set_propagated_clock [all_clocks] \n    \n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n   *  filter\n   *  get_clocks\n   *  set_propagated_clock\n",
"create_rqs_runs": "create_rqs_runs\n\nDescription: \nCreate ML Strategy implementation runs\n\nSyntax: \ncreate_rqs_runs  [-reference_run <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-reference_run]  Reference implementation run name\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nTiming\n\nDescription:\n\n  This command is used to create up to 3 implementation runs using ML\n  Strategies that are selected based on an analysis of critical features in a\n  reference design run.\n\n  This command can only be used in Project mode implementation runs and for\n  the Ultrascale, Ultrascale+, and Versal families. Refer to the Examples\n  section for usage on both the project and non-project use-cases for using\n  ML Strategies.\n\n  It is a second step in a two-step process, where\n\n   *  step one create the ML Strategy RQS files.\n\n   *  step two create the implementation runs and reference the RQS files.\n\n  This command copies any required properties such as Tcl hooks from the\n  -reference_run, reference the RQS file containing the strategy, and set up\n  the directives to use RQS. It requires ML Strategy RQS files to be present\n  at the location.\n\n    <impl_run_name>/MLStrategy\n\nArguments:\n\n  -reference_run <arg> - (Required) A reference implementation run object\n  which has RQS strategy files generated in the <run_name>/MLStrategy folder.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following command creates ML Strategy RQS files after a run is\n  completed from within a project.\n\n    generate_ml_strategies [get_runs impl_1] -suggestions_filter {APPLIED || Category==Strategy}\n\n  To generate the ML strategies during the implementation\n  run, either turn on the AUTO_RQS feature or add a Tcl hook script\n  to the post route phase. AUTO_RQS will collect other category QoR\n  Suggestions. For more control over the other suggestions collected, use the\n  Tcl hook option and modify the filter command.\n\n   *  To enable AUTO_RQS\n\n        set_property AUTO_RQS 1 [get_runs impl_1]\n\n   *  Alternatively, add the following commands into the Tcl file and modify\n      the filter as required.\n\n        report_qor_suggestions\n        write_qor_suggestions -strategy_dir ./MLStrategy -of_objects [get_qor_suggestions -filter {APPLIED || Category == Strategy}]\n\n   *  Add the Tcl file to the post route Tcl hook.\n\n        import_files -fileset utils_1 post_route.tcl\n        set_property STEPS.ROUTE_DESIGN.TCL.POST [ get_files post_route.tcl -of [get_fileset utils_1] ] [get_runs impl_1]\n\n  The following command create new runs and configure them to use the\n  strategy, whenever ML Strategies are generated.\n\n    create_rqs_runs -reference_run [get_runs impl_1]\n\n  Note: It is recommended to run three ML Strategies per design to maximize\n  timing improvement and smooth out variations.\n\n  For non-project users, the following commands generate ML strategy\n  suggestions and writes them to an RQS file in ./MLStrategy directory.\n\n    report_qor_suggestions\n    write_qor_suggestions -strategy_dir ./MLStrategy -of_objects [get_qor_suggestions -filter {APPLIED || Category == Strategy}]\n\n  The following example shows the equivalent non-project based commands to\n  reference the RQS strategies.\n\n    <insert after link design or open checkpoint>\n    read_qor_suggestions ./MLStrategy/<top>_routedSuggestionFile[1||2||3].rqs\n    opt_design -directive RQS\n    place_design -directive RQS\n    phys_opt_design -directive RQS\n    route_design -directive RQS\n\nSee Also:\n\n   *  report_qor_suggestions\n   *  write_qor_suggestions\n   *  create_run\n   *  generate_ml_strategies\n   \n",
"get_noc_logical_instances": "get_noc_logical_instances\n\nDescription: \nGet a list of NOC logical instances\n\nSyntax: \nget_noc_logical_instances  [-regexp] [-nocase] [-filter <arg>]\n                           [-of_objects <args>] [-quiet] [-verbose]\n                           [<patterns>]\n\nReturns: \nnoc_logical_inst\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the noc_logical_inst of these cells or BD_ports.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match noc_logical_inst against patterns\n                 Default: *\n\nCategories: \nNOC, Object\n",
"write_ucf": "write_ucf\n\nDescription: \nExport UCF information to a file or directory\n\nSyntax: \nwrite_ucf  [-no_fixed_only] [-constraints <arg>] [-pblocks <args>]\n           [-cell <arg>] [-quiet] [-verbose] <file>\n\nReturns: \nname of the output file or directory\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-no_fixed_only]  Export fixed and non-fixed placement (by default only \n                    fixed placement will be exported)\n  [-constraints]    Include constraints that are flagged invalid\n                    Values: valid, invalid, all\n                    Default: valid\n  [-pblocks]        Export placement for these pblocks (not valid with -cell)\n  [-cell]           Export placement for this cell (not valid with -pblocks)\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <file>            Output file (directory with -pblocks, -cell)\n\nCategories: \nFileIO\n\nDescription:\n\n  Writes physical constraints to a user constraint file (UCF). Constraints\n  can be written from the top-level, which is the default, from specific\n  Pblocks, or from a specific hierarchical cell.\n\n  This command will write the constraints from all UCF files of the active\n  constraint fileset. Constraints from multiple files will be included in the\n  specified UCF file.\n\nArguments:\n\n  -no_fixed_only - Write both fixed and unfixed placement LOCs to the\n  constraint file being written. By default only the fixed LOCs will be\n  written to the UCF file. Fixed LOCs are associated with user-assigned\n  placements, while unfixed LOCs are associated with tool assigned\n  placements.\n\n  -constraints <arg> - Write constraints that are flagged valid, invalid, or\n  all constraints (both valid and invalid). The default behavior is to export\n  only valid constraints to the UCF file. However, you can specify\n  -constraints values of VALID, INVALID, or ALL.\n\n  -pblocks <arg> - One or more Pblocks from which to write the constraints.\n\n  -cell <arg> - The name of a hierarchical cell in the current design to\n  export the constraints from. The constraints will be written to the\n  specified UCF file relative to the specified cell.\n\n  Note: A design must be open when using this option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - The filename of the UCF file to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  Note: When you use -pblock or -cell, this argument specifies a directory\n  name where the UCF files for each Pblock or cell will be written. Each UCF\n  file will be named after a Pblock or cell. If the specified directory does\n  not exist you will get an error.\n\nExamples:\n\n  The following example writes the valid and invalid constraints, including\n  both fixed and unfixed LOCs, for all Pblocks found in the design to the\n  specified directory:\n\n    \n    write_ucf -no_fixed_only -constraints all -pblocks [get_pblocks] C:/Data/FPGA_Design \n    \n\nSee Also:\n\n   *  read_ucf\n   *  save_design\n   *  save_design_as\n",
"create_run": "create_run\n\nDescription: \nDefine a synthesis or implementation run for the current project\n\nSyntax: \ncreate_run  [-constrset <arg>] [-parent_run <arg>] [-part <arg>] -flow <arg>\n            [-strategy <arg>] [-report_strategy <arg>] [-pr_config <arg>]\n            [-dfx_mode <arg>] [-rm_instance <arg>] [-quiet] [-verbose] <name>\n\nReturns: \nrun object\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-constrset]        Constraint fileset to use\n  [-parent_run]       Synthesis run to link to new implementation run\n  [-part]             Target part\n  -flow               Flow name\n  [-strategy]         Strategy to apply to the run\n  [-report_strategy]  Report strategy to apply to the run\n  [-pr_config]        partition configuration to apply to the run\n  [-dfx_mode]         dynamic function exchange mode\n                      Default: STANDARD\n  [-rm_instance]      reconfigurable module instance information. Format \n                      <partition cell>:<reconfigurable module>\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n  <name>              Name for new run\n\nCategories: \nProject\n\nDescription:\n\n  Defines a synthesis or implementation run. The attributes of the run can be\n  configured with the use of the set_property command.\n\nArguments:\n\n  -constrset <arg> - (Optional) The constraint set to use for the synthesis\n  or implementation run.\n\n  -parent_run <arg> - The run that defines the netlist for the current run.\n  For netlist-based projects the -parent_run argument is not required. For an\n  RTL sources project, the parent_run must be specified for implementation\n  runs, but is not required for synthesis runs. For the Dynamic Function\n  eXchange (DFX) flow the -parent_run can describe the synthesis run, an\n  implementation run, or the PR configuration as specified by the -pr_config\n  option.\n\n  -part <partName> - (Optional) The Xilinx part to be used for the run. If\n  the -part option is not specified, the default part defined for the project\n  will be assigned as the part to use.\n\n  -flow <arg> - (Required) The tool flow and release version for the\n  synthesis tool, for example {Vivado Synthesis 2017} or the implementation\n  tool {Vivado Implementation 2017}.\n\n  -strategy <arg> - (Optional) The strategy to employ for the synthesis or\n  implementation run. There are many different strategies to choose from\n  within the tool, including custom strategies you can define. Refer to the\n  appropriate user guide for a discussion of the available synthesis and\n  implementation strategies. If the strategy argument is not specified,\n  'Synthesis Defaults' or 'Implementation Defaults' will be used as\n  appropriate.\n\n  -report_strategy <arg> - (Optional) Specifies a Report Strategy that\n  defines a collection of report objects to run at different stages of the\n  design flow. Report objects are created with the create_report_config\n  command. Report strategies are defined in the Settings dialog box of the\n  Vivado IDE.\n\n  -pr_config <arg> - (Optional) Specifies a partition configuration to apply\n  to the new run. Partition configurations are defined by the\n  create_pr_configuration command. Refer to the Vivado Design Suite User\n  Guide: Dynamic Function eXchange (UG909) for more information.\n\n  -dfx_mode <arg> - (Optional) Specifies the Dynamic Function eXchange mode.\n  It can either be 'STANDARD' or 'ABSTRACT SHELL'. 'STANDARD' mode takes full design\n  into consideration while implementing the reconfigurable modules but \n  'ABSTRACT SHELL' mode uses the shell for a single reconfigurable partition to \n  implement a single reconfigurable module. 'ABSTRACT SHELL' mode saves implementation \n  time compared to 'STANDARD' mode. 'STANDARD' mode is the default.\n\n  -rm_instance <arg> - (Optional) Reconfigurable module instance information.\n  This information is needed when a run is in 'ABSTRACT SHELL' mode. It specifies\n  which reconfigurable module instance will be implemented by the run. Its format\n  is <partition cell>:<reconfigurable module>\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the synthesis or implementation run to be\n  created.\n\nExamples:\n\n  The following example creates a run named synth_1 referencing the Vivado\n  synthesis tool flow:\n\n    create_run -flow {Vivado Synthesis 2013} synth_1 \n    \n\n  Note: The defaults of sources_1, constrs_1, and the default part for the\n  project will be used in the synthesis run. In addition, since this is a\n  synthesis run, the -parent_run argument is not required.\n\n  The following example creates an implementation run based on the Vivado\n  Implementation 2013 tool flow, and attaches it to the synth_1 synthesis run\n  previously created:\n\n    create_run impl_2 -parent_run synth_1 -flow {Vivado Implementation 2013} \n    \n\n  Note: The -parent_run argument is required in this example because it is an\n  implementation of synthesized RTL sources.\n\nSee Also:\n\n   *  create_pr_configuration\n   *  create_report_config\n   *  current_run\n   *  launch_runs\n   *  set_property\n",
"load": "load(n)               Tcl Built-In Commands               load(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       load - Load machine code and initialize new commands\n\nSYNOPSIS\n       load fileName\n       load fileName packageName\n       load fileName packageName interp\n_________________________________________________________________\n\n\nDESCRIPTION\n       This command loads binary code from a file into the appli-\n       cation's address space and calls an initialization  proce-\n       dure in the package to incorporate it into an interpreter.\n       fileName is the name of the file containing the code;  its\n       exact  form  varies from system to system but on most sys-\n       tems it is a shared library, such  as  a  .so  file  under\n       Solaris  or  a DLL under Windows.  packageName is the name\n       of the package, and is used to compute the name of an ini-\n       tialization  procedure.   interp  is  the path name of the\n       interpreter into which to load the package (see the interp\n       manual  entry  for  details);  if  interp  is  omitted, it\n       defaults to the interpreter in which the load command  was\n       invoked.\n\n       Once  the  file  has  been  loaded  into the application's\n       address space, one of two initialization  procedures  will\n       be  invoked in the new code.  Typically the initialization\n       procedure will add new commands to a Tcl interpreter.  The\n       name  of  the  initialization  procedure  is determined by\n       packageName and whether or not the target interpreter is a\n       safe  one.   For  normal interpreters the name of the ini-\n       tialization procedure will have the form  pkg_Init,  where\n       pkg  is the same as packageName except that the first let-\n       ter is converted to upper case and all other  letters  are\n       converted  to  lower case.  For example, if packageName is\n       foo or FOo, the initialization procedure's  name  will  be\n       Foo_Init.\n\n       If  the target interpreter is a safe interpreter, then the\n       name of the initialization procedure will be  pkg_SafeInit\n       instead  of pkg_Init.  The pkg_SafeInit function should be\n       written carefully, so that it initializes the safe  inter-\n       preter  only  with  partial  functionality provided by the\n       package that is safe for use by untrusted code.  For  more\n       information on Safe-Tcl, see the safe manual entry.\n\n       The initialization procedure must match the following pro-\n       totype:\n              typedef int Tcl_PackageInitProc(Tcl_Interp *interp);\n       The interp argument identifies the  interpreter  in  which\n       the package is to be loaded.  The initialization procedure\n       must return TCL_OK or TCL_ERROR to indicate whether or not\n       it  completed  successfully;   in the event of an error it\n       should set the interpreter's result to point to  an  error\n       message.   The  result  of  the  load  command will be the\n       result returned by the initialization procedure.\n\n       The actual loading of a file will only be  done  once  for\n       each  fileName  in an application.  If a given fileName is\n       loaded into multiple interpreters,  then  the  first  load\n       will  load the code and call the initialization procedure;\n       subsequent loads will call  the  initialization  procedure\n       without  loading  the  code again.  For Tcl versions lower |\n       than 8.5, it is not possible to unload or reload  a  pack- |\n       age.  From  version 8.5 however, the unload command allows |\n       the unloading of libraries loaded with load, for libraries |\n       that are aware of the Tcl's unloading mechanism.\n\n       The  load  command  also supports packages that are stati-\n       cally linked with the application, if those packages  have\n       been  registered  by  calling the Tcl_StaticPackage proce-\n       dure.  If fileName is an empty  string,  then  packageName\n       must be specified.\n\n       If packageName is omitted or specified as an empty string,\n       Tcl tries to guess the name of the package.  This  may  be\n       done  differently  on  different  platforms.   The default\n       guess, which is used on most UNIX platforms,  is  to  take\n       the  last  element  of fileName, strip off the first three\n       characters if they are lib, and use any  following  alpha-\n       betic  and  underline  characters as the module name.  For\n       example, the command load  libxyz4.2.so  uses  the  module\n       name xyz and the command load bin/last.so {} uses the mod-\n       ule name last.\n\n       If fileName is an empty string, then packageName  must  be\n       specified.   The  load command first searches for a stati-\n       cally loaded package (one  that  has  been  registered  by\n       calling  the Tcl_StaticPackage procedure) by that name; if\n       one is found, it is used.   Otherwise,  the  load  command\n       searches  for  a  dynamically loaded package by that name,\n       and uses it if it is found.  If  several  different  files\n       have  been  loaded with different versions of the package,\n       Tcl picks the file that was loaded first.\n\nPORTABILITY ISSUES\n       Windows\n              When a load fails with 'library not  found'  error,\n              it  is  also  possible that a dependent library was\n              not found.  To see the  dependent  libraries,  type\n              'dumpbin  -imports  <dllname>'  in a DOS console to\n              see what the library must import.  When  loading  a\n              DLL  in  the current directory, Windows will ignore\n              './' as a path specifier and use a search heuristic\n              to  find  the DLL instead.  To avoid this, load the\n              DLL with:\n              load [file join [pwd] mylib.DLL]\n\nBUGS\n       If the same file is loaded by different fileNames, it will\n       be loaded into the process's address space multiple times.\n       The behavior of this varies from system  to  system  (some\n       systems may detect the redundant loads, others may not).\n\nEXAMPLE\n       The following is a minimal extension:\n\n              #include <tcl.h>\n              #include <stdio.h>\n              static int fooCmd(ClientData clientData,\n                      Tcl_Interp *interp, int objc, Tcl_Obj *const objv[]) {\n                  printf('called with %d arguments\\n', objc);\n                  return TCL_OK;\n              }\n              int Foo_Init(Tcl_Interp *interp) {\n                  if (Tcl_InitStubs(interp, '8.1', 0) == NULL) {\n                return TCL_ERROR;\n                  }\n                  printf('creating foo command');\n                  Tcl_CreateObjCommand(interp, 'foo', fooCmd, NULL, NULL);\n                  return TCL_OK;\n              }\n\n       When  built  into a shared/dynamic library with a suitable\n       name (e.g. foo.dll on Windows, libfoo.so  on  Solaris  and\n       Linux) it can then be loaded into Tcl with the following:\n\n              # Load the extension\n              switch $tcl_platform(platform) {\n                 windows {\n                    load [file join [pwd] foo.dll]\n                 }\n                 unix {\n                    load [file join [pwd] libfoo[info sharedlibextension]]\n                 }\n              }\n\n              # Now execute the command defined by the extension\n              foo\n\n\nSEE ALSO\n       info sharedlibextension, Tcl_StaticPackage(3), safe(n)\n\n\nKEYWORDS\n       binary code, loading, safe interpreter, shared library\n\n\n\nTcl                            7.5                        load(n)\n",
"generate_reports": "generate_reports\n\nDescription: \nGenerate a set of configurable report objects\n\nSyntax: \ngenerate_reports  [-jobs <arg>] [-quiet] [-verbose] <report_configs>...\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-jobs]           Number of jobs\n                    Default: 1\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <report_configs>  List of configurable report objects to generate\n\nCategories: \nObject, Report\n\nDescription:\n\n  Generates specified report objects as created by the create_report_config\n  command.\n\n  Because the report objects are associated with specific steps of synthesis\n  or implementation runs, those steps must be completed prior to the\n  generation of the report. If a step is not completed, or the report is not\n  enabled, then the generate_report command will return an error.\n\nArguments:\n\n  -jobs <arg> - (Optional) Specifies the number of jobs to use to generate\n  the specified report objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <report_configs> - (Required) Specifies the list of report objects to\n  generate. The reports must be specified as objects returned by the\n  get_report_configs command.\n\nExamples:\n\n  The following example generates the specified report object:\n\n    generate_report [get_report_configs post_route_datasheet] \n    \n\n  Note: If the report is already GENERATED according to the STATE property,\n  the report will not be regenerated.\n\nSee Also:\n\n   *  create_report_config\n   *  delete_report_configs\n   *  get_report_configs\n",
"report_power_opt": "report_power_opt\n\nDescription: \nReport power optimizations\n\nSyntax: \nreport_power_opt  [-cell <args>] [-file <arg>] [-format <arg>] [-name <arg>]\n                  [-append] [-return_string] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-cell]           List of instance names\n                    Default: empty\n  [-file]           Output file\n  [-format]         Specifies how to format the report. Default is 'text', \n                    another option is 'xml'. Only applies if -file is used. \n                    If xml output is used, -append is not allowed.\n                    Default: text\n  [-name]           Output the results to GUI panel with this name\n  [-append]         Append if  existing file. Otherwise overwrite existing \n                    file.\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nPower\n\nDescription:\n\n  Report power optimizations that have been performed on the design with the\n  power_opt_design command.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -cell <args> - (Optional) Report power optimization for the specified cell\n  or cell instances. By default, the power optimizations performed on the\n  whole design are reported.\n\n  -file <arg> - (Optional) Write the report into a file. The specified file\n  will be overwritten if one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -format [ text | xml ] - (Optional) Specify the file format of the Power\n  Optimization report when used with -file. The default file output is a text\n  format file. The Vivado tool can also write an XML format file to allow for\n  use by third party applications.\n\n  Note: When -format xml is specified, the -append option is not supported.\n\n  -name <arg> - (Optional) The name to assign to the Power Optimization\n  report when the command is run in GUI mode.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option, and is not\n  compatible with the XML format.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the power optimizations performed on the\n  current design, writing them to the specified file in an XML format:\n\n    report_power_opt -format xml -file C:/Data/power_opt.xml \n    \n\nSee Also:\n\n   *  power_opt_design\n   *  report_power\n",
"write_edif": "write_edif\n\nDescription: \nExport the current netlist as an EDIF file\n\nSyntax: \nwrite_edif  [-pblocks <args>] [-cell <arg>] [-force] [-security_mode <arg>]\n            [-logic_function_stripped] [-quiet] [-verbose] <file>\n\nReturns: \nthe name of the output file or directory\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-pblocks]                  Export netlist for these pblocks (not valid \n                              with -cell)\n  [-cell]                     Export netlist for this cell (not valid with \n                              -pblocks)\n  [-force]                    Overwrite existing file\n  [-security_mode]            If set to 'all', and some of design needs \n                              encryption then whole of design will be written\n                              to a single encrypted file\n                              Default: multifile\n  [-logic_function_stripped]  Convert INIT strings on LUTs & RAMBs to fixed \n                              values\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n  <file>                      Output file (directory with -pblocks or -cell)\n\nCategories: \nFileIO\n\nDescription:\n\n  Writes the current netlist as an EDIF file, or outputs the contents of\n  specific Pblocks or hierarchical cells as EDIF netlist files.\n\n  In the case of either the -pblocks or -cell option being used, this\n  argument specifies a directory name where the EDIF netlist files for each\n  Pblock or cell will be written. The EDIF netlist file will be named after\n  the Pblock or cell. If the directory specified does not exist, the tool\n  will return an error.\n\nArguments:\n\n  -pblocks <arg> - (Optional) Instructs the tool to output the contents of\n  the specified Pblocks as EDIF netlist files. The contents of each Pblock\n  will be written to a separate EDIF file. These files can be added as design\n  source files to netlist projects, but are not intended to be read into a\n  design using update_design. Use the -cell option to write EDIF netlists for\n  use with update_design.\n\n  -cell <arg> - (Optional) Instructs the tool to output the contents of the\n  specified hierarchical cell as EDIF netlist files. Only one cell can be\n  specified for output.\n\n  Note: The -pblocks and -cell options are mutually exclusive. Although they\n  are optional arguments, only one can be specified at one time.\n\n  -force - (Optional) Overwrite the EDIF file if it already exists.\n\n  -security_mode [ multifile | all ] - (Optional) Write a multiple EDIF files\n  when encrypted IP is found in the design, or write a single file.\n\n   *  multifile - This is the default setting. By default the command writes\n      out the full design netlist to the specified file. However, if the\n      design contains secured IP, it creates an encrypted file containing the\n      contents of the secured module. This will result in the output of\n      multiple EDIF files, containing secured and unsecured elements of the\n      design.\n\n   *  all - Write both encrypted and unencrypted cells to a single specified\n      file.\n\n  -logic_function_stripped - (Optional) Hides the INIT values for LUTs & RAMs\n  by converting them to fixed values in order to create a netlist for debug\n  purposes that will not behave properly in simulation or synthesis.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The filename of the EDIF file to write. The default\n  file extension for an EDIF netlist is .edn. If the -pblocks or -cell\n  options are used, the name specified here refers to a directory rather than\n  a single file.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes an EDIF netlist file for the whole design to\n  the specified file name:\n\n    write_edif C:/Data/edifOut.edn \n    \n\n  The following example outputs an EDIF netlist for all Pblocks in the\n  design. The files will be written to the specified directory.\n\n    write_edif -pblocks [get_pblocks] C:/Data/FPGA_Design/ \n    \n\nSee Also:\n\n   *  read_edif\n",
"history": "history(n)            Tcl Built-In Commands            history(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       history - Manipulate the history list\n\nSYNOPSIS\n       history ?option? ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       The  history  command  performs  one of several operations\n       related to recently-executed commands recorded in  a  his-\n       tory list.  Each of these recorded commands is referred to\n       as an 'event'.  When specifying an event  to  the  history\n       command, the following forms may be used:\n\n       [1]    A number:  if positive, it refers to the event with\n              that number (all events are  numbered  starting  at\n              1).  If the number is negative, it selects an event\n              relative to the current event  (-1  refers  to  the\n              previous  event,  -2 to the one before that, and so\n              on).  Event 0 refers to the current event.\n\n       [2]    A string:   selects  the  most  recent  event  that\n              matches  the  string.   An  event  is considered to\n              match the string either if the string is  the  same\n              as  the  first  characters  of the event, or if the\n              string matches the event in the sense of the string\n              match command.\n\n       The history command can take any of the following forms:\n\n       history\n              Same as history info, described below.\n\n       history add command ?exec?\n              Adds  the command argument to the history list as a\n              new event.  If exec is specified  (or  abbreviated)\n              then the command is also executed and its result is\n              returned.  If exec is not specified then  an  empty\n              string is returned as result.\n\n       history change newValue ?event?\n              Replaces  the value recorded for an event with new-\n              Value.  Event specifies the event to  replace,  and\n              defaults to the current event (not event -1).  This\n              command is intended for use in commands that imple-\n              ment  new forms of history substitution and wish to\n              replace the current event (which invokes  the  sub-\n              stitution) with the command created through substi-\n              tution.  The return value is an empty string.\n\n       history clear\n              Erase the history list.  The current keep limit  is\n              retained.  The history event numbers are reset.\n\n       history event ?event?\n              Returns  the  value  of  the  event given by event.\n              Event defaults to -1.\n\n       history info ?count?\n              Returns a formatted string (intended for humans  to\n              read) giving the event number and contents for each\n              of the events in the history list except  the  cur-\n              rent  event.   If  count is specified then only the\n              most recent count events are returned.\n\n       history keep ?count?\n              This command may be used to change the size of  the\n              history list to count events.  Initially, 20 events\n              are retained in the history list.  If count is  not\n              specified, the current keep limit is returned.\n\n       history nextid\n              Returns the number of the next event to be recorded\n              in the history list.  It is useful for things  like\n              printing  the event number in command-line prompts.\n\n       history redo ?event?\n              Re-executes the  command  indicated  by  event  and\n              returns  its  result.   Event defaults to -1.  This\n              command results in history revision:  see below for\n              details.\n\nHISTORY REVISION\n       Pre-8.0 Tcl had a complex history revision mechanism.  The\n       current mechanism is more limited,  and  the  old  history\n       operations  substitute and words have been removed.  (As a\n       consolation, the clear operation was added.)\n\n       The history option redo results in much  simpler  'history\n       revision'.   When  this  option  is  invoked then the most\n       recent event is modified to eliminate the history  command\n       and replace it with the result of the history command.  If\n       you want to redo an event without modifying history,  then\n       use  the  event  operation to retrieve some event, and the\n       add operation to add it to history and execute it.\n\nKEYWORDS\n       event, history, record\n\n\n\nTcl                                                    history(n)\n",
"import_xise": "import_xise\n\nDescription: \nImport XISE project file settings into the created project\n\nSyntax: \nimport_xise  [-copy_sources] [-quiet] [-verbose] <file>\n\nReturns: \ntrue\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-copy_sources]  Copy all ISE sources into the created project\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <file>           Name of the XISE project file to be imported\n\nCategories: \nProject\n\nDescription:\n\n  Imports an ISE project file (XISE) into the current project. This allows\n  ISE projects to be quickly migrated into the Vivado Design Suite for\n  synthesis, simulation, and implementation. All project source files,\n  constraint files, simulation files, and run settings are imported from the\n  ISE project and recreated in the current project.\n\n  This command should be run on a new empty project. Since source files,\n  constraints, and run settings are imported from the ISE project, any\n  existing source files or constraints may be overwritten.\n\nArguments:\n\n  -copy_sources - (Optional) Copy source files in the ISE project to the\n  local project directory structure rather than referencing them from their\n  current location. The default is to reference source files from their\n  current location.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the ISE project file (.XISE) to be imported\n  into the current project.\n\nExamples:\n\n  The following example creates a new project called importISE, and then\n  imports the ISE project file (first_use.xise) into the new project.\n\n    create_project importISE C:/Data/importISE import_xise \\  \n    C:/Data/FPGA_design/ise_designs/drp_des/first_use.xise \n    \n\n  Note: This example does not specify the -copy_sources argument, so all\n  source files in the ISE project will be added to the current project by\n  reference.\n\nSee Also:\n\n   *  create_project\n",
"all_cpus": "all_cpus\n\nDescription: \nGet a list of cpu cells in the current design\n\nSyntax: \nall_cpus  [-quiet] [-verbose]\n\nReturns: \nlist of cpu cell objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of all CPU cell objects in the current design. Creates a\n  list of all the CPU cell objects that have been declared in the current\n  design.\n\n  The list of CPUs returned by all_cpus can also be limited or reduced by the\n  filter command to filter according to properties assigned to the CPU cell\n  objects. Properties of an object can be returned by the list_property or\n  report_property commands.\n\n  The all_cpus command is scoped to return the objects hierarchically, from\n  the top-level of the design or from the level of the current instance. By\n  default the current instance is defined as the top level of the design, but\n  can be changed by using the current_instance command.\n\n  Note: This command returns a list of CPU cell objects\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns all CPU objects in the current design:\n\n    all_cpus \n    \n\n  The following example shows how the list returned can be passed to another\n  command:\n\n    set_false_path -from [all_cpus] -to [all_registers] \n    \n\nSee Also:\n\n   *  all_dsps\n   *  all_hsios\n   *  all_registers\n   *  current_instance\n   *  filter\n   *  get_cells\n   *  list_property\n   *  report_property\n   *  set_false_path\n",
"mark_objects": "mark_objects\n\nDescription: \nMark objects in GUI\n\nSyntax: \nmark_objects  [-color_index <arg>] [-rgb <args>] [-color <arg>] [-quiet]\n              [-verbose] <objects>\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-color_index]  Color index\n  [-rgb]          RGB color index list\n  [-color]        Valid values are red green blue magenta yellow cyan and \n                  orange\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <objects>       Objects to mark\n\nCategories: \nGUIControl\n\nDescription:\n\n  Marks specified objects in GUI mode. This command places an iconic mark to\n  aid in the location of the specified object or objects. The mark is\n  displayed in a color as determined by one of the color options.\n\n  Objects can be unmarked with the unmark_objects command.\n\n  Note: Use only one color option. If both color options are specified, -rgb\n  takes precedence over -color.\n\nArguments:\n\n  -color_index <arg> - (Optional) Specifies the color index to use for\n  highlighting the selected object or objects. Valid values are integers\n  ranging from 1 to 20. The color indexes are displayed and can be configured\n  from the Window > Tool Settings > Colors > Mark. Refer to the Vivado\n  Design Suite User Guide: Using the IDE (UG893) for more information on\n  setting colors.\n\n  -rgb <args> - (Optional) The color to use in the form of an RGB code\n  specified as {R G B}. For instance, {255 255 0} specifies the color yellow,\n  while {0 255 0} specifies green.\n\n  -color <arg> - (Optional) The color to use for marking the specified object\n  or objects. Supported colors are: red, green, blue, magenta, yellow, cyan,\n  and orange.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) One or more objects to be marked.\n\nExamples:\n\n  The following example adds a red icon to mark the currently selected objects:\n\n    mark_objects -color red [get_selected_objects] \n    \n\nSee Also:\n\n   *  get_highlighted_objects\n   *  get_marked_objects\n   *  get_selected_objects\n   *  highlight_objects\n   *  select_objects\n   *  unmark_objects\n",
"rename_ref": "rename_ref\n\nDescription: \nrename a cell ref\n\nSyntax: \nrename_ref  [-ref <arg>] [-to <arg>] [-prefix_all <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-ref]         Cell ref to rename\n  [-to]          New name\n  [-prefix_all]  Rename all eligible hierarchical cell refs in the current \n                 design.  Construct the new name using the given prefix plus \n                 the original name\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nNetlist\n\nDescription:\n\n  Rename the reference name of a single non-primitive cell, or apply a\n  reference prefix to all non-primitive cells in the current synthesized or\n  implemented design.\n\n  This command provides a mechanism to change the non-primitive reference\n  names in the current design so that they do not collide with the reference\n  names in another design. This lets two modules or designs be synthesized or\n  simulated together, while avoiding any name collisions between the two\n  designs.\n\n  This command returns nothing when renaming the reference a single cell, and\n  returns the number of cells renamed when used with -prefix_all. If the\n  command fails, an error is returned.\n\nArguments:\n\n  -ref <arg> - (Optional) Specify the current reference name of a\n  non-primitive cell.\n\n  -to <arg> - (Optional) Change the reference name to the specified value.\n\n  -prefix_all <arg> - (Optional) Apply the specified prefix to the reference\n  names of all non-primitive cells in the current design, except the top\n  module.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example changes the specified reference name to the value\n  indicated:\n\n    rename_ref -ref usbf_top -to MOD1_usbf_top \n    \n\n  The following example applies the specified reference name prefix to all\n  non-primitive cells in the current design:\n\n    rename_ref -prefix_all MOD1_ \n    \n\nSee Also:\n\n   *  launch_xsim\n   *  synth_design\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"puts": "puts(n)               Tcl Built-In Commands               puts(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       puts - Write to a channel\n\nSYNOPSIS\n       puts ?-nonewline? ?channelId? string\n_________________________________________________________________\n\n\nDESCRIPTION\n       Writes the characters given by string to the channel given\n       by channelId.\n\n       ChannelId must be an identifier for an open  channel  such\n       as  a  Tcl standard channel (stdout or stderr), the return\n       value from an invocation of open or socket, or the  result\n       of a channel creation command provided by a Tcl extension.\n       The channel must have been opened for output.\n\n       If no channelId is specified then it defaults  to  stdout.\n       Puts  normally  outputs  a newline character after string,\n       but this feature  may  be  suppressed  by  specifying  the\n       -nonewline switch.\n\n       Newline characters in the output are translated by puts to\n       platform-specific end-of-line sequences according  to  the\n       current  value  of the -translation option for the channel\n       (for example, on PCs newlines are normally  replaced  with\n       carriage-return-linefeed  sequences.   See  the fconfigure\n       manual entry for a discussion on ways in which  fconfigure\n       will alter output.\n\n       Tcl  buffers output internally, so characters written with\n       puts may not appear immediately  on  the  output  file  or\n       device;   Tcl  will normally delay output until the buffer\n       is full or the channel is closed.  You can force output to\n       appear immediately with the flush command.\n\n       When  the  output  buffer  fills up, the puts command will\n       normally block  until  all  the  buffered  data  has  been\n       accepted for output by the operating system.  If channelId\n       is in nonblocking mode then  the  puts  command  will  not\n       block even if the operating system cannot accept the data.\n       Instead, Tcl continues to buffer the data and writes it in\n       the  background  as  fast as the underlying file or device\n       can accept it.  The application must  use  the  Tcl  event\n       loop  for nonblocking output to work;  otherwise Tcl never\n       finds out that the file or device is ready for more output\n       data.   It  is possible for an arbitrarily large amount of\n       data to be buffered for a  channel  in  nonblocking  mode,\n       which  could  consume  a large amount of memory.  To avoid\n       wasting memory, nonblocking I/O should normally be used in\n       an event-driven fashion with the fileevent command (do not\n       invoke puts unless you have recently been notified  via  a\n       file  event  that  the  channel  is  ready for more output\n       data).\n\nEXAMPLES\n       Write a short message to the console (or  wherever  stdout\n       is directed):\n              puts 'Hello, World!'\n\n       Print a message in several parts:\n              puts -nonewline 'Hello, '\n              puts 'World!'\n\n       Print a message to the standard error channel:\n              puts stderr 'Hello, World!'\n\n       Append a log message to a file:\n              set chan [open my.log a]\n              set timestamp [clock format [clock seconds]]\n              puts $chan '$timestamp - Hello, World!'\n              close $chan\n\n\nSEE ALSO\n       file(n), fileevent(n), Tcl_StandardChannels(3)\n\n\nKEYWORDS\n       channel, newline, output, write\n\n\n\nTcl                            7.5                        puts(n)\n",
"webtalk_register_client": "webtalk_register_client\n\nDescription: \nRegister a new client with the Webtalk manager.\n\nSyntax: \nwebtalk_register_client  -client <arg> [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -client     string value that is the name of the client.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \n\n",
"get_dashboard_gadgets": "get_dashboard_gadgets\n\nDescription: \nCreate the Project summary dashboard\n\nSyntax: \nget_dashboard_gadgets  [-quiet] [-verbose] [<patterns>...]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match gadget names against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *\n\nCategories: \nObject, Project\n\nDescription:\n\n  Gets a list of the dashboard gadgets in the current project.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match dashboard gadget names against the specified\n  patterns. The default pattern is the wildcard `*` which gets all dashboard\n  gadgets. More than one pattern can be specified to find dashboard gadgets\n  based on multiple search criteria.\n\nExamples:\n\n  The following example returns the dashboard gadgets in the current project:\n\n    get_dashboard_gadgets\n\nSee Also:\n\n   *  create_dashboard_gadget\n   *  delete_dashboard_gadgets\n   *  move_dashboard_gadget\n",
"delete_debug_port": "delete_debug_port\n\nDescription: \nDelete debug port\n\nSyntax: \ndelete_debug_port  [-quiet] [-verbose] <ports>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <ports>     Debug ports to delete\n\nCategories: \nDebug\n\nDescription:\n\n  Deletes ports from Vivado Lab Edition debug cores in the current project.\n  You can disconnect a signal from a debug port using disconnect_debug_port,\n  or remove the port altogether using this command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ports> - (Required) The <core_name>/<port_name> of the debug port to be\n  removed from the core.\n\nExamples:\n\n  The following example deletes the DATA port from myCore:\n\n    delete_debug_port myCore/DATA \n    \n\n  Note: Some ports cannot be deleted because an ILA port requires one CLK\n  port and one TRIG port as a minimum.\n\n  The following example deletes the trigger ports (TRIG) from the myCore\n  debug core:\n\n    delete_debug_port [get_debug_ports myCore/TRIG*] \n    \n\n  Note: This example will not delete all TRIG ports from myCore, because an\n  ILA core must have at least one TRIG port. The effect of this command will\n  be to delete the TRIG ports starting at TRIG0 and removing all of them\n  except the last port.\n\nSee Also:\n\n   *  disconnect_debug_port\n   *  get_debug_ports\n",
"genkey_ipprovider": "genkey_ipprovider\n\nDescription: \nTo generate a pair of RSA keys to be used with Xilinx encryption: genkey_ipprovide <base_key_name>.\n\n\nSyntax: \ngenkey_ipprovider  [-overwrite] [-quiet] [-verbose] <file>\n\nUsage: \n  Name          Description\n  -------------------------\n  [-overwrite]  overwrite existing file.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <file>        generate a pair of key with base name\n\nCategories: \nFileIO\n",
"set_speed_grade": "set_speed_grade\n\nDescription: \nSet Timing Speed Grade and Temperature Grade\n\nSyntax: \nset_speed_grade  [-temperature <arg>] [-quiet] [-verbose] [<value>]\n\nReturns: \nstring result\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-temperature]  Temperature grade used for timing analysis (Not available \n                  for 7 Series and earlier)\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  [<value>]       Speed grade used for timing analysis\n\nCategories: \nProject\n\nDescription:\n\n  Note: After set_speed_grade has been used on a design, it can be used for\n  timing analysis, but it will no longer go through implementation. If you\n  want to run implementation on the design, you should save the design\n  checkpoint and use read_checkpoint -part to implement the design with the\n  new speed grade.\n\n  Sets the speed grade used for timing analysis for the target device in the\n  current design.\n\n  This command is used to change the speed grade of the target device for\n  timing analysis only, and does not affect other aspects of the design. It\n  must be run on an opened synthesized or implemented design.\n\n  Use the set_speed_grade command prior to the report_timing_summary or\n  report_timing command or other timing commands to change the speed grade\n  for analysis. If the timing is valid, then you can use the set_property or\n  set_part command to change the target part for the project to re-synthesize\n  and implement the design.\n\n  Note: For UltraScale devices, you can specify either the temperature or the\n  value to define the speed grade for the part. For 7 series devices, you can\n  only specify the value.\n\n  This command returns a transcript of its process, and the speed grade set,\n  or returns an error if it fails.\n\nArguments:\n\n  -temperature - (Optional) Specify the temperature grade for UltraScale\n  devices, used for timing analysis.\n\n  Note: This option is not available for 7 series devices, or earlier.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <value> - (Optional) The speed grade for the target device. Typical values\n  are -1, -1L, -2, or -3. Specifying an incorrect value (e.g. -999) will\n  cause the command to return an error message with a list of valid values\n  for the current part.\n\nExamples:\n\n  The following example sets the speed grade for the device in the current\n  design to -1:\n\n    \n    set_speed_grade -1 \n    \n\nSee Also:\n\n   *  report_drc\n   *  report_timing\n   *  report_timing_summary\n   *  set_part\n   *  set_property\n",
"get_hierarchy_separator": "get_hierarchy_separator\n\nDescription: \nGet hierarchical separator character\n\nSyntax: \nget_hierarchy_separator  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Gets the character currently used for separating levels of hierarchy in the\n  design. You can set the hierarchy separator using the\n  set_hierarchy_separator command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example gets the currently defined hierarchy separator:\n\n    get_hierarchy_separator \n    \n\nSee Also:\n\n   *  set_hierarchy_separator\n",
"get_iobanks": "get_iobanks\n\nDescription: \nGet a list of iobanks.\n\nSyntax: \nget_iobanks  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n             [-verbose] [<patterns>]\n\nReturns: \niobanks\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the iobanks of these package_pins, ports, clock regions,\n                 slrs or sites.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match iobanks against patterns\n                 Default: *\n\nCategories: \nDevice, XDC, Object\n\nDescription:\n\n  Gets a list of I/O Banks on the target device in the current project that\n  match a specified search pattern. The default command gets a list of all\n  I/O Banks on the target device.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_iobanks based on property values on the I/O Banks. You can find the\n  properties on an object with the report_property or list_property commands.\n  Some of the properties that can be used with for an iobank object include\n  'BANK_TYPE', 'DCI_CASCADE', and 'INTERNAL_VREF'.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get a list of the I/O Banks connected to\n  these objects. Valid object types are clock_regions, package_pins, ports,\n  slrs and sites.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match I/O Banks against the specified pattern. The\n  default pattern is the wildcard `*` which gets a list of all I/O Banks in\n  the design.\n\nExamples:\n\n  The following example returns the I/O Bank of the specified package pin:\n\n    get_iobanks -of_objects [get_package_pins H4] \n    \n\n  This example returns the GT Banks on the device:\n\n    get_iobanks -filter {BANK_TYPE == BT_MGT} \n    \n\nSee Also:\n\n   *  get_package_pins\n   *  get_pkgpin_bytegroup\n   *  get_pkgpin_nibble\n   *  get_ports\n   *  get_sites\n   *  list_property\n   *  place_ports\n   *  report_property\n",
"version": "version\n\nDescription: \nReturns the build for Vivado and the build date\n\nSyntax: \nversion  [-short] [-quiet] [-verbose]\n\nReturns: \nVivado version\n\nUsage: \n  Name        Description\n  -----------------------\n  [-short]    Return only the numeric version number\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Returns the version number of the Xilinx tool. This includes the software\n  version number, build number and date, and copyright information.\n\nArguments:\n\n  -short - (Optional) Returns the version number of the software only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns only the version number for the software:\n\n    version -short \n    \n",
"remove_gui_custom_command_args": "remove_gui_custom_command_args\n\nDescription: \nRemove one or more custom command arguments\n\nSyntax: \nremove_gui_custom_command_args  -command_name <arg> [-quiet] [-verbose]\n                                <names>...\n\nUsage: \n  Name           Description\n  --------------------------\n  -command_name  name of custom command whose arguments are being removed.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <names>        name of one or more custom command arguments to remove.\n\nCategories: \nGUIControl\n\nDescription:\n\n  Remove one or more GUI custom command arguments of a particular GUI custom\n  command.\n\n  You can use the get_gui_custom_commands to determine the list of defined\n  custom commands. You can use the get_gui_custom_command_args to determine\n  the list of defined GUI custom command arguments for a particular GUI\n  custom command.\n\nArguments:\n\n  -command_name - (REquired) SPecifies the name of GUI custom command whose\n  arguments are being removed.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <names> - (Required) One or more argument names to remove.\n\nExamples:\n\n  Remove GUI custom command arguments with name 'arg1' and 'arg2' of a GUI\n  custom command with name 'cmd_1' :\n\n    remove_gui_custom_command_args -command_name cmd_1 {arg1 arg2}\n\nSee Also:\n\n   *  create_gui_custom_command\n   *  create_gui_custom_command_arg\n   *  get_gui_custom_command_args\n   *  get_gui_custom_commands\n   *  remove_gui_custom_command\n",
"set_max_delay": "set_max_delay\n\nDescription: \nSpecify maximum delay for timing paths\n\nSyntax: \nset_max_delay  [-rise] [-fall] [-reset_path] [-from <args>] [-rise_from <args>]\n               [-fall_from <args>] [-to <args>] [-rise_to <args>]\n               [-fall_to <args>] [-through <args>] [-rise_through <args>]\n               [-fall_through <args>] [-datapath_only] [-quiet] [-verbose]\n               <delay>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-rise]           Delay value applies to rising path delays\n  [-fall]           Delay value applies to falling path delays\n  [-reset_path]     Reset this path before setting max delay\n  [-from]           List of path startpoints or clocks\n  [-rise_from]      Apply to paths rising from the list of startpoints or \n                    clocks\n  [-fall_from]      Apply to paths falling from the list of startpoints or \n                    clocks\n  [-to]             List of path endpoints or clocks\n  [-rise_to]        Apply to paths with rise transition at the list of \n                    endpoints or clocks\n  [-fall_to]        Apply to paths with fall transition at the list of \n                    endpoints or clocks\n  [-through]        List of through pins, cells or nets\n  [-rise_through]   Apply to paths rising through pins, cells or nets\n  [-fall_through]   Apply to paths falling through pins, cells or nets\n  [-datapath_only]  Remove clock skew and jitter from calculation\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <delay>           Delay value\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Sets the maximum delay allowed on a timing path, specified in nanoseconds\n  (ns). The specified delay value is assigned to both the rising and falling\n  edges of the defined timing paths unless the -rise or -fall arguments are\n  specified.\n\n  The maximum rising and falling delay cannot be less than the minimum rising\n  and falling delay on the same path, as defined by the set_min_delay\n  command. If this happens, the first assigned constraint is removed from the\n  timing path as a conflict, and the delay value specified by the removed\n  constraint is set to 0.\n\n  The delay value must be assigned to a timing path as defined by at least\n  one -from, -through, or -to argument. A general path delay such as -to\n  endpoint will be over written by a more specific path definition such as\n  -from/-to, or -from/-through/-to path definition.\n\n  Note: When assigned to a primary input or output port, any system-level\n  delay consumes a portion of the max delay on the timing path that includes\n  the input or output port. That is, the delay specified by set_input_delay\n  or set_output_delay is considered part of the maximum delay.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -rise - (Optional) Apply the delay value to the rising edge of the timing\n  path.\n\n  -fall - (Optional) Apply the delay value to the falling edge of the timing\n  path.\n\n  Note: If neither -rise nor -fall is specified, the delay is applied as both\n  rising and falling edge path delay.\n\n  -reset_path - (Optional) Indicates that existing rising or falling edge false path\n  or max delays should be cleared before applying the new specified path delay. If\n  only -to is specified all paths leading to the specified endpoints are\n  cleared. If only -from is specified, all paths leading from the specified\n  start points are cleared. When -from/-to or -from/-through/-to are\n  specified, the defined paths are reset.\n\n  -from <value> - (Optional) A list of path start points or clocks. A valid\n  startpoint is a primary input or inout port, or the clock pin of a\n  sequential element. If a clock is specified then all the primary input and\n  inout ports related to that clock as well as all the clock pin of the\n  registers connected to that clock are used as startpoints.\n\n  -rise_from <element_name> - (Optional) The max delay applied to paths\n  rising from the list of origins or clocks.\n\n  -fall_from <element_name> - (Optional) The max delay applied to paths\n  falling from the list of origins or clocks.\n\n  -to <element_name> - (Optional) A list of path endpoints or clocks. A valid\n  endpoint is a primary output or inout port, or the data pin of a sequential\n  element. If a clock is specified then all the primary output and inout\n  ports related to that clock as well as all the data pins of the registers\n  connected to that clock are used as endpoints.\n\n  -rise_to <element_name> - (Optional) The max delay applied to paths with\n  rise transition at the list of endpoints or clocks.\n\n  -fall_to <element_name> - (Optional) The max delay applied to paths with\n  fall transition at the list of endpoints or clocks.\n\n  -through <element_name> - (Optional) A list of through pins, cells, or nets.\n\n  -rise_through <element_name> - (Optional) The max delay applied to paths\n  rising through pins, cells or nets.\n\n  -fall_through <element_name> - (Optional) The max delay applied to paths\n  falling through pins, cells or nets.\n\n  -datapath_only - (Optional) Exclude clock skew and jitter from the delay\n  calculation for the specified path. This option is used to constrain the\n  delay between sequential elements that have different clocks, where you do\n  not want to consider clock skew and jitter in the delay calculation. Only\n  the Clock-to-Q delay of the first flop, the wire delay between the flops,\n  and the setup time of the second flop should be considered.\n\n  Note: The specification of the data path for -datapath_only must use the\n  -from option to define the startpoint for the path. The hold check for the\n  specified path is automatically defined as a false path when using the\n  -datapath_only option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <delay> - (Required) Specifies the maximum delay value specified in\n  nanoseconds. The <delay> is specified in nanoseconds (ns) as a positive or\n  negative floating point number, with a default value of 0.\n\nExamples:\n\n  The following example defines a maximum delay of 60 ns between all the\n  input and output ports (feedthrough paths):\n\n    set_max_delay 60 -from [all_inputs] -to [all_outputs] \n    \n\n  The following example clears the existing max delay and specifies a new >\n  maximum delay for paths to endpoints clocked by the specified clock:\n\n    set_max_delay -reset_path 50 -to [get_clocks spi_clk] \n    \n\n  The set_max_delay command is often used with -datapath_only to constrain\n  asynchronous clock domains crossing when a simple synchronizer is used on\n  the destination clock domain. In the following example, two flops (FF1 and\n  FF2) are clocked by different clocks, and FF1/Q connects directly to FF2/D\n  through net1. To limit the delay on this connection to 4.0 ns use the\n  following constraints:\n\n    set_max_delay -from FF1/C -to FF2/D -datapath_only 4.0 \n    \n\nSee Also:\n\n   *  get_clocks\n   *  get_nets\n   *  get_ports\n   *  report_timing\n   *  set_input_delay\n   *  set_min_delay\n   *  set_output_delay\n   *  set_units\n",
"create_drc_violation": "create_drc_violation\n\nDescription: \nCreate a DRC violation\n\nSyntax: \ncreate_drc_violation  -name <arg> [-severity <arg>] [-msg <arg>] [-quiet]\n                      [-verbose] [<objects>...]\n\nUsage: \n  Name         Description\n  ------------------------\n  -name        Specify the name for this rule.  This is the typically a 4-6 \n               letter specification for your rule.\n  [-severity]  Specify severity level for a DRC rule.\n               Default: WARNING.\n               Values: FATAL, ERROR, CRITICAL WARNING, WARNING, ADVISORY.\n  [-msg]       Specify your message string for this DRC rule.\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<objects>]  Cells, ports, pins, nets, clock regions, sites, package banks \n               to query.\n\nCategories: \nDRC, Report\n\nDescription:\n\n  Create a DRC violation object and manage the list of design objects\n  associated with the violation for reporting by the report_drc command.\n\n  The create_drc_violation command is specified as part of the Tcl checker\n  procedure that defines and implements the checking feature of a\n  user-defined design rule check created by the create_drc_check command. A\n  violation object is created by the Tcl checker each time a violation of the\n  design rule is encountered.\n\n  The process in brief is:\n\n   *  Write a Tcl checker procedure to define the method applied when\n      checking the user-defined rule, and the objects to check against the\n      rule. The Tcl checker procedure is defined in a separate Tcl script\n      that must be loaded by the source command prior to running report_drc.\n\n   *  Use create_drc_violation in the Tcl checker to identify and flag\n      violations found when checking the rule against a design.\n\n   *  Define a user-defined DRC rule check using the create_drc_check command\n      that calls the Tcl checker proc from the -rule_body.\n\n   *  Create a rule deck using the create_drc_ruledeck command, and add the\n      user-defined rule check to the rule deck using the add_drc_checks\n      command.\n\n   *  Run report_drc, and specify either the rule deck, or the user-defined\n      rule check to check for violations.\n\n  Violations are reported by the report_drc command, and violation objects\n  can be returned by the get_drc_violations command. The design objects\n  associated with a DRC violation object can be obtained using the\n  -of_objects option of the appropriate get_* command, such as get_cells,\n  get_nets, or get_ports for instance:\n\n    get_ports -of_objects [get_drc_violations -name drc_1 NSTD*] \n    \n\nArguments:\n\n  -name <arg> - (Required) The name of the design rule check associated with\n  the violation. This should be the same name used by the create_drc_check\n  command which calls the associated Tcl checker procedure from its\n  -rule_body argument. Messages from the create_drc_violation command are\n  passed up to the drc_check with the same -name.\n\n  -severity <arg> - (Optional) The severity of the created violation. This\n  allows individual DRC violations to override the default severity of a\n  specific rule check. The default severity for user-defined DRCs is\n  determined by the definition of -severity in the create_drc_check command.\n  The supported values are:\n\n   *  ERROR\n\n   *  'CRITICAL WARNING'\n\n   *  WARNING\n\n   *  ADVISORY\n\n  Note: The SEVERITY is stored as a property on the DRC rule associated with\n  the DRC violation object.\n\n  -msg <arg> - (Optional) This is a violation specific message that is\n  substituted for the general string variable (%STR) specified in the\n  optional placeholder message defined in the create_drc_check command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) Cell, port, pin, net, clock region, site, and\n  package I/O bank objects associated with violations found by the Tcl\n  checker procedure that are substituted into the placeholder message of the\n  drc_object with the same -name. Design objects map to substitution keys in\n  the message as follows:\n\n   *  %ELG - netlist elements such as cells, ports, pins, and nets.\n\n   *  %CRG - clock regions.\n\n   *  %SIG - device sites.\n\n   *  %PBG - package I/O banks.\n\n  Note: Both the order and the type of <objects> passed from the\n  create_drc_violation command must match the -msg specification from the\n  create_drc_check command, or the expected substitution will not occur.\n\nExamples:\n\n  The following Tcl script defines the dataWidthCheck procedure which is\n  called by the -rule_body argument of the RAMW-1 check. This Tcl script file\n  must be loaded into the tool using the source command, prior to running the\n  report_drc command.\n\n  Some features of the Tcl checker proc to notice are:\n\n   *  A list variable is created to store violations ($vios )\n\n   *  A violation object is created, and added to the list variable, each\n      time a violation is found.\n\n   *  The placeholder key %ELG in the $msg string is dynamically substituted\n      with the specific $bram cell associated with the violation.\n\n   *  The dataWidthCheck proc returns an error code when any violations are\n      found ($vios >0) to inform the report_drc command of the results of the\n      check.\n\n   *  The list of violations is passed along with the return code, and the\n      violations are reported by report_drc.\n\n    # This is a simplistic check -- report BRAM cells with WRITE_WIDTH_B  \n    # wider than 36.  \n    proc dataWidthCheck {} {  \n      # list to hold violations  \n      set vios {}  \n     \n      # iterate through the objects to be checked  \n      foreach bram [get_cells -hier -filter {PRIMITIVE_SUBGROUP == bram}] {  \n        set bwidth [get_property WRITE_WIDTH_B $bram]  \n        if { $bwidth > 36} {  \n          # define the message to report when violations are found  \n          set msg 'On cell %ELG, WRITE_WIDTH_B is $bwidth'  \n          set vio [ create_drc_violation -name {RAMW-1} -msg $msg $bram ]  \n          lappend vios $vio  \n        }  \n      }  \n      if {[llength $vios] > 0} {  \n        return -code error $vios  \n      } else {  \n        return {}  \n      }  \n     \n    }  \n    create_drc_check -name {RAMW-1} -hiername {RAMB Checks} \\  \n       -desc {Data Width Check} -rule_body dataWidthCheck \\  \n       -severity Advisory \n    \n\n  Note: The script file can contain both the Tcl checker procedure, and the\n  create_drc_check command that defines it for use by report_drc command. In\n  this case, when the Tcl script file is sourced, both the dataWidthCheck\n  proc and the RAMW-1 design rule check are loaded into the tool.\n\nSee Also:\n\n   *  add_drc_checks\n   *  create_drc_ruledeck\n   *  create_drc_check\n   *  get_cells\n   *  get_drc_checks\n   *  get_drc_violations\n   *  get_nets\n   *  get_pins\n   *  get_ports\n   *  get_sites\n   *  report_drc\n   *  set_property\n",
"import_synplify": "import_synplify\n\nDescription: \nImports the given Synplify project file\n\nSyntax: \nimport_synplify  [-copy_sources] [-quiet] [-verbose] <file>\n\nReturns: \nlist of files object that were imported from the Synplify file\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-copy_sources]  Copy all the sources from synplify project file into the \n                   created project\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <file>           Name of the Synplify project file to be imported\n\nCategories: \nProject\n\nDescription:\n\n  Imports Synplify synthesis project files (.prj) into the current project,\n  including the various source files used in the synthesis run.\n\nArguments:\n\n  -copy_sources - (Optional) Copy Synplify project source files to the local\n  project directory structure rather than referencing them from their current\n  location. The default is to reference source files from their current\n  location.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the Synplify project file from which to\n  import the source files.\n\nExamples:\n\n  The following example creates a new project and imports the specified\n  Synplify project file, copying the various source files from the Synplify\n  project into the local project directories:\n\n    create_project syn_test C:/Data/FPGA_Design/syn_test   \n    import_synplify -copy_sources C:/Data/syn_data.prj \n    \n\nSee Also:\n\n   *  create_project\n",
"config_timing_analysis": "config_timing_analysis\n\nDescription: \nConfigure timing analysis general settings\n\nSyntax: \nconfig_timing_analysis  [-enable_input_delay_default_clock <arg>]\n                        [-enable_preset_clear_arcs <arg>]\n                        [-ignore_io_paths <arg>] [-disable_flight_delays <arg>]\n                        [-merge_exceptions <arg>]\n                        [-timing_early_launch_at_borrowing_latches <arg>]\n                        [-enable_time_borrowing_for_max_delay_exceptions <arg>]\n                        [-quiet] [-verbose]\n\nUsage: \n  Name                                               Description\n  --------------------------------------------------------------\n  [-enable_input_delay_default_clock]                Launch SDC unclocked \n                                                     input delays from an \n                                                     internally defined \n                                                     clock: Values: true, \n                                                     false; This option is \n                                                     not supported for UCF \n                                                     constraints\n  [-enable_preset_clear_arcs]                        Time paths through \n                                                     asynchronous preset or \n                                                     clear timing arcs: true,\n                                                     false; \n  [-ignore_io_paths]                                 Ignore paths from \n                                                     primary inputs and paths\n                                                     to primary outputs: \n                                                     Values: true, false\n  [-disable_flight_delays]                           Disable adding package \n                                                     times to IO Calculations\n                                                     : Values: true, false; \n  [-merge_exceptions]                                Allow/Prevent the timing\n                                                     engine from merging \n                                                     timing exceptions : \n                                                     Values: true, false; \n  [-timing_early_launch_at_borrowing_latches]        Remove clock latency \n                                                     pessimism from the \n                                                     launching enable of \n                                                     paths through \n                                                     transparent latches. \n                                                     Values: auto, true, \n                                                     false\n                                                     Default: auto\n  [-enable_time_borrowing_for_max_delay_exceptions]  Allow timing paths \n                                                     covered by set_max_delay\n                                                     timing exceptions to \n                                                     borrow time. Values: \n                                                     true, false\n  [-quiet]                                           Ignore command errors\n  [-verbose]                                         Suspend message limits \n                                                     during command execution\n\nCategories: \nTiming\n\nDescription:\n\n  This command configures general features of timing analysis.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -enable_input_delay_default_clock [ true | false ] - (Optional) Launch\n  un-clocked input delays from an internally defined clock for timing\n  analysis. The valid values are true or false, with a default setting of\n  false.\n\n  -enable_preset_clear_arcs [ true | false ] - (Optional) Enable timing paths\n  through asynchronous preset or clear timing arcs. The valid values are true\n  or false, with a default setting of false. By default the timing arcs of\n  asynchronous resets are disabled in the Vivado timing engine. This option\n  lets you enable them for timing analysis to see if problems caused by the\n  assertion of the asynchronous reset exist in the design.\n\n  -ignore_io_paths [ true | false ] - (Optional) Ignore paths from primary\n  inputs and paths to primary outputs. This lets you eliminate the net delay\n  from the input port and to the output port as part of the timing path.\n\n  -disable_flight_delays [ true | false ] - (Optional) Do not add package\n  delays to I/O calculations when this option is true.\n\n  -timing_early_launch_at_borrowing_latches [ auto | true | false ] -\n  (Optional) Remove clock latency pessimism from the launching enable of\n  paths through transparent latches. In an enabled latch the timing path for\n  setup/hold calculations originates from the D pin of the latch instead of G\n  pin. This option affects those timing paths. This option can be set to true\n  to compensate for timing optimism when CRPR is not enabled, the Vivado\n  timing engine uses the early launch edge from when the latch opens to\n  calculate the launch clock latency. However, when CRPR is enabled, which is\n  the default in the Vivado timer, this option is too conservative and should\n  be set to false. The default setting is auto which lets the Vivado timing\n  engine determine when to eliminate CRPR from paths through enabled latches.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example ignores the package delays during timing analysis:\n\n    config_timing_analysis -disable_flight_delays true\n\nSee Also:\n\n   *  report_config_timing\n   *  config_timing_corners\n   *  report_timing\n   *  report_timing_summary\n",
"config_timing_corners": "config_timing_corners\n\nDescription: \nConfigure single / multi corner timing analysis settings\n\nSyntax: \nconfig_timing_corners  [-corner <arg>] [-delay_type <arg>] [-setup] [-hold]\n                       [-quiet] [-verbose]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-corner]      Name of the timing corner to be modified : Values: Slow, \n                 Fast\n  [-delay_type]  Type of path delays to be analyzed for specified timing \n                 corner: Values: none, max, min, min_max\n  [-setup]       Enable timing corner for setup analysis (equivalent to \n                 -delay_type max)\n  [-hold]        Enable timing corner for hold analysis (equivalent to \n                 -delay_type min)\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nTiming\n\nDescription:\n\n  This command configures the Slow and Fast timing corners in the current\n  design for single or multi-corner timing analysis. A synthesized or\n  implemented design must be opened when running this command.\n\n  The variation in the manufacturing process of the physical device, and the\n  voltage and temperature at which the device is operating, combine to create\n  a timing corner. These three variables (PVT) determine the delay across the\n  device. The fast corner represents a device operating with the smallest\n  manufacturing process tolerances, the highest voltage, and the lowest\n  temperature. The slow corner represents a device operating with the\n  greatest manufacturing tolerances, the lowest voltage, and the highest\n  temperature. By default the Vivado Design Suite performs both a setup and\n  hold analysis for both slow and fast process corners, also known as quad\n  analysis:\n\n    config_timing_corners -corner Slow -setup -hold\n    config_timing_corners -corner Fast -setup -hold\n\n  The config_timing_corners command can be used to limit the default four\n  corner analysis performed by the Vivado timing engine as appropriate to the\n  design, to improve timing performance. To change or disable the default\n  analysis for both corners, you must configure both the Fast and Slow\n  corners:\n\n    config_timing_corners -corner Slow -delay_type max\n    config_timing_corners -corner Fast -delay_type none\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -corner [ slow | fast ] - (Optional) Specifies the timing corner to be\n  configured. Valid values are 'slow' and 'fast'. If -corner is not\n  specified, the -delay_type applies to both corners.\n\n  -delay_type <value> - (Optional) Specify the type of path delays to be\n  analyzed for the specified timing corner. Valid values are 'none', 'max',\n  'min' and 'min_max'. A -delay_type of 'none' excludes the specified -corner\n  from timing analysis.\n\n  Tip: Although -delay_type and -setup/-hold are both optional, one of these\n  options are required to configure the specified corner.\n\n  -setup - (Optional) Specifies setup analysis for the specified timing\n  corner. This is the same as -delay_type max.\n\n  -hold - (Optional) Specifies hold analysis for the timing corner. This is\n  the same as -delay_type min.\n\n  Tip: You can specify both -setup and -hold which is the same as -delay_type\n  min_max.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example configures the Slow timing corner for both setup and\n  hold analysis:\n\n    config_timing_corners -corner slow -setup -hold\n    config_timing_corners -corner slow -delay_type min_max\n\n  Note: The two preceding examples have the same effect.\n\n  The following example configures the Fast corner for min delay analysis,\n  and disables the Slow corner analysis:\n\n    config_timing_corners -corner fast -delay_type min\n    config_timing_corners -corner slow -delay_type none\n\nSee Also:\n\n   *  config_timing_analysis\n   *  report_config_timing\n   *  report_timing\n",
"get_lib_cells": "get_lib_cells\n\nDescription: \nGet a list of Library Cells\n\nSyntax: \nget_lib_cells  [-regexp] [-filter <arg>] [-nocase] [-include_unsupported]\n               [-device <arg>] [-of_objects <args>] [-quiet] [-verbose]\n               <patterns>\n\nReturns: \nlist of library cells\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-regexp]               Patterns are regular expressions.\n  [-filter]               Filter list with expression.\n  [-nocase]               Perform case-insensitive matching when a pattern \n                          has been specified. This argument applies to the \n                          use of -regexp only.\n  [-include_unsupported]  Include test-only library cells.\n  [-device]               Include only library cells supported on device\n  [-of_objects]           Get the library cells of the objects passed in \n                          here. Valid objects are cells or instances (ie, \n                          get_cells), cell pins (ie, get_pins) and library \n                          pins (ie, get_lib_pins).\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  <patterns>              Match library cell names against patterns.\n\nCategories: \nObject\n\nDescription:\n\n  Get a list of cells in the library for the target part of the current\n  design. Use this command to query and look for a specific library cell, or\n  type of cell and to get the properties of the cells.\n\n  This command requires a hierarchical name which includes the library name\n  as well as the cell name: lib_name/cell_name.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_lib_cells based on property values on the cells. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get a list of library cells of specific\n  cells, pins, or library pins.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Required) Match library cells against the specified patterns.\n  The pattern must specify both the library name and the cell name.\n\nExamples:\n\n  The following example gets the number of the cells in the library for the\n  target part in the current design, and then gets the number of AND type\n  cells in that library:\n\n    llength [get_lib_cells [get_libs]/*]  \n    795  \n    llength [get_lib_cells [get_libs]/AND*]  \n    18 \n    \n\n  The following example gets the library cell for the specified cell object:\n\n    get_lib_cells -of_objects [lindex [get_cells] 1] \n    \n\nSee Also:\n\n   *  get_cells\n   *  get_libs\n   *  get_lib_pins\n   *  list_property\n   *  report_property\n",
"remove_files": "remove_files\n\nDescription: \nRemove files or directories from a fileset\n\nSyntax: \nremove_files  [-fileset <arg>] [-quiet] [-verbose] <files>...\n\nReturns: \nlist of files that were removed\n\nUsage: \n  Name        Description\n  -----------------------\n  [-fileset]  Fileset name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <files>     Name of the file(s) to be removed\n\nCategories: \nProject, Simulation\n\nDescription:\n\n  Removes the specified file objects from the current or specified fileset.\n  The file is removed from the current project, but is not removed from the\n  disk.\n\n  Files can be specified as file name strings, or as file objects returned by\n  the get_files command. When specified as strings, the file is looked for in\n  the current or specified fileset. When the file object is specified by\n  get_files, the fileset is defined by the object, and -fileset is ignored.\n\n  When successful, this command returns nothing. If the specified file is not\n  found, an error is returned.\n\nArguments:\n\n  -fileset <arg> - (Optional) The name of the fileset to locate the specified\n  files. As a default, the files will be removed from the current fileset as\n  defined by the current_fileset command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) The name of the files to remove from the project.\n\n  Note: If no files are specified, no files are removed.\n\nExamples:\n\n  The following example removes the file named C:/Design/top.xdc from the\n  constraint set constrs_1:\n\n    remove_files -fileset constrs_1 C:/Design/top.xdc  \n    \n\n  Multiple files can be specified as follows:\n\n    remove_files -fileset sim_1 top_tb1.vhdl top_tb2.vhdl  \n    \n\n  The following example gets all the file objects in the current project, and\n  removes them:\n\n    remove_files [get_files] \n    \n\n  Note: This will remove ALL files from your design.\n\nSee Also:\n\n   *  add_files\n   *  current_fileset\n   *  get_files\n",
"highlight_objects": "highlight_objects\n\nDescription: \nHighlight objects in different colors\n\nSyntax: \nhighlight_objects  [-color_index <arg>] [-rgb <args>] [-color <arg>]\n                   [-leaf_cells] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-color_index]  Color index\n  [-rgb]          RGB color index list\n  [-color]        Valid values are red green blue magenta yellow cyan and \n                  orange\n  [-leaf_cells]   Leaf cells\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <objects>       Objects to highlight\n\nCategories: \nGUIControl\n\nDescription:\n\n  Highlights the specified or selected object or objects in a color as\n  determined by one of the available color options.\n\n  Note: Only one of the available color option should be used to specify the\n  highlight color. However, if more than one color option is used, the order\n  of precedence to define the color is -rgb, -color_index, and -color.\n\n  Selected objects are automatically unselected in order to display the\n  objects in the specified highlight color. Objects can be unhighlighted with\n  the unhighlight_objects command.\n\nArguments:\n\n  -color_index <arg> - (Optional) Valid values are integers from 1 to 20.\n  Specifies the color index to use for highlighting the selected object or\n  objects. The color indexes are displayed, and can be configured, on the\n  Colors > Highlight page of the Tools > Settings dialog box. Refer to the\n  Vivado Design Suite User Guide: Using the IDE (UG893) for more information\n  on setting colors.\n\n  -rgb <args> - (Optional) The color to use in the form of an RGB code\n  specified as {R G B}. For instance, {255 255 0} specifies the color yellow.\n\n  -color <arg> - (Optional) The color to use for highlighting the specified\n  object or objects. Supported highlight colors are: red, green, blue,\n  magenta, yellow, cyan, and orange.\n\n  Note: White is the color used to display selected objects with the\n  select_objects command.\n\n  -leaf_cells <arg> - (Optional) Specifies one or more cell names or objects\n  to highlight with the specified color.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) Specifies one or more objects to be highlighted.\n\nExamples:\n\n  The following example highlights the currently selected objects in the\n  color red:\n\n    highlight_objects -color red [get_selected_objects] \n    \n\n  This example highlights the specified cells in green:\n\n    highlight_objects -color green -leaf_cells [get_cells cpuEngine/*]\n\nSee Also:\n\n   *  get_highlighted_objects\n   *  get_marked_objects\n   *  get_selected_objects\n   *  mark_objects\n   *  select_objects\n   *  unhighlight_objects\n",
"get_selected_objects": "get_selected_objects\n\nDescription: \nGet selected objects\n\nSyntax: \nget_selected_objects  [-primary] [-quiet] [-verbose]\n\nReturns: \nlist of selected objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-primary]  Do not include objects that were selected due to selection \n              rules\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nObject, GUIControl\n\nDescription:\n\n  Gets the objects currently selected in the Vivado IDE by the select_objects\n  command. Can get the primary selected object and any secondary selected\n  objects as well.\n\n  Note: This Tcl command works only when Vivado is run in GUI mode.\n\n  Primary objects are directly selected, while secondary objects are selected\n  based on the selection rules currently defined by the Tools > Settings\n  command. Refer to the Vivado Design Suite User Guide: Using the IDE (UG893)\n  for more information on setting selection rules.\n\n  This command returns a Tcl list of selected objects, even a list with just\n  one object. This can be an issue for some of the Vivado tool commands that\n  do not accept a list of objects, such as the current_instance command. In\n  this case you can use lindex to pass a specific object from the\n  get_selected_objects list to the current_instance command:\n\n    current_instance [lindex [get_selected_objects] 0] \n    \n\nArguments:\n\n  -primary - (Optional) Indicates that only the primary selected object or\n  objects should be returned; not secondary objects. As a default\n  get_selected_objects will return all currently selected objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the properties of all currently selected\n  objects, both primary and secondary:\n\n    report_property [get_selected_objects] \n    \n\nSee Also:\n\n   *  get_highlighted_objects\n   *  get_marked_objects\n   *  highlight_objects\n   *  mark_objects\n   *  select_objects\n",
"generate_shx_platform": "generate_shx_platform\n\nDescription: \nMove HD.RECONFIGURABLE and related properties to sub-cells\n\nSyntax: \ngenerate_shx_platform  [-base_platform <arg>] [-wrapper <arg>] [-output <arg>]\n                       [-reconfig_platform <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-base_platform]      Specify Base Platform DCP path.\n  [-wrapper]            Specify wrapper DCP path\n  [-output]             Specify output DCP name.\n  [-reconfig_platform]  Specify reconfigurable platform name\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nFileIO\n",
"get_clock_regions": "get_clock_regions\n\nDescription: \nGet the clock regions for the current device.\n\nSyntax: \nget_clock_regions  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                   [-quiet] [-verbose] [<patterns>]\n\nReturns: \nclock_regions\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions.\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified).\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the clock_regions of these tiles, sites, slrs, cells, or\n                 package bank\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match objects' name against patterns.\n                 Default: *\n\nCategories: \nDevice, Object\n\nDescription:\n\n  Gets a list of clock regions on the target part that match a specified\n  search pattern. The default command gets a list of all clock regions on the\n  device in an open design.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_clock_regions based on property values on the clock regions. You can\n  find the properties on an object with the report_property or list_property\n  commands. Any property/value pair can be used as a filter. In the case of\n  the clock region object, 'COLUMN_INDEX', 'HIGH_X', and 'LOW_X' are some of\n  the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the clock regions of the SLRs that the\n  clock region is part of using the get_slrs command. Or get the\n  clock_regions that the specified tiles, device sites, I/O banks, or cells\n  are assigned to.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match clock regions against the specified patterns.\n  The default pattern is the wildcard `*` which gets a list of all clock\n  regions on the device. More than one search pattern can be specified to\n  find clock regions based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the clock regions matching the search pattern:\n\n    get_clock_regions X0* \n    \n\n  The following example returns the clock regions filtered by the specified\n  property:\n\n    get_clock_regions -filter {LOW_X==0} \n    \n\n  Note: These two examples return the same set of clock regions.\n\n  The following example returns the clock regions that the specified ILA\n  debug core trigger is assigned to, or placed in:\n\n    get_clock_regions -of_objects [get_cells -hierarchical basic_trigger*] \n    \n\nSee Also:\n\n   *  get_sites\n   *  list_property\n   *  report_property\n",
"socket": "socket(n)             Tcl Built-In Commands             socket(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       socket - Open a TCP network connection\n\nSYNOPSIS\n       socket ?options? host port\n\n       socket -server command ?options? port\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command opens a network socket and returns a channel\n       identifier that may be used in future invocations of  com-\n       mands  like read, puts and flush.  At present only the TCP\n       network  protocol  is  supported;   future  releases   may\n       include support for additional protocols.  The socket com-\n       mand may be used to open either the client or server  side\n       of  a  connection, depending on whether the -server switch\n       is specified.\n\n       Note that the default encoding for all sockets is the sys-\n       tem encoding, as returned by encoding system.  Most of the\n       time, you will need to use fconfigure  to  alter  this  to\n       something  else,  such  as  utf-8 (ideal for communicating\n       with other Tcl processes) or iso8859-1  (useful  for  many\n       network protocols, especially the older ones).\n\nCLIENT SOCKETS\n       If  the  -server  option is not specified, then the client\n       side of a connection is opened and the command  returns  a\n       channel  identifier  that can be used for both reading and\n       writing.  Port and host specify  a  port  to  connect  to;\n       there must be a server accepting connections on this port.\n       Port is an integer port number  (or  service  name,  where\n       supported and understood by the host operating system) and\n       host is either a domain-style name such as www.tcl.tk or a\n       numerical  IP address such as 127.0.0.1.  Use localhost to\n       refer to the host on which the command is invoked.\n\n       The following options may also be present before  host  to\n       specify additional information about the connection:\n\n       -myaddr addr\n              Addr  gives  the  domain-style name or numerical IP\n              address of the client-side network interface to use\n              for  the  connection.  This option may be useful if\n              the client machine has multiple network interfaces.\n              If  the  option  is  omitted  then  the client-side\n              interface will be chosen by the system software.\n\n       -myport port\n              Port specifies an integer port number  (or  service\n              name,  where  supported  and understood by the host\n              operating system) to use for the client's  side  of\n              the  connection.   If  this  option is omitted, the\n              client's port number will be chosen  at  random  by\n              the system software.\n\n       -async The  -async  option will cause the client socket to\n              be connected asynchronously. This  means  that  the\n              socket  will be created immediately but may not yet\n              be connected to the server, when the call to socket\n              returns. When a gets or flush is done on the socket\n              before the connection attempt succeeds or fails, if\n              the  socket is in blocking mode, the operation will\n              wait until the connection is completed or fails. If\n              the  socket  is  in  nonblocking mode and a gets or\n              flush is done on the socket before  the  connection\n              attempt  succeeds  or  fails, the operation returns\n              immediately and fblocked on the socket  returns  1.\n              Synchronous  client  sockets may be switched (after\n              they have connected) to operating  in  asynchronous\n              mode using:\n                     fconfigure chan -blocking 0\n\n              See the fconfigure command for more details.\n\nSERVER SOCKETS\n       If  the  -server  option  is specified then the new socket\n       will be a server for the port given  by  port  (either  an\n       integer  or a service name, where supported and understood\n       by the host operating system; if port is zero, the operat-\n       ing  system will allocate a free port to the server socket\n       which may be discovered by using fconfigure  to  read  the\n       -sockname  option).  Tcl will automatically accept connec-\n       tions to the given port.  For  each  connection  Tcl  will\n       create  a new channel that may be used to communicate with\n       the client.  Tcl then invokes  command  with  three  addi-\n       tional  arguments:  the  name  of  the  new  channel,  the\n       address, in network  address  notation,  of  the  client's\n       host, and the client's port number.\n\n       The  following  additional  option  may  also be specified\n       before host:\n\n       -myaddr addr\n              Addr gives the domain-style name  or  numerical  IP\n              address of the server-side network interface to use\n              for the connection.  This option may be  useful  if\n              the server machine has multiple network interfaces.\n              If the option is omitted then the server socket  is\n              bound  to the special address INADDR_ANY so that it\n              can accept connections from any interface.\n\n       Server channels cannot be used for input or output;  their\n       sole use is to accept new client connections. The channels\n       created for each incoming client connection are opened for\n       input  and  output.  Closing the server channel shuts down\n       the server so that no new connections  will  be  accepted;\n       however, existing connections will be unaffected.\n\n       Server  sockets  depend on the Tcl event mechanism to find\n       out when new connections are opened.  If  the  application\n       does not enter the event loop, for example by invoking the\n       vwait command or calling the C  procedure  Tcl_DoOneEvent,\n       then no connections will be accepted.\n\n       If  port  is  specified as zero, the operating system will\n       allocate an unused port for use as a server  socket.   The\n       port  number  actually allocated may be retrieved from the\n       created server socket  using  the  fconfigure  command  to\n       retrieve the -sockname option as described below.\n\nCONFIGURATION OPTIONS\n       The  fconfigure command can be used to query several read-\n       only configuration options for socket channels:\n\n       -error This option gets the current error  status  of  the\n              given  socket.   This  is  useful  when you need to\n              determine if an asynchronous connect operation suc-\n              ceeded.   If  there was an error, the error message\n              is returned.  If  there  was  no  error,  an  empty\n              string is returned.\n\n       -sockname\n              This  option  returns a list of three elements, the\n              address, the host name and the port number for  the\n              socket.  If  the  host name cannot be computed, the\n              second element is identical  to  the  address,  the\n              first element of the list.\n\n       -peername\n              This option is not supported by server sockets. For\n              client and accepted sockets, this option returns  a\n              list  of three elements; these are the address, the\n              host name and the port to which the peer socket  is\n              connected or bound. If the host name cannot be com-\n              puted, the second element of the list is  identical\n              to the address, its first element.\n\n\nEXAMPLES\n       Here is a very simple time server:\n              proc Server {channel clientaddr clientport} {\n                 puts 'Connection from $clientaddr registered'\n                 puts $channel [clock format [clock seconds]]\n                 close $channel\n              }\n\n              socket -server Server 9900\n              vwait forever\n\n       And  here  is  the  corresponding  client  to  talk to the\n       server:\n              set server localhost\n              set sockChan [socket $server 9900]\n              gets $sockChan line\n              close $sockChan\n              puts 'The time on $server is $line'\n\n\nSEE ALSO\n       fconfigure(n), flush(n), open(n), read(n)\n\n\nKEYWORDS\n       bind, channel,  connection,  domain  name,  host,  network\n       address, socket, tcp\n\n\n\nTcl                            8.0                      socket(n)\n",
"tell": "tell(n)               Tcl Built-In Commands               tell(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       tell - Return current access position for an open channel\n\nSYNOPSIS\n       tell channelId\n_________________________________________________________________\n\n\nDESCRIPTION\n       Returns  an integer string giving the current access posi-\n       tion in channelId.  This value returned is a  byte  offset\n       that  can be passed to seek in order to set the channel to\n       a particular position.  Note that this value is  in  terms\n       of bytes, not characters like read.  The value returned is\n       -1 for channels that do not support seeking.\n\n       ChannelId must be an identifier for an open  channel  such\n       as  a Tcl standard channel (stdin, stdout, or stderr), the\n       return value from an invocation of open or socket, or  the\n       result  of  a  channel  creation command provided by a Tcl\n       extension.\n\nEXAMPLE\n       Read a line from a file channel only  if  it  starts  with\n       foobar:\n              # Save the offset in case we need to undo the read...\n              set offset [tell $chan]\n              if {[read $chan 6] eq 'foobar'} {\n                  gets $chan line\n              } else {\n                  set line {}\n                  # Undo the read...\n                  seek $chan $offset\n              }\n\n\nSEE ALSO\n       file(n),  open(n),  close(n),  gets(n), seek(n), Tcl_Stan-\n       dardChannels(3)\n\n\nKEYWORDS\n       access position, channel, seeking\n\n\n\nTcl                            8.1                        tell(n)\n",
"create_gui_custom_command_arg": "create_gui_custom_command_arg\n\nDescription: \nCreate a custom command argument for a custom command in the GUI\n\nSyntax: \ncreate_gui_custom_command_arg  -command_name <arg> -arg_name <arg>\n                               [-default <arg>] [-comment <arg>] [-optional]\n                               [-quiet] [-verbose]\n\nUsage: \n  Name           Description\n  --------------------------\n  -command_name  Unique name of the custom command for which an argument is \n                 being created.\n  -arg_name      Unique name of the custom command argument to create.\n  [-default]     Default value of the custom command argument.\n  [-comment]     Comment for the custom command argument.\n  [-optional]    Make the custom command argument optional.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  This commands defines an argument for a specific custom GUI command.\n\n  You can use the get_gui_custom_commands to determine the list of defined\n  custom commands. You can use the get_gui_custom_command_args to determine\n  the list of defined GUI custom command arguments of a particular GUI custom\n  command.\n\nArguments:\n\n  -command_name - (Required) The name of the custom GUI command to create an\n  argument for.\n\n  -arg_name - (Required) The unique name of the argument to create.\n\n  -default - (Optional) Specifies a default value for the argument.\n\n  -comment - (Optional) Comment for the custom command argument.\n\n  -optional - (Optional) Make the custom command argument optional.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  This example creates an argument named 'quiet' for the custom GUI command\n  print_version. The argument is defined as optional and its default value is\n  -quiet.\n\n    create_gui_custom_command_arg -command_name print_version -arg_name quiet \\ \n    -default '-quiet' -comment 'Ignore commands errors' -optional\n\nSee Also:\n\n   *  create_gui_custom_command\n   *  get_gui_custom_command_args\n   *  get_gui_custom_commands\n   *  remove_gui_custom_command_arg\n   *  remove_gui_custom_command\n",
"get_board_component_pins": "get_board_component_pins\n\nDescription: \nGets the list of board_part pins object\n\nSyntax: \nget_board_component_pins  [-regexp] [-nocase] [-filter <arg>]\n                          -of_objects <args> [-quiet] [-verbose]\n                          [<patterns>...]\n\nReturns: \nlist of pins in the board_part\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching\n  [-filter]     Filter list with expression\n  -of_objects   Get 'board_component_pin' objects of these types: \n                'board_component board_bus_net'.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  match board component pin names against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of individual board component pins of the specified board\n  component object of the current_board.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  Board components define the list of components found on the board defined\n  by the Board Interface file. Component pins enumerate the individual pins\n  of the component.\n\n  This command returns a list of component pin objects, or returns an error\n  if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_component_pins based on property values on the component pins.\n  You can find the properties on an object with the report_property or\n  list_property commands. Any property/value pair can be used as a filter. In\n  the case of the board component pin object, 'NAME', 'IOSTANDARD', and\n  'PIN_INDEX' are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Required) Get the component pins of the specified\n  board_bus_net, or board_component objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match board component pins against the specified\n  search patterns. The default pattern is the wildcard `*` which gets a list\n  of all component pins of the specified objects.\n\nExamples:\n\n  The following example gets the component pins associated with the specified\n  Xilinx device (part0) component object of the current board:\n\n    get_board_component_pins -of_objects [get_board_components *part0*] \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_buses\n   *  get_board_components\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"reset_methodology_check": "reset_methodology_check\n\nDescription: \nReset one or more Methodology checks to factory defaults.\n\nSyntax: \nreset_methodology_check  [-quiet] [-verbose] [<checks>...]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<checks>]  The list of checks to reset.\n\nCategories: \nMethodology, Object\n\nDescription:\n\n  Reset the specified methodology checks to the defaults provided by the\n  Vivado Design Suite. This will restore the check to its default\n  configuration, including any changes to the IS_ENABLED or SEVERITY\n  properties.\n\n  The IS_ENABLED property can be modified on a specific methodology check to\n  disable the rule from being checked, even when it is specified directly in\n  the report_methodology command.\n\n  The SEVERITY property is an enumerated property that can be modified to\n  change the severity associated with a specific methodology check when a\n  violation is found during the report_methodology command. The supported\n  values are: FATAL, ERROR, 'CRITICAL WARNING', WARNING, ADVISORY\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <checks> - (Required) The list of one or more DRC rule checks to reset to\n  the tool defaults.\n\nExamples:\n\n  The following example modifies the IS_ENABLED and SEVERITY properties for\n  the CHECK-4 methodology check, reports the properties of the check to see\n  the changes, and then resets the methodology check to its default setting:\n\n    set_property IS_ENABLED false [get_methodology_checks CHECK-4]  \n    set_property SEVERITY Warning [get_methodology_checks CHECK-4]  \n    report_property [get_methodology_checks CHECK-4]  \n    reset_methodology_check [get_methodology_checks CHECK-4]  \n    report_property [get_methodology_checks CHECK-4] \n    \n\nSee Also:\n\n   *  get_methodology_checks\n   *  report_methodology\n   *  reset_methodology\n",
"open": "open(n)               Tcl Built-In Commands               open(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       open - Open a file-based or command pipeline channel\n\nSYNOPSIS\n       open fileName\n       open fileName access\n       open fileName access permissions\n_________________________________________________________________\n\nDESCRIPTION\n       This  command  opens  a  file,  serial  port,  or  command\n       pipeline and returns a channel identifier that may be used\n       in  future  invocations  of  commands like read, puts, and\n       close.  If the first character of fileName is not  |  then\n       the  command  opens a file: fileName gives the name of the\n       file to open, and  it  must  conform  to  the  conventions\n       described in the filename manual entry.\n\n       The  access  argument,  if  present,  indicates the way in\n       which the file (or command pipeline) is  to  be  accessed.\n       In  the  first  form  access may have any of the following\n       values:\n\n       r              Open the file for reading  only;  the  file\n                      must  already  exist.  This  is the default\n                      value if access is not specified.\n\n       r+             Open the file for both reading and writing;\n                      the file must already exist.\n\n       w              Open  the  file for writing only.  Truncate\n                      it if it exists.  If  it  does  not  exist,\n                      create a new file.\n\n       w+             Open  the  file  for  reading  and writing.\n                      Truncate it if it exists.  If it  does  not\n                      exist, create a new file.\n\n       a              Open  the  file  for  writing only.  If the\n                      file does not exist,  create  a  new  empty\n                      file.   Set  the file pointer to the end of\n                      the file prior to each write.\n\n       a+             Open the file for reading and writing.   If\n                      the file does not exist, create a new empty\n                      file.  Set the initial access position   to\n                      the end of the file.                        |\n\n       All  of the legal access values above may have the charac- |\n       ter b added as the second or third character in the  value |\n       to  indicate  that the opened channel should be configured |\n       with the -translation binary option,  making  the  channel |\n       suitable for reading or writing of binary data.\n\n       In  the  second  form, access consists of a list of any of\n       the following flags, all of which have the standard  POSIX\n       meanings.   One of the flags must be either RDONLY, WRONLY\n       or RDWR.\n\n       RDONLY         Open the file for reading only.\n\n       WRONLY         Open the file for writing only.\n\n       RDWR           Open the file for both reading and writing.\n\n       APPEND         Set the file pointer to the end of the file\n                      prior to each write.                        |\n\n       BINARY                                                     ||\n                      Configure   the  opened  channel  with  the |\n                      -translation binary option.\n\n       CREAT          Create the file  if  it  does  not  already\n                      exist (without this flag it is an error for\n                      the file not to exist).\n\n       EXCL           If CREAT is also  specified,  an  error  is\n                      returned if the file already exists.\n\n       NOCTTY         If the file is a terminal device, this flag\n                      prevents the file from  becoming  the  con-\n                      trolling terminal of the process.\n\n       NONBLOCK       Prevents  the  process  from blocking while\n                      opening the file, and  possibly  in  subse-\n                      quent  I/O  operations.  The exact behavior\n                      of this flag is system-  and  device-depen-\n                      dent;  its use is discouraged (it is better\n                      to use the fconfigure command to put a file\n                      in nonblocking mode).  For details refer to\n                      your system documentation on the open  sys-\n                      tem call's O_NONBLOCK flag.\n\n       TRUNC          If  the file exists it is truncated to zero\n                      length.\n\n       If a new file is created as part of  opening  it,  permis-\n       sions  (an integer) is used to set the permissions for the\n       new file in conjunction with the process's file mode  cre-\n       ation mask.  Permissions defaults to 0666.\n\nCOMMAND PIPELINES\n       If the first character of fileName is '|' then the remain-\n       ing characters of fileName are treated as a list of  argu-\n       ments  that  describe a command pipeline to invoke, in the\n       same style as the arguments for exec.  In this  case,  the\n       channel  identifier  returned by open may be used to write\n       to the command's input pipe or read from its output  pipe,\n       depending on the value of access.  If write-only access is\n       used (e.g. access is w),  then  standard  output  for  the\n       pipeline is directed to the current standard output unless\n       overridden by the command.  If read-only  access  is  used\n       (e.g.  access  is  r),  standard input for the pipeline is\n       taken from the current standard input unless overridden by\n       the  command.  The id of the spawned process is accessible\n       through the pid command, using the channel id returned  by\n       open as argument.\n\n       If  the  command  (or one of the commands) executed in the\n       command pipeline returns an error (according to the  defi-\n       nition  in  exec),  a Tcl error is generated when close is\n       called on the channel unless the pipeline is in non-block-\n       ing  mode  then no exit status is returned (a silent close\n       with -blocking 0).\n\n       It is often useful  to  use  the  fileevent  command  with\n       pipelines  so other processing may happen at the same time\n       as running the command in the background.\n\nSERIAL COMMUNICATIONS\n       If fileName refers to a serial port,  then  the  specified\n       serial port is opened and initialized in a platform-depen-\n       dent manner.  Acceptable values for the fileName to use to\n       open a serial port are described in the PORTABILITY ISSUES\n       section.\n\n       The fconfigure command can be used to query and set  addi-\n       tional  configuration  options  specific  to  serial ports\n       (where supported):\n\n       -mode baud,parity,data,stop\n              This option is a set of 4  comma-separated  values:\n              the  baud  rate,  parity,  number of data bits, and\n              number of stop bits for this serial port.  The baud\n              rate is a simple integer that specifies the connec-\n              tion speed.  Parity is one of  the  following  let-\n              ters:  n,  o,  e, m, s; respectively signifying the\n              parity options of 'none', 'odd', 'even', 'mark', or\n              'space'.   Data  is  the  number  of  data bits and\n              should be an integer from 5 to 8, while stop is the\n              number  of stop bits and should be the integer 1 or\n              2.\n\n       -handshake type\n              (Windows and Unix). This option is  used  to  setup\n              automatic  handshake  control.  Note  that  not all\n              handshake types maybe supported by  your  operating\n              system. The type parameter is case-independent.\n\n              If type is none then any handshake is switched off.\n              rtscts activates hardware handshake. Hardware hand-\n              shake  signals  are  described below.  For software\n              handshake xonxoff the handshake characters  can  be\n              redefined  with  -xchar.   An  additional  hardware\n              handshake dtrdsr is available only  under  Windows.\n              There  is  no  default handshake configuration, the\n              initial value depends on your operating system set-\n              tings.  The -handshake option cannot be queried.\n\n       -queue (Windows  and  Unix). The -queue option can only be\n              queried.  It returns a list of two integers  repre-\n              senting  the  current  number of bytes in the input\n              and output queue respectively.\n\n       -timeout msec\n              (Windows and Unix). This option is used to set  the\n              timeout  for blocking read operations. It specifies\n              the maximum interval between the reception  of  two\n              bytes in milliseconds.  For Unix systems the granu-\n              larity is 100 milliseconds.   The  -timeout  option\n              does  not  affect  write  operations or nonblocking\n              reads.  This option cannot be queried.\n\n       -ttycontrol {signal boolean signal boolean ...}\n              (Windows and Unix). This option is  used  to  setup\n              the  handshake output lines (see below) permanently\n              or to send a BREAK over the serial line.  The  sig-\n              nal names are case-independent.  {RTS 1 DTR 0} sets\n              the RTS output to high and the DTR output  to  low.\n              The BREAK condition (see below) is enabled and dis-\n              abled with {BREAK 1} and  {BREAK  0}  respectively.\n              It  is  not  a good idea to change the RTS (or DTR)\n              signal with active hardware  handshake  rtscts  (or\n              dtrdsr).   The  result is unpredictable.  The -tty-\n              control option cannot be queried.\n\n       -ttystatus\n              (Windows and Unix). The -ttystatus option can  only\n              be  queried.   It  returns the current modem status\n              and  handshake  input  signals  (see  below).   The\n              result is a list of signal,value pairs with a fixed\n              order, e.g. {CTS 1 DSR 0 RING 1 DCD 0}.  The signal\n              names are returned upper case.\n\n       -xchar {xonChar xoffChar}\n              (Windows and Unix). This option is used to query or\n              change the software handshake characters.  Normally\n              the  operating  system default should be DC1 (0x11)\n              and DC3 (0x13) representing the ASCII standard  XON\n              and XOFF characters.\n\n       -pollinterval msec\n              (Windows only). This option is used to set the max-\n              imum time between  polling  for  fileevents.   This\n              affects  the  time  interval  between  checking for\n              events throughout the Tcl interpreter (the smallest\n              value  always  wins).   Use this option only if you\n              want to poll the serial port  more  or  less  often\n              than 10 msec (the default).\n\n       -sysbuffer inSize\n\n       -sysbuffer {inSize outSize}\n              (Windows  only).  This option is used to change the\n              size of Windows system buffers for a  serial  chan-\n              nel.  Especially  at higher communication rates the\n              default input buffer size of 4096 bytes can overrun\n              for  latent  systems.  The first form specifies the\n              input buffer size, in the second  form  both  input\n              and output buffers are defined.\n\n       -lasterror\n              (Windows only). This option is query only.  In case\n              of a  serial  communication  error,  read  or  puts\n              returns  a  general Tcl file I/O error.  fconfigure\n              -lasterror can be called to get  a  list  of  error\n              details.  See below for an explanation of the vari-\n              ous error codes.\n\nSERIAL PORT SIGNALS\n       RS-232 is  the  most  commonly  used  standard  electrical\n       interface  for  serial  communications. A negative voltage\n       (-3V..-12V) define a mark (on=1) bit and a positive  volt-\n       age  (+3..+12V) define a space (off=0) bit (RS-232C).  The\n       following signals are specified for incoming and  outgoing\n       data,  status lines and handshaking. Here we are using the\n       terms workstation for your  computer  and  modem  for  the\n       external  device, because some signal names (DCD, RI) come\n       from modems. Of course your external device may use  these\n       signal lines for other purposes.\n\n       TXD(output)\n              Transmitted Data: Outgoing serial data.\n\n       RXD(input)\n              Received Data:Incoming serial data.\n\n       RTS(output)\n              Request  To  Send:  This  hardware  handshake  line\n              informs the modem that your workstation is ready to\n              receive  data.  Your  workstation may automatically\n              reset this signal to indicate that the input buffer\n              is full.\n\n       CTS(input)\n              Clear  To  Send:  The  complement to RTS. Indicates\n              that the modem is ready to receive data.\n\n       DTR(output)\n              Data Terminal Ready: This signal  tells  the  modem\n              that  the workstation is ready to establish a link.\n              DTR  is  often  enabled  automatically  whenever  a\n              serial port is opened.\n\n       DSR(input)\n              Data  Set  Ready:  The complement to DTR. Tells the\n              workstation that the modem is ready to establish  a\n              link.\n\n       DCD(input)\n              Data  Carrier Detect: This line becomes active when\n              a modem detects a 'Carrier' signal.\n\n       RI(input)\n              Ring Indicator: Goes active when the modem  detects\n              an incoming call.\n\n       BREAK  A  BREAK  condition  is not a hardware signal line,\n              but a logical zero on the TXD or RXD  lines  for  a\n              long  period  of time, usually 250 to 500 millisec-\n              onds.  Normally a receive or transmit  data  signal\n              stays  at  the  mark  (on=1) voltage until the next\n              character is transferred. A BREAK is sometimes used\n              to  reset  the  communications  line  or change the\n              operating mode of communications hardware.\n\nERROR CODES (Windows only)\n       A lot of different errors may  occur  during  serial  read\n       operations  or  during  event  polling  in background. The\n       external device may have been switched off, the data lines\n       may be noisy, system buffers may overrun or your mode set-\n       tings may be wrong.   That  is  why  a  reliable  software\n       should  always  catch serial read operations.  In cases of\n       an error Tcl returns a general file I/O error.  Then fcon-\n       figure  -lasterror  may  help  to locate the problem.  The\n       following error codes may be returned.\n\n       RXOVER    Windows input buffer  overrun.  The  data  comes\n                 faster than your scripts reads it or your system\n                 is  overloaded.  Use  fconfigure  -sysbuffer  to\n                 avoid  a  temporary  bottleneck and/or make your\n                 script faster.\n\n       TXFULL    Windows output  buffer  overrun.  Complement  to\n                 RXOVER.  This  error should practically not hap-\n                 pen, because Tcl cares about the  output  buffer\n                 status.\n\n       OVERRUN   UART  buffer  overrun (hardware) with data lost.\n                 The data comes faster  than  the  system  driver\n                 receives  it.   Check  your advanced serial port\n                 settings  to  enable  the  FIFO  (16550)  buffer\n                 and/or  setup  a  lower(1)  interrupt  threshold\n                 value.\n\n       RXPARITY  A parity error has been detected by  your  UART.\n                 Wrong parity settings with fconfigure -mode or a\n                 noisy data line (RXD) may cause this error.\n\n       FRAME     A stop-bit error has been detected by your UART.\n                 Wrong  mode  settings with fconfigure -mode or a\n                 noisy data line (RXD) may cause this error.\n\n       BREAK     A BREAK condition has been detected by your UART\n                 (see above).\n\nPORTABILITY ISSUES\n       Windows (all versions)\n              Valid values for fileName to open a serial port are\n              of the form comX:, where X is a  number,  generally\n              from  1  to 4.  This notation only works for serial\n              ports from 1 to 9, if the system  happens  to  have\n              more  than  four.  An attempt to open a serial port\n              that does not exist or has a number greater than  9\n              will  fail.   An  alternate  form of opening serial\n              ports is to use the filename \\\\.\\comX, where  X  is\n              any  number  that  corresponds  to  a  serial port;\n              please note that this method is considerably slower\n              on Windows 95 and Windows 98.\n\n       Windows NT\n              When  running  Tcl interactively, there may be some\n              strange interactions between the real  console,  if\n              one  is  present,  and a command pipeline that uses\n              standard input or output.  If a command pipeline is\n              opened  for  reading,  some of the lines entered at\n              the console will be sent to  the  command  pipeline\n              and  some  will be sent to the Tcl evaluator.  If a\n              command pipeline is opened for writing,  keystrokes\n              entered  into the console are not visible until the\n              pipe is closed.  This behavior occurs  whether  the\n              command  pipeline  is  executing  16-bit  or 32-bit\n              applications.  These problems  only  occur  because\n              both  Tcl  and  the child application are competing\n              for the console at the same time.  If  the  command\n              pipeline  is  started from a script, so that Tcl is\n              not  accessing  the  console,  or  if  the  command\n              pipeline does not use standard input or output, but\n              is redirected from or to a  file,  then  the  above\n              problems do not occur.\n\n       Windows 95\n              A  command  pipeline  that  executes  a  16-bit DOS\n              application cannot be opened for both  reading  and\n              writing, since 16-bit DOS applications that receive\n              standard input from a pipe and send standard output\n              to  a  pipe  run  synchronously.  Command pipelines\n              that do not execute  16-bit  DOS  applications  run\n              asynchronously  and  can be opened for both reading\n              and writing.\n\n              When running Tcl interactively, there may  be  some\n              strange  interactions  between the real console, if\n              one is present, and a command  pipeline  that  uses\n              standard input or output.  If a command pipeline is\n              opened for reading from a 32-bit application,  some\n              of  the  keystrokes  entered at the console will be\n              sent to the command pipeline and some will be  sent\n              to  the  Tcl  evaluator.   If a command pipeline is\n              opened for writing to a 32-bit application, no out-\n              put  is  visible  on  the console until the pipe is\n              closed.  These problems only occur because both Tcl\n              and  the  child  application  are competing for the\n              console at the same time.  If the command  pipeline\n              is  started  from  a  script,  so  that  Tcl is not\n              accessing the console, or if the  command  pipeline\n              does not use standard input or output, but is redi-\n              rected from or to a file, then the  above  problems\n              do not occur.\n\n              Whether  or  not Tcl is running interactively, if a\n              command pipeline  is  opened  for  reading  from  a\n              16-bit  DOS  application, the call to open will not\n              return until end-of-file has been received from the\n              command  pipeline's  standard output.  If a command\n              pipeline is opened for  writing  to  a  16-bit  DOS\n              application,  no  data  will be sent to the command\n              pipeline's standard output until the pipe is  actu-\n              ally  closed.   This  problem occurs because 16-bit\n              DOS  applications   are   run   synchronously,   as\n              described above.\n\n       Unix\n              Valid values for fileName to open a serial port are\n              generally of the form /dev/ttyX, where X is a or b,\n              but  the  name  of  any  pseudo-file that maps to a\n              serial port may be  used.   Advanced  configuration\n              options  are  only  supported for serial ports when\n              Tcl is built to use the POSIX serial interface.\n\n              When running Tcl interactively, there may  be  some\n              strange interactions between the console, if one is\n              present, and a command pipeline that uses  standard\n              input.   If  a command pipeline is opened for read-\n              ing, some of the lines entered at the console  will\n              be  sent  to  the command pipeline and some will be\n              sent to  the  Tcl  evaluator.   This  problem  only\n              occurs  because  both Tcl and the child application\n              are competing for the console at the same time.  If\n              the  command  pipeline is started from a script, so\n              that Tcl is not accessing the console,  or  if  the\n              command  pipeline  does not use standard input, but\n              is redirected from a file, then the  above  problem\n              does not occur.\n\n       See the PORTABILITY ISSUES section of the exec command for\n       additional information not specific to  command  pipelines\n       about executing applications on the various platforms\n\nEXAMPLE\n       Open a command pipeline and catch any errors:\n              set fl [open '| ls this_file_does_not_exist']\n              set data [read $fl]\n              if {[catch {close $fl} err]} {\n                  puts 'ls command failed: $err'\n              }\n\nSEE ALSO\n       file(n),  close(n),  filename(n),  fconfigure(n), gets(n),\n       read(n), puts(n), exec(n), pid(n), fopen(3)\n\nKEYWORDS\n       access mode, append,  create,  file,  non-blocking,  open,\n       permissions, pipeline, process, serial\n\n\n\nTcl                            8.3                        open(n)\n",
"list_repo_boards": "list_repo_boards\n\nDescription: \nList available boards from Board Store\n\nSyntax: \nlist_repo_boards  [-quiet] [-verbose] [<board>]\n\nReturns: \nNothing\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<board>]   Name of boards to list, default is to list all boards\n\nCategories: \nTools\n",
"create_partition_def": "create_partition_def\n\nDescription: \nCreate new PartitionDef\n\nSyntax: \ncreate_partition_def  -name <arg> -module <arg> [-library <arg>] [-quiet]\n                      [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  -name       Name of the PartitionDef\n  -module     Module name of the PartitionDef\n  [-library]  Library name of the module of PartitionDef\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nObject, Partition\n\nDescription:\n\n  Note: You must first define the project as a Dynamic Function eXchange (DFX)\n  project by setting the PR_FLOW property on the project to TRUE, or by using\n  the Tools > Enable Dynamic Function eXchange command.\n\n  The Dynamic Function eXchange flow lets you create Partition Definitions\n  (partitionDefs) from hierarchical cells in a design, and to specify\n  reconfigurable modules (RMs) to be assigned to these partitionDefs to\n  create a unique configurations of the design based on the combination of\n  the core design and one or more RMs. The DFX design flow requires the\n  implementation of each PR configuration, resulting in partial bitstreams\n  for the RMs, but complete bitstreams for each integrated configuration.\n  Refer to the Vivado Design Suite User Guide: Dynamic Function eXchange\n  (UG909) for more information.\n\n  The create_partition_def command defines a partitionDef object in a DFX\n  project from a specified hierarchical cell. The partitionDef defines a\n  partition hierarchy that RMs can be assigned to for a specific PR\n  configuration.\n\n  This command returns the name of the newly created partitionDef, or returns\n  an error if the command fails.\n\nArguments:\n\n  -name <arg> - (Required) The name to assign to the new partitionDef.\n\n  -module <arg> - (Required) The name of the hierarchical cell or module in\n  the current project that defines the partitionDef. The hierarchical cell\n  can be specified by name. The module specifies the hierarchical boundary of\n  the partition definition. Reconfigurable modules (RMs) will be defined to\n  fit within the hierarchical boundary of the partitionDef.\n\n  -library <arg> - (Optional) Specifies the library name to assign to the\n  partitionDef. If no library is specified, the xil_defaultlib is used.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example sets the PR_FLOW property on the current project,\n  defines a new partitionDef and assigns the specified module, and then\n  creates the reconfigurable module from the specified hierarchy:\n\n    set_property PR_FLOW 1 [current_project]   \n    create_partition_def -name partDef1 -module fftTop \\  \n    -library xil_defaultlib  \n    create_reconfig_module -name fftTop -define_from fftTop \\  \n    -partition_def [get_partition_defs partDef1]  \n    \n\nSee Also:\n\n   *  create_pr_configuration\n   *  create_reconfig_module\n   *  delete_partition_defs\n   *  get_partition_defs\n   *  set_property\n",
"write_mem_info": "write_mem_info\n\nDescription: \nWrite the Memory Map Info of the design to a .mmi file.\n\nSyntax: \nwrite_mem_info  [-cell <arg>] [-no_partial_mmi] [-force_detect_xpm] [-force]\n                [-quiet] [-verbose] <file>\n\nReturns: \nThe name of the .mmi file\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-cell]              Create only partial .mmi for named cell\n  [-no_partial_mmi]    Do not write partial bit files for a Dynamic Function \n                       eXchange design\n  [-force_detect_xpm]  Traverse netlist and check for XPM\n  [-force]             Overwrite existing mem info xml file\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <file>               Design mem info file\n                       Values: A filename with alphanumeric characters and \n                       .mmi extension.\n\nCategories: \nFileIO\n\nDescription:\n\n  This command writes a memory information (MMI) file defining the BRAM\n  placement and address ranges to create a memory map of the design.\n\n  Note: write_mem_info requires an open implemented design so that the memory\n  information includes the BRAM placement data, as well as the address\n  ranges, required for proper programming.\n\n  The memory map information (MMI) file, written by the write_mem_info\n  command, is a text file that describes how individual Block RAMs on the\n  Xilinx device are grouped together to form a contiguous address space\n  called an Address Block.\n\n  The mem info file (MMI) contains memory mapping information similar to the\n  Block Memory Map (BMM) file, but in a format that can be read by the\n  updatemem command to merge with a bitstream (BIT) file. The updatemem\n  command uses the MMI file to identify the physical BRAM resource that maps\n  to a specific address range. Refer to the UpdateMEM User Guide (UG1580)\n  for more information on running updatemem.\n\n  This command returns the name of the file created, or returns an error if\n  it fails.\n\nArguments:\n\n  -force - (Optional) Overwrite an existing memory info file if one exists.\n  If this option is not specified, then the Vivado Design Suite will not\n  overwrite an existing file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Specify the name of the memory info file to write. The\n  file can include the path and file extension. The default file extension of\n  .mmi is used if an extension is not specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExample:\n\n  The following example creates the memory mapping file from the open design:\n\n    write_mem_info C:/Data/design1.mmi \n    \n\nSee Also:\n\n   *  write_bmm\n   *  write_sysdef\n\n",
"modify_debug_ports": "modify_debug_ports\n\nDescription: \nModify routed probe connections to debug cores.\n\nSyntax: \nmodify_debug_ports  [-probes <args>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-probes]   List of probes to be connected: debug core pin, channel index, \n              and logical net for each probe connection.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nDebug\n\nDescription:\n\n  Modifies a routed design to connect nets to specified ports of debug cores.\n  This command takes a list of connections to be made to specified debug\n  probes. Each connection is defined as a Tcl list, enclosed in braces {},\n  specifying the following three elements separated by spaces:\n\n   *  The logical pin of the debug core to be connected.\n\n   *  The channel index of the specified probe.\n\n   *  The logical net of the signal to be probed.\n\n  Multiple probe connections are specified as a list of lists, with each\n  connection itself being a Tcl list as shown in the example.\n\n  The command performs all of the netlist modifications to disconnect\n  existing net connections to the specified probe ports as needed, connecting\n  each net to be probed to the specified probe port, and automatically\n  routing the modified connections. Nets that become disconnected during the\n  process are left unconnected.\n\nArguments:\n\n  -probes <args> - (Required) Specifies a list of probe connections as a Tcl\n  list of lists. Each probe connection is defined as a triplet of three\n  elements in the following order separated by spaces: 1) the logical pin of\n  the debug core to be connected, 2) the probe channel index, and 3) the\n  logical net of the signal to be probed. Multiple probe connections are\n  specified as a list of lists as follows:\n\n    [list  \\{probe1 channel1 net1}  \\{probe2 channel1 net2} \\{probe2 channel2  net3} ]  \n     \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example modifies 3 probe connections:\n\n    modify_debug_ports -probes [list {top/x_ila/probe0 0 top/inst_A/net_0} \\  \n      {top/x_ila/probe1 1 top/inst_A/net_a} {top/x_ila/probe1 2 top/inst_A/net_b}] \n    \n\n  Note: The modify_debug_ports command moves a port probe from one signal to\n  another.\n\nSee Also:\n\n   *  connect_debug_port\n   *  create_debug_core\n   *  create_debug_port\n   *  disconnect_debug_port\n   *  set_property\n",
"get_dfx_footprint": "get_dfx_footprint\n\nDescription: \nGet footprint tiles for different DFX flows.\nThis is an Early Access command specific to Versal devices.\n\nSyntax: \nget_dfx_footprint  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                   [-place] [-route] [-pu] [-frame] [-half_frame] [-quiet]\n                   [-verbose] [<patterns>]\n\nReturns: \ntiles, sites\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the tiles, sites of these tiles, cells.\n  [-place]       get placement footprint of a cell specified by -of_objects\n  [-route]       get routing footprint of a cell specified by -of_objects\n  [-pu]          get programmable unit of a given tile specified by \n                 -of_object\n  [-frame]       get frame tiles of a given tile specified by -of_object\n  [-half_frame]  get half frame tiles of a given tile specified by -of_object\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match tiles, sites against patterns\n                 Default: *\n\nCategories: \nHD, Debug\n",
"delete_partition_defs": "delete_partition_defs\n\nDescription: \nDelete existing PartitionDefs\n\nSyntax: \ndelete_partition_defs  [-merge <arg>] [-quiet] [-verbose] <partition_defs>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-merge]          Fileset to merge files into from the default RM of deleted \n                    Partition Def\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <partition_defs>  List of PartitionDefs to delete\n\nCategories: \nPartition\n\nDescription:\n\n  Delete the specified Partition Definition (partitionDef) objects from the\n  current project.\n\n  This command returns a transcript of the file merge process, returns\n  nothing without file merge, or returns an error if the command fails.\n\nArguments:\n\n  -merge <arg> - (Optional) Specify the name of a fileset to merge files from\n  the default Reconfigurable Module (DEFAULT_RM) of a deleted partitionDef\n  object. The files will be moved from the default RM to the specified\n  fileset.\n\n  Note: If -merge is not specified, then all files in the default RM are\n  removed from the project.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <partition_defs> - (Required) Specify one or more partitionDef objects to\n  remove from the current project. The partitionDef objects can be specified\n  by name, or as objects returned by the get_partition_defs command.\n\nExample:\n\n  The following example deletes all the partitionDefs from the current\n  design, merging files from the default RMs of each partition into the\n  source fileset for the design:\n\n    delete_partition_defs -merge sources_1 [get_partition_defs]  \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  get_partition_defs\n",
"exec": "exec(n)               Tcl Built-In Commands               exec(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       exec - Invoke subprocesses\n\nSYNOPSIS\n       exec ?switches? arg ?arg ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command treats its arguments as the specification of\n       one or more subprocesses to execute.  The  arguments  take\n       the  form  of  a  standard  shell  pipeline where each arg\n       becomes one word of a command, and each  distinct  command\n       becomes a subprocess.\n\n       If  the  initial  arguments to exec start with - then they\n       are treated as command-line switches and are not  part  of\n       the  pipeline  specification.   The following switches are\n       currently supported:\n\n       -ignorestderr\n                    Stops the exec command from treating the out- |\n                    put  of  messages  to the pipeline's standard |\n                    error channel as an error case.\n\n       -keepnewline Retains a trailing newline in the  pipeline's\n                    output.   Normally a trailing newline will be\n                    deleted.\n\n       --           Marks the end of switches.  The argument fol-\n                    lowing  this one will be treated as the first\n                    arg even if it starts with a -.\n\n       If an arg (or pair of args) has one of the forms described\n       below then it is used by exec to control the flow of input\n       and output among the subprocess(es).  Such arguments  will\n       not  be passed to the subprocess(es).  In forms such as '<\n       fileName', fileName may either be in a  separate  argument\n       from '<' or in the same argument with no intervening space\n       (i.e.  '<fileName').\n\n       |              Separates   distinct   commands   in    the\n                      pipeline.   The standard output of the pre-\n                      ceding command will be piped into the stan-\n                      dard input of the next command.\n\n       |&             Separates    distinct   commands   in   the\n                      pipeline.  Both standard output  and  stan-\n                      dard error of the preceding command will be\n                      piped into the standard input of  the  next\n                      command.   This  form  of redirection over-\n                      rides forms such as 2> and >&.\n\n       < fileName     The file named by fileName  is  opened  and\n                      used  as  the  standard input for the first\n                      command in the pipeline.\n\n       <@ fileId      FileId must be the identifier for  an  open\n                      file,  such as the return value from a pre-\n                      vious call to open.   It  is  used  as  the\n                      standard input for the first command in the\n                      pipeline.  FileId must have been opened for\n                      reading.\n\n       << value       Value is passed to the first command as its\n                      standard input.\n\n       > fileName     Standard output from the  last  command  is\n                      redirected  to  the  file  named  fileName,\n                      overwriting its previous contents.\n\n       2> fileName    Standard error from  all  commands  in  the\n                      pipeline  is  redirected  to the file named\n                      fileName,  overwriting  its  previous  con-\n                      tents.\n\n       >& fileName    Both  standard output from the last command\n                      and standard error from  all  commands  are\n                      redirected  to  the  file  named  fileName,\n                      overwriting its previous contents.\n\n       >> fileName    Standard output from the  last  command  is\n                      redirected  to  the  file  named  fileName,\n                      appending to it rather than overwriting it.\n\n       2>> fileName   Standard  error  from  all  commands in the\n                      pipeline is redirected to  the  file  named\n                      fileName, appending to it rather than over-\n                      writing it.\n\n       >>& fileName   Both standard output from the last  command\n                      and  standard  error  from all commands are\n                      redirected  to  the  file  named  fileName,\n                      appending to it rather than overwriting it.\n\n       >@ fileId      FileId must be the identifier for  an  open\n                      file,  such as the return value from a pre-\n                      vious call to open.  Standard  output  from\n                      the  last command is redirected to fileId's\n                      file, which must have been opened for writ-\n                      ing.\n\n       2>@ fileId     FileId  must  be the identifier for an open\n                      file, such as the return value from a  pre-\n                      vious  call  to  open.  Standard error from\n                      all commands in the pipeline is  redirected\n                      to  fileId's file.  The file must have been\n                      opened for writing.\n\n       2>@1           Standard error from  all  commands  in  the\n                      pipeline   is  redirected  to  the  command\n                      result.  This operator is only valid at the\n                      end of the command pipeline.\n\n       >&@ fileId     FileId  must  be the identifier for an open\n                      file, such as the return value from a  pre-\n                      vious  call  to open.  Both standard output\n                      from the last command  and  standard  error\n                      from   all   commands   are  redirected  to\n                      fileId's file.  The  file  must  have  been\n                      opened for writing.\n\n       If  standard  output has not been redirected then the exec\n       command returns the standard output from the last  command\n       in  the  pipeline,  unless  '2>@1' was specified, in which |\n       case standard error is included as well.  If  any  of  the\n       commands  in the pipeline exit abnormally or are killed or\n       suspended, then exec will return an error  and  the  error\n       message  will  include  the  pipeline's output followed by\n       error messages describing the abnormal  terminations;  the\n       -errorcode  return option will contain additional informa-\n       tion about the last abnormal termination encountered.   If\n       any  of the commands writes to its standard error file and\n       that standard error is not redirected and -ignorestderr is |\n       not  specified, then exec will return an error;  the error\n       message will include the pipeline's standard output,  fol-\n       lowed  by  messages  about abnormal terminations (if any),\n       followed by the standard error output.\n\n       If the last character of the result or error message is  a\n       newline  then  that character is normally deleted from the\n       result or error message.  This is  consistent  with  other\n       Tcl  return  values,  which  do not normally end with new-\n       lines.  However, if -keepnewline  is  specified  then  the\n       trailing newline is retained.\n\n       If standard input is not redirected with '<', '<<' or '<@'\n       then the standard input  for  the  first  command  in  the\n       pipeline  is taken from the application's current standard\n       input.\n\n       If the last arg is '&' then the pipeline will be  executed\n       in  background.  In this case the exec command will return\n       a list whose elements are the process identifiers for  all\n       of  the subprocesses in the pipeline.  The standard output\n       from the last command in  the  pipeline  will  go  to  the\n       application's  standard  output  if  it has not been redi-\n       rected, and error output from all of the commands  in  the\n       pipeline  will go to the application's standard error file\n       unless redirected.\n\n       The first word in each command is  taken  as  the  command\n       name;  tilde-substitution  is  performed on it, and if the\n       result contains no slashes then  the  directories  in  the\n       PATH  environment  variable are searched for an executable\n       by the given name.  If the name contains a slash  then  it\n       must  refer  to  an  executable reachable from the current\n       directory.  No 'glob' expansion or other  shell-like  sub-\n       stitutions are performed on the arguments to commands.\n\nPORTABILITY ISSUES\n       Windows (all versions)\n              Reading  from  or  writing  to  a socket, using the\n              '@ fileId' notation, does not work.   When  reading\n              from  a  socket, a 16-bit DOS application will hang\n              and a 32-bit application  will  return  immediately\n              with  end-of-file.  When either type of application\n              writes to a socket, the information is instead sent\n              to the console, if one is present, or is discarded.\n\n              The Tk console text widget does  not  provide  real\n              standard IO capabilities.  Under Tk, when redirect-\n              ing from standard input, all applications will  see\n              an immediate end-of-file; information redirected to\n              standard output or  standard  error  will  be  dis-\n              carded.\n\n              Either  forward or backward slashes are accepted as\n              path separators  for  arguments  to  Tcl  commands.\n              When executing an application, the path name speci-\n              fied for the application may also  contain  forward\n              or  backward  slashes  as path separators.  Bear in\n              mind,  however,  that  most  Windows   applications\n              accept  arguments  with  forward  slashes  only  as\n              option delimiters and backslashes  only  in  paths.\n              Any arguments to an application that specify a path\n              name with forward slashes will not automatically be\n              converted  to  use  the backslash character.  If an\n              argument contains forward slashes as the path sepa-\n              rator,  it  may  or may not be recognized as a path\n              name, depending on the program.\n\n              Additionally, when calling a 16-bit DOS or  Windows\n              3.X application, all path names must use the short,\n              cryptic, path format  (e.g.,  using  'applba~1.def'\n              instead  of  'applbakery.default'),  which  can  be\n              obtained with the 'file attributes fileName -short-\n              name' command.\n\n              Two or more forward or backward slashes in a row in\n              a path refer to a network  path.   For  example,  a\n              simple concatenation of the root directory c:/ with\n              a subdirectory /windows/system will yield  c://win-\n              dows/system (two slashes together), which refers to\n              the mount point called system on the machine called\n              windows (and the c:/ is ignored), and is not equiv-\n              alent  to  c:/windows/system,  which  describes   a\n              directory  on  the current computer.  The file join\n              command should be used to concatenate  path  compo-\n              nents.\n\n              Note that there are two general types of Win32 con-\n              sole applications:\n\n                      [1]    CLI -- CommandLine Interface,  simple\n                             stdio   exchange.   netstat.exe  for\n                             example.\n\n                      [2]    TUI -- Textmode User  Interface,  any\n                             application  that  accesses the con-\n                             sole API for doing  such  things  as\n                             cursor movement, setting text color,\n                             detecting  key  presses  and   mouse\n                             movement,  etc.  An example would be\n                             telnet.exe from Windows 2000.  These\n                             types of applications are not common\n                             in a  windows  environment,  but  do\n                             exist.\n\n              exec  will not work well with TUI applications when\n              a console is not present, as is done when launching\n              applications  under  wish.  It is desirable to have\n              console applications hidden and detached.  This  is\n              a  designed-in limitation as exec wants to communi-\n              cate over pipes.  The  Expect  extension  addresses\n              this  issue  when communicating with a TUI applica-\n              tion.\n\n       Windows NT\n              When attempting to  execute  an  application,  exec\n              first  searches  for  the name as it was specified.\n              Then, in order, .com, .exe, and .bat  are  appended\n              to  the  end  of the specified name and it searches\n              for the longer name.  If a directory name  was  not\n              specified as part of the application name, the fol-\n              lowing directories are  automatically  searched  in\n              order when attempting to locate the application:\n\n              Â·      The  directory from which the Tcl executable\n                     was loaded.\n\n              Â·      The current directory.\n\n              Â·      The Windows NT 32-bit system directory.\n\n              Â·      The Windows NT 16-bit system directory.\n\n              Â·      The Windows NT home directory.\n\n              Â·      The directories listed in the path.\n\n              In order to execute shell  built-in  commands  like\n              dir  and  copy, the caller must prepend the desired\n              command with 'cmd.exe /c '  because  built-in  com-\n              mands are not implemented using executables.\n\n       Windows 9x\n              When  attempting  to  execute  an application, exec\n              first searches for the name as  it  was  specified.\n              Then,  in  order, .com, .exe, and .bat are appended\n              to the end of the specified name  and  it  searches\n              for  the  longer name.  If a directory name was not\n              specified as part of the application name, the fol-\n              lowing  directories  are  automatically searched in\n              order when attempting to locate the application:\n\n              Â·      The directory from which the Tcl  executable\n                     was loaded.\n\n              Â·      The current directory.\n\n              Â·      The Windows 9x system directory.\n\n              Â·      The Windows 9x home directory.\n\n              Â·      The directories listed in the path.\n\n              In  order  to  execute shell built-in commands like\n              dir and copy, the caller must prepend  the  desired\n              command  with  'command.com  /c '  because built-in\n              commands are not implemented using executables.\n\n              Once a 16-bit DOS  application  has  read  standard\n              input  from  a  console  and  then quit, all subse-\n              quently run 16-bit DOS applications  will  see  the\n              standard  input as already closed.  32-bit applica-\n              tions do not have this problem and  will  run  cor-\n              rectly,  even after a 16-bit DOS application thinks\n              that standard input is closed.  There is  no  known\n              workaround for this bug at this time.\n\n              Redirection  between  the  NUL: device and a 16-bit\n              application does not always work.  When redirecting\n              from  NUL:, some applications may hang, others will\n              get an infinite stream of '0x01'  bytes,  and  some\n              will  actually  correctly  get an immediate end-of-\n              file; the behavior seems to depend  upon  something\n              compiled  into  the application itself.  When redi-\n              recting greater than 4K or so to NUL:, some  appli-\n              cations  will hang.  The above problems do not hap-\n              pen with 32-bit applications.\n\n              All DOS 16-bit applications are run  synchronously.\n              All  standard  input  from  a  pipe to a 16-bit DOS\n              application is collected into a temporary file; the\n              other  end  of  the  pipe must be closed before the\n              16-bit DOS application begins executing.  All stan-\n              dard  output or error from a 16-bit DOS application\n              to a pipe is collected into  temporary  files;  the\n              application  must  terminate  before  the temporary\n              files are redirected  to  the  next  stage  of  the\n              pipeline.   This  is due to a workaround for a Win-\n              dows 95 bug in the implementation of pipes, and  is\n              how the standard Windows 95 DOS shell handles pipes\n              itself.\n\n              Certain applications, such as  command.com,  should\n              not  be executed interactively.  Applications which\n              directly access the  console  window,  rather  than\n              reading  from  their  standard input and writing to\n              their standard output may fail, hang Tcl,  or  even\n              hang the system if their own private console window\n              is not available to them.\n\n       Unix\n              The exec command is fully functional and  works  as\n              described.\n\nUNIX EXAMPLES\n       Here  are  some examples of the use of the exec command on\n       Unix.\n\n       To execute a simple program and get its result:\n              exec uname -a\n\n       To execute a program that can return  a  non-zero  result,\n       you  should  wrap  the call to exec in catch and check the\n       contents of the -errorcode return option if  you  have  an\n       error:\n              set status 0\n              if {[catch {exec grep foo bar.txt} results options]} {\n                 set details [dict get $options -errorcode]\n                 if {[lindex $details 0] eq 'CHILDSTATUS'} {\n                    set status [lindex $details 2]\n                 } else {\n                    # Some kind of unexpected failure\n                 }\n              }\n\n       When  translating  a command from a Unix shell invocation,\n       care should be taken over the fact that single quote char-\n       acters have no special significance to Tcl.  Thus:\n              awk '{sum += $1} END {print sum}' numbers.list\n       would be translated into something like:\n              exec awk {{sum += $1} END {print sum}} numbers.list\n\n       If  you  are  converting invocations involving shell glob-\n       bing, you should remember that Tcl does not  handle  glob-\n       bing  or expand things into multiple arguments by default.\n       Instead you should write things like this:\n              exec ls -l {*}[glob *.tcl]\n\nWINDOWS EXAMPLES\n       Here are some examples of the use of the exec  command  on\n       Windows.\n\n       To  start  an  instance  of notepad editing a file without\n       waiting for the user to finish editing the file:\n              exec notepad myfile.txt &\n\n       To print a text file using notepad:\n              exec notepad /p myfile.txt\n\n       If a program calls other programs, such as is common  with\n       compilers,  then  you may need to resort to batch files to\n       hide the console windows that sometimes pop up:\n              exec cmp.bat somefile.c -o somefile\n       With the file cmp.bat looking something like:\n              @gcc %1 %2 %3 %4 %5 %6 %7 %8 %9\n\n       Sometimes you need to be careful,  as  different  programs\n       may  have  the  same  name and be in the path. It can then\n       happen that typing a command at the  DOS  prompt  finds  a\n       different program than the same command run via exec. This\n       is because of the (documented)  differences  in  behaviour\n       between exec and DOS batch files.\n\n       When in doubt, use the command auto_execok: it will return\n       the complete path to the program as seen by the exec  com-\n       mand.   This  applies  especially  when  you  want  to run\n       'internal' commands like dir from a  Tcl  script  (if  you\n       just want to list filenames, use the glob command.)  To do\n       that, use this:\n              exec {*}[auto_execok dir] *.tcl\n\nSEE ALSO\n       error(n), open(n)\n\nKEYWORDS\n       execute, pipeline, redirection, subprocess\n\n\n\nTcl                            8.5                        exec(n)\n",
"pid": "pid(n)                Tcl Built-In Commands                pid(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       pid - Retrieve process identifiers\n\nSYNOPSIS\n       pid ?fileId?\n_________________________________________________________________\n\n\nDESCRIPTION\n       If  the  fileId  argument is given then it should normally\n       refer to a process pipeline created with the open command.\n       In this case the pid command will return a list whose ele-\n       ments are the process identifiers of all the processes  in\n       the  pipeline, in order.  The list will be empty if fileId\n       refers to an open file that is not a process pipeline.  If\n       no  fileId  argument is given then pid returns the process\n       identifier of the current process.   All  process  identi-\n       fiers are returned as decimal strings.\n\nEXAMPLE\n       Print   process  information  about  the  processes  in  a\n       pipeline using the SysV ps program before reading the out-\n       put of that pipeline:\n\n              set pipeline [open '| zcat somefile.gz | grep foobar | sort -u']\n              # Print process information\n              exec ps -fp [pid $pipeline] >@stdout\n              # Print a separator and then the output of the pipeline\n              puts [string repeat - 70]\n              puts [read $pipeline]\n              close $pipeline\n\n\nSEE ALSO\n       exec(n), open(n)\n\n\nKEYWORDS\n       file, pipeline, process identifier\n\n\n\nTcl                            7.0                         pid(n)\n",
"refresh_repo_catalog": "",
"delete_qor_suggestions": "delete_qor_suggestions\n\nDescription: \nDeletes a list of available QoR suggestions\n\nSyntax: \ndelete_qor_suggestions  [-quiet] [-verbose] [<IDs>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<IDs>]     Match suggestion names against given names\n\nCategories: \nObject, Feasibility, Timing\n\nDescription:\n\n  Removes QoR suggestion objects that are currently in memory. Suggestion\n  objects are generated running the report_qor_suggestion command, without\n  specifying -of_objects, and by reading an RQS file using the\n  read_qor_suggestions command. You can get QoR objects by using the\n  get_qor_suggestions command.\n\nArguments:\n\n  <IDs> - (Required) A TCL list of suggestion object IDs. IDs can be returned\n  using the get_qor_suggestions command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following deletes all the suggestion objects in memory:\n\n    delete_qor_suggestions [get_qor_suggestions]\n\n  The following deletes only the Utilization suggestions:\n\n    delete_qor_suggestions [get_qor_suggestions -filter {CATEGORY==Utilization}]\n\nSee Also:\n\n   *  get_qor_suggestions\n   *  read_qor_suggestions\n   *  report_qor_assessment\n   *  write_qor_suggestions\n",
"get_timing_paths": "get_timing_paths\n\nDescription: \nGet timing paths\n\nSyntax: \nget_timing_paths  [-from <args>] [-rise_from <args>] [-fall_from <args>]\n                  [-to <args>] [-rise_to <args>] [-fall_to <args>]\n                  [-through <args>] [-rise_through <args>]\n                  [-fall_through <args>] [-delay_type <arg>] [-setup] [-hold]\n                  [-max_paths <arg>] [-nworst <arg>] [-unique_pins]\n                  [-slack_lesser_than <arg>] [-slack_greater_than <arg>]\n                  [-group <args>] [-no_report_unconstrained] [-user_ignored]\n                  [-routable_nets] [-sort_by <arg>] [-filter <arg>] [-regexp]\n                  [-nocase] [-cell <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-from]                     From pins, ports, cells or clocks\n  [-rise_from]                Rising from pins, ports, cells or clocks\n  [-fall_from]                Falling from pins, ports, cells  or clocks\n  [-to]                       To pins, ports, cells or clocks\n  [-rise_to]                  Rising to pins, ports, cells or clocks\n  [-fall_to]                  Falling to pins, ports, cells or clocks\n  [-through]                  Through pins, ports, cells or nets\n  [-rise_through]             Rising through pins, ports, cells or nets\n  [-fall_through]             Falling through pins, ports, cells or nets\n  [-delay_type]               Type of path delay: Values: max, min, min_max, \n                              max_rise, max_fall, min_rise, min_fall\n                              Default: max\n  [-setup]                    Get max delay timing paths (equivalent to \n                              -delay_type max)\n  [-hold]                     Get min delay timing paths (equivalent to \n                              -delay_type min)\n  [-max_paths]                Maximum number of paths to return: Value >=1\n                              Default: 1\n  [-nworst]                   List N worst paths to endpoint: Value >=1\n                              Default: 1\n  [-unique_pins]              for each unique set of pins, show at most 1 \n                              path per path group\n  [-slack_lesser_than]        Include paths with slack less than this\n                              Default: 1e+30\n  [-slack_greater_than]       Include paths with slack greater than this\n                              Default: -1e+30\n  [-group]                    Limit paths in this group(s)\n  [-no_report_unconstrained]  Do not get unconstrained paths\n  [-user_ignored]             only report paths which have infinite slack \n                              because of set_false_path or set_clock_groups \n                              timing constraints\n  [-routable_nets]            store the number of routable nets traversed as \n                              a property on timing paths.\n  [-sort_by]                  Sorting order of paths: Values: group, slack\n                              Default: slack\n  [-filter]                   Filter list with expression\n  [-regexp]                   Patterns specified in filter are full regular \n                              expressions\n  [-nocase]                   Perform case-insensitive matching for patterns \n                              specified in filter (valid only when -regexp \n                              specified)\n  [-cell]                     run get_timing_paths on the cell\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n\nCategories: \nObject, Timing\n\nDescription:\n\n  Gets timing path objects that meet the specified criteria. This command can\n  be used to predefine timing paths to pass to the report_timing command for\n  instance. Another usage of this command is to create custom reporting and\n  analysis.\n\n  The get_timing_paths command is very similar to the report_timing command.\n  However, get_timing_paths returns timing path objects which can be queried\n  for properties, or passed to other Tcl commands for processing, where\n  report_timing returns a file or a string.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -from <args> - (Optional) Defines the starting points of the timing paths\n  to be analyzed. Ports, pins, or cells can be specified as timing path\n  startpoints. You can also specify a clock object, and all startpoints\n  clocked by the named clock will be analyzed.\n\n  -rise_from <args> - (Optional) Similar to the -from option, but only the\n  rising edge of signals coming from the startpoints are considered for\n  timing analysis. If a clock object is specified, only the paths launched by\n  the rising edge of the clock are considered as startpoints.\n\n  -fall_from <args> - (Optional) Similar to the -from option, but only the\n  falling edge of signals coming from the startpoints are considered for\n  timing analysis. If a clock object is specified, only the paths launched by\n  the falling edge of the clock are considered as startpoints.\n\n  -to <args> - (Optional) Specifies the endpoints, or destination objects of\n  timing paths to be analyzed. Ports, pins, and cell objects can be specified\n  as endpoints. A clock object can also be specified, in which case endpoints\n  clocked by the named clock are analyzed.\n\n  -rise_to <args> - (Optional) Similar to the -to option, but only the rising\n  edge of signals going to the endpoints is considered for timing analysis.\n  If a clock object is specified, only the paths captured by the rising edge\n  of the named clock are considered as endpoints.\n\n  -fall_to <args> - (Optional) Similar to the -to option, but only the\n  falling edge of signals going to the endpoints is considered for timing\n  analysis. If a clock object is specified, only the paths captured by the\n  falling edge of the named clock are considered as endpoints.\n\n  -through <args> - (Optional) Specifies that only paths through the\n  specified pins, cell instance, or nets are considered during timing\n  analysis. You can specify individual -through (or -rise_through and\n  -fall_through ) points in sequence to define a specific path through the\n  design for analysis. The order of the specified through points is important\n  to define a specific path. You can also specify through points with\n  multiple objects, in which case the timing path can pass through any of the\n  specified through objects.\n\n  -rise_through <args> - (Optional) Similar to the -through option, but\n  timing analysis is only performed on paths with a rising transition at the\n  specified objects.\n\n  -fall_through <args> - (Optional) Similar to the -through option, but\n  timing analysis is only performed on paths with a falling transition at the\n  specified objects.\n\n  -delay_type <arg> - (Optional) Specifies the type of delay to analyze when\n  running the timing report. The valid values are min, max, min_max,\n  max_rise, max_fall, min_rise, min_fall. The default setting for -delay_type\n  is max.\n\n  -setup - (Optional) Check for setup violations. This is the same as\n  specifying -delay_type max.\n\n  -hold - (Optional) Check for hold violations. This is the same as\n  specifying -delay_type min.\n\n  Note: -setup and -hold can be specified together, which is the same as\n  specifying -delay_type min_max.\n\n  -max_paths <arg> - (Optional) The maximum number of paths to output when\n  sorted by slack; or the maximum number of paths per path group when sorted\n  by group, as specified by -sort_by. This is specified as a value greater\n  than or equal to 1. The default value is 1, returning the single worst\n  timing path, or the worst path per group.\n\n  -nworst <arg> - (Optional) The number of timing paths to show to each\n  endpoint. The timing report will report the N worst paths based on the\n  specified value. This is specified as a value greater than or equal to 1.\n  The default setting is 1.\n\n  -unique_pins - (Optional) Show only one timing path per each unique pin or\n  group of pins. This is a boolean option, enabled by its use.\n\n  -routable_nets - (Optional) Report the number of routable nets traversed as\n  a property of the timing paths returned.\n\n  -slack_greater_than <arg> - (Optional) Report timing on paths with a\n  calculated slack value greater than the specified value. Used with\n  -slack_lesser_than to provide a range of slack values of specific interest.\n\n  -slack_lesser_than <arg> - (Optional) Report timing on paths with a\n  calculated slack value less than the specified value. Used with\n  -slack_greater_than to provide a range of slack values of specific\n  interest.\n\n  -group <args> - (Optional) Report timing for paths in the specified path\n  groups.\n\n  -no_report_unconstrained - (Optional) Do not report timing on unconstrained\n  paths.\n\n  -user_ignored - (Optional) Show the timing paths that are ignored during\n  timing analysis because the user has specified set_false_path or\n  set_clock_groups timing constraints. This is a boolean option, enabled by\n  its use.\n\n  -sort_by [ slack | group ] - (Optional) Sort timing paths by path groups,\n  or by slack values. The default sort order is by slack values.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_timing_paths based on property values on the timing paths. You can find\n  the properties on an object with the report_property or list_property\n  commands. In the case of the timing path object, 'DATAPATH_DELAY',\n  'ENDPOINT_PIN' and 'ENDPOINT_CLOCK' are some of the properties that can be\n  used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters. String matching is case-sensitive and is always\n  anchored to the start and to the end of the search string. The wildcard '*'\n  character can be used at the beginning or at the end of a search string to\n  widen the search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  The following example gets the first 100 most critical timing paths objects\n  and returns only those from the path group clk_tx_clk_core_1:\n\n    get_timing_paths -max_paths 100 -filter {GROUP == clk_tx_clk_core_1}\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'}\n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED}\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -cell <arg> - (Optional) Apply the get_timing_paths command to the\n  specified cell. Cells can be specified by name, or as an object returned by\n  the get_cells command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Get the five worst timing paths from the specified endpoint and report all\n  the properties of the fourth timing path in the list:\n\n    report_property -all [lindex [get_timing_paths -to [get_ports led_pins[*]]\\\n    -nworst 5] 3]\n\n  Define a procedure called custom_report and report the 100 worst paths from\n  the clk_tx_clk_core_1 path group using the procedure.\n\n    proc custom_report { listOfPaths } {\n       puts [format {%-40s %-40s %-20s %-20s %7s} 'Startpoint' 'Endpoint' \\\n          'Launch Clock' 'Capture Clock' 'Slack']\n       puts [string repeat '-' 140]\n       foreach path $listOfPaths {\n          set startpoint [get_property STARTPOINT_PIN $path]\n          set startclock [get_property STARTPOINT_CLOCK $path]\n          set endpoint [get_property ENDPOINT_PIN $path]\n          set endclock [get_property ENDPOINT_CLOCK $path]\n          set slack [get_property SLACK $path]\n          puts [format {%-40s %-40s %-20s %-20s %7s} $startpoint $endpoint \\\n             $startclock $endclock $slack]\n       }\n    }\n    set paths [get_timing_paths -group clk_tx_clk_core_1 -max_paths 100]\\\n    custom_report $path\n\n  Use get_timing_paths to perform a timing analysis on the specified paths.\n\n    set paths [get_timing_paths -group clk_tx_clk_core_1 -max_paths 100]\n    report_timing -of_objects $paths\n\n  Which is the equivalent of:\n\n    report_timing -group clk_tx_clk_core_1 -max_paths 100\n\n  Return timing paths where the logic levels are greater than the specified\n  number of logic levels.\n\n    get_timing_paths -max_paths 1000 -filter {LOGIC_LEVELS > 1}\n\nSee Also:\n\n   *  report_property\n   *  report_timing\n",
"all_hsios": "all_hsios\n\nDescription: \nGet a list of hsio cells in the current design\n\nSyntax: \nall_hsios  [-quiet] [-verbose]\n\nReturns: \nlist of hsio cell objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of all High Speed IO (HSIO) cell objects that have been\n  declared in the current design. These HSIO cell objects can be assigned to\n  a variable or passed into another command.\n\n  The list of high-speed IOs returned by all_hsios can also be limited or\n  reduced by the filter command to filter according to properties assigned to\n  the HSIO objects. Properties of an object can be returned by the\n  list_property or report_property commands.\n\n  The all_hsios command is scoped to return the objects hierarchically, from\n  the top-level of the design or from the level of the current instance. By\n  default the current instance is defined as the top level of the design, but\n  can be changed by using the current_instance command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns all HSIO objects in the current design:\n\n    all_hsios \n    \n\n  The following example shows how the list returned can be directly passed to\n  another command:\n\n    set_false_path -from [all_hsios] -to [all_registers] \n    \n\nSee Also:\n\n   *  all_cpus\n   *  all_dsps\n   *  all_registers\n   *  current-instance\n   *  filter\n   *  get_cells\n   *  list_property\n   *  report_property\n   *  set_false_path\n",
"get_example_designs": "get_example_designs\n\nDescription: \nGet a list of example designs\n\nSyntax: \nget_example_designs  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n                     [<patterns>...]\n\nReturns: \nlist of design objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  The patterns to match against\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nIPIntegrator\n\nDescription:\n\n  The command returns a list of example designs available in the current\n  release of the Vivado Design Suite, or returns an error if it fails.\n\n  Example designs can be opened, or instantiated into the Vivado Design\n  Suite, onto specific target hardware devices or boards.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_example_designs based on property values on the designs. You can find\n  the properties on an object with the report_property or list_property\n  commands. In the case of the 'example design' object, 'NAME',\n  'SUPPORTED_BOARDS' and 'SUPPORTED_PARTS' are some of the properties that\n  can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match example designs against the specified\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  supported example designs.\n\nExamples:\n\n  The following example returns reports the properties of each of the example\n  designs in the current release:\n\n    foreach x [get_example_designs] {  \n    puts '********* Design $x **************'  \n    report_property -all $x} \n    \n\n  Note: The reported properties include the PARTS property which lists the\n  compatible parts for the example design.\n\nSee Also:\n\n   *  instantiate_example_design\n",
"report_ip_status": "report_ip_status\n\nDescription: \nReport on the status of the IP instances in the project.\n\nSyntax: \nreport_ip_status  [-name <arg>] [-file <arg>] [-append] [-return_string]\n                  [-license_status] [-resource_data] [-quiet] [-verbose]\n\nReturns: \nTrue for success\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-name]            Output the results to GUI panel with this name\n                     Values: The name of the GUI dialog\n  [-file]            Filename to output results to (send output to console if\n                     -file is not used)\n                     Values: The report filename\n  [-append]          Append to existing file\n  [-return_string]   Return report as string\n  [-license_status]  Report the license status of the generated outputs for \n                     each IP\n  [-resource_data]   Report the resource data usage for each IP instance\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n\nCategories: \nIPFlow\n\nDescription:\n\n  This command examines the IP cores in the current project, and reports the\n  state of the IP with regard to the latest IP catalog. The following\n  information is included in the IP Status report:\n\n   *  Instance Name - The name of the IP core in the current project.\n\n   *  IP Status - A description of the state of the IP in the current project.\n\n   *  Recommendation - A recommended action based on the status.\n\n   *  Lock Status - An explanation of the lock status of the IP in the\n      current project.\n\n   *  Change Log - A reference to the change log for the IP update in the\n      catalog. This will provide a description of the changes in the latest\n      IP.\n\n   *  IP Name - The name of the IP core in the catalog.\n\n   *  IP Version - The version of the IP in use in the current project.\n\n   *  New Version - The latest version of the IP in the catalog.\n\n   *  New license - The license status for the new IP version.\n\n   *  Original Part - The original part associated with the IP in the catalog.\n\n  IP cores that are out of date, or locked, may need to be upgraded and the\n  output products regenerated. Refer to the Vivado Design Suite User Guide:\n  Designing with IP (UG896) for more information.\n\n  The report_ip_status command checks the available licenses on the local\n  machine, or on the license server, for all IP cores in the current project.\n  If a license can be found, the license information is printed. If the\n  license cannot be found, this information is also printed.\n\n  This command returns the IP status report, or returns an error if it fails.\n\n  This command can also be used to report the resource data usage for each IP\n  instance. This data is obtained from the synthesis results.\n\n   *  To see the resource data usage in the Tcl console window, type\n      'report_ip_status -resource_data'.\n\n   *  To send the report to the return string, type 'report_ip_status\n      -resource data -return_string'.\n\n   *  To send the report to a file, type 'report_ip_data -resource data -file\n      <filename>'.\n\nArguments:\n\n  -name <arg> - (Optional) The name to assign to the results when run in GUI\n  mode.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -license_status - (Optional) Limits the report to display only the various\n  requirements and state of the licenses for IP used in the design.\n\n  -resource_data - (Optional) Reports the resource data usage for each IP\n  instance in the design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the IP status to the specified file,\n  appending the results if the file already exists:\n\n    report_ip_status -file C:/Data/reports/ip_status.txt -append\n\nSee Also:\n\n   *  get_ips\n   *  import_ip\n   *  read_ip\n   *  upgrade_ip\n",
"write_bsdl": "write_bsdl\n\nDescription: \nGenerate a design specific post-configuration BSDL file (.bsd).\n\nSyntax: \nwrite_bsdl  [-force] [-bsd <arg>] [-quiet] [-verbose] <file>\n\nReturns: \nname of the output file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrite existing .bsd file\n  [-bsd]      Specify an updated generic BSDL file.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Output file name. The .bsd extension is optional.\n\nCategories: \nFileIO\n\nDescription:\n\n  Generate a Boundary Scan Description Language (BSDL) file (.bsd) for the\n  current design that reflects the post-configuration boundary scan\n  architecture of the target device.\n\n  The boundary scan architecture for the device is changed when the device is\n  configured because certain connections between the boundary scan registers\n  and pad may change. These changes must be communicated to the boundary scan\n  tester through a post-configuration BSDL file. Refer to the Vivado Design\n  Suite User Guide: Programming and Debugging (UG908) for more information on\n  the available configuration modes.\n\n  The write_bsdl command reads a pre-configuration BSDL file for the target\n  part from the Vivado Design Suite installation area, and combines that with\n  post-configuration data from the current design.\n\n  This command returns the name of the output BSDL file, or returns an error\n  if it fails.\n\nArguments:\n\n  -force - (Optional) Overwrite an existing BSDL file of the same name.\n\n  -bsd <arg> - (Optional) Specify an existing BSDL file to update. Use this\n  to update a generic BSDL file from the Vivado Design Suite installation\n  with post-configuration data from the current design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Specify the output file name. The .bsd extension is\n  optional.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExample:\n\n  The following example writes a BSDL file at the specified location:\n\n    write_bsdl -force C:/Data/project/design1.bsd \n    \n\nSee Also:\n\n   *  write_bitstream\n",
"create_single_pass_run": "create_single_pass_run\n\nDescription: \nExports an intelligent design run result into a single run for the current project\n\nSyntax: \ncreate_single_pass_run  -reference_run <arg> [-quiet] [-verbose] <name>\n\nReturns: \nrun object\n\nUsage: \n  Name            Description\n  ---------------------------\n  -reference_run  Intelligent design run for which the result has to be \n                  exported into a single run\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <name>          Name for new run\n\nCategories: \nProject\n\nDescription:\n\n  Generates a single pass design run that will be equivalent to the\n  multi-pass Intelligent Design Run. As Intelligent Design Runs can take the\n  equivalent compile time of many single pass runs, the output run of this\n  command allows faster iterations when the design changes.\n\nArguments:\n\n  -reference_run <arg> - (Required) The top level completed Intelligent\n  Design Run name.\n\n  <name> - (Required) The new design run name for the single pass run to be\n  created. The run name must not be a run that already exists.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example creates an implementation run call new_impl_1 from\n  the completed run Intelligent Design Run i_impl_1_1:\n\n    create_single_pass_run -reference_run [get_runs i_impl_1_1] new_impl_1\n\nSee Also:\n\n   *  create_run\n",
"get_assessment_score": "get_assessment_score\n\nDescription: \nGet QOR Assessment Score for the given design\n\nSyntax: \nget_assessment_score  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nFeasibility, Timing\n\nDescription:\n\n  Returns the quality of results (QoR) assessment score of the design in\n  memory. The QoR assessment score is provided as a value between 1 and 5\n  with the following meaning:\n\n   *  Design will fail implementation\n\n   *  Design will complete implementation but not pass timing\n\n   *  Design is likely to fail timing but may meet requirement if 10 or more\n      placer directives are run\n\n   *  Design will likely meet timing if 3 or more placer directives are run\n\n   *  Design will meet timing\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following returns the QoR assessment for the current design:\n\n    get_assessment_score\n\nSee Also:\n\n   *  report_qor_assessment\n   *  report_qor_suggestions\n",
"upgrade_ip": "upgrade_ip\n\nDescription: \nUpgrade a configurable IP to a later version\n\nSyntax: \nupgrade_ip  [-srcset <arg>] [-vlnv <arg>] [-log <arg>] [-quiet] [-verbose]\n            <objects>...\n\nReturns: \nA return code indicating success or failure.\n\nUsage: \n  Name        Description\n  -----------------------\n  [-srcset]   (Optional) Specifies the source file set containing the IP to \n              be upgraded\n              Default: The current source fileset\n              Values: Source set name\n  [-vlnv]     (Optional) Identifies the Catalog IP to which the IP will be \n              upgraded. The VLNV string maps to the IPDEF property on the IP \n              core. This is a strict comparison, and the upgrade will fail if\n              the identified IP does not exist in the Catalog.\n              Default: Latest version of the current IP\n              Values: A string of the form '<vendor>:<library>:<name>:<versio\n              n>'\n  [-log]      (Optional) Identifies the log file to which the IP upgrade \n              report will be concatenated. \n              Default: An empty string, indicating that no log will be \n              written\n              Values: A file path to an existing writable file, or a \n              non-existent file location in a writable directory\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   IP to be upgraded\n              Values: IP instance(s) within the design, as returned by \n              'get_ips <instance name>' or 'get_bd_cells <cell name>'\n\nCategories: \nIPFlow\n\nDescription:\n\n  This command upgrades the specified IP cores from an older version to the\n  latest version in the IP catalog.\n\n  You can only upgrade IP that explicitly supports upgrading. The\n  UPGRADE_VERSIONS property on the ipdef object indicates if there are\n  upgrade versions for an IP core.\n\n  Note: The upgrade_ip command also accepts Block Design cell IP instances as\n  bd_cell objects. The command upgrades the bd_cell objects within the Block\n  Design, and does not require the diagram to be open in the Vivado IP\n  integrator .\n\nArguments:\n\n  -srcset <arg> - (Optional) Specifies the source file set to upgrade the IP\n  files in. If not specified, the default source file set is sources_1.\n\n  -vlnv <arg> - (Optional) Specify the Vendor:Library:Name:Version attribute\n  of the IP to upgrade from the IP catalog. The VLNV attribute identifies the\n  object in the IP catalog.\n\n  -log <arg> - (Optional) Specifies the name of a file to append the IP\n  upgrade information to. By default the upgrade_ip command does not log its\n  activities.\n\n  Note: If the path is not specified as part of the file name, the log file\n  will be written into the current project directory.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) Specifies which IP cores of Block Design cells to\n  upgrade. The IP must be specified as objects returned by the get_ips\n  command.\n\n  Note: Do not use the get_ips -all option, as this can result in recursion\n  issues.\n\nExamples:\n\n  The following example upgrades all IP cores in the current project to the\n  latest version:\n\n    upgrade_ip [get_ips] \n    \n\nSee Also:\n\n   *  create_ip\n   *  get_bd_cells\n   *  get_ips\n   *  import_ip\n   *  open_bd_design\n",
"create_port_on_reconfigurable_module": "create_port_on_reconfigurable_module\n\nDescription: \nGenerate a port on a given reconfigurable cell\n\nSyntax: \ncreate_port_on_reconfigurable_module  [-cell <arg>] [-port <arg>]\n                                      [-direction <arg>] [-from <arg>]\n                                      [-to <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-cell]       (Required) specify the HD.RECONFIGURABLE cell name for port \n                punching\n  [-port]       (Required) specify the newly added port name on given \n                HD.RECONFIGURABLE cell\n  [-direction]  (Required) specify the direction of ports, it could be either\n                INPUT, OUTPUT or INOUT\n  [-from]       (Optional) specify the lower boundary of port bus\n                Default: -1\n  [-to]         (Optional) specify the higher boundary of port bus\n                Default: -1\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nFileIO\n",
"report_config_timing": "report_config_timing\n\nDescription: \nReport settings affecting timing analysis\n\nSyntax: \nreport_config_timing  [-file <arg>] [-append] [-name <arg>] [-return_string]\n                      [-all] [-no_header] [-rpx <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Output the results to file\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-name]           Output the results to GUI panel with this name\n  [-return_string]  return report as string\n  [-all]            report all configuration settings (by default, only the \n                    typically important settings are reported\n  [-no_header]      do not generate a report header\n  [-rpx]            Filename to output interactive results to.\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Report the configuration of timing constraints of the current design.\n\n  By default the report is abbreviated, containing only a few key timing\n  constraints. Use the -all argument to return all timing related\n  configuration.\n\nArguments:\n\n  -file <arg> - (Optional) Write the timing constraints configuration report\n  into the specified file. The specified file will be overwritten if one\n  already exists, unless -append is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) The name of the results to output to the GUI.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -all - (Optional) Reports the state of all timing related attributes and\n  constraints in the design. By default, only a limited set of important\n  timing attributes is reported.\n\n  -no_header - (Optional) Disables the report header. By default the report\n  includes a header that lists:\n\n   *  Report Type - timer_configuration.\n\n   *  Design - The top module of the design.\n\n   *  Part - The device, package, and speed grade of the target part.\n\n   *  Version - The version of software used to create the report\n\n   *  Date - The date of the report.\n\n   *  Command - The command options used to create the report.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the current timing configuration, returns the\n  information as a string, and sets that string into the specified Tcl\n  variable:\n\n    set timeConfig [report_config_timing -all -no_header -return_string]  \n    puts $timeConfig \n    \n\nSee Also:\n\n   *  delete_timing_results\n",
"terminate_runs": "terminate_runs\n\nDescription: \nTerminate the runs\n\nSyntax: \nterminate_runs  [-quiet] [-verbose] <runs>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <runs>      Runs to terminate\n\nCategories: \nProject\n\nDescription:\n\n   *  Terminates specified run(s).\n\n   *  It does not delete any files/directories under the Run directory.\n\n   *  The run's state changes to error (user canceled).\n\nArguments:\n\n  <runs> - (Required) The name of the run(s) to be terminated.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example terminates the implementation run impl_1.\n\n    terminate_runs impl_1\n\n  Note: The Run directory and its contents will not be removed from the\n  file system. Run state will change to error state.\n\n  The following example terminates the implementation runs impl_1 and impl_2.\n\n    terminate_runs impl_1 impl_2\n\n  Note: Once a run is terminated, it has to be reset first before it can be\n  re-launched. To relaunch a terminated run impl_1.\n\n  The following example terminates the impl_1 run, then resets and launches\n  the run.\n\n    terminate_runs impl_1\n    reset_runs impl_1\n    launch_runs impl_1\n\nSee Also:\n\n   *  reset_runs\n\n   *  create_run\n\n   *  launch_runs\n\n   *  opt_design\n\n   *  place_design\n\n   *  route_design\n",
"create_ip_run": "create_ip_run\n\nDescription: \nCreates a run for the given IP.\n\nSyntax: \ncreate_ip_run  [-force] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force regeneration of products of the given IP.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   All of the IP objects (from get_ips or get_files) for which a \n              run needs to be generated for.\n\nCategories: \nProject, IPFlow\n\nDescription:\n\n  Defines a synthesis and implementation run for a single IP object as\n  specified by the get_ips command, or for the specified IP core file (XCI)\n  as specified by the get_files command.\n\n  The IP run is used to generate the synthesis design checkpoint file (DCP)\n  to support the out-of-context (OOC) IP flow, or to synthesize and implement\n  an IP module in the OOC hierarchical design flow.\n\n  Two runs are created: one for synthesis, and one for implementation. The\n  runs are named after the IP core and the run type, <ip_name>_synth_1 and\n  <ip_name>_impl_1.\n\n  The IP source files required to synthesize the run are copied into the IP\n  run directory. The attributes of the run can be configured with the use of\n  the set_property command.\n\n  This command returns the name of the synthesis run created for the IP module.\n\nArguments:\n\n  -force - (Optional) Force the creation of an IP run, even if the generated\n  output products for the specified IP are all current.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <object> - (Required) An IP object as returned by the get_ips command, or\n  an IP file (XCI) as specified by the get_files command.\n\n  Note: Only a single IP may be specified.\n\nExamples:\n\n  The following example creates synthesis and implementation runs for the\n  specified IP module:\n\n    create_ip_run [get_ips add1] \n    \n\nSee Also:\n\n   *  create_run\n   *  get_files\n   *  get_ips\n   *  set_property\n",
"create_waiver": "create_waiver\n\nDescription: \nCreate a DRC/METHODOLOGY/CDC/LINT message waiver\n\nSyntax: \ncreate_waiver  [-type <arg>] [-id <arg>] [-objects <args>] [-from <args>]\n               [-to <args>] [-strings <args>] [-rtl_name <args>]\n               [-rtl_hierarchy <args>] [-rtl_file <args>] [-of_objects <args>]\n               [-user <arg>] -description <arg> [-tags <arg>]\n               [-timestamp <arg>] [-scoped] [-quiet] [-verbose]\n\nReturns: \nwaiver\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-type]           Type of waiver - DRC, METHODOLOGY, CDC, LINT\n  [-id]             ID of the DRC/METHODOLOGY/CDC/LINT message being waived, \n                    not needed for -of_objects use\n  [-objects]        List of inserted message objects for which a \n                    DRC/METHODOLOGY waiver will be set (i.e. %ELG, %SIG, etc.\n                    for cells or nets, etc., sites, etc., or '*CELL', '*NET',\n                    '*SITE', etc. as wildcards\n  [-from]           List of source (driver) pins or ports (or '*PORT', '*PIN'\n                    as wildcard) for which a CDC waiver will be set\n  [-to]             List of target (load) pins or ports (or '*PORT', '*PIN' \n                    as wildcard) for which a CDC waiver will be set\n  [-strings]        List of inserted message string values for which a \n                    DRC/METHODOLOGY waiver will be set (i.e. %STR for \n                    strings, or '*' as wildcard)\n  [-rtl_name]       List of rtl_name values for the LINT waiver ('*' as \n                    wildcard)\n  [-rtl_hierarchy]  List of rtl_hierarchy values for the LINT waiver ('*' as \n                    wildcard)\n  [-rtl_file]       List of rtl_file values for the LINT waiver ('*' as \n                    wildcard)\n  [-of_objects]     List of DRC/METHODOLOGY/CDC violation objects for which \n                    waiver(s) will be set\n  [-user]           Name of the user creating the waiver (required, but if \n                    not specified, the waivers will take the USER name from \n                    the environment if it is available)\n  -description      Description string of the cause for the waiver\n  [-tags]           Optional list of one or more tags to aid in subsequent \n                    waiver identification or categorization\n  [-timestamp]      Timestamp of waiver - for restaining the original time of\n                    a waiver being (re)created after being written\n  [-scoped]         Flag waiver to interpret object wildcards as scoped to \n                    the current_instance that is set\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nWaiver, XDC, DRC, Methodology, CDC, Lint, Object\n\nDescription:\n\n  After report_drc, report_methodology, or report_cdc commands are run, they\n  return messages of specific violations or conditions found in the design.\n  These violations can prevent the design from progressing until they have\n  been resolved or addressed in some way. The create_waiver command lets you\n  select individual violations or specific checks that can be waived for a\n  design, letting you move forward in the design flow.\n\n  Note: Use caution when waiving violations. Waivers may let you proceed in\n  the design flow, but also let you create a design that is fundamentally\n  flawed.\n\n  The user creating the waiver is required to provide a user ID and\n  description in the create_waiver command in order to provide some history\n  of the waiver.\n\n  A waiver must be specified for an individual DRC or methodology violation,\n  or for a specific DRC or methodology check, or for a CDC path. The waiver\n  must be assigned to a specific object, or specific violation ID, or for\n  paths using -from/-to arguments. The form of the create_waiver command\n  varies depending on the check, violation, or object being waived, as shown\n  in the examples below.\n\n  Note: Although many of the arguments are described as optional, some form\n  of identifier is required to associate the waiver with its target.\n\n  To save waivers from one design session to the next, you must use\n  write_waivers to create an XDC file of the waiver commands, and read_xdc to\n  read those waivers back into the design when it is reopened.\n\n  After creating a waiver, you will need to rerun the DRC, methodology, or\n  CDC report to have the waiver considered in the analysis. To see what\n  waivers are in place in the current design you can use the report_waivers\n  command. In addition, the report_drc, report_methodology, and report_cdc\n  commands have options to run the reports on waived violations or checks.\n  Use the delete_waivers command to remove waivers from the design.\n\nArguments:\n\n  -type <arg> - (Optional) Specifies the type of waiver to create. Currently\n  supports DRC, METHODOLOGY, and CDC.\n\n  -id <arg> - (Optional) Specifies the ID of the check or violation being\n  waived. This is not required when using the -of_objects option. The waiver\n  associated with the ID can also be further limited by specifying the\n  -objects, -from/-to, or the -strings arguments.\n\n  -objects <arg> - (Optional) For DRC and methodology checks and violations,\n  this option specifies the object or list of objects that the waiver applies\n  to. Objects are specified using the convention of the violation definition\n  (e.g. %ELG, %SIG, etc. for cells or nets, etc., sites, etc., or '*CELL',\n  '*NET', '*SITE', etc. as wildcards). Refer to the create_drc_check or\n  create_drc_violation commands for more information.\n\n  -from <arg> - (Optional) For CDC checks or violations, this option lists\n  source (driver) pins or ports (or '*PORT', '*PIN' as wildcard) that the\n  waiver applies to.\n\n  -to <arg> - (Optional) For CDC checks or violations, this option lists\n  target (load) pins or ports (or '*PORT', '*PIN' as wildcard) that the\n  waiver applies to.\n\n  -strings - (Optional) For DRC and methodology checks and violations, this\n  option specifies inserted message string values (i.e. %STR for strings, or\n  '*' as wildcard) that the waiver applies to.\n\n  -of_objects <arg> - (Optional) Specifies a list of DRC violations as\n  returned by get_drc_violations; or a list of methodology violations as\n  returned by get_methodology_violations; or a list of CDC violations as\n  returned by get_cdc_violations. The defined waiver applies to the specified\n  list of violation objects.\n\n  -user <arg> - (Optional) Specifies the user ID of the person responsible\n  for creating the waiver. When not specified, the user ID is obtained from\n  the OS.\n\n  -description <arg> - (Required) Provides a brief description of the waiver,\n  and why it is being applied.\n\n  -tags <arg> - (Optional) Specifies a list of user-defined strings to be\n  associated with the waiver. Tags can be used to filter waivers when using\n  the get_waivers command.\n\n  -timestamp <arg> - (Optional) Specifies the original time of the waiver as\n  it is created. Timestamp must be specified in the form 'SUN Aug 6 17:02:21\n  GMT 2017'. If -timestamp is not specified, the current time is used.\n\n  Note: The following Tcl command specifes the timestamp in local time: clock\n  format [clock seconds] -gmt 0\n\n  -scoped - (Optional) Specify that waivers should be interpreted with object\n  wildcards as scoped to the current_instance that is set.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  This example creates a waiver for a methodology check based on the\n  specified ID:\n\n    create_waiver -id TIMING-18 -user samwise -description {waive rule check} \n    \n\n  The following example creates a DRC check waiver for the indicated ID on\n  the specified list of port objects, and provides the timestamp in local\n  time:\n\n    create_waiver -type DRC -id UCIO-1 -user samwise -desc {waiving DRC violation} \\  \n    -objects [get_ports {src_in* dest_out*}] \\  \n    -timestamp [clock format [clock seconds] -gmt 0] \n    \n\n  The following example creates a waiver for specific CDC paths in the\n  design, defined by the -from/-to arguments:\n\n    create_waiver -type CDC -id CDC-6 -user samwise \\  \n    -description {Paths to be re-tested later}\\  \n    -from [list [get_pins {inst_xpm_grey/src_gray_ff_reg[3]/C \\  \n    inst_xpm_grey/src_gray_ff_reg[16]/C \\  \n    inst_xpm_grey/src_gray_ff_reg[22]/C \\  \n    inst_xpm_grey/src_gray_ff_reg[25]/C}]  ] \\  \n    -to [list [get_pins {inst_xpm_grey/dest_graysync_ff_reg[0][1]/D \\  \n    inst_xpm_grey/dest_graysync_ff_reg[0][6]/D \\  \n    inst_xpm_grey/dest_graysync_ff_reg[0][9]/D \\  \n    inst_xpm_grey/dest_graysync_ff_reg[0][24]/D}]  ] \n    \n\nSee Also:\n\n   *  current_instance\n   *  delete_waivers\n   *  get_cdc_violations\n   *  get_drc_violations\n   *  get_methodology_violations\n   *  get_waivers\n   *  report_cdc\n   *  report_drc\n   *  report_methodology\n   *  report_waivers\n   *  write_waivers\n",
"show_schematic": "show_schematic\n\nDescription: \nShow netlist items in schematic view\n\nSyntax: \nshow_schematic  [-add] [-remove] [-regenerate] [-pin_pairs] [-name <arg>]\n                [-quiet] [-verbose] <objects>\n\nUsage: \n  Name           Description\n  --------------------------\n  [-add]         Add to existing schematic view\n  [-remove]      Remove from existing schematic view\n  [-regenerate]  Regenerate layout of schematic view\n  [-pin_pairs]   objects are treated as pair of connected pins. This can be \n                 useful to display paths\n  [-name]        Schematic window title\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <objects>      Netlist items to  show in schematic view\n\nCategories: \nGUIControl\n\nDescription:\n\n  Create a schematic view containing the specified design objects when the\n  tool is invoked in GUI mode.\n\n  The scope of the schematic that is displayed depends on the objects\n  specified. A schematic created with cells, shows the specified cells and\n  any connections between the cells. A schematic created with pins, shows the\n  pin objects, or shows them connected as appropriate if -pin_pairs is\n  specified. A schematic created with nets shows the nets, as well as the\n  cells and ports connected to the nets.\n\n  To display a schematic with multiple levels of hierarchy, use the\n  current_instance command to set the top-level of the hierarchy, or the\n  level of interest, and use the -hierarchical option when specifying design\n  objects with a get_* command.\n\n  Note: This command is only useful when run in the Vivado IDE. When run in\n  Tcl or Batch mode the command simply returns without error or comment.\n\nArguments:\n\n  -add - (Optional) Add the specified objects to the schematic window.\n\n  -remove - (Optional) Remove the specified objects from the schematic window.\n\n  -regenerate - (Optional) Regenerate the schematic window.\n\n  -pin_pairs - (Optional) When specified with a pair of connected pin\n  objects, the schematic shows the pins and the wire between the pins. When\n  the -pin_pairs option is not specified, or is specified with disconnected\n  pins, the wire is not shown.\n\n  -name <arg> - (Optional) Defines a name for the schematic window opened in\n  the GUI. Use this name to add to, remove from, or regenerate the schematic.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) The netlist objects to display in the schematic\n  window.\n\nExamples:\n\n  The following example creates a schematic for the top-level of the design,\n  displaying the nets as well as the ports and cells they connect to:\n\n    show_schematic [get_nets] \n    \n\n  The following example sets the level of hierarchy of interest, and creates\n  a hierarchical schematic from the current level down:\n\n    current_instance A  \n    show_schematic [get_nets -hier] \n    \n\n  The following example creates a schematic window showing the specified\n  pins, and the wire connection between them:\n\n    show_schematic -pin_pairs [get_pins {data0_i/O data_reg/D}] \n    \n\nSee Also:\n\n   *  current_instance\n   *  get_cells\n   *  get_nets\n   *  get_pins\n   *  get_ports\n",
"remove_port": "remove_port\n\nDescription: \nRemove the given list of top ports from the netlist.\n\nSyntax: \nremove_port  [-quiet] [-verbose] <ports>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <ports>     Ports and/or bus ports to remove\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Removes the specified ports or buses.\n\n  To remove a bus port, you must specify the primary port name, and not\n  specify a bus index. This ensures that the entire bus port is removed, and\n  not just a portion of the bits associated with the bus. You can resize a\n  bus port, eliminating bits, using the resize_port_bus command.\n\n  The remove_port command will remove ports that have been added with the\n  create_port command, but cannot delete ports that are defined in the RTL or\n  netlist design.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ports> - One or more names of ports to remove.\n\nExamples:\n\n  The following example deletes the specified port:\n\n    remove_port PORT0 \n    \n\n  The following example deletes the two specified ports of a bus:\n\n    remove_port BUS[1] BUS[2] \n    \n\n  The following example deletes both the N and P sides of a differential pair\n  port:\n\n    remove_port D_BUS_P[0] \n    \n\n  Note: Deleting either the N or the P side of a differential pair will also\n  delete the other side of the pair.\n\nSee Also:\n\n   *  create_cell\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  create_interface\n   *  place_ports\n   *  resize_port_bus\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"reset_timing": "reset_timing\n\nDescription: \nResets the timing information on the current design\n\nSyntax: \nreset_timing  [-invalid] [-clock_reservation] [-quiet] [-verbose]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-invalid]            Resets invalid timing constraints in addition to \n                        valid timing constraints.\n  [-clock_reservation]  Resets clock name reservations for auto-derived \n                        clocks in addition to valid timing constraints.\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Reset the timing data and constraints for the current design. Use this\n  command to clear the current in-memory timing data and constraints, and\n  force the timing engine to reevaluate the design comprehensively rather\n  than iteratively.\n\n  After clearing the constraints from the in-memory design, you must reload\n  any needed constraints using the read_xdc command. The Vivado tool will not\n  automatically reload the constraints.\n\n  Note: This command deletes the in-memory timing view, not the timing\n  report. Use the delete_timing_results command to delete the reported timing\n  information.\n\nArguments:\n\n  -invalid - (Optional) Remove the invalid timing constraints as well as the\n  valid timing constraints when resetting the design. Invalid constraints\n  contain an error or are assigned to missing design objects, and are ignored\n  by the Vivado timing engine at the time the XDC file is read, and so do not\n  affect timing results. Resetting invalid constraints removes them from the\n  in-memory design, so they will be lost if not previously saved to a\n  constraints file.\n\n  -clock_reservation - (Optional) Resets auto-generated clock names as well\n  as valid timing constraints. This allows the Vivado timing engine to\n  regenerate the names of auto-generated clocks without regard to prior\n  reserved names.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example clears the current timing data from memory, including\n  any invalid timing constraints:\n\n    reset_timing -invalid \n    \n\nSee Also:\n\n   *  delete_timing_results\n   *  report_timing\n   *  report_timing_summary\n",
"redo": "redo\n\nDescription: \nRe-do previous command\n\nSyntax: \nredo  [-list] [-quiet] [-verbose]\n\nReturns: \nwith -list, the list of redoable tasks\n\nUsage: \n  Name        Description\n  -----------------------\n  [-list]     Show a list of redoable tasks\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  Note: The UNDO and REDO commands are intended for use in the Vivado IDE,\n  and are not recommended for use in Tcl scripts to restore designs to a\n  former state. To restore a design to a specific condition, you must write a\n  design checkpoint using the write_checkpoint command, to be restored using\n  read_checkpoint.\n\n  Redo a command that has been previously undone. This command can be used\n  repeatedly to redo a series of commands.\n\n  If a command group has been created using the startgroup and endgroup\n  commands, the redo command will redo the group of commands as a sequence.\n\nArguments:\n\n  -list - (Optional) Get the list of commands that can be redone. When you\n  use the undo command, the tool will step backward through a list of\n  commands. The redo command can then be used to redo those commands.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns a list of commands that can be redone:\n\n    redo -list \n    \n\nSee Also:\n\n   *  undo\n   *  startgroup\n   *  endgroup\n",
"delete_interface": "delete_interface\n\nDescription: \nDelete I/O port interfaces from the project\n\nSyntax: \ndelete_interface  [-all] [-quiet] [-verbose] <interfaces>...\n\nUsage: \n  Name          Description\n  -------------------------\n  [-all]        Also remove all of the ports and buses belonging to the \n                interface\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <interfaces>  I/O port interfaces to remove\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Deletes an existing interface and optionally deletes all of the associated\n  ports and buses using the interface.\n\nArguments:\n\n  -all - (Optional) Delete all ports, buses, or nested interfaces associated\n  with the specified interface.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <interfaces> - (Required) The name of interfaces to delete.\n\nExamples:\n\n  The following example deletes the specified interface and all of its\n  associated ports and buses:\n\n    delete_interface USB0 \n    \n\nSee Also:\n\n   *  create_interface\n   *  create_port\n",
"report_clock_networks": "report_clock_networks\n\nDescription: \nReport clock networks\n\nSyntax: \nreport_clock_networks  [-file <arg>] [-append] [-name <arg>] [-return_string]\n                       [-endpoints_only] [-levels <arg>] [-expand_buckets]\n                       [-suppress_endpoints <arg>] [-clocks <args>]\n                       [-unconstrained_roots <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-file]                 Filename to output results to. (send output to \n                          console if -file is not used)\n  [-append]               Append the results to file, don't overwrite the \n                          results file\n  [-name]                 Output the results to GUI panel with this name\n  [-return_string]        return report as string\n  [-endpoints_only]       dump clock network endpoints only; Not to be used \n                          in conjunction with -levels option\n  [-levels]               expands clock network upto n levels of instances, \n                          Value: n > 0; Not to be used in conjunction with \n                          -endpoints_only option\n                          Default: 0\n  [-expand_buckets]       expands bucketed endpoints and displays pins; By \n                          default, endpoint pins are bucketed by celltype; \n                          This option only works in conjunction with -levels \n                          option or -endpoints_only option\n  [-suppress_endpoints]   suppress paths to clock or nonclock endpoint pins; \n                          Values: clock, nonclock\n  [-clocks]               List of clocks for clock network dump; if not \n                          specified, all clock networks are dumped\n  [-unconstrained_roots]  List of unconstrained root pins/ports for clock \n                          network dump; if not specified, all unconstrained \n                          clock roots are dumped\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Reports the network fanout of each clock net in the open synthesized or\n  implemented design. The graphical form of the report, returned when the\n  -name argument is specified, provides a hierarchical tree view of the clock\n  network.\n\n  The default report simply specifies the clock net names and the instance\n  pins that are the startpoint of the clock.\n\n  The report is returned to the standard output unless the -file,\n  -return_string, or -name arguments are specified.\n\nArguments:\n\n  -file <arg> - (Optional) Write the clock network report into the specified\n  file. The specified file will be overwritten if one already exists, unless\n  -append is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) Specifies the name of the results to output to the\n  GUI.\n\n  -return_string - (Optional) Directs the output to a Tcl string. The Tcl\n  string can be captured by a variable definition and parsed or otherwise\n  processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -endpoints_only - (Optional) Report the clock network endpoints; bucketed\n  by cell type, and sorted by clock pins and non-clock pins. This option\n  cannot be specified with the -levels option.\n\n  -levels <arg> - (Optional) Expands the clock network through the specified\n  levels of instances. The default value is 0. The specified value can be\n  greater than 0. This reports the clock path to the path endpoints if enough\n  levels are specified. Path endpoints are bucketed by cell type, and sorted\n  by clock pins and non-clock pins. This option cannot be used with the\n  -endpoints_only option.\n\n  -expand_buckets - (Optional) Expand the clock network report to expand all\n  of the endpoints buckets returned by the -endpoints_only or -levels\n  options, to report all of the clock endpoints.\n\n  -suppress_endpoints [ clock | nonclock ] - (Optional) Suppress reported\n  paths from clock root to clock pins or non-clock endpoint pins. This option\n  eliminates either clock or non-clock pins from the clock network report.\n\n  -clocks <args> - (Optional) Specify the clock objects to include in the\n  clock network report. When not specified, the report includes all clocks.\n\n  -unconstrained_roots <args> - (Optional) For UltraScale devices, and device\n  architectures with clock roots, specify the list of unconstrained clock\n  root pins or ports to include in the clock network report. If this option\n  is not specified, all unconstrained clock roots are reported.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the clock network names and startpoints to\n  the specified file:\n\n    report_clock_networks -file C:/Data/ClkNets.txt \n    \n\n  The following example reports the endpoints of the specified clock:\n\n    report_clock_networks -endpoints_only -clocks wbClk \n    \n\nSee Also:\n\n   *  create_clock\n   *  delete_clock_network_results\n   *  get_clocks\n",
"all_inputs": "all_inputs\n\nDescription: \nGet a list of all input ports in the current design\n\nSyntax: \nall_inputs  [-quiet] [-verbose]\n\nReturns: \nlist of port objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Returns a list of all input port objects in the current design.\n\n  To get a list of specific inputs in the design, use the get_ports command,\n  or use the filter command to filter the results returned by all_inputs.\n\n  The all_inputs command is scoped to return the objects hierarchically, from\n  the top-level of the design or from the level of the current instance. By\n  default the current instance is defined as the top level of the design, but\n  can be changed by using the current_instance command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns all input port objects in the current design:\n\n    all_inputs \n    \n\n  This example gets all input port objects, filters out the GT ports, and\n  sets the IOSTANDARD property for the non-GT ports:\n\n    set non_gt_ports [filter [all_inputs] {!is_gt_term}]   \n    set_property IOSTANDARD LVCMOS18 $non_gt_ports \n    \n\n  The following example shows how the list returned can be passed to another\n  command:\n\n    set_input_delay 5 -clock REFCLK [all_inputs] \n    \n\nSee Also:\n\n   *  all_clocks\n   *  all_outputs\n   *  current_instance\n   *  filter\n   *  get_clocks\n   *  get_ports\n   *  set_input_delay\n   *  set_property\n",
"generate_mem_files": "generate_mem_files\n\nDescription: \nWrite all the simulation .mem files.\n\nSyntax: \ngenerate_mem_files  [-force] [-quiet] [-verbose] <directory>\n\nReturns: \nThe name of the directory\n\nUsage: \n  Name         Description\n  ------------------------\n  [-force]     Overwrite existing .mem files\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <directory>  Directory for exporting .mem files.\n               Values: A directory with alphanumeric characters.\n\nCategories: \nFileIO, Simulation\n\nDescription:\n\n  For embedded processor based designs, with associated Executable Linkable\n  Files (ELF) from the Software Development Kit (SDK), this command merges\n  the Block Memory Map (BMM) for the design with the program data in the ELF\n  file to generate memory (MEM) files for use during simulation.\n\n  The MEM file is a text file that describes how individual Block RAMs on the\n  Xilinx device are grouped together to form a contiguous address space\n  called an Address Block, with the ELF data mapped into the memory.\n\n  The file names and the number of MEM files generated is determined by the\n  memory map data specified by the processor system IP cores, or IP\n  integrator block designs.\n\n  This command returns the directory where the MEM files are written, or\n  returns an error if it fails.\n\nArguments:\n\n  -force - (Optional) Overwrite the specified output directory if it already\n  exists.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <directory> - (Required) The name of the directory to write the memory\n  files into.\n\nExample:\n\n  The following example merges the block RAM map with the ELF file data and\n  generates MEM files in the specified directory for use during simulation:\n\n    generate_mem_files C:/Data/gen_mem \n    \n\nSee Also:\n\n   *  write_bmm\n   *  write_mem_info\n",
"connect_debug_cores": "connect_debug_cores\n\nDescription: \nConnect debug slave instances to the master instance. A valid master is a debug bridge or debug hub instance configured in 'From BSCAN To DebugHUB' mode. A valid slave could be any of the following debug cores (Ex: ILA, VIO, JTAG_to_AXI). connect_debug_cores can only connect master and slave instances that exist in the same region (either in Reconfigurable Partition or static)\n\nSyntax: \nconnect_debug_cores  -master <args> -slaves <args> [-quiet] [-verbose]\n\nReturns: \ndebug master and slave instances\n\nUsage: \n  Name        Description\n  -----------------------\n  -master     A valid debug bridge or debug hub instance configured in 'From \n              BSCAN To DebugHUB' mode. Only one master instance is allowed.\n              \n  -slaves     List of valid slave instances. A valid slave instance is any of\n              the following debug cores (Ex: ILA, VIO, JTAG_to_AXI)\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nDebug, XDC\n\nDescription:\n\n  Connect debug slave instances to the specified master instance. The command\n  can add the specified slaves into an existing debug chain, where the\n  specified slaves will be connected to the debug hub or bridge, without\n  affecting debug slaves that are already in the connection chain.\n\n  Debug masters include both the Debug Hub and Debug Bridge. The Vivado Debug\n  Hub core provides an interface between the JTAG Boundary Scan (BSCAN)\n  interface of the Xilinx device and the Vivado Debug cores, including the\n  Integrated Logic Analyzer (ILA), Virtual Input/Output (VIO), and the\n  JTAG-to-AXI. The Vivado Debug Bridge is a debug controller that provides\n  multiple options to communicate with the debug cores in both flat designs,\n  or Dynamic Function eXchange (DFX) designs. The Debug Bridge can be configured\n  to debug designs using a JTAG cable, or remotely through Ethernet, PCIe, or\n  other interfaces using a Xilinx Virtual Cable (XVC), without the need for a\n  JTAG cable. Refer to the Vivado Design Suite User Guide: Vivado Programming\n  and Debugging (UG908) for more information.\n\n  Note: For DFX designs, the connect_debug_cores\n  command can only connect master and slave instances that occur in the\n  Static Region, or in the same Reconfigurable Partition.\n\nArguments:\n\n  -master <arg> - (Required) A valid debug hub instance, or debug bridge,\n  configured in From BSCAN To Debug HUB mode for DFX designs. Only one master\n  can be specified.\n\n  -slaves <args> - (Required) A list of one or more debug core slave\n  instances. A valid slave instance is an ILA, VIO, or JTAG_to_AXI debug\n  core.\n\n  Note: If any of the specified slaves is already connected to another\n  master, it is first disconnected from the current master and reconnected to\n  the new master.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example connects the specified ILA cores to the debug bridge:\n\n    connect_debug_cores -master [get_cells inst_count/debug_bridge_0] \\  \n    -slaves [list [get_cells inst_count/ila_0] [get_cells inst_count/ila_1] ]  \n     \n    \n\nSee Also:\n\n   *  create_debug_core\n   *  get_cells\n   *  get_debug_cores\n   *  get_hw_axis\n   *  get_hw_ilas\n   *  get_hw_vios\n   *  open_hw\n",
"get_designs": "get_designs\n\nDescription: \nGet a list of designs in the current project\n\nSyntax: \nget_designs  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n             [<patterns>]\n\nReturns: \nlist of design objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match design names against patterns\n                Default: *\n\nCategories: \nObject\n\nDescription:\n\n  Gets a list of open designs in the current project that match a specified\n  search pattern. The default command gets a list of all open designs in the\n  project.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_designs based on property values on the designs. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the 'design' object, 'CONSTRSET', and 'PART' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match designs against the specified patterns. The\n  default pattern is the wildcard `*` which gets all designs. More than one\n  pattern can be specified to find multiple designs based on different search\n  criteria.\n\nExamples:\n\n  The following example gets all open designs in the current project:\n\n    get_designs \n    \n\n  The following example gets the assigned properties of an open design\n  matching the search pattern:\n\n    report_property [get_designs r*] \n    \n\n  Note: If there are no designs matching the pattern you will get a warning.\n\nSee Also:\n\n   *  report_property\n",
"all_latches": "all_latches\n\nDescription: \nGet a list of all latch cells in the current design\n\nSyntax: \nall_latches  [-quiet] [-verbose]\n\nReturns: \nlist of latch cell objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of all latches that have been declared in the current design.\n\n  The list of latches returned by all_latches can also be limited or reduced\n  by the filter command to filter according to properties assigned to the\n  latches. Properties of an object can be returned by the list_property or\n  report_property commands.\n\n  The all_latches command is scoped to return the objects hierarchically,\n  from the top-level of the design or from the level of the current instance.\n  By default the current instance is defined as the top level of the design,\n  but can be changed by using the current_instance command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns a list of all latches in the current design:\n\n    all_latches \n    \n\n  The following example shows how the list returned can be passed to another\n  command:\n\n    set_false_path -from [all_mults] -to [all_latches] \n    \n\nSee Also:\n\n   *  all_ffs\n   *  all_registers\n   *  current_instance\n   *  filter\n   *  get_cells\n   *  list_property\n   *  report_property\n   *  set_false_path\n",
"report_cdc": "report_cdc\n\nDescription: \nReport the clock domain crossing (CDC) paths in the current design.\n\nSyntax: \nreport_cdc  [-from <args>] [-to <args>] [-cells <args>] [-details] [-summary]\n            [-all_checks_per_endpoint] [-severity <arg>] [-no_header]\n            [-show_waiver] [-no_waiver] [-waived] [-file <arg>] [-append]\n            [-return_string] [-name <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-from]                     From clocks\n  [-to]                       To clocks\n  [-cells]                    run report_cdc on the cells\n  [-details]                  report the detail of the CDC timing paths not \n                              safely timed\n  [-summary]                  report a summary by clocks of the CDC\n  [-all_checks_per_endpoint]  report all checks per endpoint\n  [-severity]                 report only the severity specified (Info, \n                              Warning or Critical)\n  [-no_header]                Do not generate a report header\n  [-show_waiver]              Show the waived paths\n  [-no_waiver]                Ignore the waiver\n  [-waived]                   Show only the waived paths\n  [-file]                     Filename to output results to. (send output to \n                              console if -file is not used)\n  [-append]                   Append the results to file, don't overwrite the\n                              results file\n  [-return_string]            return report as string\n  [-name]                     Output the results to GUI panel with this name\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  This report shows in detail the clock domain crossing (CDC) paths in the\n  current synthesized or implemented design. The command analyzes paths\n  between asynchronous clocks, or clocks with no common period, as well as\n  synchronous paths ignored by the user due to false path or max delay\n  datapath_only exceptions.\n\n  By default the report_cdc command reports domain crossing between all\n  clocks in the design. However, you can limit the clocks of interest using\n  the -from and -to options to specify the clock domains of interest.\n\n  The report_cdc command only reports on paths where both source and\n  destination clocks are defined. You should run the check_timing command\n  prior to report_cdc to ensure that there are no unconstrained clocks in the\n  design. I/O paths are only covered by report_cdc when input or output delay\n  constraints have been specified on the I/O ports.\n\n  The severity of the path report could be Critical, Warning or Info\n  depending on the CDC topology identified. An unknown synchronization\n  topology is Critical and needs to be reviewed. A double register\n  synchronizer with missing ASYNC_REG property is a Warning. Clock Enable,\n  MUX, and MUX Hold CDC structures are categorized as Warnings because you\n  should check to ensure that the structure is safe. Other CDC paths are of\n  severity Info.\n\n  The report_cdc command returns the following information:\n\n   *  Severity\n\n   *  Source Clock\n\n   *  Destination Clock\n\n   *  CDC Type\n\n   *  Exceptions\n\n   *  Endpoints\n\n   *  Safe\n\n   *  Unknown\n\n   *  No ASYNC_REG property\n\n  Note: You cannot use the set_msg_config command to configure the severity\n  of messages returned by the report_cdc command. This command does not\n  generate messages through the message manager.\n\nArguments:\n\n  -from <args> - (Optional) Report clock domain crossing from the specified\n  clock domain. Clocks can be specified by name or as returned by the\n  get_clocks command.\n\n  -to <args> - (Optional) Report clock domain crossing into the specified\n  clock domain. Clocks can be specified by name or as returned by the\n  get_clocks command.\n\n  -cells <arg> - (Option) Generate the report on the specified hierarchical\n  cells. The details of the report will be based on the specified cells\n  rather than the whole design.\n\n  -details - (Optional) Provide a detailed report on the timing paths. The\n  detailed report lists a summary table of the CDC paths, and then lists\n  details of the source/destination clock, and the CDC paths for each clock\n  pair.\n\n  -summary - (Optional) This is the default report returned for the design.\n  The summary report generates a table with a message severity, the\n  source/destination clock pair, safe CDC, and unknown or unrecognized CDC,\n  and the number of path endpoints.\n\n  -all_checks_per_endpoint - (Optional) Report all violations for each\n  endpoint of a CDC path, instead of only reporting the most critical\n  violation per endpoint. This option works with the -severity option to\n  report all violations per endpoint, of the specified severity.\n\n  -severity [ Critical | Warning | Info ] - (Optional) Report only the CDC\n  paths with the specified severity level.\n\n  -no_header - (Optional) Eliminate the report header from the results. This\n  can be especially useful when returning the results as a string with\n  -return_string.\n\n  -show_waiver - (Optional) Used with the -details argument, this option adds\n  the waived CDC paths to the report, and adds a 'Waived' column to the\n  report to indicate which paths have been waived and which have not.\n\n  -no_waiver - (Optional) Ignore the waivers defined by the create_waivers\n  command and report all CDC paths.\n\n  -waived - (Optional) Causes only the CDC paths waived by the create_waiver\n  command to be reported. This returns the actual violation rather than the\n  definition of the waiver, which can be reported by the report_waivers\n  command.\n\n  -file <arg> - (Optional) Write the report into the specified file.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -name <arg> - (Optional) The name of the Clock Domain Crossing report view\n  to display in the Vivado IDE when run in GUI mode. If the name has already\n  been used in an open report view, that view will be closed and a new report\n  opened.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the clock domain crossings in the current\n  design, including any waived paths, using a verbose report form, and saving\n  the results to a file:\n\n    report_cdc -details -show_waiver -file C:/Data/cdc_report.txt \n    \n\n  The following example reports the clock domain crossings from a clock\n  specified by name, to another specified as a clock object:\n\n    report_cdc -from clk_pin_p -to [get_clocks clk_rx_clk_core]  \n    \n\nSee Also:\n\n   *  all_clocks\n   *  create_clocks\n   *  create_generated_clocks\n   *  get_clocks\n   *  report_clock_interaction\n   *  report_clock_networks\n   *  report_clocks\n   *  report_timing\n   *  report_timing_summary\n   *  set_clock_groups\n   *  set_false_path\n",
"get_board_part_pins": "get_board_part_pins\n\nDescription: \nGets the list of board_part pins object\n\nSyntax: \nget_board_part_pins  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                     [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nlist of pins in the board_part\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board_component_pin' objects of these types: \n                 'board_component_interface board_interface_port'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   match board_part pin names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of component pin objects on the current board part in use by\n  the current project or design.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The board part provides a representation of the Xilinx device in the\n  context of the board-level system, and is represented by the part0\n  component in the Board Interface file. The current_board_part command\n  returns the board part in use by the current project.\n\n  The board part pin represents the component pin of an implemented interface\n  on the Xilinx device. The component pin includes properties like LOC,\n  IOSTANDARD, and SLEW. Board part pins can be scalar or vector, so it is\n  always represented as bitwise.\n\n  The board part pins can be used to define and place PORTS in the top-level\n  FPGA design, using the create_port and set_property PACKAGE_PIN commands.\n\n  This command returns a list of component pins, or returns an error if it\n  fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_board_part_pins based on property values on the board part pins. You\n  can find the properties on an object with the report_property or\n  list_property commands. For example:\n\n    report_property [get_board_part_pins RESET] \n    \n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the pin assignments of the specified\n  board component interface objects, or board interface ports for the current\n  board part.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match available board part pins against the\n  specified search patterns. The default pattern is the wildcard `*` which\n  gets a list of all board part pins available for use in the current project\n  or design. More than one pattern can be specified to find multiple\n  interfaces based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  This example returns the physical pins of the specified board part interface:\n\n    \n    get_board_part_pins -of [get_board_part_interfaces push_buttons_5bits] \n    \n\n  The following example assigns the PACKAGE_PIN and IOSTANDARD properties on\n  the specified port in the current design according to the properties on the\n  leds_8bits pins in the current board:\n\n    \n    set_property PACKAGE_PIN [get_property LOC \\  \n       [get_board_part_pins leds_8bits_TRI_O[1]]] [get_ports LEDS_n[1]]  \n    set_property IOSTANDARD [get_property IOSTANDARD \\  \n       [get_board_part_pins leds_8bits_TRI_O[1]]] [get_ports LEDS_n[1]] \n    \n\n  The following example gets a list of board part pins assigned to the\n  leds_8bits board part interface; stores those pins in a Tcl variable\n  $boardPins, and then prints the LOC property for each of those pins:\n\n    set boardPins [get_board_part_pins -of \\  \n       [get_board_part_interfaces -filter {NAME == led_8bits}]]  \n    foreach pin $boardPins {puts 'The location of $pin is: \\  \n       [get_property LOC $pin]'}  \n    The location of leds_8bits_tri_o[0] is: AB8  \n    The location of leds_8bits_tri_o[1] is: AA8  \n    The location of leds_8bits_tri_o[2] is: AC9  \n    The location of leds_8bits_tri_o[3] is: AB9  \n    The location of leds_8bits_tri_o[4] is: AE26  \n    The location of leds_8bits_tri_o[5] is: G19  \n    The location of leds_8bits_tri_o[6] is: E18  \n    The location of leds_8bits_tri_o[7] is: F16  \n    \n\nSee Also:\n\n   *  create_bd_interface_port\n   *  create_interface\n   *  current_board_part\n   *  current_project\n   *  get_board_part_interfaces\n   *  get_board_parts\n",
"get_board_part_interfaces": "get_board_part_interfaces\n\nDescription: \nGets the list of interfaces in the board_part that implement busdef specified by VLNV\n\nSyntax: \nget_board_part_interfaces  [-regexp] [-nocase] [-filter <arg>]\n                           [-of_objects <args>] [-quiet] [-verbose]\n                           [<patterns>...]\n\nReturns: \nlist of bus interfaces\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board_component_interface' objects of these types: \n                 'board board_component'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match Bus Interface names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of interfaces defined on the Xilinx device, or current board\n  part as defined by the BOARD_PART property, on the board in use by the\n  current project or open design.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The board part provides a representation of the Xilinx device in the\n  context of the board-level system, and is represented by the part0\n  component in the Board Interface file. The current_board_part command\n  returns the board part in use by the current project.\n\n  The interfaces defined on the current board part define related groups of\n  signals that can be used to quickly connect the elements of a block design\n  in Vivado IP integrator, or configure IP from the Xilinx IP catalog. The\n  interfaces available on the current_board_part can be used to define the\n  interfaces required in an IP subsystem design, using\n  create_bd_interface_port or create_bd_port. It can also be used to define\n  the interfaces available in the overall FPGA design using create_interface\n  and create_port.\n\n  This command returns a list of available interfaces on the current board\n  part, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_board_part_interfaces based on property values on the interfaces. You\n  can find the properties on an object with the report_property or\n  list_property commands. For example:\n\n    report_property -all [get_board_part_interfaces ddr3*] \n    \n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the interfaces of the specified board\n  objects, as returned by the get_boards command, or board components as\n  returned by get_board_components.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match available board part interfaces against the\n  specified search patterns. The default pattern is the wildcard `*` which\n  gets a list of all interfaces available for use in the current project or\n  design. More than one pattern can be specified to find multiple interfaces\n  based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example gets a list of all interfaces defined on the current\n  board part:\n\n    join [get_board_part_interfaces] \\n \n    \n\nSee Also:\n\n   *  create_bd_interface_port\n   *  create_interface\n   *  current_board_part\n   *  current_project\n   *  get_boards\n   *  get_board_components\n   *  get_board_part_pins\n   *  get_board_parts\n",
"get_board_component_modes": "get_board_component_modes\n\nDescription: \nGets the list of component mode objects\n\nSyntax: \nget_board_component_modes  [-regexp] [-nocase] [-all] [-filter <arg>]\n                           -of_objects <args> [-quiet] [-verbose]\n                           [<patterns>...]\n\nReturns: \nlist of component modes in the board\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching\n  [-all]        Returns all enabled as well as disabled interfaces\n  [-filter]     Filter list with expression\n  -of_objects   Get 'board_component_mode' objects of these types: \n                'board_component'.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  match board component modes against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of various component modes defined on the current board, as\n  defined in the Board Interface file.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The component mode defines various modes of operations that the components\n  on a board may have, and the interfaces and preferred IP of those modes.\n\n  This command returns a list of component modes, or returns an error if it\n  fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -all - (Optional) Return a list of all component modes defined in the Board\n  Interface file of the current board.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_component_modes based on property values on the component modes.\n  You can find the properties on an object with the report_property or\n  list_property commands. Any property/value pair can be used as a filter. In\n  the case of the component mode object, 'NAME' and 'INTERFACES' are two of\n  the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Required) Get the component modes of the specified\n  board_components.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match component modes against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  component modes defined on the specified board components.\n\nExamples:\n\n  The following example gets the component modes defined in the Board\n  Interface file of the specified board:\n\n    get_board_component_modes -of_objects [get_board_components *part0*] \n    \n\nSee Also:\n\n   *  current_board\n   *  get_board_buses\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"encrypt_package": "encrypt_package\n\nDescription: \nProtect a packaged IP archive with an encryption wrapper.\n\nSyntax: \nencrypt_package  [-customer_key <arg>] -ip_partner_private_key <arg>\n                 [-ip_partner_keyowner <arg>] -ip_partner_envelope <arg>\n                 [-output <arg>] [-exclude <arg>] [-quiet] [-verbose]\n                 <input>...\n\nUsage: \n  Name                     Description\n  ------------------------------------\n  [-customer_key]          The name of a PEM format file containing the IP \n                           customer's RSA public key. If not specified a key \n                           pair will be generated and the private key \n                           installed on the user's host when \n                           install_encrypted_package is run.\n  -ip_partner_private_key  The name of a PEM format file containing the IP \n                           partner's RSA private key. If the name specified \n                           does not include a file extension, .pem will be \n                           assumed.\n  [-ip_partner_keyowner]   If specified, will replace the value of \n                           key_keyowner in the encryption envelope specified \n                           by -ip_partner_envelope.\n  -ip_partner_envelope     Filename of the file containing the encryption \n                           envelope - the IP partner's public RSA key and the\n                           rights being granted the user. Note that this file\n                           is not included in the zip file in any form, it is\n                           only used to encrypt the HDL files in the package.\n  [-output]                Name of the output archive file. If not specified \n                           and the input is an archive, the input archive \n                           file will be overwritten. If the input is a \n                           directory, this name of the output archive must be\n                           specified.\n  [-exclude]               If input is directory, this option can be used to \n                           specify a comma-separated list of files to exclude\n                           from the packaged archive. Not valid if input is \n                           an archive.\n  [-quiet]                 Ignore command errors\n  [-verbose]               Suspend message limits during command execution\n  <input>                  Either the name of the input archive (zip) file, \n                           which should have been generated using the Vivado \n                           IP Packager to package an IP, or the name of a \n                           directory containing the files to include. If a \n                           directory is specified, it will be searched \n                           recursively for all the files to include in the \n                           output archive. HDL files will be encrypted.\n\nCategories: \nFileIO\n",
"pr_subdivide": "pr_subdivide\n\nDescription: \nSubdivide a Reconfigurable Partition into one or more lower-level Reconfigurable Partitions when using the Hierarchical Dynamic Function eXchange solution.\n\nSyntax: \npr_subdivide  [-cell <arg>] [-subcells <arg>] [-quiet] [-verbose] [<from_dcp>]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-cell]       (Required) Specify parent reconfigurable partition module name\n  [-subcells]   (Required) Specify child reconfigurable partition module names\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<from_dcp>]  (Required) Specify OOC synthesized checkpoint path for the \n                reconfigurable module specified by option -cell\n\nCategories: \nFileIO\n",
"config_flows": "config_flows\n\nDescription: \nConfig Flow\n\nSyntax: \nconfig_flows  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nConfiguration\n",
"return": "return(n)             Tcl Built-In Commands             return(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       return  - Return from a procedure, or set return code of a\n       script\n\nSYNOPSIS\n       return ?result?\n\n       return ?-code code? ?result?\n\n       return ?option value ...? ?result?\n_________________________________________________________________\n\nDESCRIPTION\n       In its simplest usage, the return command is used  without\n       options  in  the body of a procedure to immediately return\n       control to the caller of the procedure.  If a result argu-\n       ment is provided, its value becomes the result of the pro-\n       cedure passed back to the caller.  If result is not speci-\n       fied  then  an empty string will be returned to the caller\n       as the result of the procedure.\n\n       The return command serves a similar function within script\n       files  that  are  evaluated  by  the source command.  When\n       source evaluates the contents of a file as  a  script,  an\n       invocation of the return command will cause script evalua-\n       tion to immediately cease, and the  value  result  (or  an\n       empty string) will be returned as the result of the source\n       command.\n\nEXCEPTIONAL RETURN CODES\n       In addition to the result of a procedure, the return  code\n       of  a  procedure  may also be set by return through use of\n       the -code option.  In  the  usual  case  where  the  -code\n       option  is  not  specified  the procedure will return nor-\n       mally.  However, the -code option may be used to  generate\n       an  exceptional  return from the procedure.  Code may have\n       any of the following values:\n\n       ok (or 0)    Normal return:  same  as  if  the  option  is\n                    omitted.  The return code of the procedure is\n                    0 (TCL_OK).\n\n       error (1)    Error return: the return code of  the  proce-\n                    dure is 1 (TCL_ERROR).  The procedure command\n                    behaves in its calling context as if it  were\n                    the  command  error  result.   See  below for\n                    additional options.\n\n       return (2)   The  return  code  of  the  procedure  is   2\n                    (TCL_RETURN).   The procedure command behaves\n                    in its calling context as if it were the com-\n                    mand return (with no arguments).\n\n       break (3)    The   return  code  of  the  procedure  is  3\n                    (TCL_BREAK).  The procedure  command  behaves\n                    in its calling context as if it were the com-\n                    mand break.\n\n       continue (4) The  return  code  of  the  procedure  is   4\n                    (TCL_CONTINUE).     The   procedure   command\n                    behaves in its calling context as if it  were\n                    the command continue.\n\n       value        Value   must  be  an  integer;   it  will  be\n                    returned as the return code for  the  current\n                    procedure.\n\n       When  a  procedure  wants  to  signal that it has received\n       invalid arguments from its caller, it may use return -code\n       error with result set to a suitable error message.  Other-\n       wise usage of the return -code option is mostly limited to\n       procedures that implement a new control structure.\n\n       The  return  -code  command  acts  similarly within script\n       files that are evaluated by the  source  command.   During\n       the  evaluation  of  the contents of a file as a script by\n       source, an invocation of the  return  -code  code  command\n       will cause the return code of source to be code.\n\nRETURN OPTIONS\n       In addition to a result and a return code, evaluation of a |\n       command in  Tcl  also  produces  a  dictionary  of  return |\n       options.   In  general usage, all option value pairs given |\n       as arguments  to  return  become  entries  in  the  return |\n       options  dictionary,  and any values at all are acceptable |\n       except as noted below.  The catch command may be  used  to |\n       capture  all  of  this  information -- the return code, the |\n       result, and the return options  dictionary  --  that  arise |\n       from evaluation of a script.\n\n       As documented above, the -code entry in the return options\n       dictionary receives special treatment by Tcl.   There  are\n       other return options also recognized and treated specially\n       by Tcl.  They are:\n\n       -errorcode list\n              The -errorcode option  receives  special  treatment\n              only   when  the  value  of  the  -code  option  is\n              TCL_ERROR.  Then the list  value  is  meant  to  be\n              additional  information  about the error, presented\n              as a Tcl list for further processing  by  programs.\n              If  no -errorcode option is provided to return when\n              the -code error option is provided,  Tcl  will  set\n              the  value  of  the  -errorcode entry in the return\n              options dictionary to the default  value  of  NONE.\n              The -errorcode return option will also be stored in\n              the global variable errorCode.\n\n       -errorinfo info\n              The -errorinfo option  receives  special  treatment\n              only   when  the  value  of  the  -code  option  is\n              TCL_ERROR.  Then info is the initial  stack  trace,\n              meant  to  provide  to  a  human  reader additional\n              information about the context in  which  the  error\n              occurred.   The  stack trace will also be stored in\n              the global variable errorInfo.   If  no  -errorinfo\n              option  is  provided to return when the -code error\n              option is provided, Tcl will provide its  own  ini-\n              tial stack trace value in the entry for -errorinfo.\n              Tcl's initial stack trace  will  include  only  the\n              call  to  the  procedure,  and stack unwinding will\n              append information about higher stack  levels,  but\n              there  will  be no information about the context of\n              the error within the procedure.  Typically the info\n              value is supplied from the value of -errorinfo in a\n              return options dictionary  captured  by  the  catch\n              command  (or  from  the  copy  of  that information\n              stored in the global variable errorInfo).\n\n       -level level\n              The -level and -code options work together  to  set |\n              the  return  code to be returned by one of the com- |\n              mands currently being evaluated.  The  level  value |\n              must  be a non-negative integer representing a num- |\n              ber of levels on the call stack.   It  defines  the |\n              number  of  levels up the stack at which the return |\n              code of a command currently being evaluated  should |\n              be  code.   If  no  -level  option is provided, the |\n              default value of level is 1, so  that  return  sets |\n              the  return code that the current procedure returns |\n              to its caller, 1 level  up  the  call  stack.   The |\n              mechanism  by which these options work is described |\n              in more detail below.\n\n       -options options\n              The value options must be a valid dictionary.   The |\n              entries  of  that  dictionary  are treated as addi- |\n              tional option value pairs for the return command.\n\nRETURN CODE HANDLING MECHANISMS\n       Return codes are used in Tcl to control program  flow.   A\n       Tcl script is a sequence of Tcl commands.  So long as each\n       command evaluation returns a return code of TCL_OK, evalu-\n       ation  will  continue  to  the next command in the script.\n       Any exceptional return code  (non-TCL_OK)  returned  by  a\n       command  evaluation causes the flow on to the next command\n       to be interrupted.   Script  evaluation  ceases,  and  the\n       exceptional  return  code  from  the  command  becomes the\n       return code of the full script evaluation.   This  is  the\n       mechanism  by  which errors during script evaluation cause\n       an interruption and unwinding of the call  stack.   It  is\n       also the mechanism by which commands like break, continue,\n       and return cause script evaluation  to  terminate  without\n       evaluating all commands in sequence.\n\n       Some  of  Tcl's built-in commands evaluate scripts as part\n       of their functioning.  These  commands  can  make  use  of\n       exceptional  return codes to enable special features.  For\n       example, the built-in Tcl commands that  provide  loops  --\n       such  as  while, for, and foreach -- evaluate a script that\n       is the body of the loop.  If evaluation of the  loop  body\n       returns  the return code of TCL_BREAK or TCL_CONTINUE, the\n       loop command can react in such a way as to give the  break\n       and  continue  commands their documented interpretation in\n       loops.\n\n       Procedure invocation also involves evaluation of a script, |\n       the  body of the procedure.  Procedure invocation provides |\n       special treatment when evaluation of  the  procedure  body |\n       returns the return code TCL_RETURN.  In that circumstance, |\n       the -level entry  in  the  return  options  dictionary  is |\n       decremented.   If  after  decrementing,  the  value of the |\n       -level entry is 0, then  the  value  of  the  -code  entry |\n       becomes the return code of the procedure.  If after decre- |\n       menting, the value of the -level  entry  is  greater  than |\n       zero, then the return code of the procedure is TCL_RETURN. |\n       If the procedure invocation occurred during the evaluation |\n       of  the body of another procedure, the process will repeat |\n       itself up the call stack, decrementing the  value  of  the |\n       -level  entry  at each level, so that the code will be the |\n       return code of the current command  level  levels  up  the |\n       call stack.  The source command performs the same handling |\n       of the TCL_RETURN return code, which explains the similar- |\n       ity of return invocation during a source to return invoca- |\n       tion within a procedure.                                   |\n\n       The return code of the return command itself triggers this |\n       special  handling  by  procedure invocation.  If return is |\n       provided the option -level 0, then the return code of  the |\n       return  command itself will be the value code of the -code |\n       option (or TCL_OK by default).  Any other  value  for  the |\n       -level  option  (including  the  default  value of 1) will |\n       cause the return code of the return command itself  to  be |\n       TCL_RETURN,  triggering a return from the enclosing proce- |\n       dure.\n\nEXAMPLES\n       First, a simple example of using return to return  from  a\n       procedure, interrupting the procedure body.\n              proc printOneLine {} {\n                 puts 'line 1'    ;# This line will be printed.\n                 return\n                 puts 'line 2'    ;# This line will not be printed.\n              }\n\n       Next, an example of using return to set the value returned\n       by the procedure.\n              proc returnX {} {return X}\n              puts [returnX]    ;# prints 'X'\n\n       Next, a more complete example, using return -code error to\n       report invalid arguments.\n              proc factorial {n} {\n                 if {![string is integer $n] || ($n < 0)} {\n                    return -code error \\\n                          'expected non-negative integer,\\\n                           but got \\'$n\\''\n                 }\n                 if {$n < 2} {\n                    return 1\n                 }\n                 set m [expr {$n - 1}]\n                 set code [catch {factorial $m} factor]\n                 if {$code != 0} {\n                    return -code $code $factor\n                 }\n                 set product [expr {$n * $factor}]\n                 if {$product < 0} {\n                    return -code error \\\n                          'overflow computing factorial of $n'\n                 }\n                 return $product\n              }\n\n       Next, a procedure replacement for break.\n              proc myBreak {} {\n                 return -code break\n              }\n\n       With  the  -level  0  option, return itself can serve as a |\n       replacement for break.                                     |\n              interp alias {} Break {} return -level 0 -code break|\n\n       An example of using catch and return -options to  re-raise |\n       a caught error:                                            |\n              proc doSomething {} {                               |\n                 set resource [allocate]                          |\n                 catch {                                          |\n                    # Long script of operations                   |\n                    # that might raise an error                   |\n                 } result options                                 |\n                 deallocate $resource                             |\n                 return -options $options $result                 |\n              }                                                   |\n\n       Finally  an  example of advanced use of the return options |\n       to create a procedure replacement for return itself:       |\n              proc myReturn {args} {                              |\n                 set result ''                                    |\n                 if {[llength $args] % 2} {                       |\n                    set result [lindex $args end]                 |\n                    set args [lrange $args 0 end-1]               |\n                 }                                                |\n                 set options [dict merge {-level 1} $args]        |\n                 dict incr options -level                         |\n                 return -options $options $result                 |\n              }                                                   |\n\nSEE ALSO\n       break(n),  catch(n),   continue(n),   dict(n),   error(n),\n       proc(n), source(n), tclvars(n)\n\nKEYWORDS\n       break, catch, continue, error, procedure, return\n\n\n\nTcl                            8.5                      return(n)\n",
"report_synchronizer_mtbf": "report_synchronizer_mtbf\n\nDescription: \nCompute mean time between failures and display report\n\nSyntax: \nreport_synchronizer_mtbf  [-file <arg>] [-append] [-return_string]\n                          [-warn_if_mtbf_below <arg>] [-quiet] [-no_header]\n                          [-report_endpoints] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-file]                Filename to output results to. (send output to \n                         console if -file is not used)\n  [-append]              Append the results to file, don't overwrite the \n                         results file\n  [-return_string]       Return the report output as a string\n  [-warn_if_mtbf_below]  \n                         Default: 1e+12\n  [-quiet]               Ignore command errors\n  [-no_header]           Report without the header\n  [-report_endpoints]    Report cdc path end points\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Note: This command is supported for Xilinx UltraScale devices only, and\n  does not support 7 series devices.\n\n  The report_synchronizer_mtbf command reports mean time between failures\n  (MTBF) of each clock domain crossing (CDC) synchronizer chain in a design,\n  and provides an overall MTBF covering all synchronizers. Synchronizer\n  registers must have ASYNC_REG properties with value TRUE to be properly\n  identified as synchronizers for reporting.\n\n  Asynchronous clock domain crossings (CDCs) can fail due to metastability as\n  data is captured asynchronously and may settle to different values on\n  different loads in the circuit. Synchronizer registers are used to improve\n  overall circuit reliability for designs which contain multiple clock\n  domains, in which asynchronous data transfers occur, or in which external\n  asynchronous signals are captured with an internal clock. A synchronizer\n  chain consists of two or more registers connected sequentially with the\n  first stage capturing the data signal from the asynchronous clock domain.\n  The successive register stages provide additional settling time for\n  metastable events and increase MTBF. The synchronizer registers must have\n  ASYNC_REG properties with values of TRUE. Besides reporting MTBF, the\n  ASYNC_REG properties instruct synthesis, simulation and implementation\n  tools to optimize for increased MTBF and improve overall behavior of the\n  synchronizer circuit.\n\n  Note: Avoid using different set/reset or clock enable control signals on\n  registers within a synchronizer chain.\n\n  This command returns the MTBF report, or returns an error if it fails. The\n  command issues a warning message when the MTBF cannot be calculated\n  correctly, for example when a CDC is improperly constrained. The following\n  conditions result in an UNDEFINED synchronizer MTBF value:\n\n   *  One or both clocks of the CDC are unconstrained.\n\n   *  There is a timing violation involving registers in the synchronizer\n      chain.\n\n   *  There is a zero toggle rate detected for the CDC data.\n\n  In the case of a zero toggle rate, it may be necessary to use the\n  set_switching_activity command to manually override the toggle rate on the\n  CDC net with a realistic value. This involves assigning the Toggle Rate and\n  the Static Probability:\n\n   *  Toggle Rate: The number of CDC data signal transitions measured in\n      Million Transitions per Second.\n\n   *  Static Probability: The percentage of time during which the CDC data\n      signal is driven at a high logic level.\n\n  Example: to assign a toggle rate of 12.5% with 0.5 static probability on a\n  CDC net named resync[0]:\n\n    set_switching_activity -toggle_rate 12.5 -static_probability 0.5 \\  \n    [get_nets resync[0]] \n    \n\n  The report contents include the following data for each synchronizer chain\n  in the design:\n\n   *  MTBF: The Mean Time Between Failures for the CDC synchronizer reported\n      in dynamic time units, from seconds to years. An invalid MTBF value is\n      reported as UNDEFINED.\n\n   *  Data Toggle Rate: The rate at which the CDC data switches, based on the\n      default switching activity for the design as reported by\n      report_switching_activity. Measured in (Mts) Millions of Transitions\n      per Second. The rate can be overridden using the set_switching_activity\n      command targeting the CDC net object.\n\n   *  Data Sample Rate: The rate at which the CDC data is sampled, equivalent\n      to the synchronizer chain frequency, measured in MHz.\n\n   *  Settling Time: The total amount of positive slack in nanoseconds on the\n      timing paths from synchronizer register outputs. Higher Settling Time\n      increases MTBF.\n\n   *  Sending Domain: The clock domain of the source of the CDC data. A value\n      of UNCONSTRAINED is reported if the source clock is not defined.\n\n   *  Receiving Domain: The clock domain of the destination of the CDC data.\n      A value of UNCONSTRAINED is reported if the destination clock is not\n      defined.\n\n   *  Number of Stages: This is the length of the synchronizer chain, which\n      equals the number of registers with ASYNC_REG value of TRUE. The MTBF\n      calculation will determine the likelihood that the output register or\n      registers (should the fanout be greater than 1) will experience a\n      metastable event. For example in a typical synchronizer containing 2\n      registers with the ASYNC_REG property set, the MTBF calculation\n      indicates the probability that the output register(s) following the\n      last ASYNC_REG register will capture an incorrect value resulting from\n      the metastable event. When a synchronizer is connected to more than 1\n      output register, the minimum slack from all the paths will be used in\n      the MTBF calculation to ensure that all registers capture the same\n      logic level.\n\n   *  CDC Net Name: This is the logical net name of the CDC data, the data\n      that is captured asynchronously.\n\n  This command returns the MTBF report, or returns an error if it fails.\n\n  The report also includes an overall MTBF calculated using the MTBF of all\n  synchronizers in the design, calculated as the inverse of the sum of the\n  reciprocals of the individual synchronizer MTBF values: (1 / (1/MTBF_1 +\n  1/MTBF_2 + … + 1/MTBF_N) ) for N synchronizers.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. This\n  command will overwrite any files of the same name without warning.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -warn_if_mtbf_below <arg> - (Optional) Specify a value as a floating point\n  number, below which the Vivado Design Suite will issue a warning in\n  addition to the report. The default value is 1e+12.\n\n  -no_header - (Optional) Write the report without the addition of the\n  standard header.\n\n  -report_endpoints - (Optional) Report the total number of CDC path\n  endpoints. This is the sum of Safe, Unsafe, and Unknown endpoints.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example writes the MTBF report to the specified file:\n\n    report_synchronizer_mtbf -file C:/Data/mtbf_report.txt \n    \n\nSee Also:\n\n   *  get_nets\n   *  report_cdc\n   *  report_clock_interaction\n   *  report_clock_networks\n   *  report_switching_activity\n   *  set_switching_activity\n",
"get_pins": "get_pins\n\nDescription: \nGet a list of pins in the current design\n\nSyntax: \nget_pins  [-hsc <arg>] [-hierarchical] [-regexp] [-nocase] [-leaf]\n          [-filter <arg>] [-of_objects <args>] [-match_style <arg>]\n          [-include_replicated_objects] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of pin objects\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-hsc]                         Hierarchy separator\n                                 Default: /\n  [-hierarchical]                Search level-by-level in current instance\n  [-regexp]                      Patterns are full regular expressions\n  [-nocase]                      Perform case-insensitive matching (valid \n                                 only when -regexp specified)\n  [-leaf]                        Get leaf/global pins of nets with \n                                 -of_objects\n  [-filter]                      Filter list with expression\n  [-of_objects]                  Get pins of these cells, nets, timing paths,\n                                 clocks, drc violations\n  [-match_style]                 Style of pattern matching, valid values are \n                                 ucf, sdc\n                                 Default: sdc\n  [-include_replicated_objects]  Include replicated objects when searching \n                                 for patterns. This option is valid only when\n                                 patterns is specified.\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n  [<patterns>]                   Match pin names against patterns\n                                 Default: *\n\nCategories: \nSDC, XDC, Object\n\nDescription:\n\n  Gets a list of pin objects in the current design that match a specified\n  search pattern. The default command gets a list of all pins in the\n  current_instance of the open design, as specified by the current_instance\n  command. You can use the -hierarchical option to extract pins from the\n  hierarchy of the current design.\n\n  Note: Because there are so many pins in the design, the get_pins command\n  can cause performance issues, and add significant time to processing design\n  constraints. In many cases, a design constraint that is written with the\n  get_pins command can be rewritten using the get_cells command, as shown in\n  the examples, to significantly improve constraint processing and\n  performance of the Vivado tool.\n\n  The get_pins command also includes an option to get all replicated pins\n  that are added to a design during physical optimization, or\n  phys_opt_design. The use of the -include_replicated_objects option returns\n  the pins on replicated cells when the pins of an original cell are\n  returned. You can use this option to ensure that constraints or properties\n  that are applied to the pins of a cell are also applied to the pins of its\n  replicated cells.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -hsc <arg> - (Optional) The default hierarchy separator is `/`. Use this\n  argument to specify a different hierarchy separator.\n\n  -hierarchical - (Optional) Get pins from all levels of the design hierarchy\n  starting from the level of the current_instance, or from the top of the\n  current design. Without this argument, the command will only get pins from\n  the current_instance of the design hierarchy. When using -hierarchical, the\n  search pattern should not contain a hierarchy separator because the search\n  pattern is applied at each level of the hierarchy, not to the full\n  hierarchical cell name. For instance, searching for U1/* searches each\n  level of the hierarchy for pins with U1/ in the name. This may not return\n  the intended results. See get_cells for examples of -hierarchical searches.\n\n  Note: When used with -regexpr, the specified search string is matched\n  against the full hierarchical name, and the U1/* search pattern will work\n  as intended.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -leaf - (Optional) Include leaf pins, from primitive or black box cells,\n  for the objects specified with the -of_object argument.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_pins based on property values on the pins. You can find the properties\n  on an object with the report_property or list_property commands. In the\n  case of the pins object, 'PARENT' and 'TYPE' are some of the properties\n  that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  -of_objects <arg> - (Optional) Get the pins connected to the specified\n  cell, clock, timing path, or net; or pins associated with specified DRC\n  violation objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -match_style [sdc | ucf] - (Optional) Indicates that the search pattern\n  matches UCF constraints or SDC constraints. The default is SDC.\n\n  -include_replicated_objects - (Optional) Include pins that have been added\n  through replication of cell instances during optimization. This option is\n  valid only when specified with <patterns>, and returns the pins matching\n  the specified pattern, from replicated cell instances. As a default, the\n  get_pins command does not return the pins of replicated cells.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match pins against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all pins in the\n  project. More than one pattern can be specified to find multiple pins based\n  on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example gets a list of pins attached to the specified cells:\n\n    get_pins -of_objects [get_cells usb*] \n    \n\n  Note: If there are no pins matching the pattern, the tool will return a\n  warning.\n\n  This example shows how using get_cells can improve the performance of the\n  get_pins command:\n\n    [get_pins -hier * -filter {NAME=~xx*/yy*}] \n    \n\n  can be rewritten as:\n\n    [get_pins -filter {REF_PIN_NAME=~yy*} -of [get_cells -hier xx*]]  \n    \n\n  The following shows how rewriting the set_max_delay constraint can\n  significantly improve performance:\n\n    set_max_delay 15 -from [get_pins -hier \\  \n       -filter name=~*/aclk_dpram_reg*/*/CLK] \\  \n       -to [get_cells -hier -filter name=~*/bclk_dout_reg*] -datapath_only \n    \n\n  can be rewritten as:\n\n    set_max_delay 15 -from [get_pins -of \\  \n       [get_cells -hier -filter name=~*aclk_dpram_reg*/*] \\  \n       -filter {REF_PIN_NAME == CLK}] \\  \n       -to [get_pins -of [get_cells -hier -filter {name =~ */bclk_dout_reg*}] \\  \n       -filter {REF_PIN_NAME == D}] -datapath_only \n    \n\n  Note: Although the second command syntax is more complex, the performance\n  gains can be significant.\n\n  This example runs the report_drc command on the current design, and then\n  returns any pins associated with DRC violations:\n\n    report_drc -name drc_1  \n    get_pins -of_objects [get_drc_violations] \n    \n\nSee Also:\n\n   *  current_instance\n   *  get_cells\n   *  get_drc_violations\n   *  list_property\n   *  phys_opt_design\n   *  report_drc\n   *  report_property\n   *  set_max_delay\n",
"open_io_design": "open_io_design\n\nDescription: \nOpen an IO design\n\nSyntax: \nopen_io_design  [-name <arg>] [-part <arg>] [-constrset <arg>] [-quiet]\n                [-verbose]\n\nReturns: \ndesign object\n\nUsage: \n  Name          Description\n  -------------------------\n  [-name]       Design name\n  [-part]       Target part\n  [-constrset]  Constraint fileset to use\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Opens a new or existing I/O Pin Planning design.\n\n  Note: The design_mode property for the current source fileset must be\n  defined as PinPlanning in order to open an I/O design. If not, you will get\n  the following error:\n\n    ERROR: The design mode of `sources_1` must be PinPlanning \n    \n\nArguments:\n\n  -name <arg> - (Optional) The name of a new or existing I/O Pin Planning\n  design.\n\n  -part <arg> - (Optional) The Xilinx device to use when creating a new\n  design. If the part is not specified the default part will be used.\n\n  -constrset <arg> - (Optional) The name of the constraint fileset to use\n  when opening an I/O design.\n\n  Note: The -constrset argument must refer to a constraint fileset that\n  exists. It cannot be used to create a new fileset. Use create_fileset for\n  that purpose.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following creates a new I/O design called myIO:\n\n    open_io_design -name myIO  \n    \n\n  Note: The default source set, constraint set, and part will be used in this\n  case.\n\n  The following example opens an existing I/O design called myIO, and\n  specifies the constraint set to be used:\n\n    open_io_design -name myIO -constrset topCon  \n    \n\nSee Also:\n\n   *  create_project\n",
"error": "error(n)              Tcl Built-In Commands              error(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       error - Generate an error\n\nSYNOPSIS\n       error message ?info? ?code?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Returns a TCL_ERROR code, which causes command interpreta-\n       tion to be unwound.  Message is a string that is  returned\n       to the application to indicate what went wrong.\n\n       The  -errorinfo return option of an interpreter is used to\n       accumulate a stack trace of what was in progress  when  an\n       error  occurred; as nested commands unwind, the Tcl inter-\n       preter adds information to the -errorinfo  return  option.\n       If  the info argument is present, it is used to initialize\n       the -errorinfo return options and the first  increment  of\n       unwind  information  will  not  be added by the Tcl inter-\n       preter.  In other words, the command containing the  error\n       command  will  not appear in the stack trace; in its place\n       will be info.  Historically, this feature  had  been  most\n       useful  in conjunction with the catch command: if a caught\n       error cannot be handled successfully, info can be used  to\n       return  a  stack  trace  reflecting  the original point of\n       occurrence of the error:\n              catch {...} errMsg\n              set savedInfo $::errorInfo\n              ...\n              error $errMsg $savedInfo\n       When working with Tcl 8.5 or  later,  the  following  code\n       should be used instead:\n              catch {...} errMsg options\n              ...\n              return -options $options $errMsg\n\n       If  the code argument is present, then its value is stored\n       in the -errorcode return option.   The  -errorcode  return\n       option  is intended to hold a machine-readable description\n       of the error in cases where such information is available;\n       see  the  return manual page for information on the proper\n       format for this option's value.\n\nEXAMPLE\n       Generate an error if a basic mathematical operation fails:\n              if {1+2 != 3} {\n                  error 'something is very wrong with addition'\n              }\n\n\nSEE ALSO\n       catch(n), return(n)\n\n\nKEYWORDS\n       error\n\n\n\nTcl                                                      error(n)\n",
"write_schematic": "write_schematic\n\nDescription: \nExport schematic \n\nSyntax: \nwrite_schematic  [-force] [-format <arg>] [-orientation <arg>] [-scope <arg>]\n                 [-name <arg>] [-quiet] [-verbose] <file>\n\nReturns: \nname of the output file\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-force]        Overwrite existing file\n  [-format]       Values: native or pdf. read_schematic can be used to view \n                  native format.\n                  Default: native\n  [-orientation]  Values: landscape or portrait\n  [-scope]        Values: current_page, visible or all\n                  Default: current_page\n  [-name]         Schematic window title\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <file>          Output file\n\nCategories: \nFileIO\n\nDescription:\n\n  Output the currently opened, or specified Schematic window in the Vivado\n  IDE to a file.\n\n  The file can be written as a native ASCII file that can be read back into\n  the Vivado IDE using the read_schematic command, or can be written as a PDF\n  or SVG file for use outside of the Vivado Design Suite. This can be useful\n  when documenting IP cores from the IP packager flow, or from the Vivado IP\n  integrator.\n\nArguments:\n\n  -force - (Optional) Overwrite the specified Schematic file if it already\n  exists.\n\n  -format [ native | pdf | svg ] - (Optional) Write the output file in the\n  specified format. The default file format is native to the Vivado Design\n  Suite, that can be read back into the tool using the read_schematic\n  command. SVG is scalable vector graphics format. PDF is portable document\n  format.\n\n  Note: The -format argument is case sensitive.\n\n  -orientation [ landscape | portrait ] - (Optional) Write the schematic in a\n  vertical (portrait) or horizontal (landscape) orientation. The default is\n  portrait.\n\n  -scope [ current_page | visible | all ] - (Optional) Write the current page\n  of the schematic, or the visible content displayed in the schematic window,\n  or all of the schematic. The default is current_page.\n\n  -name <arg> - (Optional) Specifies the name of the open Schematic window to\n  write. Use this option to write the specified schematic window when more\n  than one schematic window is opened.\n\n  Note: When multiple schematic windows are opened, the first opened window\n  is written if -name is not specified.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The path and filename of the Schematic file to write.\n  The path is optional, but if one is not provided the Schematic file will be\n  written to the current working directory, or the directory from which the\n  Vivado tool was launched.\n\nExample:\n\n  The following example writes the specified Schematic window, displayed in\n  the Vivado IDE, to a native format file that can later be read back into\n  the Vivado Design Suite, overwriting the specified file if it already\n  exists:\n\n    write_schematic -name Schematic C:/Data/mySchematic.txt -force \n    \n\n  The following example writes a PDF file with a horizontal view of the\n  specified schematic window:\n\n    write_schematic -format pdf -name 'Schematic (2)' C:/Data/mySchematic.pdf \\  \n    -orientation landscape \n    \n\nSee Also:\n\n   *  read_schematic\n   *  write_bd_layout\n",
"get_macros": "get_macros\n\nDescription: \nGet a list of macros in the current design\n\nSyntax: \nget_macros  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n            [-verbose] [<patterns>]\n\nReturns: \nlist of macro objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get macros of these cells\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match macro names against patterns\n                 Default: *\n\nCategories: \nXDC, Object\n\nDescription:\n\n  Gets a list of macros in the current design that match a specified search\n  pattern. The default command returns a list of all macros in the design.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_macros based on property values on the macros. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the 'macro' object, 'NAME', 'ABSOLUTE_GRID' and 'RLOCS' are\n  some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the macros of the specified cell objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match macros against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all macros in the\n  project. More than one pattern can be specified to find multiple macros\n  based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the properties currently assigned to the\n  macro matching the specified search pattern:\n\n    report_property [get_macro *Macro1] \n    \n\n  Note: If there are no macros matching the pattern you will get a warning.\n\nSee Also:\n\n   *  create_macro\n   *  delete_macro\n   *  list_property\n   *  report_property\n   *  update_macro\n",
"place_ports": "place_ports\n\nDescription: \nAutomatically place a set of ports\n\nSyntax: \nplace_ports  [-skip_unconnected_ports] [-check_only] [-iobank <args>] [-quiet]\n             [-verbose] [<ports>...]\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-skip_unconnected_ports]  Do not place unconnected ports\n  [-check_only]              Only check IO/Clock placement DRCs\n  [-iobank]                  Limit placement to the following banks\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n  [<ports>]                  Ports to place (if omitted, all ports will be \n                             placed).  If the arguments are interleaved \n                             objects of ports and package pins, then manual \n                             placement is performed\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Assign ports to the pins of the Xilinx FPGA package, by automatically or\n  manually placing ports.\n\n   *  Automatically places ports on an available I/O or clocking site, or\n      into the specified I/O banks.\n\n   *  Manually assigns ports to the specified package_pin when both the port\n      and pin are specified.\n\n  The place_ports command will not replace ports that are currently placed by\n  the user, or ports that are placed and fixed.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -skip_unconnected_ports - (Optional) Do not place unconnected ports.\n\n  -check_only - (Optional) Run the clock placer DRCs, which are also\n  available as PLCK checks in the report_drc command. This option does not\n  result in ports being placed, only checked for valid placement.\n\n  -iobank <args> - (Optional) Place the specified ports into the listed IO\n  bank objects. IO bank objects are returned by the get_iobanks command.\n\n  Note: Limiting port placement to specific IO banks will result in a\n  placement error if there are insufficient placement sites for the number of\n  ports being placed.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ports> - (Optional) The names of the ports to be placed.\n\n   *  If no <ports> are specified, all unplaced ports will be placed.\n\n   *  Ports can be specified in <port_name> and <package_pin> pairs to\n      manually assign ports to the specified package_pin. Multiple port_name\n      package_pin pairs can be specified as follows:\n\n        {<port_name1> <package_pin1> <port_name2> <package_pin2>   \n        <port_name2> <package_pin2>...<port_nameN> <package_pinN> } \n        \n\n  Note: If previously placed ports are specified, or included in the list of\n  ports to place, the Vivado tool will not replace or move those ports.\n\nExamples:\n\n  The following example places the port objects returned by the get_ports\n  command, onto I/O bank 13 of the device, as returned by get_iobanks:\n\n    place_ports -iobank [get_iobanks 13] [get_ports DataOut_pad_1_o] \n    \n\n  The follow example uses port_name package_pin pairs to manually place\n  multiple ports:\n\n    place_ports {LEDS_n[2] AA11 LEDS_n[3] AA10 LEDS_n[0] Y11 LEDS_n[1] Y10} \n    \n\n  The following example places all input ports onto I/O banks 12, 13, 14 and\n  15 of the device:\n\n    place_ports -iobank [get_iobanks {12 13 14 15}] [all_inputs] \n    \n\nSee Also:\n\n   *  create_port\n   *  get_iobanks\n   *  make_diff_pair_ports\n   *  remove_port\n",
"split": "split(n)              Tcl Built-In Commands              split(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       split - Split a string into a proper Tcl list\n\nSYNOPSIS\n       split string ?splitChars?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Returns a list created by splitting string at each charac-\n       ter that is in the splitChars argument.  Each  element  of\n       the result list will consist of the characters from string\n       that  lie  between  instances   of   the   characters   in\n       splitChars.   Empty  list  elements  will  be generated if\n       string contains adjacent characters in splitChars,  or  if\n       the  first  or  last character of string is in splitChars.\n       If splitChars is an empty string then  each  character  of\n       string  becomes  a  separate  element  of the result list.\n       SplitChars defaults to the  standard  white-space  charac-\n       ters.\n\nEXAMPLES\n       Divide up a USENET group name into its hierarchical compo-\n       nents:\n              split 'comp.lang.tcl.announce' .\n                    -> comp lang tcl announce\n\n       See how the split command splits  on  every  character  in\n       splitChars,  which  can  result in information loss if you\n       are not careful:\n              split 'alpha beta gamma' 'temp'\n                    -> al {ha b} {} {a ga} {} a\n\n       Extract the list words from a string that is not  a  well-\n       formed list:\n              split 'Example with {unbalanced brace character'\n                    -> Example with \\{unbalanced brace character\n\n       Split a string into its constituent characters\n              split 'Hello world' {}\n                    -> H e l l o { } w o r l d\n\n   PARSING RECORD-ORIENTED FILES\n       Parse a Unix /etc/passwd file, which consists of one entry\n       per line, with each line consisting of  a  colon-separated\n       list of fields:\n              ## Read the file\n              set fid [open /etc/passwd]\n              set content [read $fid]\n              close $fid\n\n              ## Split into records on newlines\n              set records [split $content '\\n']\n\n              ## Iterate over the records\n              foreach rec $records {\n\n                 ## Split into fields on colons\n                 set fields [split $rec ':']\n\n                 ## Assign fields to variables and print some out...\n                 lassign $fields \\\n                       userName password uid grp longName homeDir shell\n                 puts '$longName uses [file tail $shell] for a login shell'\n              }\n\n\nSEE ALSO\n       join(n), list(n), string(n)\n\n\nKEYWORDS\n       list, split, string\n\n\n\nTcl                                                      split(n)\n",
"remove_gui_custom_commands": "remove_gui_custom_commands\n\nDescription: \nRemove one or more custom commands\n\nSyntax: \nremove_gui_custom_commands  [-quiet] [-verbose] <names>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <names>     name of one or more custom commands to remove\n\nCategories: \nGUIControl\n\nDescription:\n\n  Remove one or more GUI custom commands.\n\n  You can use the get_gui_custom_commands to determine the list of defined\n  custom commands.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <names> - (Required) One or more command names to remove.\n\nExamples:\n\n  The following example removes the GUI custom commands with names 'abc' and\n  'xyz':\n\n    remove_gui_custom_commands {abc xyz}\n\nSee Also:\n\n   *  create_gui_custom_command\n   *  create_gui_custom_command_arg\n   *  get_gui_custom_command_args\n   *  get_gui_custom_commands\n   *  remove_gui_custom_command_arg\n   *  remove_gui_custom_command\n",
"read_aie_intf_solution": "read_aie_intf_solution\n\nDescription: \nReads aie interface solution file.\n\nSyntax: \nread_aie_intf_solution  [-cell <arg>] [-quiet] [-verbose] [<file>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-cell]     AIE IP Name for which aie interface solution file to be read.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<file>]    Input AIE Interface solution file.\n\nCategories: \nAIE, FileIO\n",
"get_drc_violations": "get_drc_violations\n\nDescription: \nGet a list of DRC violations from a previous report_drc run\n\nSyntax: \nget_drc_violations  [-name <arg>] [-regexp] [-filter <arg>] [-nocase] [-quiet]\n                    [-verbose] [<patterns>]\n\nReturns: \nlist of DRC violation objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-name]       Get the results with this name\n  [-regexp]     Patterns are full regular expressions\n  [-filter]     Filter list with expression\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match drc_violations against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Gets a list of violation objects found in the design when the report_drc\n  command is run. Violation objects are created at the time DRC is run,\n  either by the internal design rule checks provided by the Vivado tools, or\n  created by the create_drc_violation command in user-defined DRC checks. The\n  properties of individual violation objects can be queried using\n  report_property or list_property commands for details of the violation.\n\n  Violation objects are associated with the cells, nets, pins, or ports in\n  the current design, or sites on the current device. The design objects\n  associated with a DRC violation object can be obtained using the\n  -of_objects option of the appropriate get_* command, such as get_cells, or\n  get_nets for instance.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -name <arg> - (Optional) Get the violations associated with the named DRC\n  result set. In this case the report_drc command must have been run with the\n  -name option.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_drc_violations based on property values on the violations. You can find\n  the properties on an object with the report_property or list_property\n  commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match violations against the specified patterns.\n  The default pattern is the wildcard `*` which gets all violations. More\n  than one pattern can be specified to find multiple violations based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example reports the DRC violations found in the current\n  design, then returns a list of all those violations:\n\n    report_drc  \n    get_drc_violations \n    \n\n  The following example gets the properties of the specified DRC violation:\n\n    report_property [lindex [get_drc_violations] 0] \n    \n\n  The following example returns the list of violations in the specified DRC\n  report of the current design, and then returns the ports associated with\n  any violations of the unspecified I/O Standard rule (NSTD):\n\n    get_drc_violations -name drc_1  \n    get_ports -of_objects [get_drc_violations -name drc_1 NSTD*] \n    \n\nSee Also:\n\n   *  create_drc_check\n   *  create_drc_violation\n   *  get_cells\n   *  get_nets\n   *  get_pins\n   *  get_ports\n   *  get_sites\n   *  report_drc\n",
"reset_simulation": "reset_simulation\n\nDescription: \nReset an existing simulation run\n\nSyntax: \nreset_simulation  [-mode <arg>] [-type <arg>] [-quiet] [-verbose] [<simset>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-mode]     Remove generated data for the specified mode. Values: \n              behavioral, post-synthesis, post-implementation\n              Default: behavioral\n  [-type]     Remove generated data for the specified type. Applicable mode \n              is post-synthesis or post-implementation. Values: functional, \n              timing\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<simset>]  Name of the simulation fileset to reset\n\nCategories: \nSimulation\n\nDescription:\n\n  Reset the current simulation to its starting condition, by cleaning out the\n  various output files created during compilation and simulation for the\n  specified simulation fileset.\n\n  Note: Local files will be removed from the project simulation folders\n  without warning.\n\n  The command returns nothing if successful, or an error if it fails.\n\nArguments:\n\n  -mode [ behavioral | post-synthesis | post-implementation ] - (Optional)\n  Specify the simulation mode to reset. Valid values include behavioral\n  simulation, post-synthesis, or post implementation simulation. The default\n  mode is behavioral.\n\n  -type [ functional | timing ] - (Optional) Cannot be used with -mode\n  behavioral. Specifies functional simulation of just the netlist, or timing\n  simulation of the netlist and SDF file. Post-synthesis timing simulation\n  uses SDF component delays from the synth_design command.\n  Post-implementation timing simulation uses SDF delays from the place_design\n  and route_design commands.\n\n  Note: Do not use -type with -mode behavioral, or the tool will return an\n  error.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <simset> - (Optional) Specify a simulation fileset to remove. The default\n  simset is sim_1.\n\nExamples:\n\n  The following example resets the post-synthesis timing simulation by\n  removing files for the sim_2 simset:\n\n    reset_simulation -mode post-synthesis -type timing sim_2 \n    \n\nSee Also:\n\n   *  launch_xsim\n",
"report_switching_activity": "report_switching_activity\n\nDescription: \nGet switching activity on specified objects\n\nSyntax: \nreport_switching_activity  [-static_probability] [-signal_rate] [-toggle_rate]\n                           [-default_static_probability] [-default_toggle_rate]\n                           [-average] [-file <arg>] [-return_string] [-append]\n                           [-hier] [-all] [-type <args>] [-quiet] [-verbose]\n                           [<objects>...]\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-static_probability]          report static probability\n  [-signal_rate]                 report signal rate\n  [-toggle_rate]                 report toggle rate\n  [-default_static_probability]  report default static probability\n  [-default_toggle_rate]         report default toggle rate\n  [-average]                     Report the average switching activity for \n                                 the specified objects.\n  [-file]                        Filename to output results to. (send output \n                                 to console if -file is not used)\n  [-return_string]               return switching activity as string\n  [-append]                      append switching activity to end of file\n  [-hier]                        Hierarchically reports the switching \n                                 activity on nets within a hierarchical \n                                 instance provided via <objects> option.\n  [-all]                         Report switching activities for all nets for\n                                 the design.\n  [-type]                        Specify nodes in a specific category.  List \n                                 of valid type values: io_output, \n                                 io_bidir_enable, register, lut_ram, lut, \n                                 dsp, bram_enable, bram_wr_enable, gt_txdata,\n                                 gt_rxdata.\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n  [<objects>]                    objects\n\nCategories: \nReport\n\nDescription:\n\n  This command is used to report different kinds of switching activity on\n  design nets, ports, pins, and cells in the current synthesized or\n  implemented design. These include simple signal rate and simple static\n  probability on nets, ports, and pins; and state dependent static\n  probabilities on cells.\n\n  The reported values are defined using the set_switching_activity command.\n\n  Note: This command returns the switching activity for the specified\n  objects, or the current design.\n\n  By default the report is written to the Tcl console or STD output. However,\n  the results can also be written to a file or returned as a string if\n  desired.\n\nArguments:\n\n  -static_probability - (Optional) Specifies that the command returns static\n  probability as part of the report.\n\n  -signal_rate - (Optional) Specifies that the command returns the signal\n  rate as part of the report.\n\n  -toggle_rate - (Optional) Reports the toggle rate (%) as the switching rate\n  of the output of synchronous logic elements compared to a given clock\n  input.\n\n  -average - (Optional) Reports the average switching activity for the\n  specified objects.\n\n  -default_static_probability - (Optional) Reports the default static\n  probability to be used in power analysis on the current design. The default\n  static probability is set using the set_switching_activity command.\n\n  Note: This option does not require objects to be specified since the\n  default applies to the current design.\n\n  -default_toggle_rate - (Optional) Reports the default toggle rate to be\n  used in power analysis on the primary inputs of the current design. You can\n  define the default toggle rate using the set_switching_activity command.\n\n  Note: This option does not require objects to be specified since the\n  default applies to the current design.\n\n  -file <filename> - (Optional) Writes the report to the specified path and\n  file.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Appends the output of the command to the specified\n  file rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Returns the data as a text string for\n  assignment to a Tcl variable.\n\n  -hier - (Optional) Reports the switching activity hierarchically for\n  signals in the specified hierarchical <objects>. Without -hier, the\n  switching activity is applied to the specified <objects> at the current\n  level of the hierarchy.\n\n  -all - (Optional) Must be used with -type, report the switching activity on\n  nets within all instances specified by -type.\n\n  -type <arg> - (Optional) Reports the switching activity for the specified\n  type of logic entity. By default, the command is applied to the top-level\n  of the current design, or to the specified <objects>. The -type option\n  applies the command settings to the specified type of logic objects in the\n  top-level of the current design. The -all option or -hier option can be\n  used to modify the scope of objects the command applies to. Valid logic\n  types include:\n\n   *  io_output - Primary outputs.\n\n   *  io_bidir_enable - Enable pin of Bidir ports.\n\n   *  register - All register outputs in the design/hierarchy specified.\n\n   *  lut - All LUT outputs in the design/hierarchy specified.\n\n   *  lut_ram - All distributed ram outputs in the design/hierarchy specified.\n\n   *  dsp - All DSP outputs in the design/hierarchy specified.\n\n   *  bram_enable - Enable pins (ENARDEN/ENBWREN) of BRAMs.\n\n   *  bram_wr_enable - Write enables of BRAMs (WEA/WEBWE).\n\n   *  gt_txdata - Output TX data pins of all GTs.\n\n   *  gt_rxdata - Output RX data pins of all GTs.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) A list of port, pin, and net objects to report the\n  switching activity of; or a list of cells when specified with -type to\n  define logic objects.\n\nExamples:\n\n  The following example reports the signal_rate and static probability value\n  on all output ports:\n\n    report_switching_activity -signal_rate -static_probability [all_outputs]\n\n  The following example reports the signal_rate and static probability value\n  on all LUT objects in the design:\n\n    report_switching_activity -signal_rate -static_probability -type lut -all\n\n  The following example reports the average toggle rate on all output ports:\n\n    report_switching_activity -toggle_rate -average [all_outputs]\n\nSee Also:\n\n   *  power_opt_design\n   *  report_power\n   *  reset_switching_activity\n   *  set_switching_activity\n",
"array": "array(n)              Tcl Built-In Commands              array(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       array - Manipulate array variables\n\nSYNOPSIS\n       array option arrayName ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This  command  performs  one  of several operations on the\n       variable given by arrayName.  Unless  otherwise  specified\n       for  individual commands below, arrayName must be the name\n       of an existing array variable.  The option argument deter-\n       mines  what  action  is  carried  out by the command.  The\n       legal options (which may be abbreviated) are:\n\n       array anymore arrayName searchId\n              Returns 1 if there are any more elements left to be\n              processed  in  an  array  search, 0 if all elements\n              have already  been  returned.   SearchId  indicates\n              which  search  on arrayName to check, and must have\n              been the return value from a previous invocation of\n              array  startsearch.   This  option  is particularly\n              useful if an array has an  element  with  an  empty\n              name, since the return value from array nextelement\n              will not indicate whether the search has been  com-\n              pleted.\n\n       array donesearch arrayName searchId\n              This   command   terminates  an  array  search  and\n              destroys all the state associated with that search.\n              SearchId  indicates  which  search  on arrayName to\n              destroy, and must have been the return value from a\n              previous  invocation of array startsearch.  Returns\n              an empty string.\n\n       array exists arrayName\n              Returns 1 if arrayName is an array variable,  0  if\n              there  is  no  variable  by that name or if it is a\n              scalar variable.\n\n       array get arrayName ?pattern?\n              Returns a list containing pairs of  elements.   The\n              first  element  in each pair is the name of an ele-\n              ment in arrayName and the second  element  of  each\n              pair  is the value of the array element.  The order\n              of the pairs is undefined.  If pattern is not spec-\n              ified,  then  all  of the elements of the array are\n              included in the result.  If pattern  is  specified,\n              then  only those elements whose names match pattern\n              (using the matching  rules  of  string  match)  are\n              included.  If arrayName is not the name of an array\n              variable, or if the  array  contains  no  elements,\n              then  an  empty list is returned.  If traces on the\n              array modify the list  of  elements,  the  elements\n              returned are those that exist both before and after\n              the call to array get.\n\n       array names arrayName ?mode? ?pattern?\n              Returns a list containing the names of all  of  the\n              elements in the array that match pattern.  Mode may\n              be one of -exact, -glob, or -regexp.  If specified,\n              mode  designates  which  matching  rules  to use to\n              match pattern against the names of the elements  in\n              the  array.   If  not  specified,  mode defaults to\n              -glob.  See the documentation for string match  for\n              information  on  glob style matching, and the docu-\n              mentation for  regexp  for  information  on  regexp\n              matching.   If  pattern is omitted then the command\n              returns all of the element names in the array.   If\n              there  are  no (matching) elements in the array, or\n              if arrayName is not the name of an array  variable,\n              then an empty string is returned.\n\n       array nextelement arrayName searchId\n              Returns  the name of the next element in arrayName,\n              or an empty string if  all  elements  of  arrayName\n              have  already  been  returned  in this search.  The\n              searchId argument identifies the search,  and  must\n              have  been the return value of an array startsearch\n              command.  Warning:  if elements  are  added  to  or\n              deleted from the array, then all searches are auto-\n              matically terminated just as  if  array  donesearch\n              had been invoked; this will cause array nextelement\n              operations to fail for those searches.\n\n       array set arrayName list\n              Sets the values of one or more elements  in  array-\n              Name.   list must have a form like that returned by\n              array get, consisting of an  even  number  of  ele-\n              ments.    Each  odd-numbered  element  in  list  is\n              treated as an element name  within  arrayName,  and\n              the  following  element  in  list  is used as a new\n              value for that  array  element.   If  the  variable\n              arrayName does not already exist and list is empty,\n              arrayName is created with an empty array value.\n\n       array size arrayName\n              Returns a decimal string giving the number of  ele-\n              ments  in  the array.  If arrayName is not the name\n              of an array then 0 is returned.\n\n       array startsearch arrayName\n              This  command  initializes  an   element-by-element\n              search  through  the array given by arrayName, such\n              that invocations of the array  nextelement  command\n              will return the names of the individual elements in\n              the array.  When the search has been completed, the\n              array  donesearch  command  should be invoked.  The\n              return value is a search identifier  that  must  be\n              used in array nextelement and array donesearch com-\n              mands; it allows multiple searches to  be  underway\n              simultaneously for the same array.  It is currently\n              more efficient and easier to use either  the  array\n              get or array names, together with foreach, to iter-\n              ate over all but very large arrays.  See the  exam-\n              ples below for how to do this.\n\n       array statistics arrayName\n              Returns  statistics  about the distribution of data\n              within the hashtable  that  represents  the  array.\n              This  information includes the number of entries in\n              the table, the number of buckets, and the  utiliza-\n              tion of the buckets.\n\n       array unset arrayName ?pattern?\n              Unsets  all of the elements in the array that match\n              pattern (using the matching rules of string match).\n              If  arrayName  is not the name of an array variable\n              or there are no matching elements in the array,  no\n              error  will  be  raised.  If pattern is omitted and\n              arrayName is an array variable,  then  the  command\n              unsets   the  entire  array.   The  command  always\n              returns an empty string.\n\nEXAMPLES\n              array set colorcount {\n                 red   1\n                 green 5\n                 blue  4\n                 white 9\n              }\n\n              foreach {color count} [array get colorcount] {\n                 puts 'Color: $color Count: $count'\n              }\n                --> Color: blue Count: 4\n                  Color: white Count: 9\n                  Color: green Count: 5\n                  Color: red Count: 1\n\n              foreach color [array names colorcount] {\n                 puts 'Color: $color Count: $colorcount($color)'\n              }\n                --> Color: blue Count: 4\n                  Color: white Count: 9\n                  Color: green Count: 5\n                  Color: red Count: 1\n\n              foreach color [lsort [array names colorcount]] {\n                 puts 'Color: $color Count: $colorcount($color)'\n              }\n                --> Color: blue Count: 4\n                  Color: green Count: 5\n                  Color: red Count: 1\n                  Color: white Count: 9\n\n              array statistics colorcount\n                --> 4 entries in table, 4 buckets\n                  number of buckets with 0 entries: 1\n                  number of buckets with 1 entries: 2\n                  number of buckets with 2 entries: 1\n                  number of buckets with 3 entries: 0\n                  number of buckets with 4 entries: 0\n                  number of buckets with 5 entries: 0\n                  number of buckets with 6 entries: 0\n                  number of buckets with 7 entries: 0\n                  number of buckets with 8 entries: 0\n                  number of buckets with 9 entries: 0\n                  number of buckets with 10 or more entries: 0\n                  average search distance for entry: 1.2\n\nSEE ALSO\n       list(n), string(n), variable(n), trace(n), foreach(n)\n\nKEYWORDS\n       array, element names, search\n\n\n\nTcl                            8.3                       array(n)\n",
"get_gui_custom_commands": "get_gui_custom_commands\n\nDescription: \nGet custom commands\n\nSyntax: \nget_gui_custom_commands  [-regexp] [-nocase] [-quiet] [-verbose]\n                         [<patterns>...]\n\nReturns: \nlist of custom command names\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match the custom command names against patterns\n                Default: *\n\nCategories: \nGUIControl\n\nDescription:\n\n  Returns the list of GUI custom commands.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match custom GUI commands against the specified\n  patterns. The default pattern is the wildcard `*` which returns all\n  currently defined custom GUI commands.\n\nExamples:\n\n  The following example returns a list of all the GUI custom commands which\n  has names starting with 'p':\n\n    get_gui_custom_commands p*\n\nSee Also:\n\n   *  create_gui_custom_command\n   *  create_gui_custom_command_arg\n   *  get_gui_custom_command_args\n   *  remove_gui_custom_command_arg\n   *  remove_gui_custom_command\n",
"get_board_buses": "get_board_buses\n\nDescription: \nGets the list of board bus objects\n\nSyntax: \nget_board_buses  [-regexp] [-nocase] [-all] [-filter <arg>]\n                 [-of_objects <args>] [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nlist of buses in the board\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-all]         Returns all enabled as well as disabled buses\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'board_bus' objects of these types: 'board \n                 board_component board_bus_net'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   match board bus names against patterns\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of connection buses defined on the current board, as defined in\n  the Board Interface file.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  Connection buses define the connections between the Xilinx device (part0)\n  and other components on the board.\n\n  This command returns a list of buses, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -all - (Optional) Return a list of all connection buses defined in Board\n  Interface file of the current board.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_buses based on property values on the buses. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the board\n  bus object, 'COMPONENT_1', 'COMPONENT_2', and 'DELAY' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the connection buses of the specified\n  board, board_component, or board_bus_net objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match board buses against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  connection buses defined on the current board.\n\nExamples:\n\n  The following example gets the connection buses associated with the\n  specified component of the current board:\n\n    get_board_buses -of_objects [get_board_components sgmii] \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"get_board_ip_preferences": "get_board_ip_preferences\n\nDescription: \nGets the list of ip preference objects\n\nSyntax: \nget_board_ip_preferences  [-regexp] [-nocase] [-filter <arg>]\n                          -of_objects <args> [-quiet] [-verbose]\n                          [<patterns>...]\n\nReturns: \nlist of ip preferences for the component\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching\n  [-filter]     Filter list with expression\n  -of_objects   Get 'ip_preference' objects of these types: \n                'board_component_mode board_component_interface'.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  match ip preferences against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of IP preferences defined on the current board, as defined in\n  the Board Interface file.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  IP preferences define the preferred IP to connect a component interface to\n  in the Board Interface file.\n\n  This command returns a list of preferred IP for specified component\n  interfaces, or component modes, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_ip_preferences based on property values on the ip_preference\n  objects. You can find the properties on an object with the report_property\n  or list_property commands. Any property/value pair can be used as a filter.\n  In the case of the ip_preference object, 'IP_NAME' and 'IP_VENDOR' are two\n  of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Required) Get the preferred IP of the specified\n  board_component_mode or board_component_interface objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match preferred IP against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  IP preferences defined for the specified component mode or component\n  interface.\n\nExamples:\n\n  The following example gets the IP preferences of the specified component\n  interfaces:\n\n    \n    get_board_ip_preferences -of_objects \\  \n       [get_board_component_interfaces *clock*] \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_buses\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  get_boards\n",
"lreplace": "lreplace(n)           Tcl Built-In Commands           lreplace(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lreplace - Replace elements in a list with new elements\n\nSYNOPSIS\n       lreplace list first last ?element element ...?\n_________________________________________________________________\n\nDESCRIPTION\n       lreplace  returns  a  new  list formed by replacing one or\n       more elements of list with the element  arguments.   first |\n       and  last  are  index values specifying the first and last |\n       elements of the range to replace.  The index values  first |\n       and  last are interpreted the same as index values for the |\n       command string index, supporting simple  index  arithmetic |\n       and  indices relative to the end of the list.  0 refers to |\n       the first element of the list, and end refers to the  last |\n       element  of  the  list.   If list is empty, then first and |\n       last are ignored.\n\n       If first is less than zero, it is considered to  refer  to\n       before  the  first  element  of  the  list.  For non-empty\n       lists, the element indicated by first must exist or  first\n       must indicate before the start of the list.\n\n       If  last  is  less than first, then any specified elements\n       will be inserted into the list at the point  specified  by\n       first with no elements being deleted.\n\n       The  element  arguments specify zero or more new arguments\n       to be added to the  list  in  place  of  those  that  were\n       deleted.   Each  element  argument  will become a separate\n       element of the list.  If no element arguments  are  speci-\n       fied,  then the elements between first and last are simply\n       deleted.  If list is  empty,  any  element  arguments  are\n       added to the end of the list.\n\nEXAMPLES\n       Replacing an element of a list with another:\n              % lreplace {a b c d e} 1 1 foo\n              a foo c d e\n\n       Replacing two elements of a list with three:\n              % lreplace {a b c d e} 1 2 three more elements\n              a three more elements d e\n\n       Deleting the last element from a list in a variable:\n              % set var {a b c d e}\n              a b c d e\n              % set var [lreplace $var end end]\n              a b c d\n\n       A procedure to delete a given element from a list:\n              proc lremove {listVariable value} {\n                  upvar 1 $listVariable var\n                  set idx [lsearch -exact $var $value]\n                  set var [lreplace $var $idx $idx]\n              }\n\nSEE ALSO\n       list(n),  lappend(n),  lindex(n),  linsert(n), llength(n),\n       lsearch(n), lset(n), lrange(n), lsort(n), string(n)        |\n\nKEYWORDS\n       element, list, replace\n\n\n\nTcl                            7.4                    lreplace(n)\n",
"concat": "concat(n)             Tcl Built-In Commands             concat(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       concat - Join lists together\n\nSYNOPSIS\n       concat ?arg arg ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  joins  each  of its arguments together with\n       spaces after trimming  leading  and  trailing  white-space\n       from  each  of them.  If all the arguments are lists, this\n       has the same effect as concatenating them  into  a  single\n       list.   It permits any number of arguments; if no args are\n       supplied, the result is an empty string.\n\nEXAMPLES\n       Although concat will concatenate lists (so the command:\n              concat a b {c d e} {f {g h}}\n       will return 'a b c d e f {g h}' as its  result),  it  will\n       also  concatenate things that are not lists, and hence the\n       command:\n              concat ' a b {c   ' d '  e} f'\n       will return 'a b {c d e} f' as its result.\n\n       Note that the concatenation does not  remove  spaces  from\n       the middle of its arguments, so the command:\n              concat 'a   b   c' { d e f }\n       will  return  'a    b    c  d e f' (i.e. with three spaces\n       between the a, the b and the c).\n\n\nSEE ALSO\n       append(n), eval(n)\n\n\nKEYWORDS\n       concatenate, join, lists\n\n\n\nTcl                            8.3                      concat(n)\n",
"reset_project": "reset_project\n\nDescription: \nReset current project\n\nSyntax: \nreset_project  [-exclude_runs] [-exclude_ips] [-exclude_sim_runs] [-quiet]\n               [-verbose]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-exclude_runs]      Do not reset runs\n  [-exclude_ips]       Do not reset ips\n  [-exclude_sim_runs]  Do not reset simulation runs\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Reset the current project to its starting condition, with source and\n  constraint files, by cleaning out the various output files created during\n  synthesis, simulation, implementation, and write_bitstream. Also resets the\n  state of the project to the start of the design flow.\n\n  Note: Any user-defined Tcl variables that are in the global namespace (i.e.\n  not in a project-specific namespace) are not reset or cleared by this\n  command. Global variables are persistent with the invocation of Vivado and\n  are only cleared when the Vivado Design Suite is closed. You can also use\n  the unset command to expressly clear a specific Tcl variable.\n\nArguments:\n\n  -exclude_runs - (Optional) Exclude the <project>.runs folder from the reset\n  process. In this case, the runs folder will be preserved, while the rest of\n  the project data will be removed.\n\n  -exclude_ips - (Optional) Exclude the <project>.srcs/sources_1/ip folder\n  from the reset process. In this case, the IP folder, containing the IP\n  cores and generated targets, will be preserved, while the rest of the\n  project data will be removed.\n\n  -exclude_sim_runs - (Optional) Exclude the <project>.sim folder from the\n  reset process. In this case, the simulation folder will be preserved, while\n  the rest of the project data will be removed.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example resets the current project, while preserving the\n  simulation run data, and returning all messages regardless of message\n  limits:\n\n    reset_project -exclude_sim_runs -verbose \n    \n\nSee Also:\n\n   *  create_project\n   *  current_project\n",
"resize_pin_bus": "resize_pin_bus\n\nDescription: \nResize pin bus in the current design\n\nSyntax: \nresize_pin_bus  [-from <arg>] [-to <arg>] [-quiet] [-verbose] <pin_bus_name>...\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-from]         New starting bus index\n  [-to]           New ending bus index\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <pin_bus_name>  Name of the pin bus to resize\n\nCategories: \nNetlist\n\nDescription:\n\n  Resize an existing bus pin, to grow the bus, shrink the bus, or renumber\n  the current range of pin indexes. You can only do a single grow, shrink, or\n  renumber operation with each command.\n\n   *  You can grow the bus by indicating a new range of pin indexes outside\n      the current range of indexes. Growing the bus leaves existing pins\n      connected as they currently are.\n\n   *  You can shrink the bus by indicating a new range of pin indexes inside\n      the current range of indexes. Shrinking the bus, eliminates connections\n      to removed bus pins, but leaves the remaining pins connected as they\n      currently are.\n\n   *  You can renumber the current bus indexes by providing a new range of\n      pin indexes with the same width as the current range. Renumbering pins\n      changes the pin index, but does not otherwise change connections.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  This command returns nothing if successful, and returns an error if it fails.\n\nArguments:\n\n  -from <arg> - (Optional) The new starting index of the specified bus pin.\n\n  -to <arg> - (Optional) The new ending index of the specified bus pin.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <bus_pin_name> - (Required) The name of the bus pin to modify. You must\n  specify the pin names hierarchically from the cell instance the pin is\n  assigned to. Pins created at the top-level of the design are ports, and\n  should be resized with the resize_port_bus command.\n\nExamples:\n\n  The following example creates a blackbox cell, then creates a 24-bit\n  bidirectional bus for the specified hierarchical cell, then resizes the bus\n  pin to expand the width to 32-bits, then renumbers the index to include\n  negative bus indexes:\n\n    create_cell -reference dmaBlock -black_box usbEngine0/myDMA  \n    create_pin -direction INOUT -from 0 -to 23 usbEngine0/myDMA/dataBus  \n    resize_pin_bus -from 0 -to 31 usbEngine0/myDMA/dataBus  \n    resize_pin_bus -from -16 -to 15 usbEngine0/myDMA/dataBus \n    \n\nSee Also:\n\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  get_pins\n   *  remove_pin\n   *  resize_net_bus\n   *  resize_port_bus\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"read_design_id": "read_design_id\n\nDescription: \nRetrieve design id.\n\nSyntax: \nread_design_id  [-quiet] [-verbose]\n\nReturns: \nNothing\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n",
"generate_hwh": "generate_hwh\n\nDescription: \nGenerate HWH file\n\nSyntax: \ngenerate_hwh  -connectivity_file <arg> -outdir <arg> [-quiet] [-verbose]\n              <state_file>\n\nReturns: \nParse the metadata files and generate the HWH file\n\nUsage: \n  Name                Description\n  -------------------------------\n  -connectivity_file  Path of the connectivity file to be read\n  -outdir             Path of the output directory\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n  <state_file>        Path of the state json file\n\nCategories: \nProject\n",
"fcopy": "fcopy(n)              Tcl Built-In Commands              fcopy(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       fcopy - Copy data from one channel to another\n\nSYNOPSIS\n       fcopy inchan outchan ?-size size? ?-command callback?\n_________________________________________________________________\n\n\nDESCRIPTION\n       The fcopy command copies data from one I/O channel, inchan\n       to another I/O channel, outchan.  The fcopy command lever-\n       ages  the  buffering  in the Tcl I/O system to avoid extra\n       copies and to avoid buffering too much data in main memory\n       when copying large files to slow destinations like network\n       sockets.\n\n       The fcopy command transfers data from inchan until end  of\n       file  or  size  bytes  have  been transferred. If no -size\n       argument is given, then the copy goes until end  of  file.\n       All the data read from inchan is copied to outchan.  With-\n       out the -command option, fcopy blocks until  the  copy  is\n       complete  and  returns  the  number  of  bytes  written to\n       outchan.\n\n       The -command argument makes fcopy work in the  background.\n       In  this  case  it returns immediately and the callback is\n       invoked later when the copy completes.   The  callback  is\n       called with one or two additional arguments that indicates\n       how many bytes were  written  to  outchan.   If  an  error\n       occurred  during  the background copy, the second argument\n       is the error string associated with  the  error.   With  a\n       background  copy,  it  is  not  necessary to put inchan or\n       outchan into non-blocking mode; the  fcopy  command  takes\n       care  of  that automatically.  However, it is necessary to\n       enter the event loop by using  the  vwait  command  or  by\n       using Tk.\n\n       You are not allowed to do other I/O operations with inchan\n       or outchan during a background fcopy.  If either inchan or\n       outchan get closed while the copy is in progress, the cur-\n       rent copy is stopped and the command callback is not made.\n       If  inchan  is  closed,  then  all data already queued for\n       outchan is written out.\n\n       Note that inchan can become readable during  a  background\n       copy.  You should turn off any fileevent handlers during a\n       background copy so those handlers do  not  interfere  with\n       the  copy.   Any I/O attempted by a fileevent handler will\n       get a 'channel busy' error.\n\n       Fcopy  translates  end-of-line  sequences  in  inchan  and\n       outchan  according  to  the  -translation option for these\n       channels.  See the manual entry for fconfigure for details\n       on  the  -translation  option.  The translations mean that\n       the number of bytes read from inchan can be different than\n       the  number  of bytes written to outchan.  Only the number\n       of bytes written to outchan is  reported,  either  as  the\n       return  value of a synchronous fcopy or as the argument to\n       the callback for an asynchronous fcopy.\n\n       Fcopy obeys the encodings and character translations  con-\n       figured  for  the  channels.  This means that the incoming\n       characters are converted internally first UTF-8  and  then\n       into  the encoding of the channel fcopy writes to. See the\n       manual entry for fconfigure for details on  the  -encoding\n       and  -translation  options.  No conversion is done if both\n       channels are set to encoding 'binary'  and  have  matching\n       translations.  If only the output channel is set to encod-\n       ing 'binary' the system will write the internal UTF-8 rep-\n       resentation  of the incoming characters. If only the input\n       channel is set to encoding 'binary' the system will assume\n       that  the  incoming  bytes  are valid UTF-8 characters and\n       convert  them  according  to  the  output  encoding.   The\n       behaviour  of  the  system  for  bytes which are not valid\n       UTF-8 characters is undefined in this case.\n\n\nEXAMPLES\n       The first example transfers the contents  of  one  channel\n       exactly  to  another.  Note  that when copying one file to\n       another, it is better to use file copy which  also  copies\n       file  metadata  (e.g.  the  file access permissions) where\n       possible.\n              fconfigure $in -translation binary\n              fconfigure $out -translation binary\n              fcopy $in $out\n\n       This second example shows how the callback gets passed the\n       number  of  bytes  transferred.  It also uses vwait to put\n       the application into the event loop.  Of course, this sim-\n       plified  example  could  be done without the command call-\n       back.\n              proc Cleanup {in out bytes {error {}}} {\n                  global total\n                  set total $bytes\n                  close $in\n                  close $out\n                  if {[string length $error] != 0} {\n                # error occurred during the copy\n                  }\n              }\n              set in [open $file1]\n              set out [socket $server $port]\n              fcopy $in $out -command [list Cleanup $in $out]\n              vwait total\n\n       The third example copies in chunks and tests  for  end  of\n       file in the command callback\n              proc CopyMore {in out chunk bytes {error {}}} {\n                  global total done\n                  incr total $bytes\n                  if {([string length $error] != 0) || [eof $in]} {\n                set done $total\n                close $in\n                close $out\n                  } else {\n                fcopy $in $out -size $chunk \\\n                              -command [list CopyMore $in $out $chunk]\n                  }\n              }\n              set in [open $file1]\n              set out [socket $server $port]\n              set chunk 1024\n              set total 0\n              fcopy $in $out -size $chunk \\\n                      -command [list CopyMore $in $out $chunk]\n              vwait done\n\n\nSEE ALSO\n       eof(n), fblocked(n), fconfigure(n), file(n)\n\n\nKEYWORDS\n       blocking,  channel, end of line, end of file, nonblocking,\n       read, translation\n\n\n\nTcl                            8.0                       fcopy(n)\n",
"get_debug_cores": "get_debug_cores\n\nDescription: \nGet a list of debug cores in the current design\n\nSyntax: \nget_debug_cores  [-filter <arg>] [-of_objects <args>] [-regexp] [-nocase]\n                 [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of debug_core objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-filter]      Filter list with expression\n  [-of_objects]  Get cores of these debug ports or nets\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match debug cores against patterns\n                 Default: *\n\nCategories: \nObject, Debug, XDC\n\nDescription:\n\n  Gets a list of Vivado Lab Edition debug cores in the current project that\n  match a specified search pattern. The default command gets a list of all\n  debug cores in the project.\n\n  Debug cores are added to the project with the create_debug_core command.\n  When a ILA debug core (labtools_ila_v3) is added to the project, it is\n  contained within a Debug Hub core (labtools_xsdbmasterlib_v2), and includes\n  a CLK port and a PROBE port as a default. Additional ports can be added to\n  the debug core with the use of the create_debug_port command.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_debug_cores based on property values on the debug cores. You can find\n  the properties on an object with the report_property or list_property\n  commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the ILA debug cores associated with the\n  specified debug ports, or nets.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match debug cores against the specified patterns.\n  The default pattern is the wildcard `*` which gets all debug cores. More\n  than one pattern can be specified to find multiple debug cores based on\n  different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following command gets a list of the Vivado Lab Edition debug cores in\n  the current project:\n\n    get_debug_cores \n    \n\n  Note: A Debug Hub core is returned as one of the debug cores in the\n  project. You cannot directly create this core, but it is automatically\n  added by the tool when you add any ILA cores to the project.\n\n  The following example gets the properties of the specified debug core:\n\n    \n    report_property [get_debug_cores myCore] \n    \n\nSee Also:\n\n   *  create_debug_core\n   *  create_debug_port\n   *  get_debug_ports\n   *  list_property\n   *  report_property\n   *  set_property\n",
"create_drc_ruledeck": "create_drc_ruledeck\n\nDescription: \nCreate one or more user defined DRC rule deck objects\n\nSyntax: \ncreate_drc_ruledeck  [-quiet] [-verbose] <ruledecks>...\n\nReturns: \ndrc_ruledeck\n\nUsage: \n  Name         Description\n  ------------------------\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <ruledecks>  Names of DRC rule decks to create\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Create one or more user-defined rule decks for use when running report_drc.\n\n  A drc_ruledeck object is a collection of design rule checks, grouped for\n  convenience, to be run at different stages of the FPGA design flow, such as\n  during I/O planning or placement. The tool comes with a set of factory\n  predefined rule decks. Use the get_drc_ruledecks command to return a list\n  of the currently defined rule decks.\n\n  The rule decks created by this command are empty, without any checks. You\n  must add design rule checks to the rule deck using the add_drc_checks\n  command. Checks can be removed from a rule deck using the remove_drc_checks\n  command. To see a list of design rule checks that are available to include\n  in the ruledeck, use the get_drc_checks command.\n\n  This command returns the list of drc_ruledecks created.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ruledecks> - (Required) Specify the name of one or more user-defined DRC\n  rule decks to create.\n\nExamples:\n\n  The following example creates two new drc_ruledeck objects:\n\n    create_drc_ruledeck my_rules project_rules \n    \n\nSee Also:\n\n   *  add_drc_checks\n   *  delete_drc_ruledeck\n   *  get_drc_checks\n   *  get_drc_ruledecks\n   *  remove_drc_checks\n   *  report_drc\n",
"set_case_analysis": "set_case_analysis\n\nDescription: \nSpecify that an input is 1, 0, rising or falling\n\nSyntax: \nset_case_analysis  [-quiet] [-verbose] <value> <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <value>     Logic value on the pin: Values: 0, 1, rising, falling, zero, \n              one, rise, fall\n  <objects>   List of ports or pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Specifies that a pin or port is in a steady state of 1, 0, rising or falling.\n\n  This command is usually used to force values onto the ports to help reduce\n  the analysis space, runtime and memory consumption. It is important to let\n  the Vivado timing engine know about signals that have a constant value.\n  This is also critical to ensure that non-functional and irrelevant paths\n  are not reported.\n\n  Setting a case value on a pin results in disabling timing analysis through\n  that pin. This means that timing paths through that pin are not reported.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <value> - (Required) The value to use on the port or pin for timing\n  analysis. The valid values are 0 or zero, 1 or one, rise or rising, fall or\n  falling. When the values ris(e)(ing) or fall(ing) are specified, the given\n  pins or ports are only considered for timing analysis with the specified\n  transition. The other transition is disabled. The default setting is 1.\n\n  <objects> - (Required) One or more ports or pins on which to apply the\n  <value>.\n\nExamples:\n\n  In the example below, two clocks are created on the input pins of the\n  BUFGMUX, clock_sel, but only clk_B is propagated through the output pin\n  after setting the constant value 1 on the selection pin S:\n\n    create_clock -name clk_A -period 10.0 [get_pins clock_sel/I0]  \n    create_clock -name clk_B -period 15.0 [get_pins clock_sel/I1]  \n    set_case_analysis 1 [get_pins clock_sel/S] \n    \n\nSee Also:\n\n   *  create_clock\n   *  report_timing\n",
"report_io": "report_io\n\nDescription: \nDisplay information about all the IO sites on the device\n\nSyntax: \nreport_io  [-file <arg>] [-name <arg>] [-append] [-format <arg>]\n           [-return_string] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to. Send output to console if \n                    -file is not used.\n  [-name]           Output the results to GUI panel with this name\n  [-append]         Append to existing file\n  [-format]         Specifies how to format the report: text, xml. Default is\n                    'text'. Only applies if -file is used. If xml output is \n                    used, -append is not allowed.\n                    Default: text\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report details of the IO banks of the current design. Details include\n  device specific information such as target part, package, and speed grade,\n  and also provides information related to each pin on the device.\n\n  This command returns the requested report, or returns an error if it fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -name <arg> - (Optional) The name to assign to the reported results when\n  run in GUI mode.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option. It cannot\n  be specified with -format xml.\n\n  -format [ xml | text ] - (Optional) Specifies the format of the output as\n  either XML, or an ASCII text file. The default output is text.\n\n  Note: The format applies when -file is specified, but is otherwise ignored.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the IO blocks of the current design:\n\n    report_io \n    \n\nSee Also:\n\n   *  report_route_status\n",
"update": "update(n)             Tcl Built-In Commands             update(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       update - Process pending events and idle callbacks\n\nSYNOPSIS\n       update ?idletasks?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This command is used to bring the application 'up to date'\n       by entering the event loop repeatedly  until  all  pending\n       events (including idle callbacks) have been processed.\n\n       If  the  idletasks  keyword is specified as an argument to\n       the command, then no new events or errors  are  processed;\n       only  idle  callbacks are invoked.  This causes operations\n       that are normally deferred, such as  display  updates  and\n       window layout calculations, to be performed immediately.\n\n       The  update  idletasks  command is useful in scripts where\n       changes have been made to the application's state and  you\n       want  those  changes to appear on the display immediately,\n       rather than waiting for the script to complete.  Most dis-\n       play  updates  are  performed as idle callbacks, so update\n       idletasks will cause them to run.  However, there are some\n       kinds  of  updates that only happen in response to events,\n       such as those triggered  by  window  size  changes;  these\n       updates will not occur in update idletasks.\n\n       The  update  command  with no options is useful in scripts\n       where you are performing a  long-running  computation  but\n       you  still  want the application to respond to events such\n       as user interactions;  if  you  occasionally  call  update\n       then  user input will be processed during the next call to\n       update.\n\nEXAMPLE\n       Run computations for about a second and then finish:\n              set x 1000\n              set done 0\n              after 1000 set done 1\n              while {!$done} {\n                  # A very silly example!\n                  set x [expr {log($x) ** 2.8}]\n\n                  # Test to see if our time-limit has been hit.  This would\n                  # also give a chance for serving network sockets and, if\n                  # the Tk package is loaded, updating a user interface.\n                  update\n              }\n\n\nSEE ALSO\n       after(n), interp(n)\n\n\nKEYWORDS\n       event, flush, handler, idle, update\n\n\n\nTcl                            7.5                      update(n)\n",
"apply_board_connection": "apply_board_connection\n\nDescription: \nApplies board connections to given designs\n\nSyntax: \napply_board_connection  [-board_interface <arg>] -ip_intf <arg> -diagram <arg>\n                        [-quiet] [-verbose]\n\nReturns: \nsucess/failure status of applied action.\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-board_interface]  Board interface name to which connection need to be \n                      applied.\n  -ip_intf            Full path of IP interface name to which board \n                      automation need to be applied.\n  -diagram            The IP Integrator design name.\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n\nCategories: \nObject, Project, Board, IPIntegrator\n\nDescription:\n\n  Connects the interface pin of an IP core in the specified block design to\n  the interface of the current board part in the current project or design.\n\n  The board part provides a representation of the Xilinx device in the\n  context of the board-level system, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. The board part file stores information regarding board\n  attributes. The file, called board_part.xml, is located in the\n  data/boards/board_parts folder of the Vivado Design Suite installation\n  area.\n\n  The command lets you quickly connect compatible interface pins of an IP\n  integrator block design to the appropriate interface definition on the\n  current board part. To make the connection between the IP core to the board\n  part, the IP integrator of the Vivado Design Suite adds an external\n  interface port and interface connection to the block design. The added\n  external interface port is named for the specified board part interface.\n\n  The apply_board_connection commands uses the available interfaces of the\n  current board part defined in the project. An error is returned if the\n  project uses a target part rather than a target board. You can use the\n  current_board_part command to identify the target board used by the\n  project, or get_board_parts to list the boards available for use by the\n  project. Use the get_board_part_interfaces command to determine the list of\n  available interfaces on the current board.\n\n  To remove an existing IP interface connection, specify the -ip_intf option,\n  but do not specify the -board_interface. If no board part interface is\n  specified, the IP interface pin is disconnected.\n\n  This command returns a transcript of it actions, or returns an error if it\n  fails.\n\nArguments:\n\n  -board_interface <arg> - (Optional) Specifies the interface definition to\n  connect to the specified IP core interface. If the -board_interface option\n  is not specified, or is specified with an empty string value, '', an\n  existing connection on the IP interface pin will be removed.\n\n  -ip_intf <arg> - (Required) Specifies the interface pin of an IP core in\n  the IP integrator Block Design defined by the -diagram option. The IP\n  Interface pin is specified in the form <IP_core_name>/<interface_pin_name>.\n  In the first example below, the IP core instance name is\n  '/proc_sys_reset_0' and the Interface pin is '/ext_reset', combined as seen\n  in the example.\n\n  -diagram <arg> - (Required) The name of the IP integrator block design\n  where the IP core instance is found.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example connects the SGMII interface, defined in the current\n  board part, to the processor reset IP core:\n\n    apply_board_connection -board_interface 'reset' \\  \n       -ip_intf '/proc_sys_reset_0/ext_reset' -diagram 'design_2' \n    \n\n  This example removes the connection on the specified interface pin, because\n  the -board_interface option is an empty string:\n\n    apply_board_connection -board_interface '' \\  \n       -ip_intf '/proc_sys_reset_0/ext_reset' -diagram 'design_2' \n    \n\nSee Also:\n\n   *  create_port\n   *  current_board_part\n   *  get_board_part_interfaces\n   *  get_board_parts\n   *  write_checkpoint\n   *  write_edif\n",
"set_external_delay": "set_external_delay\n\nDescription: \nSet external delay\n\nSyntax: \nset_external_delay  -from <args> -to <args> [-min] [-max] [-add] [-quiet]\n                    [-verbose] <delay_value>\n\nUsage: \n  Name           Description\n  --------------------------\n  -from          Output port\n  -to            Input port\n  [-min]         Specifies minimum delay\n  [-max]         Specifies maximum delay\n  [-add]         Add to existing external delay\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <delay_value>  External (feedback) delay value\n\nCategories: \nXDC, Timing\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Sets the external (feedback) delay in nanoseconds (ns) between an output\n  and input port. The external delay is used in the calculation of the\n  PLL/MMCM compensation delay for PLLs/MMCMs with external feedback.\n\n  A min or max value can be specified. By default the value specified applies\n  to both min (hold) and max (setup) compensation delays.\n\n  The command returns the defined delay.\n\nArguments:\n\n  -from <arg> - (Required) The output port name.\n\n  -to <arg> - (Required) The input port name.\n\n  -min - (Optional) Specifies the delay_value is a minimum delay value for\n  hold time analysis.\n\n  -max - (Optional) Specifies the delay_value is a maximum delay value for\n  setup analysis.\n\n  -add - (Optional) Add the specified delay to the existing external delay\n  value.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <delay_value> - (Required) The external delay value specified as\n  nanoseconds (ns). The default value is 0.\n\nExamples:\n\n  The following example sets the external feedback delay to 1.0 ns between\n  the port ClkOut and ClkFb:\n\n    set_external_delay -from [get_ports ClkOut] -to [get_ports ClkFb] 1.0 \n    \n\nSee Also:\n\n   *  report_timing\n   *  set_input_delay\n   *  set_output_delay\n",
"report_operating_conditions": "report_operating_conditions\n\nDescription: \nGet operating conditions values for power estimation\n\nSyntax: \nreport_operating_conditions  [-voltage <args>] [-voltage_range <args>] [-grade]\n                             [-process] [-junction_temp] [-ambient_temp]\n                             [-thetaja] [-thetasa] [-airflow] [-heatsink]\n                             [-thetajb] [-board] [-board_temp] [-board_layers]\n                             [-design_power_budget] [-all] [-file <arg>]\n                             [-return_string] [-append]\n                             [-supply_current_budget <args>] [-quiet]\n                             [-verbose]\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-voltage]                Gets voltage value.  Supported voltage supplies \n                            vary by family.\n  [-voltage_range]          Gets voltage range.  Supported voltage supplies \n                            vary by family.\n  [-grade]                  Temperature grade.  Supported values vary by \n                            family.\n  [-process]                Gets process\n  [-junction_temp]          Junction Temperature (C): auto|degC\n  [-ambient_temp]           Ambient Temperature (C): default|degC\n  [-thetaja]                ThetaJA (C/W): auto|degC/W\n  [-thetasa]                Gets ThetaSA\n  [-airflow]                Airflow (LFM): 0 to 750\n  [-heatsink]               Gets dimensions of heatsink\n  [-thetajb]                Gets ThetaJB\n  [-board]                  Board type: jedec, small, medium, large, custom\n  [-board_temp]             Board Temperature degC\n  [-board_layers]           Board layers: 4to7, 8to11, 12to15, 16+\n  [-design_power_budget]    Design Power Budget (W)\n  [-all]                    Gets all operating conditions listed in this help\n                            message\n  [-file]                   Filename to output results to. (send output to \n                            console if -file is not used)\n  [-return_string]          return operating conditions as string\n  [-append]                 append operating conditions to end of file\n  [-supply_current_budget]  Reports a list of supply current budget 'name \n                            value' pairs.  Supported voltage supplies vary by\n                            family.\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Displays the real-world operating conditions that are used when performing\n  analysis of the design. The reported values of operating conditions can be\n  defined by the set_operating_conditions command.\n\n  The environmental operating conditions of the device are used for power\n  analysis when running the report_power command, but are not used during\n  timing analysis.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -voltage - (Optional) Report the list of voltage pairs. Supported voltage\n  supplies vary by family.\n\n  -voltage_range - (Optional) Report the list of voltage ranges. Supported\n  voltage supplies vary by family.\n\n  -grade - (Optional) Report the temperature grade of the target device\n\n  -process - (Optional) Report the manufacturing process characteristics to\n  be assumed.\n\n  -junction_temp - (Optional) Report the device junction temperature used for\n  modeling\n\n  -ambient_temp - (Optional) Reports the environment ambient temperature\n\n  -thetaja - (Optional) Report the Theta-JA thermal resistance used for\n  modeling\n\n  -thetasa - (Optional) Report the Theta-SA thermal resistance used for\n  modeling\n\n  -airflow - (Optional) Report the Linear Feet Per Minute (LFM) airflow to be\n  used for modeling.\n\n  -heatsink - (Optional) Report the heatsink type to be used for modeling.\n\n  -thetajb - (Optional) Report the Theta-JB thermal resistance used for\n  modeling\n\n  -board - (Optional) Report the board size to be used for modeling.\n\n  -board_temp - (Optional) Report the board temperature in degrees Centigrade\n  to be used for modeling.\n\n  -board_layers - (Optional) Report the number of board layers to be used for\n  modeling\n\n  -design_power_budget - (Optional) Report the design power budget in Watts.\n  This value is used by the report_power command to report the difference\n  between the calculated on-chip power and the design power budget.\n\n  -all - (Optional) Report the current values of all operating conditions.\n  Use this to avoid having to report each condition separately.\n\n  -file <arg> - (Optional) Write the report into the specified file. This\n  will overwrite an existing file of the same name, unless the -append option\n  is also used.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -supply_current_budget - (Optional) Report the list of supply name and\n  current budget pairs. Supported voltage supplies vary by family.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Specify an industrial temperature grade device with an ambient temperature\n  of 75 degrees C and then write those settings to a file on disk.\n\n    set_operating_conditions -grade industrial -junction_temp 75  \n    report_operating_conditions -grade -junction_temp -return_string -file \\  \n    ~/conditions.txt \n    \n\n  Get voltage ranges of VCCINT and VCCAUX for the target device.\n\n    report_operating_conditions -voltage_range {VCCINT VCCAUX}\n\nSee Also:\n\n   *  set_operating_conditions\n",
"webserver": "webserver\n\nDescription: \nStart and Stop the webserver. With no arguments this gives the state of the webserver (running or stopped), URL, key value, and active connections.\n\nSyntax: \nwebserver  [-start] [-stop] [-open] [-browser <arg>] [-port <arg>] [-key <arg>]\n           [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-start]    start the webserver if not running\n  [-stop]     stop the webserver if running\n  [-open]     start if not running and open a browser\n  [-browser]  optional browser to use when opening HTML. Implies 'open'\n  [-port]     webserver port. Use 0 to choose an open port. Only valid with \n              'start'\n              Default: 0\n  [-key]      none, auto, or a string to be used as a security key (website \n              password)\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \n\n",
"launch_chipscope_analyzer": "launch_chipscope_analyzer\n\nDescription: \nIssues an error that you can not run this command\n\nSyntax: \nlaunch_chipscope_analyzer  [-run <arg>] [-csproject <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-run]        Implemented run to launch ChipScope Analyzer with\n  [-csproject]  ChipScope project\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nToolLaunch\n\nDescription:\n\n  Launches the ChipScope Pro Analyzer tool for the active run, or a specified\n  Implemented Design run. You can setup a Netlist Design for use with\n  ChipScope prior to implementation, using the create_debug_core,\n  create_debug_port, and connect_debug_port commands.\n\n  The Implemented Design must also have a bitstream file generated by BitGen\n  for launch_chipscope_analyzer to run. If BitGen has not been run, an error\n  will be returned.\n\n  Note: It is not enough to use the write_bitstream command to create a\n  bitstream file. You must follow the steps outlined below in the second\n  example.\n\nArguments:\n\n  -run <arg> - The run name to use when launching the ChipScope Pro Analyzer.\n  The specified run must be implemented and have a bitstream (.bit) file\n  generated. ChipScope will use the bitstream file and the debug_nets.cdc\n  file from the specified run.\n\n  -csproject <arg> - The name of the project to open in ChipScope Pro\n  Analyzer. If you do not specify the project name, the default project name\n  of csdefaultproj.cpj will be used. When you specify the project name, you\n  should also specify the .cpj extension.\n\n  Note: The project is created in the project/project.data/sources_1/cs folder.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example launches ChipScope Pro Analyzer, specifying the\n  implementation run to use and the name of the ChipScope project to create:\n\n    launch_chipscope_analyzer -run impl_3 -csproject impl_3_cs_project \n    \n\n  The following example sets the add_step Bitgen property for the impl_4 run,\n  launches the impl_4 run, and then launches the ChipScope Pro Analyzer on\n  the specified run:\n\n    set_property add_step Bitgen [get_runs impl_4]  \n    launch_runs impl_4 -jobs 2  \n    launch_chipscope_analyzer -run impl_4 \n    \n\n  Note: In this example the ChipScope project will be called csdefaultproj.cpj.\n\nSee Also:\n\n   *  connect_debug_port\n   *  create_debug_core\n   *  create_debug_port\n   *  launch_runs\n   *  set_property\n   *  write_bitstream\n",
"report_disable_timing": "report_disable_timing\n\nDescription: \nReport disabled timing arcs\n\nSyntax: \nreport_disable_timing  [-user_disabled] [-column_style <arg>] [-file <arg>]\n                       [-append] [-cells <args>] [-return_string] [-quiet]\n                       [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-user_disabled]  report only user disabled arcs\n  [-column_style]   style for path report columns: Values: variable_width, \n                    anchor_left\n                    Default: variable_width\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-cells]          run report_disable_timing on the specified cell(s)\n  [-return_string]  return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Displays a report of timing paths that will be excluded from timing\n  analysis in the current synthesized or implemented design.\n\n  The format of the report is organized into columns for 'Cell or Port' to\n  define the object associated with the timing path, 'From' and 'To' to\n  define the timing path, the condition, and the reason for excluding the\n  path from timing. The various reasons for exclusion are as follows:\n\n   *  constraint - set_disable_timing constraint is specified\n\n   *  constant - Logic constant\n\n   *  loop - Breaks a logic loop\n\n   *  bidirect instance path - Feedback path through bidirectional instances\n\n   *  bidirect net path - Feedback path on nets with bidirectional pins\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -user_disabled - (Optional) Report only the timing arcs that have been\n  disabled by the user with the set_disable_timing command.\n\n  -column_style [ variable_width | anchor_left ] - (Optional) Specifies the\n  alignment of the columns in the report. The default is variable_width when\n  the option is not specified.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -cells <arg> - (Option) The details of the report will be based on the\n  specified cells rather than the whole design.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports all timing paths that will not be included in\n  timing analysis:\n\n    report_disable_timing  \n    \n\n  The following example outputs the disable timing report as a string, stores\n  it in a variable, and then puts it to the display:\n\n    set bad_time [report_disable_timing -return_string]  \n    puts $bad_time \n    \n\nSee Also:\n\n   *  report_timing\n   *  set_disable_timing\n",
"filter": "filter\n\nDescription: \nFilter a list, resulting in new list\n\nSyntax: \nfilter  [-regexp] [-nocase] [-quiet] [-verbose] [<objects>] [<filter>]\n\nReturns: \nnew list\n\nUsage: \n  Name         Description\n  ------------------------\n  [-regexp]    Operators =~ and !~ use regular expressions\n  [-nocase]    Perform case-insensitive matching (valid only when -regexp \n               specified)\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<objects>]  List of objects to filter\n  [<filter>]   Filter list with expression\n\nCategories: \nObject, PropertyAndParameter, XDC\n\nDescription:\n\n  Takes a list of objects, and returns a reduced list of objects that match\n  the specified filter search pattern.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) A list of objects that should be filtered to reduce\n  the set to the desired results. The list of objects can be obtained by\n  using one of the many get_* commands such as get_parts.\n\n  <filter> - (Optional) The expression to use for filtering. The specified\n  pattern filters the list of objects returned based on property values on\n  the objects. You can find out which properties are on an object with the\n  report_property or list_property command. Any property/value pair can be\n  used as a filter. For example, in the case of the 'part' object, 'DEVICE',\n  'FAMILY' and 'SPEED' are some of the properties that can be used to filter\n  results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\nExamples:\n\n  The following example returns a list of parts filtered for the specified\n  speed grade:\n\n    filter [get_parts] {speed == -3} \n    \n\n  The following example filters parts based according to speed grade -3 OR\n  speed grade -2. All parts matching either speed grade will be returned.\n\n    filter [get_parts] {speed == -3  ||  speed == -2} \n    \n\n  The following example uses regular expression and returns a list of VStatus\n  ports in the design, with zero or more wildcards, and the numbers 0 to 9\n  appearing one or more times within square brackets:\n\n    filter -regexp [get_ports] {NAME =~ VStatus.*\\[[0-9]+\\]} \n    \n\nSee Also:\n\n   *  get_parts\n\n   *  get_ports\n",
"add_design_id": "add_design_id\n\nDescription: \nCalculate design id and add it to design.\n\nSyntax: \nadd_design_id  [-quiet] [-verbose]\n\nReturns: \nNothing\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n",
"update_sw_parameters": "update_sw_parameters\n\nDescription: \nUpdate the dcp by adding the generated sw param info files to it\n\nSyntax: \nupdate_sw_parameters  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Updates the design check points (DCPs) with the latest hardware def. This\n  hardware def will have the updated sw parameters information.\n\n  Whenever a software parameter of an IP is modified, the runs need not to go\n  stale. But already generated design checkpoints need to be updated with the\n  modified parameter information. This information is captured in the hwdef\n  file. With update_sw_parameters command, the hwdef file is added to already\n  generated design checkpoints.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example modifies a software parameter for the CIPS IP,\n  generates the hw_handoff target and then updates the DCPs with the modified\n  values:\n\n    set_property -dict [list CONFIG.PS_I2C0_PERIPHERAL_ENABLE {1}] [get_bd_cells versal_cips_0]  \n    generate_target hw_handoff [get_files top.bd] \n    update_sw_parameters \n    \n\nSee Also:\n\n   *  refresh_design\n   *  close_design\n",
"for": "for(n)                Tcl Built-In Commands                for(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       for - 'For' loop\n\nSYNOPSIS\n       for start test next body\n_________________________________________________________________\n\n\nDESCRIPTION\n       For  is  a  looping command, similar in structure to the C\n       for statement.  The start, next, and body  arguments  must\n       be  Tcl command strings, and test is an expression string.\n       The for command first invokes the Tcl interpreter to  exe-\n       cute  start.   Then  it  repeatedly  evaluates  test as an\n       expression; if the result is non-zero it invokes  the  Tcl\n       interpreter  on  body, then invokes the Tcl interpreter on\n       next, then repeats the loop.  The command terminates  when\n       test  evaluates  to  0.   If a continue command is invoked\n       within body then any remaining  commands  in  the  current\n       execution  of  body  are  skipped; processing continues by\n       invoking the Tcl  interpreter  on  next,  then  evaluating\n       test,  and  so  on.   If a break command is invoked within\n       body or next, then the for  command  will  return  immedi-\n       ately.  The operation of break and continue are similar to\n       the corresponding statements in C.  For returns  an  empty\n       string.\n\n       Note: test should almost always be enclosed in braces.  If\n       not, variable substitutions will be made  before  the  for\n       command   starts  executing,  which  means  that  variable\n       changes made by the loop body will not  be  considered  in\n       the  expression.   This is likely to result in an infinite\n       loop.  If test is enclosed in braces,  variable  substitu-\n       tions  are  delayed  until  the  expression  is  evaluated\n       (before each loop iteration), so changes in the  variables\n       will be visible.  See below for an example:\n\nEXAMPLES\n       Print a line for each of the integers from 0 to 10:\n              for {set x 0} {$x<10} {incr x} {\n                 puts 'x is $x'\n              }\n\n       Either  loop  infinitely or not at all because the expres-\n       sion being evaluated is actually  the  constant,  or  even\n       generate  an  error!   The actual behaviour will depend on\n       whether the variable x exists before the  for  command  is\n       run  and whether its value is a value that is less than or\n       greater than/equal to ten, and this is because the expres-\n       sion  will  be  substituted before the for command is exe-\n       cuted.\n              for {set x 0} $x<10 {incr x} {\n                 puts 'x is $x'\n              }\n\n       Print out the powers of two from 1 to 1024:\n              for {set x 1} {$x<=1024} {set x [expr {$x * 2}]} {\n                 puts 'x is $x'\n              }\n\n\nSEE ALSO\n       break, continue, foreach, while\n\n\nKEYWORDS\n       for, iteration, looping\n\n\n\nTcl                                                        for(n)\n",
"auto_load": "",
"report_design_analysis": "report_design_analysis\n\nDescription: \nReport Design Analysis\n\nSyntax: \nreport_design_analysis  [-file <arg>] [-csv <arg>] [-append] [-return_string]\n                        [-complexity] [-cells <args>] [-bounding_boxes <args>]\n                        [-hierarchical_depth <arg>] [-congestion]\n                        [-min_congestion_level <arg>] [-timing] [-setup]\n                        [-hold] [-show_all] [-full_logical_pin]\n                        [-routed_vs_estimated] [-logic_level_distribution]\n                        [-logic_level_dist_paths <arg>] [-min_level <arg>]\n                        [-max_level <arg>] [-return_timing_paths]\n                        [-of_timing_paths <args>] [-max_paths <arg>] [-extend]\n                        [-routes] [-end_point_clocks <args>]\n                        [-logic_levels <arg>] [-qor_summary] [-json <arg>]\n                        [-name <arg>] [-no_pr_attribute] [-quiet] [-verbose]\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-file]                      Filename to output results to. (send output to\n                               console if -file is not used)\n  [-csv]                       Write detailed tables to the CSV filename \n                               specified\n  [-append]                    Append the results to file, don't overwrite \n                               the results file\n  [-return_string]             Return report as string\n  [-complexity]                Finds the interconnection complexity (Rent) of\n                               the design\n  [-cells]                     Report analysis information for given list of \n                               cells\n  [-bounding_boxes]            Report interconnection complexity (Rent) for \n                               given list of bounding boxes\n                               Default: empty\n  [-hierarchical_depth]        Hierarchical depth option for -complexity\n                               Default: 1\n  [-congestion]                Reports congestion of the design\n  [-min_congestion_level]      Minimum congestion level for reporting router \n                               congestion, integer value between 3 and 8\n                               Default: 5\n  [-timing]                    Reports characteristics of critical path\n  [-setup]                     Reports characteristics of critical SETUP path\n  [-hold]                      Reports characteristics of critical HOLD path\n  [-show_all]                  Adds more characteristics to the timing \n                               characteristics report\n  [-full_logical_pin]          Display hierarchical pin names in the report\n  [-routed_vs_estimated]       Reports relevant characteristics of critical \n                               path in estimated mode\n  [-logic_level_distribution]  Reports logic level distribution\n  [-logic_level_dist_paths]    Number of critical paths for analyzing logic \n                               level distribution used along with \n                               -logic_level_distribution\n                               Default: 1000\n  [-min_level]                 Group all paths with logic levels \n                               <min_level-1> and below into a single bin, \n                               value passed must be at least 1\n                               Default: Not Used\n  [-max_level]                 Group all paths with logic levels \n                               <max_level+1> and above into a single bin, \n                               where <max_level> must be the greater of zero \n                               or <min_level + 1> if -min_level is used\n                               Default: Not Used\n  [-return_timing_paths]       Returns timing path objects\n  [-of_timing_paths]           Reports characteristics for these paths\n  [-max_paths]                 Number of paths to consider for -timing option\n                               Default: 1\n  [-extend]                    Reports characteristics of worst path before \n                               the start point of critical path and worst \n                               path after the end of the critical path\n  [-routes]                    Reports distribution with respect to Routes \n                               instead of logic levels\n  [-end_point_clocks]          Returns timing path objects filtered by \n                               endpoint clock names as passed to this option\n  [-logic_levels]              Returns timing path objects bucketed under the\n                               bin name as passed to this option\n  [-qor_summary]               Design Flow summary\n  [-json]                      Write the report in JSON format to the \n                               filename specified\n  [-name]                      Output the results to GUI panel with this name\n  [-no_pr_attribute]           Report without PR attributes\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Provides timing data on critical path characteristics and complexity of the\n  design to help identify and analyze problem areas that are subject to\n  timing closure issues and routing congestion. For more information on this\n  command refer to the Vivado Design Suite User Guide: Design Analysis and\n  Closure Techniques (UG906).\n\n  The report_design_analysis command currently has three modes of operation:\n\n   *  Timing: reports timing and physical characteristics of timing paths.\n\n   *  Complexity: analyzes the design for routing complexity and LUT\n      distribution.\n\n   *  Congestion: analyzes the design for routing congestion.\n\n  In timing mode, the command calls the static timing engine to analyze\n  critical path data and report the characteristics of each path. The path\n  characteristics include important elements such as clock skew, placement\n  obstacles such as crossing clock regions, and physical constraints such as\n  Pblocks and LOCs. The list of paths can be extended to include a number of\n  top critical paths or specific paths can be analyzed by providing timing\n  path objects to the command. The reports can also be extended to show the\n  paths preceding and following the critical path.\n\n  The following are definitions of the characteristics of the paths reported\n  in timing mode:\n\n   *  PATH_TYPE: either SETUP or HOLD.\n\n   *  REQUIREMENT: delay requirement from static timing analysis.\n\n   *  PATH DELAY: data path delay from static timing analysis.\n\n   *  LOGIC DELAY: the portion of the PATH DELAY attributed to logic on the\n      path.\n\n   *  NET DELAY: the portion of the PATH DELAY attributed to wires on the\n      path. Note that the net delay is based on the estimated or actual\n      routing delay as specified by the set_delay_model command.\n\n   *  CLOCK SKEW: difference in delay between the source and destination\n      clocks.\n\n   *  SLACK: path timing slack from static timing analysis.\n\n   *  CLOCK RELATIONSHIP: SAME_CLOCK or RELATED_CLOCK. Helps identify\n      potentially missed inter-clock constraints.\n\n   *  TIMING EXCEPTION: the timing exceptions, like set_false_path or\n      set_multicycle_path, that are assigned to the path.\n\n   *  LOGIC LEVELS: number of logic levels between the source and\n      destination, reported when the -logic_level_distribution is specified.\n\n   *  LOGICAL PATH: shorthand notation showing the ordered list of cells in\n      the path including the start point and end point.\n\n      Note: For Partial Reconfiguration (PR) designs, the logical path is\n      appended to identify the cell as belonging to a reconfigurable\n      partition (:RP#), or to the static region of the design (:S). A\n      translation table at the bottom of the report maps :RP# to a specific\n      reconfigurable partition.\n\n   *  START POINT CLOCK: the clock domain of the start point of the path.\n\n   *  END POINT CLOCK: the clock domain of the end point of the path.\n\n   *  START POINT PIN PRIMITIVE: the library cell and pin of the start point\n      of the path.\n\n   *  END POINT PIN PRIMITIVE: the library cell and pin of the end point of\n      the path.\n\n   *  START POINT PIN: the instance and pin name of the start point.\n\n   *  END POINT PIN: the instance and pin name of the end point.\n\n   *  COMB DSP: number of combinational DSP blocks in the path.\n\n   *  DOA REG: the number of DOA registers on the path.\n\n   *  DOB REG: the number of DOB registers on the path.\n\n   *  MREG: the number of MREG registers on the path.\n\n   *  PREG: the number of PREG registers on the path.\n\n   *  Block RAM CROSSINGS: number of block RAM columns traversed by the path.\n\n   *  DSP CROSSINGS: number of DSP block columns traversed by the path.\n\n   *  IO CROSSINGS: number of IO columns traversed by the path.\n\n   *  CONFIG CROSSINGS: the number of CONFIG tile traversed by the path.\n\n   *  SLR CROSSINGS: number of SLRs traversed by the path.\n\n   *  BOUNDING BOX SIZE: the rectangular area covered by the critical path,\n      measured in RPM GRID units which are based on the device RPM_X\n      (horizontal) and RPM_Y (vertical) site coordinates. Because different\n      sites (slices, DSP, block RAM, etc.) have different sizes, each site\n      has unique RPM_X and RPM_Y properties to pinpoint its location within\n      the device.\n\n   *  CLOCK REGION DISTANCE: An ordered pair showing the number of clock\n      regions traversed in the horizontal and vertical directions from path\n      startpoint to endpoint. Minimizing clock region crossings can improve\n      critical path delay and clock skew.\n\n       -  Example 1: A critical path begins in clock region X1Y1 and ends in\n          clock region X3Y3, resulting in a CLOCK_REGION_DISTANCE of (2, 2).\n\n       -  Example 2: a critical path begins in clock region X2Y1 and ends in\n          X0Y0, resulting in a CLOCK_REGION_DISTANCE of (-2, -1).\n\n   *  PBLOCKS: number of Pblocks traversed by the path.\n\n   *  HIGH FANOUT: the greatest fanout of a net in the path.\n\n   *  CUMULATIVE FANOUT: the total fanout on the path.\n\n   *  DONT TOUCH: number of cells in the path with DONT_TOUCH value of TRUE.\n      A value of TRUE for DONT_TOUCH on a cell prevents it from being\n      optimized, disabling potentially beneficial optimizations such as\n      phys_opt_design replication.\n\n   *  MARK DEBUG: number of cells in the path with a MARK_DEBUG value of\n      TRUE. By default a net with MARK_DEBUG has DONT_TOUCH set to TRUE which\n      disables optimization on that net. The DONT_TOUCH can be set to FALSE\n      to enable optimization and potentially improve timing.\n\n   *  FIXED LOC: number of placed cells in the path with an IS_LOC_FIXED\n      value of TRUE. FIXED cells cannot be moved by either place_design or\n      phys_opt_design.\n\n   *  FIXED ROUTE: number of routed nets in the path with IS_ROUTE_FIXED\n      value of TRUE. FIXED routes cannot be ripped up and rerouted by\n      route_design.\n\n   *  HOLD FIX DETOUR: the amount of routing detour provided to fix hold\n      timing to post-route critical paths.\n\n   *  COMBINED LUT PAIRS: number of LUT cells in the path that have been\n      combined with other LUT cells into the same LUT BEL to use both the O6\n      and O5 outputs. LUT cells that have been combined with LUTNM, HLUTNM,\n      or SOFT_HLUTNM can be uncombined and re-placed by setting their HLUTNM\n      properties to an empty string. This allows exploring LUT combining and\n      un-combining effects on timing and congestion reduction.\n\n   *  The following fields are reported for Partial Reconfiguration (PR)\n      designs. Refer to the Vivado Design Suite User Guide: Dynamic Function\n      eXchange (UG909) for more information.\n\n       -  PR PATH TYPE: Specifies the path as being completely in the static\n          region, completely in a reconfigurable partition (RP), or as\n          crossing the boundary between regions. The delay elements for the\n          timing path are also broken down between the regions .\n\n       -  STATIC CROSSINGS: Reports the number of times a reconfigurable\n          partition (RP) path crosses into the static region.\n\n       -  RP CROSSINGS: Reports the number of times a static region path\n          crosses into a reconfigurable partition (RP) region.\n\n       -  BOUNDARY FANOUT: Reports the fanout of a boundary path at the PPLOC\n          to its downstream loads .\n\n  In complexity mode, the command performs complexity analysis of the current\n  design and reports the Rent Exponent which is a measure of complexity, the\n  Average Fanout, and a Primitive Histogram. The analysis can be performed on\n  the top-level design or recursively on hierarchical levels of the design,\n  with the ability to control the level of recursion.\n\n  The following are definitions of the characteristics reported in complexity\n  mode:\n\n   *  Rent: The Rent exponent, as defined by Rent's rule, is a measure of\n      interconnect complexity in a netlist. Higher Rent indicates higher\n      complexity and greater difficulty to avoid routing congestion. Most\n      designs have a Rent in the 0.5 to 0.6 range. A Rent value of 0.65 is\n      considered high and 0.85 is considered very high.\n\n   *  Average Fanout: This is the average fanout of a logic cell in the\n      design, excluding global buffers. Higher average fanout may result in\n      more difficulty for placement and routing. While absolute values may\n      not predict difficultly, relative values between designs or between\n      hierarchical levels may be more indicative.\n\n   *  Primitive Histogram: This displays the totals of certain primitive\n      types used in the design. A high Rent may be caused by a predominance\n      of LUT6 cells. If there are many more LUT6 than other size LUTs, the\n      Rent may be reduced by adopting a more area-focused synthesis strategy.\n\n  Tip: The complexity characteristics may not always predict routing\n  congestion but can be used to pinpoint problem areas when congestion issues\n  occur.\n\n  In congestion mode the command analyzes the design and provides metrics to\n  help you alleviate routing congestion. Using the results from the\n  report_design_analysis command, you can change placement to avoid specific\n  routing hot spots.\n\n  The command returns the file created, or returns the analysis results to\n  the Tcl console, or returns an error if it fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the analysis results into the specified\n  file. The specified file will be overwritten if one already exists unless\n  -append is also specified.\n\n  -csv <arg> - (Optional) Write a CSV file that shows the timing paths and\n  analysis features. The specified file will be overwritten if one already\n  exists.\n\n  Note: If the path is not specified as part of the file name for either\n  -file or -csv, the file will be written into the current working directory\n  that can be identified using the [pwd] Tcl command.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -complexity - (Optional) Perform complexity analysis of the design and\n  report the Rent Exponent, Average Fanout, and Primitive Histogram.\n\n  Tip: The -complexity option can be specified with -cells and\n  -hierarchical_depth to control the analysis of the design or cells.\n\n  -cells <arg> - (Optional) Specify the cells to use when reporting design\n  analysis. Cells should be hierarchical modules of the design. Use this\n  option to specify a cell other than the top cell for analysis. Cells can be\n  specified by name, or as objects returned by the get_cells command. Cannot\n  be used with -hierarchical_depth.\n\n  -bounding_boxes <args> - (Optional) Specify regions of the device to\n  analyze for complexity. This limits the area and reduces the time required\n  for analysis. The argument is specified as a pair of device tiles\n  representing the 'lower-left:upper-right' corners of the bounding box.\n  Multiple windows can be specified as follows:\n\n    -bounding_boxes { 'CLE_M_X21Y239:CLEL_R_X28Y254' \\\n       'CLEL_R_X18Y171:CLE_M_X26Y186' }\n\n  Important: A space is required between the `{` and the start of the\n  bounding box as shown above.\n\n  -hierarchical_depth <arg> - (Optional) Specify that the complexity analysis\n  should be performed on the hierarchy of the design, rather than just the\n  top-level of the design, or the specified cell. In this case, the hierarchy\n  of the design or cell will be examined to the specified depth. The default\n  setting is 1. Requires the -complexity option.\n\n  -congestion - (Optional) Reports the vertical and horizontal routing\n  congestion of the placed design on a per tile basis. This option can only\n  be run after implementation, or after place_design. Congestion analysis is\n  performed on the whole design, even if -cells is specified for complexity\n  analysis.\n\n  -min_congestion_level <arg> - (Optional) Specifies the minimum congestion\n  level to show congestion in the design. The minimum supported value is 3 as\n  the report does not have any information on congestion windows under level\n  3. The default value is 5 if the option is not specified.\n\n  -timing - (Optional) Runs design analysis in timing mode, to report setup\n  and hold characteristics of critical paths. This is the default analysis\n  run by the report_design_analysis command when no other options are\n  specified.\n\n  Tip: The -timing option can be specified with -setup, -hold,\n  -of_timing_paths, -max_paths, and -extend, but can not be used with -cells\n  or -hierarchical_depth.\n\n  -setup - (Optional) Limit the reporting scope to only setup path\n  characteristics. Requires the -timing option.\n\n  -hold - (Optional) Limit the reporting scope to only hold path\n  characteristics. Requires the -timing option.\n\n  Important: When -hold is used with the -extend option this generates two\n  side-by-side reports: the setup report showing the worst setup paths on the\n  left, and the corresponding hold report for those paths on the right. This\n  shows hold characteristics side-by-side with the setup characteristics of\n  the same start and endpoints to make it easier to see if hold and setup\n  fixing are affecting one another.\n\n  -show_all - (Optional) Adds more characteristics to the timing\n  characteristics report.\n\n  -full_logical_pin - (Optional) Output the full hierarchical pin name in the\n  design analysis report.\n\n  -routed_vs_estimated - (Optional) Reports the estimated vs. actual routed\n  delays side-by-side for the same path.\n\n  Important: This requires the set_delay_model -interconnect to be set to\n  'actual' to provide both the estimated and actual delays.\n\n  -logic_level_distribution - (Optional) Reports logic-level distribution of\n  the -timing report to help identify the longer paths in the design. The\n  logic levels distribution can be very runtime intensive so it is not\n  reported by default.\n\n  Tip: Remember that -logic_level_distribution is performed on critical\n  timing paths identified by the -timing option. If the purpose of analysis\n  is to identify all of the paths with the greatest number of logic levels in\n  the design, you can use -of_timing_paths with the get_timing_paths command\n  to define the timing paths of interest. In addition, you can use the\n  LOGIC_LEVELS property on timing paths to obtain this information.\n\n  -logic_level_dist_paths <arg> - (Optional) This option can be specified\n  with -logic_level_distribution to specify the number of critical paths for\n  analyzing logic level distribution. Specified as a value greater than or\n  equal to 1. The default is 1000 paths.\n\n  -min_level <arg> - (Optional) Group all timing paths with logic levels, or\n  routes, less than the value specified into a single bin. When specified,\n  the <arg> value passed must be at least 1.\n\n  -max_level <arg> - (Optional) Group all timing paths with logic levels, or\n  routes, greater than the value specified into a single bin. When specified,\n  the <arg> value must be greater than the value of -min_level, or can be\n  zero.\n\n  -return_timing_paths - (Optional) This must be used with the\n  -end_point_clock and -logic_levels options. Directs the\n  report_design_analysis command to return timing_path objects as well as the\n  analysis report. The timing_path objects can be passed to other analysis\n  commands that take timing paths such as report_timing, or even passed to\n  the -of_timing_paths option of a second report_design_analysis command.\n\n  Tip: If -return_timing_paths is specified, -timing will be disabled so that\n  no timing results are returned. If no timing paths match the specified\n  options, the command will return the message 'No timing paths returned.'\n\n  -of_timing_paths <args> - (Optional) Specify a list of timing path objects\n  for analysis. Requires the -timing option. The command will report\n  characteristics of the specified paths instead of the most critical paths.\n  You can use the get_timing_paths command to provide the timing path objects\n  for -of_timing_paths.\n\n  -max_paths <arg> - Specify the number of paths to report for critical path\n  analysis. The default number of critical paths analyzed is 1. Note, the\n  number of paths returned is affected by other options such as\n  -end_point_clock, which can reduce the number of paths returned due to the\n  specified clock.\n\n  -extend - (Optional) Perform an extended setup analysis of the critical\n  paths. The hold analysis is not performed. Requires the -timing option.\n  Three paths are reported for an extended analysis:\n\n   *  The path ending at critical path start point.\n\n   *  The critical path.\n\n   *  The path starting at critical path endpoint.\n\n  -routes - (Optional) Reports the path distribution with respect to the\n  number of routes per end point clock instead of logic levels. When it is\n  used with the -of_timing_objects option, the get_timing_paths command must\n  be run with the -routable_nets option.\n\n  -end_point_clocks <arg> - (Optional) Takes a list of clocks that can be\n  specified by name or by using get_clocks. Limits the timing paths under\n  consideration to only the ones in the specified clock group.\n\n  -logic_levels <arg> - (Optional) Filters timing paths by the specified\n  number of logic levels. You can specify one logic level and it can be used\n  with -end_point_clocks to further limit timing paths based on the clock\n  domain.\n\n  -qor_summary - (Optional) Include a summary of the QoR for the design.\n\n  -json <arg> - (Optional) Write out the QoR summary in JSON format.\n\n  Note: The -json option can only be used with the -qor_summary switch.\n\n  -name <arg> - (Optional) The name of the Design Analysis Report view to\n  display in the tool GUI mode. If the name has already been used in an open\n  Report view, that view will be closed and a new report opened.\n\n  -no_pr_attribute - (Optional) Report the design analysis without partial\n  reconfiguration (PR) attributes. For Partial Reconfiguration (PR) designs,\n  the logical path is defined as belonging to a reconfigurable partition\n  (:RP#), or to the static region of the design (:S), as well as whether the\n  path is completely in the PR region or S region or crosses between the\n  regions.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Perform a complexity analysis of the two specified cells.\n\n    report_design_analysis -complexity -cells {cpuEngine fftEngine}\n\n  Perform complexity analysis of the specified bounding boxes.\n\n    report_design_analysis -complexity \\\n    -bounding_boxes { 'CLE_M_X21Y239:CLEL_R_X28Y254' 'CLEL_R_X18Y171:CLE_M_X26Y186' }\n\n  Get an extended analysis of the worst critical path from the Block RAMs in\n  the design.\n\n    report_design_analysis -timing -of_timing_paths \\\n    [get_timing_paths -from [all_rams]]\n\n  Perform complexity analysis for the specified cell, to a depth of two\n  hierarchical levels, and performs timing and congestion analysis on the\n  design.\n\n    report_design_analysis -complexity -hierarchical_depth 2 -timing -setup \\\n    -hold -max_paths 10 -logic_level_distribution -logic_level_dist_paths 20 -congestion\n\n  Use the report_design_analysis command to return the timing paths with the\n  specified end point clock and logic levels, and pass those paths to the\n  report_timing command for analysis.\n\n    report_timing -of_objects [report_design_analysis -end_point_clock cpuClk \\\n    -logic_levels 10 -timing -return_timing_paths]\n\n  Generate a logic level report with levels 0-1 grouped in a bin, 10 and greater\n  grouped in another bin, and a bin for each individual number in between.\n\n    report_design_analysis -logic_level_distribution -min_level 2 -max_level 9\n\nSee Also:\n\n   *  config_design_analysis\n   *  get_cells\n   *  get_timing_paths\n   *  place_design\n   *  report_timing\n   *  report_timing_summary\n   *  set_delay_model\n   *  set_false_path\n   *  set_multicycle_path\n",
"get_sim_versions": "get_sim_versions\n\nDescription: \nGet supported version(s) for the specified simulator\n\nSyntax: \nget_sim_versions  [-quiet] [-verbose] [<name>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<name>]    Simulator name\n\nCategories: \nToolLaunch, Simulation\n",
"read_vcd": "read_vcd\n\nDescription: \nImport simulation data in vcd format\n\nSyntax: \nread_vcd  [-strip_path <arg>] [-no_strip] [-out_file <arg>] [-quiet] [-verbose]\n          <file>\n\nUsage: \n  Name           Description\n  --------------------------\n  [-strip_path]  Specifies the name of the instance of the current design as \n                 it appears in the VCD file\n  [-no_strip]    Do not strip first two levels of hierarchy from VCD file\n  [-out_file]    Specifies the name of the output file that contains nets \n                 that could not be matched\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <file>         Specifies the name of the VCD file to be read\n\nCategories: \nFileIO, Power, Simulation\n",
"append": "append(n)             Tcl Built-In Commands             append(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       append - Append to variable\n\nSYNOPSIS\n       append varName ?value value value ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Append  all of the value arguments to the current value of\n       variable varName.  If varName does not exist, it is  given\n       a  value equal to the concatenation of all the value argu-\n       ments.  The result of this command is the new value stored\n       in  variable  varName.  This command provides an efficient\n       way to build up long variables incrementally.   For  exam-\n       ple,  'append  a  $b'  is  much more efficient than 'set a\n       $a$b' if $a is long.\n\nEXAMPLE\n       Building a string  of  comma-separated  numbers  piecemeal\n       using a loop.\n              set var 0\n              for {set i 1} {$i<=10} {incr i} {\n                 append var ',' $i\n              }\n              puts $var\n              # Prints 0,1,2,3,4,5,6,7,8,9,10\n\n\nSEE ALSO\n       concat(n), lappend(n)\n\n\nKEYWORDS\n       append, variable\n\n\n\nTcl                                                     append(n)\n",
"create_drc_check": "create_drc_check\n\nDescription: \nCreate a user defined DRC rule\n\nSyntax: \ncreate_drc_check  [-hiername <arg>] -name <arg> [-desc <arg>] [-msg <arg>]\n                  -rule_body <arg> [-severity <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name         Description\n  ------------------------\n  [-hiername]  Specify the hiername for this rule.  When the DRC UI panel is \n               created, this is used to place the new rule in the menu \n               hierarchy.  Use a dot (.) to separate layers in the menu \n               hierarchy. It is optional and will default to User Defined.\n               Default: User Defined\n  -name        Specify the name for this rule.  This must be of the form \n               PREFIX-id where XXXX is a 4-6 letter abbreviation and id is an\n               integer identifying a particular rule.  Similar checks should \n               have the same abbreviation and each a unique id.\n  [-desc]      Specify the short description for this rule. It is optional \n               and will default to <User rule - default description>.\n               Default: User rule - default description\n  [-msg]       Specify the full description for this rule. Including the \n               substitutions.  Values are: %MSG_STRING %NETLIST_ELEMENT \n               %SITE_GROUP %CLOCK_REGION %BANK %BEL_GROUP.\n  -rule_body   The string representing the body of the rule. This can be a \n               tcl proc name or any string of tcl code to be evaluated.\n  [-severity]  Specify severity level for a DRC rule.\n               Default: Warning.\n               Values: Error, Critical Warning, Warning, Advisory.\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Create a new user-defined DRC rule check, drc_check, for use by the tool\n  when running report_drc.\n\n  This command allows you to define a unique name or abbreviation for the\n  user-defined rule check, optionally group the rule into a special hierarchy\n  and provide a description of the rule, define a general placeholder message\n  for the check when violations are encountered, and refer to the Tcl code\n  associated with the design rule check to be run during the report_drc\n  command.\n\n  The general placeholder message defined in this command is populated with\n  specific information related to the design objects and violations found by\n  the Tcl checker procedure, and by the create_drc_violation command.\n\n  The process in brief is:\n\n   *  Write a Tcl checker procedure to define the method applied when\n      checking the user-defined rule, and the objects to check against the\n      rule. The Tcl checker procedure is defined in a separate Tcl script\n      that must be loaded by the source command prior to running report_drc.\n\n   *  Use create_drc_violation in the Tcl checker to identify and flag\n      violations found when checking the rule against a design.\n\n   *  Define a user-defined DRC rule check using the create_drc_check command\n      that calls the Tcl checker proc from the -rule_body.\n\n   *  Create a rule deck using the create_drc_ruledeck command, and add the\n      user-defined rule check to the rule deck using the add_drc_checks\n      command.\n\n   *  Run report_drc, and specify either the rule deck, or the user-defined\n      rule check to check for violations.\n\n  If a drc_check of the specified name is already defined in the tool, an\n  error is returned. In this case, to overwrite or redefine and existing\n  drc_check, you must first delete the check using the delete_drc_check\n  command.\n\n  The DRC rule check object features the is_enabled property that can be set\n  to TRUE or FALSE using the set_property command. When a new rule check is\n  created, the is_enabled property is set to TRUE as a default. Set the\n  is_enabled property to FALSE to disable the rule check from being used when\n  report_drc is run. This lets you create new DRC checks, add them to rule\n  decks using add_drc_checks, and then enable them or disable them as needed\n  without having to remove them from the rule deck.\n\n  Each user defined DRC rule check has the `USER_DEFINED` property, which\n  lets you quickly identify and select user-defined rule checks.\n\nArguments:\n\n  -hiername <arg> - (Optional) Defines a rule grouping for the new rule. The\n  default is 'User Defined'. This is used as the first level of hierarchy in\n  the GUI when listing DRC rules. All newly created DRC checks are also added\n  to the 'all' hierarchy used by default by the report_drc command.\n\n  -name <arg> - (Required) The unique name for the design rule. This should\n  match the name used by the create_drc_violation commands in the Tcl checker\n  procedure specified in -rule_body. The name will appear in the DRC report\n  with any associated violations. The name should consist of a short 4 to 6\n  letter abbreviation for the rule group, and an ID to differentiate it from\n  other checks in the same group, for instance ABCD-1 or ABCD-23.\n\n  -desc <arg> - (Optional) A brief description of the rule. The default is\n  'User Rule'. This is displayed when listing DRC rules in the GUI. The\n  description is also used in the DRC report and summary.\n\n  -msg< arg> - (Optional) This is the message displayed when a violation of\n  the rule is found. The message can include placeholders for dynamic\n  substitution with design elements found in violation of the rule. The\n  design data is substituted into the message at the time report_drc is run.\n  Each substitution key has a long form, and a short form as shown below.\n  Valid substitutions keys are:\n\n   *  %MSG_STRING (%STR) - This is the message string defined by the -msg\n      option in the create_drc_violation command for the specific violation.\n\n      Note: %STR is the default message for the create_drc_check command if\n      the -msg option is not specified. In this case, any message defined by\n      create_drc_violation in the -rule_body is simply passed through to the\n      DRC report.\n\n   *  %NETLIST_ELEMENT (%ELG) - Netlist elements including cells, pins,\n      ports, and nets.\n\n   *  %SITE_GROUP (%SIG) - Device site.\n\n   *  %CLOCK_REGION (%CRG) - Clock region.\n\n   *  %BANK (%PBG) - Package IO bank.\n\n  -rule_body <arg> - (Required) This is the name of the Tcl procedure which\n  defines the rule checking functionality. The Tcl procedure can be embedded\n  here, into the -rule_body option, or can be separately defined in a Tcl\n  script that must be loaded with the source command when the tool is\n  launched, or prior to running the report_drc command.\n\n  The Tcl checker procedure can create DRC violation objects, using the\n  create_drc_violation command, containing the design elements that are\n  associated with a design rule violation. The tool populates the\n  substitution keys in the message defined by -msg with the design elements\n  from the violation object.\n\n  -severity <arg> - (Optional) Specifies the severity of the rule being\n  created. The default value is Warning. The possible values are:\n\n   *  ERROR\n\n   *  'CRITICAL WARNING'\n\n   *  WARNING\n\n   *  ADVISORY\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example defines a new design rule check named RAMW-1, with\n  the hierarchy name and description defined, using the default severity of\n  Warning, and calling the dataWidthCheck procedure when the check is run:\n\n    \n    create_drc_check -name {RAMW-1} -hiername {RAMB} \\  \n      -desc {Data Width Check} -rule_body dataWidthCheck -severity Advisory \n    \n\n  The following Tcl script defines the dataWidthCheck procedure which is\n  called by the -rule_body argument of the RAMW-1 check. This Tcl script file\n  must be loaded into the tool using the source command, prior to running the\n  report_drc command.\n\n    \n    # This is a simplistic check -- report BRAM cells with WRITE_WIDTH_B  \n    # wider than 36.  \n    proc dataWidthCheck {} {  \n      # list to hold violations  \n      set vios {}  \n     \n      # iterate through the objects to be checked  \n      foreach bram [get_cells -hier -filter {PRIMITIVE_SUBGROUP == bram}] {  \n        set bwidth [get_property WRITE_WIDTH_B $bram]  \n        if { $bwidth > 36} {  \n          # define the message to report when violations are found  \n          set msg 'On cell %ELG, WRITE_WIDTH_B is $bwidth'  \n          set vio [ create_drc_violation -name {RAMW-1} -msg $msg $bram ]  \n          lappend vios $vio  \n        }  \n      }  \n      if {[llength $vios] > 0} {  \n        return -code error $vios  \n      } else {  \n        return {}  \n      }  \n     \n    }  \n    create_drc_check -name {RAMW-1} -hiername {RAMB Checks} \\  \n       -desc {Data Width Check} -rule_body dataWidthCheck \\  \n       -severity Advisory \n    \n\n  Note: The script file can contain both the Tcl checker procedure, and the\n  create_drc_check command that defines it for use by report_drc command. In\n  this case, when the Tcl script file is sourced, both the dataWidthCheck\n  proc and the RAMW-1 design rule check are loaded into the tool.\n\nSee Also:\n\n   *  add_drc_checks\n   *  create_drc_ruledeck\n   *  create_drc_violation\n   *  delete_drc_check\n   *  get_drc_checks\n   *  get_drc_violations\n   *  report_drc\n",
"write_hw": "The command 'write_hw' is auto loaded by Tcl. To explicitly load the command type 'load_features labtools'.",
"read_vhdl": "read_vhdl\n\nDescription: \nRead one or more VHDL files\n\nSyntax: \nread_vhdl  -library <arg> [-vhdl2008] [-quiet] [-verbose] <files>\n\nReturns: \nlist of file objects that were added\n\nUsage: \n  Name         Description\n  ------------------------\n  -library     VHDL library\n  [-vhdl2008]  VHDL file is version 2008.\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <files>      VHDL file name(s)\n\nCategories: \nFileIO\n\nDescription:\n\n  Reads VHDL source files. This command is similar to the add_files command.\n  The VHDL files are added to the source fileset as the file is read. If the\n  -library argument is specified, the file is added with the Library property\n  defined.\n\n  You can use this command to read the contents of source files into the\n  in-memory design, when running the Vivado tool in Non Project mode, in\n  which there is no project file to maintain and manage the various project\n  source files. Refer to the Vivado Design Suite User Guide: Design Flows\n  Overview (UG892) for more information on Non Project mode.\n\nArguments:\n\n  -library <arg> - (Optional) The library the VHDL file should reference. The\n  default VHDL library is xil_defaultlib.\n\n  -vhdl2008 - (Optional) Identifies the files to be read as VHDL file version\n  2008.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) Names of one or more VHDL files to be read.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example reads the specified VHDL file and adds it to the\n  source fileset:\n\n    read_vhdl C:/Data/FPGA_Design/new_module.vhdl \n    \n\n  This example reads multiple specified VHDL 2008 files:\n\n    read_vhdl -vhdl2008 {file1.vhd file2.vhd file3.vhd} \n    \n\nSee Also:\n\n   *  add_files\n   *  read_verilog\n   *  remove_files\n",
"refresh_meminit": "refresh_meminit\n\nDescription: \nUpdate and initialize the BRAM initialization strings with contents of elf files.\n\nSyntax: \nrefresh_meminit  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nFileIO, Project, Memory Initialization\n",
"get_methodology_checks": "get_methodology_checks\n\nDescription: \nGet a list of Methodology rule check objects\n\nSyntax: \nget_methodology_checks  [-regexp] [-nocase] [-filter <arg>] [-abbrev <arg>]\n                        [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of Methodology rule_check objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching. (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-abbrev]     Get the largest ID for this abbrev\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match the 'rule_check' objects against patterns.\n                Default: *\n\nCategories: \nMethodology, Object\n\nDescription:\n\n  Gets a list of the currently defined methodology checks. This list includes\n  the factory defined methodology checks for process and timing.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of methodology checks\n  returned by get_methodology_checks based on property values on the rule\n  checks. You can find the properties on an object with the report_property\n  or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -abbrev <arg> - (Optional) Get the methodology checks associated with the\n  specified name or abbreviation.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match methodology checks against the specified\n  patterns. The default pattern is the wildcard `*` which gets all\n  methodology checks.\n\nExamples:\n\n  The following command gets a list of all synthesis methodology checks:\n\n    get_methodology_checks SYNTH* \n    \n\nSee Also:\n\n   *  get_methodology_violations\n   *  list_property\n   *  report_methodology\n   *  report_property\n",
"write_dsa": "",
"get_report_configs": "get_report_configs\n\nDescription: \nGet a list of Configurable Report objects\n\nSyntax: \nget_report_configs  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                    [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of Configurable Report objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get 'report' objects of these types: 'run'.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match report names against patterns\n                 Default: *\n\nCategories: \nObject, Report\n\nDescription:\n\n  Returns a list of report objects created by the create_report_config command.\n\n  This command returns the list of report objects matching the search pattern\n  and filters, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_report_configs based on property values on the objects. You can find\n  the properties on an object with the report_property or list_property\n  commands. In the case of the 'report' object, 'REPORT_TYPE', 'RUN_STEP' and\n  'STATE' are some of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the reports associated with the\n  specified design run objects as returned by the get_runs command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match report objects against the specified\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  report objects in the project.\n\nExamples:\n\n  The following example gets all of the report objects in the current project:\n\n    get_report_configs \n    \n\n  The following example gets all of the report objects in the current project\n  that are associated with the opt_design step:\n\n    get_report_configs -filter {RUN_STEP == opt_design} \n    \n\nSee Also:\n\n   *  create_report_config\n   *  delete_report_configs\n   *  generate_reports\n   *  get_runs\n",
"get_pips": "get_pips\n\nDescription: \nGet a list of programmable interconnect points (pips) on the current device.\n\nSyntax: \nget_pips  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-uphill]\n          [-downhill] [-from <args>] [-to <args>] [-quiet] [-verbose]\n          [<patterns>]\n\nReturns: \npips\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the pips of these sites, tiles, wires, nodes, pips, or \n                 nets.\n  [-uphill]      Get the pips uphill from the provided wire or pip.\n  [-downhill]    Get the pips downhill from the provided wire or pip.\n  [-from]        -from <pip/site pin> Return the ordered list of pips \n                 beginning at this pip or site pin.  May be used in \n                 combination with uphill.  Default is downhill.  -all is \n                 implied.\n  [-to]          -to <pip/site pin> Return the ordered list of pips ending at\n                 this wire or site pin.  May be used in combination with \n                 uphill.  Default is downhill.  -all is implied.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match pips against patterns\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Programmable interconnect points, or PIPs, provide the physical routing\n  paths on the device used to connect logic networks. This command returns a\n  list of PIPs on the device that match a specified search pattern. The\n  command requires a design to be open.\n\n  The default command gets a list of all PIPs on the device. However, this is\n  not a recommended use of the command due to the number of pips on a device.\n  You should specify the -of_objects argument to limit the number of pips\n  returned.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_pips based on property values on the PIPs. You can find the properties\n  on an object with the report_property or list_property commands. Any\n  property/value pair can be used as a filter. In the case of the PIP object,\n  'IS_DIRECTIONAL' and 'FROM_PIN' are two of the properties that can be used\n  to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Return the PIPs of the specified sites,\n  tiles, wires, nodes, pips, or nets objects. Xilinx recommends that you\n  always use the -of_objects argument to limit the runtime and memory used by\n  the get_pips command. The number of programmable interconnect points\n  returned can be considerable.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -uphill - (Optional) Return the PIPs uphill of the specified wire or PIPs.\n  Uphill PIPs precede the specified object in the logic network.\n\n  -downhill - (Optional) Return the PIPs downhill of the specified wire or\n  PIPs. Downhill PIPs follow the specified object in the logic network.\n\n  -from <args> - (Optional) Defines the starting points of the pips to get\n  from wire or site_pin objects. This option can be combined with -uphill.\n  The default is to return pips downhill of a start point. By default, all\n  pips will be returned.\n\n  -to <args> - (Optional) Defines the ending points of the pips to get from\n  wire or site_pin objects. This option can be combined with -uphill. The\n  default is to return pips downhill of a start point to the specified end\n  point. By default, all pips will be returned.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Return PIPs matching the specified search patterns.\n  The default pattern is the wildcard `*` which gets a list of all PIPs on\n  the device. More than one search pattern can be specified to find PIPs\n  based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the PIPs associated with the specified tile:\n\n    get_pips -of_object [get_tiles DSP_R_X9Y75] \n    \n\nSee Also:\n\n   *  get_sites\n   *  get_tiles\n   *  get_wires\n   *  list_property\n   *  report_property\n",
"open_example_project": "open_example_project\n\nDescription: \nOpen the example project for the indicated IP\n\nSyntax: \nopen_example_project  [-dir <arg>] [-rename_bdcell <arg>] [-force]\n                      [-in_process] [-quiet] [-verbose] <objects>...\n\nReturns: \nThe Project that was opened\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-dir]            Path to directory where example project will be created\n  [-rename_bdcell]  Specify the IP instance name to use instead of the \n                    specified BD cell's IP name in the example design\n  [-force]          Overwrite an example project if it exists\n  [-in_process]     Open the example project in the same process\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <objects>         The objects whose example projects will be opened\n\nCategories: \nProject, IPFlow\n\nDescription:\n\n  Open an example project for the specified IP cores. The example project can\n  be used to explore the features of the IP core in a stand-alone project,\n  instead of integrated into the current project.\n\nArguments:\n\n  -dir <arg> - (Optional) Specifies the path to the directory where the\n  example project will be written.\n\n  -force - (Optional) Force the opening of a new example project, overwriting\n  an existing example project at the specified path.\n\n  -in_process - (Optional) Open the example project in the same tool process\n  as the current project. As a default, without this argument, a new process\n  instance of the tool will be launched for the example project.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) The IP cores to open example projects for.\n\nExamples:\n\n  The following copies the IP customization and opens the example project for\n  the specified IP core in a new location:\n\n    open_example_project -dir C:/Data/examples -force [get_ips blk_mem*] \n    \n\nSee Also:\n\n   *  create_ip\n   *  generate_target\n   *  get_ips\n   *  import_ip\n",
"opt_design": "opt_design\n\nDescription: \nOptimize the current netlist. This will perform the retarget, propconst, sweep and bram_power_opt optimizations by default.\n\nSyntax: \nopt_design  [-retarget] [-propconst] [-sweep] [-bram_power_opt] [-remap]\n            [-aggressive_remap] [-resynth_remap] [-resynth_area]\n            [-resynth_seq_area] [-directive <arg>] [-muxf_remap]\n            [-hier_fanout_limit <arg>] [-bufg_opt] [-mbufg_opt]\n            [-shift_register_opt] [-dsp_register_opt] [-srl_remap_modes <arg>]\n            [-control_set_merge] [-control_set_opt] [-merge_equivalent_drivers]\n            [-carry_remap] [-debug_log] [-property_opt_only] [-quiet]\n            [-verbose]\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-retarget]                  Retarget\n  [-propconst]                 Propagate constants across leaf-level \n                               instances\n  [-sweep]                     Remove unconnected leaf-level instances\n  [-bram_power_opt]            Perform Block RAM power optimizations\n  [-remap]                     Remap logic optimally in LUTs\n  [-aggressive_remap]          High effort remap optimization\n  [-resynth_remap]             High effort re-synthesis to reduce the depth \n                               of logic in critical timing paths\n  [-resynth_area]              Resynthesis\n  [-resynth_seq_area]          Resynthesis (with Sequential optimizations)\n  [-directive]                 Mode of behavior (directive) for this command.\n                               Please refer to Arguments section of this help\n                               for values for this option\n                               Default: Default\n  [-muxf_remap]                Optimize all MuxFx cells to LUT3\n  [-hier_fanout_limit]         Replicate by module with threshold N\n  [-bufg_opt]                  Insert, Merge and Split BUFGs\n  [-mbufg_opt]                 Merge BUFGs to MBUFGs\n  [-shift_register_opt]        Pull register stage from shift register\n  [-dsp_register_opt]          Push/Pull Registers out of a DSP\n  [-srl_remap_modes]           Remap shift registers to flops or flops to \n                               shift registers\n  [-control_set_merge]         Merge all equivalent control set drivers to a \n                               single driver\n  [-control_set_opt]           Optimize control set, Versal only\n  [-merge_equivalent_drivers]  Merge all LUT,Flop equivalent driver \n                               replications\n  [-carry_remap]               Remap carries into luts\n  [-debug_log]                 Show debug message\n  [-property_opt_only]         Do targeted optimizations on tagged cells\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n\nCategories: \nTools\n\nDescription:\n\n  Optimizes a design netlist for the target part. Optimization can provide\n  improvements to synthesized netlists from third-party tools, or for\n  netlists that may not have been optimized during synthesis.\n\n  Run this command after synthesis but prior to implementation to optimize\n  the design and simplify the netlist before placing and routing the design.\n  Assign the DONT_TOUCH property to prevent the optimization of individual\n  cells.\n\n  Tip: To see what actions opt_design is taking in optimizing your design,\n  you can use the -verbose option to get a more detailed transcript of the\n  process. This can help you in understanding and debugging some of the\n  changes made to your design.\n\n  The opt_design command performs the following optimizations by default:\n\n   *  Retarget\n\n   *  Constant Propagation\n\n   *  Sweep\n\n   *  Global Buffer (BUFG) optimizations\n\n   *  DSP Register optimizations\n\n   *  Shift-Register Logic optimizations\n\n   *  Block RAM Power optimizations\n\n   *  Implement MIG cores\n\n   *  Implement Debug cores\n\n  Important: Using command-line options for specific optimizations results in\n  opt_design performing only the specified optimizations and disabling all\n  others, even the ones that are usually performed by default.\n\n  To perform LUT Remapping, you must specify -remap.\n\n  To perform area-based re-synthesis, you must specify -resynth_area, or\n  -directive ExploreArea.\n\n  To perform sequential area-based re-synthesis, you must specify\n  -resynth_seq_area, or -directive ExploreSequentialArea.\n\nArguments:\n\n  -retarget - (Optional) Retarget one type of block to another when\n  retargetting the design from one device family to another. For example,\n  retarget instantiated MUXCY or XORCY components into a CARRY4 block; or\n  retarget DCM to MMCM. The retarget optimization also absorbs inverters into\n  downstream logic where possible.\n\n  Note: The -retarget argument is optional, as are the other optimizations.\n  However this optimization is run by default unless explicitly overridden by\n  another optimization.\n\n  -propconst - (Optional) Propagate constant inputs through the circuit,\n  resulting in a simplified netlist. Propagation of constants can eliminate\n  redundant combinational logic from the netlist.\n\n  -sweep - (Optional) Remove unnecessary logic, removing loadless cells and\n  nets. Additional optimization can be performed such as tie-off, register\n  replication driving multiple OBUF, IBUF/OBUF insertion, retargeting dual\n  port RAM to single port RAM, and optimizing IDELAYCTRL by grouping IO.\n\n  -bram_power_opt - (Optional) Enables power optimization on Block RAM cells.\n  Changes the WRITE_MODE on unread ports of true dual-port RAMs to NO_CHANGE,\n  and applies intelligent clock gating to Block RAM outputs.\n\n  Note: Specific Block RAM cells can be excluded from this optimization using\n  the set_power_opt command.\n\n  -remap - (Optional) Remap the design to combine multiple LUTs into a single\n  LUT to reduce the depth of the logic.\n\n  -aggressive_remap - (Optional) Similar to the -remap option to reduce LUT\n  logic depth but more exhaustive. This may reduce more LUT levels at the\n  expense of longer optimization runtime.\n\n  -resynth_area - (Optional) Perform re-synthesis in area mode to reduce the\n  number of LUTs.\n\n  -resynth_seq_area - (Optional) Perform re-synthesis to reduce both\n  combinational and sequential logic. Performs a superset of the optimization\n  provided by -resynth_area.\n\n  -resynth_remap - (Optional) Remap the design to improve the critical paths\n  in timing-driven mode by performing re-synthesis to reduce the depth of\n  logic. This timing-based approach will replicate LUT's with fanout and\n  collapse smaller LUT's into bigger functions at the expense of longer\n  optimization runtime.\n\n  -directive <arg> - (Optional) Direct the mode of optimization with specific\n  design objectives. Only one directive can be specified for a single\n  opt_design command, and values are case-sensitive. Supported values\n  include:\n\n   *  Explore - Run additional optimizations to improve results.\n\n   *  ExploreArea - Run Explore with resynth_area, to reduce the number of\n      LUTs.\n\n   *  ExploreWithRemap - Run Explore with aggresive_remap optimization to\n      compress logic levels.\n\n   *  ExploreSequentialArea - Run Explore with resynth_seq_area optimization\n      to reduce registers and related combinational logic.\n\n   *  RuntimeOptimized - Runs Default without bram_power_opt. Run the fewest\n      optimizations, trading optimization results for faster runtime.\n\n   *  RQS - Instructs opt_design to select the opt_design directive specified\n      by the report_qor_suggestion strategy suggestion. Requires an RQS file\n      with a strategy suggestion to be read in prior to calling this\n      directive. See report_qor_suggestions -help for more details.\n\n   *  Default - Run the default optimization.\n\n  Refer to the Vivado Design Suite User Guide: Implementation (UG904) for\n  more information on the effects of each directive.\n\n  Note: The -directive option controls the overall optimization strategy, and\n  is not compatible with any specific optimization options. It can only be\n  used with -debug_log, -quiet and -verbose.\n\n  -muxf_remap - (Optional) Convert MUXFs to LUT3s opportunistically when it\n  can potentially improve route-ability of the design without affecting\n  timing.\n\n  -hier_fanout_limit <arg> - (Optional) Net drivers with fanout greater than\n  the specified limit (<arg>) will be replicated according to the logical\n  hierarchy. For each hierarchical instance driven by the high-fanout net, if\n  the fanout within the hierarchy is greater than the specified limit, then\n  the net within the hierarchy is driven by a replica of the driver of the\n  high-fanout net. The minimum value for hier_fanout_limit is 512.\n\n  -bufg_opt - (Optional) Perform various optimizations related to global\n  buffers (BUFG/BUFGCE): Insert a buffer on unbuffered clock nets (fanout >\n  30). Insert BUFGs on high fanout nets where the control set pin count on\n  the net exceeds the tool threshold. Perform load-splitting when a\n  high-fanout net drives both combinational and sequential logic: the\n  combinational portion bypasses the BUFG because the added delay is too\n  large.\n\n  Tip: The phys_opt_design command can be used to optimize the combinational\n  portion, while the sequential portion can be driven by BUFG.\n\n  -mbufg_opt - (Optional) MBUFG optimization transforms parallel clock\n  buffers driven by a common driver, or clock modifying blocks (CMB) such as\n  MMCM, DPLL, or XPLL, to MBUFG.\n\n  -shift_register_opt - (Optional) For high-fanout nets originating from an\n  SRL, add output register pipeline stages to improve timing prior to the\n  high-fanout net replication. This optimization is performed as part of the\n  default optimization.\n\n  -dsp_register_opt - (Optional) Pull registers out of a DSP, or push\n  registers into a DSP, to improve timing and resource utilization as needed.\n  This optimization is performed as part of the default optimization.\n\n  -srl_remap_modes <args> - (Optional) Many designs have timing closure\n  issues related to deep SRLs, and long register chains. This option provides\n  both an automatic rule to trigger remapping between FF chains and SRLs, and\n  also a manual rule to specify when to convert a FF chain to an SRL, or an\n  SRL to a FF chain. Automatic remapping starts with the longest FF chains\n  and converts those to SRLs when needed to reduce FF utilization, and takes\n  the shallowest SRLs and converts those to FF chains when needed to reduce\n  LUT utilization. Manual remapping takes FF chains in excess of specified\n  lengths and remaps them to SRLs, and takes SRLs with specified depths and\n  remaps them to FF chains. The automatic and manual modes cannot both be\n  used in the same opt_design command pass. The following shows the syntax\n  for the automatic and manual rules:\n\n   *  Automatic:\n\n       -  -srl_remap_modes {{target_ff_util <util> target_lutram_util\n          <util>}}: Where <util> is a number from 0 to 100 expressed as a\n          percentage of utilization. When either FF or LUTs exceed the\n          specified utilization, the tool remaps as needed. When both\n          utilization rates are exceeded neither is remapped.\n\n   *  Manual:\n\n       -  -srl_remap_modes {{min_depth_ffs_to_srl <val>}{max_depth_srl_to_ffs\n          <val>}}: Where <val> specifies the depth of an SRL or length of a\n          FF chain. When a FF chain is greater than the specified min value,\n          the chain is remapped to an SRL with the required depth. If an SRL\n          has depth less than or equal to the specified max value, the SRL is\n          remapped to a FF chain.\n\n  -control_set_merge - (Optional) Reduce the drivers of logically-equivalent\n  control signals to a single driver. This is like a reverse fanout\n  replication, and results in nets that are better suited for module-based\n  replication.\n\n  -control_set_opt - (Optional) Reduce the control set structure complexity\n  and provide more flexibility to placer by converting smaller control sets\n  into bigger group. This switch introduce new LUT logic in front of flop D\n  pins to preserve functionality. The optimization is enabled by default in\n  all explore strategies.\n\n    Explore/ExploreArea/ExploreSequentialArea/ExploreWithRemap\n\n  -merge_equivalent_drivers - (Optional) This option merges equivalent\n  drivers on both control signals and non-control signals, to reduce logic in\n  the design.\n\n  -carry_remap - (Optional) Remap carry signals into LUTs.\n\n  -debug_log - (Optional) Generate log file for debugging purposes.\n\n  -property_opt_only - (Optional) Indicates that the opt_design command\n  should be driven only by properties on objects in the design, and not by\n  the options defined as part of the command syntax. Refer to the Vivado\n  Design Suite Properties Reference Guide (UG912) for more information on\n  specific properties. The following properties trigger property-only\n  optimizations: CARRY_REMAP, CONTROL_SET_REMAP, EQUIVALENT_DRIVER_OPT,\n  LUT_REMAP, MUXF_REMAP, REG_TO_SRL, SRL_STAGES_TO_REG_INPUT,\n  SRL_STAGES_TO_REG_OUTPUT, SRL_TO_REG.\n\n  Tip: When -property_opt_only is specified, the tool will return an error if\n  additional optimizations have been specified in the opt_design command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command. This option displays detailed information\n  about the logic that is affected by each optimization.\n\nExamples:\n\n  The following example performs all four default optimizations: retarget,\n  constant propagation, sweep, and Block RAM power optimization. The command\n  returns detailed results with the -verbose switch:\n\n    opt_design -verbose\n\n  This example excludes specific Block RAM cells from power optimization\n  using the set_power_opt command, and then runs opt_design with the four\n  default optimizations:\n\n    set_power_opt -exclude_cells [get_cells \\\n       -filter {PRIMITIVE_TYPE =~ BMEM.*.*} \\\n       -of_objects [get_pins -leaf -filter {DIRECTION == IN} \\\n       -of_objects [get_nets -of_objects [get_pins clock/bufgctrl_clk_mld/O]]]]\n    opt_design\n\n  The following example performs the sweep and retarget optimizations:\n\n    opt_design -sweep -retarget\n\n  Note: Because -sweep and -retarget are expressly enabled in the prior\n  example, -propconst optimization and -bram_power_opt are implicitly\n  disabled.\n\n  The following example directs the opt_design command to use various\n  algorithms to achieve potentially better results:\n\n    opt_design -directive Explore\n\n  The following example directs the opt_design command to use various\n  algorithms to achieve potentially better results, while focusing on area\n  reduction:\n\n    opt_design -directive ExploreArea\n\n  This example uses the -srl_remap_modes argument with the automatic option\n  to convert FF chains into SRLs when FF utilization is greater than 20%, or\n  SRLs into FF chains when SRL utilization is over 50%:\n\n    -srl_remap_modes {{target_ff_util 20 target_lutram_util 50}}\n\n  Tip: In this case, the srl_remap is only performed if either specified\n  utilization rate is exceeded, but NOT if both are exceeded.\n\n  The following example uses the -srl_remap_modes argument with the manual\n  option to convert FF chains with length greater than 5 to SRLs, and SRLs\n  with depth less than or equal to 8 to FF chains:\n\n    -srl_remap_modes {{min_depth_ffs_to_srl 5}{max_depth_srl_to_ffs 8}}\n\nSee Also:\n\n   *  phys_opt_design\n   *  place_design\n   *  power_opt_design\n   *  route_design\n   *  set_power_opt\n   *  synth_design\n",
"get_marked_objects": "get_marked_objects\n\nDescription: \nGet marked objects\n\nSyntax: \nget_marked_objects  [-rgb <args>] [-color <arg>] [-quiet] [-verbose]\n\nReturns: \nlist of marked objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-rgb]      RGB color index list\n  [-color]    Valid values are red green blue magenta yellow cyan and orange\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nObject, GUIControl\n\nDescription:\n\n  Get the marked objects in the current design open in the Vivado IDE.\n  Objects can be marked with the mark_objects command.\n\n  You can get all marked objects in the design, or specify marked objects by\n  color, or by RGB value.\n\n  Note: This Tcl command works only when Vivado is run in GUI mode.\n\nArguments:\n\n  -rgb <args> - (Optional) The color to use in the form of an RGB code\n  specified as {R G B}. For instance, {255 255 0} specifies the color yellow,\n  while {0 255 0} specifies green.\n\n  -color <arg> - (Optional) The color used for marking the specified object\n  or objects. Supported colors are: red, green, blue, magenta, yellow, cyan,\n  and orange.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example gets all the marked objects in the current design:\n\n    get_marked_objects \n    \n\n  The following example gets the object in the current design that are marked\n  in the specified color:\n\n    get_marked_objects -color yellow \n    \n\nSee Also:\n\n   *  get_highlighted_objects\n   *  highlight_objects\n   *  mark_objects\n   *  select_objects\n",
"set_clock_sense": "set_clock_sense\n\nDescription: \nSet clock sense on ports or pins\n\nSyntax: \nset_clock_sense  [-positive] [-negative] [-stop_propagation] [-clocks <args>]\n                 [-quiet] [-verbose] <pins>\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-positive]          Specify positive unate (non_inverting) clock sense\n  [-negative]          Specify negative unate (inverting) clock sense\n  [-stop_propagation]  Stop clock propagation from specified pins\n  [-clocks]            List of clocks\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <pins>               List of port and/or pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets clock sense at specified ports or pins. This is used to define the\n  positive or negative unateness at the pin relative to a clock object.\n  However, the specified unateness only applies at a non-unate point in the\n  clock network, at a point where the clock signal cannot be determined.\n  Since the clock signal is not determined, the defined clock sense\n  propagates forward from the given pins.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -positive - (Optional) The unate clock sense is positive (non_inverting).\n\n  -negative - (Optional) The unate clock sense is negative (inverting).\n\n  -stop_propagation - (Optional) Stop the propagation of clocks in the\n  -clocks argument from the specified pins or ports. Propagation of the clock\n  as clock and data is stopped.\n\n  Note: -positive, -negative, and -stop_propagation are mutually exclusive.\n\n  -clocks <args> - (Optional) A list of clocks on which to apply the clock\n  sense for the specified pins and ports. If the -clocks argument is not\n  used, the clock sense will be applied to all clocks passing through the\n  specified pins and ports.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pins> - (Required) List of ports and pins to propagate the clock sense to.\n\nExamples:\n\n  The following example specifies that only the positive unate paths will\n  propagate through the output pin of the XOR gate as compared with the\n  original clock.\n\n    set_clock_sense -positive [get_pins xor_a.z] \n    \n\nSee Also:\n\n   *  create_clock\n   *  get_pins\n",
"write_device_image": "write_device_image\n\nDescription: \nWrite programmable device image\n\nSyntax: \nwrite_device_image  [-force] [-verbose] [-raw_partitions] [-mask_file]\n                    [-logic_location_file] [-cell <arg>] [-no_pdi]\n                    [-no_partial_pdifile] [-quiet] <file>\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-force]                Overwrite existing file\n  [-verbose]              Print write_device_image options\n  [-raw_partitions]       Write raw CFI and NPI partition files (.rcfi and \n                          .rnpi)\n  [-mask_file]            Write mask file (.msk_cfi)\n  [-logic_location_file]  Write logic location file (.ll)\n  [-cell]                 Create only partial device image for named cell\n  [-no_pdi]               Do not generate pdi file\n  [-no_partial_pdifile]   Do not write partial pdi files for a Dynamic \n                          Function eXchange design\n  [-quiet]                Ignore command errors\n  <file>                  The name of the .rcfi and .rnpi files to generate\n\nCategories: \nFileIO\n",
"write_ip_tcl": "write_ip_tcl\n\nDescription: \nWrite a tcl script on disk that will recreate a given IP.\n\nSyntax: \nwrite_ip_tcl  [-force] [-no_ip_version] [-ip_name <arg>] [-show_defaults]\n              [-multiple_files] [-quiet] [-verbose] [<objects>]\n              [<tcl_filename>...]\n\nReturns: \nIP TCL file\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-force]           Flag to overwrite existing file.\n  [-no_ip_version]   Flag to not include the IP version in the IP VLNV in \n                     create_ip commands. NOTE - this may have implications if\n                     there are major IP version changes.\n  [-ip_name]         Set the name of the IP. This argument is not supported \n                     for multiple IP.\n  [-show_defaults]   Add a comment containing the default parameter values of\n                     the IP.\n  [-multiple_files]  Flag to create a .tcl file for each IP supplied as an \n                     argument\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  [<objects>]        IP(s) to be written to disk\n                     Values: IP instance(s) as returned by 'get_ips <instance\n                     name>'\n  [<tcl_filename>]   File path to the exported tcl file. If the path is a \n                     directory and multiple IP are given as an argument, a \n                     file for each IP will be created.\n                     Default: ./\n\nCategories: \nObject, Project, IPFlow\n",
"write_hw_platform": "write_hw_platform\n\nDescription: \nWrite the Xilinx Shell Archive for the current design\n\nSyntax: \nwrite_hw_platform  [-fixed] [-force] [-include_bit] [-include_sim_content]\n                   [-minimal] [-hw] [-hw_emu] [-rp <arg>] [-rm <arg>] [-static]\n                   [-quiet] [-verbose] [<file>]\n\nReturns: \nThe name of the Shell file\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-fixed]                Write fixed Shell.\n  [-force]                Overwrite existing Xilinx Shell Archive file\n  [-include_bit]          Include bit file(s) in the Shell.\n  [-include_sim_content]  Include simulaton files in the Shell.\n  [-minimal]              Add only minimal files in the Shell.\n  [-hw]                   Write shell for use in hardware only.\n  [-hw_emu]               Write shell for use in hardware emulation only.\n  [-rp]                   Write shell for the reconfigurable module at this \n                          instance path. The specific RM is selected by the \n                          active configuration or by '-rm'. This option is \n                          valid for Versal designs only.\n  [-rm]                   Specifies the name of a reconfigurable module for \n                          use with '-rp'. This option is valid for Versal \n                          designs only.\n  [-static]               Write shell for the static portion of a DFX design.\n                          This option is valid for Versal designs only.\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  [<file>]                Device Support Archive file\n                          Values: A filename with alphanumeric characters and\n                          .xsa extension.\n\nCategories: \nVitis, Platform, FileIO\n\nDescription:\n\n  Writes a Xilinx support archive (XSA) of the current design for use as a\n  hardware platform.\n\n  All platforms are dynamically implemented during compilation, meaning that\n  the accelerator logic coming is implemented along with some or all of the\n  logic contained in the hardware platform design. The XSA represents the\n  required portion of the hardware platform. The hardware platform design\n  used to create a XSA consists of a Vivado IP integrator subsystem design\n  with all the required board interface IP cores configured and connected to\n  the device I/Os. The Vivado project must also include several required XSA\n  and PFM properties needed to define the XSA.\n\n  This command reports the name of the XSA file written, or returns an error\n  if it fails.\n\nArguments:\n\n  -fixed - (Optional) Overwrite a fixed shell XSA, which enables the platform\n  for use in the software development flow, but not for use in acceleration.\n\n  -force - (Optional) Overwrite the XSA file if it already exists.\n\n  -include_bit - (Optional) Include the bitstream for the current design in\n  the XSA. By default MCS files are created by write_hw_platform, and the\n  bitstreams are discarded. When this options is specified, bitstream files\n  are preserved for use in debugging the platform.\n\n  -include_emulation - (Optional) This option exports data needed to support\n  hardware emulation at the same time that the XSA is created. This option\n  requires special features of the hardware platform, and is not generally\n  recommended.\n\n  -minimal - (Optional) Add only those files in the XSA that are required to\n  run the Vitis flow. Do not add anything extra. When this option is\n  specified the write_hw_platform command ignores other options that add\n  content to the XSA, such as the -include_bit and -include_emulation\n  options.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the XSA file to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes the XSA for the current project, overwriting a\n  XSA file of the same name if one exists:\n\n    write_hw_platform -force C:/Data/zc702.xsa\n\nSee Also:\n\n   *  open_hw_platform\n   *  validate_hw_platform\n",
"scan": "scan(n)               Tcl Built-In Commands               scan(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       scan  -  Parse  string  using conversion specifiers in the\n       style of sscanf\n\nSYNOPSIS\n       scan string format ?varName varName ...?\n_________________________________________________________________\n\nINTRODUCTION\n       This command parses substrings from an input string  in  a\n       fashion similar to the ANSI C sscanf procedure and returns\n       a count of the number of conversions performed, or  -1  if\n       the  end of the input string is reached before any conver-\n       sions have been performed.  String gives the input  to  be\n       parsed  and format indicates how to parse it, using % con-\n       version specifiers as in sscanf.  Each varName  gives  the\n       name  of  a  variable;  when  a  substring is scanned from\n       string that matches a conversion specifier, the  substring\n       is  assigned to the corresponding variable.  If no varName\n       variables are specified, then scan works in an inline man-\n       ner,  returning the data that would otherwise be stored in\n       the variables as a list.  In the  inline  case,  an  empty\n       string  is  returned  when  the end of the input string is\n       reached before any conversions have been performed.\n\nDETAILS ON SCANNING\n       Scan operates by scanning string and format together.   If\n       the  next  character  in  format is a blank or tab then it\n       matches any number of white  space  characters  in  string\n       (including  zero).   Otherwise, if it is not a % character\n       then it must match the next character of string.  When a %\n       is encountered in format, it indicates the start of a con-\n       version specifier.  A conversion specifier contains up  to\n       four fields after the %: a XPG3 position specifier (or a *\n       to indicate the converted value is to be discarded instead\n       of  assigned to any variable); a number indicating a maxi-\n       mum substring width; a size  modifier;  and  a  conversion\n       character.   All  of  these fields are optional except for\n       the conversion character.  The  fields  that  are  present\n       must appear in the order given above.\n\n       When scan finds a conversion specifier in format, it first\n       skips any white-space characters  in  string  (unless  the\n       conversion  character  is  [  or c).  Then it converts the\n       next input characters according to the  conversion  speci-\n       fier  and  stores  the result in the variable given by the\n       next argument to scan.\n\n       If the % is followed by a decimal number and a  $,  as  in\n       '%2$d',  then  the  variable  to use is not taken from the\n       next sequential argument.  Instead, it is taken  from  the\n       argument  indicated  by the number, where 1 corresponds to\n       the first varName.  If there are any positional specifiers\n       in  format  then all of the specifiers must be positional.\n       Every varName on the  argument  list  must  correspond  to\n       exactly one conversion specifier or an error is generated,\n       or in the inline case, any position can  be  specified  at\n       most  once  and the empty positions will be filled in with\n       empty strings.\n\n       The size modifier field is used only when scanning a  sub- |\n       string  into  one of Tcl's integer values.  The size modi- |\n       fier field dictates the integer  range  acceptable  to  be |\n       stored  in a variable, or, for the inline case, in a posi- |\n       tion in the result list.  The syntactically  valid  values |\n       for  the  size  modifier  are h, L, l, and ll.  The h size |\n       modifier value is equivalent to the absence of a size mod- |\n       ifier  in  the the conversion specifier.  Either one indi- |\n       cates the integer range to be stored  is  limited  to  the |\n       same range produced by the int() function of the expr com- |\n       mand.  The L size modifier is equivalent  to  the  l  size |\n       modifier.  Either  one  indicates  the integer range to be |\n       stored is limited to the same range produced by the wide() |\n       function  of the expr command.  The ll size modifier indi- |\n       cates that the integer range to be stored is unlimited.\n\n       The following conversion characters are supported:\n\n       d         The input substring must be a  decimal  integer.\n                 It is read in and the integer value is stored in\n                 the variable, truncated as required by the  size\n                 modifier value.\n\n       o         The input substring must be an octal integer. It\n                 is read in and the integer value  is  stored  in\n                 the  variable, truncated as required by the size\n                 modifier value.\n\n       x         The input substring must be a hexadecimal  inte-\n                 ger.   It  is  read  in and the integer value is\n                 stored in the variable, truncated as required by\n                 the size modifier value.\n\n       u         The  input  substring must be a decimal integer.\n                 The integer value is truncated  as  required  by\n                 the  size  modifier value, and the corresponding\n                 unsigned value for that truncated range is  com-\n                 puted  and  stored  in the variable as a decimal\n                 string.  The conversion makes no  sense  without\n                 reference  to  a  truncation  range, so the size\n                 modifier ll is not permitted in combination with\n                 conversion character u.\n\n       i         The  input  substring  must  be an integer.  The\n                 base (i.e. decimal, binary, octal, or  hexadeci-\n                 mal)  is  determined  in  the  same  fashion  as\n                 described in expr.  The integer value is  stored\n                 in  the  variable,  truncated as required by the\n                 size modifier value.\n\n       c         A single character is read in  and  its  Unicode\n                 value  is  stored  in the variable as an integer\n                 value.  Initial white space is  not  skipped  in\n                 this  case,  so  the  input  substring  may be a\n                 white-space character.\n\n       s         The input substring consists of all the  charac-\n                 ters  up  to the next white-space character; the\n                 characters are copied to the variable.\n\n       e or f or g\n                 The input substring  must  be  a  floating-point\n                 number  consisting of an optional sign, a string\n                 of decimal digits possibly containing a  decimal\n                 point, and an optional exponent consisting of an\n                 e or E followed by an optional sign and a string\n                 of  decimal digits.  It is read in and stored in\n                 the variable as a floating-point value.\n\n       [chars]   The input substring  consists  of  one  or  more\n                 characters  in  chars.   The  matching string is\n                 stored in the variable.  If the first  character\n                 between  the  brackets is a ] then it is treated\n                 as part of chars rather than the closing bracket\n                 for  the  set.   If chars contains a sequence of\n                 the form a-b then any character between a and  b\n                 (inclusive)  will  match.   If the first or last\n                 character between the brackets is a -,  then  it\n                 is treated as part of chars rather than indicat-\n                 ing a range.\n\n       [^chars]  The input substring  consists  of  one  or  more\n                 characters not in chars.  The matching string is\n                 stored in the variable.  If the character  imme-\n                 diately  following  the  ^  is  a  ]  then it is\n                 treated as part of the set rather than the clos-\n                 ing  bracket  for  the set.  If chars contains a\n                 sequence of the  form  a-b  then  any  character\n                 between  a  and  b  (inclusive) will be excluded\n                 from the set.  If the first  or  last  character\n                 between  the brackets is a -, then it is treated\n                 as part of chars rather than indicating a  range\n                 value.\n\n       n         No  input  is  consumed  from  the input string.\n                 Instead, the total number of characters  scanned\n                 from  the  input  string so far is stored in the\n                 variable.\n\n       The number of characters read from the input for a conver-\n       sion  is the largest number that makes sense for that par-\n       ticular conversion (e.g.  as many decimal digits as possi-\n       ble  for  %d, as many octal digits as possible for %o, and\n       so on).  The input substring for a given conversion termi-\n       nates  either  when a white-space character is encountered\n       or when the maximum  substring  width  has  been  reached,\n       whichever  comes  first.  If a * is present in the conver-\n       sion specifier then no variable is assigned and  the  next\n       scan argument is not consumed.\n\nDIFFERENCES FROM ANSI SSCANF\n       The behavior of the scan command is the same as the behav-\n       ior of the ANSI C sscanf procedure except for the  follow-\n       ing differences:\n\n       [1]    %p conversion specifier is not supported.\n\n       [2]    For %c conversions a single character value is con-\n              verted to a decimal string, which is then  assigned\n              to  the  corresponding  varName; no substring width\n              may be specified for this conversion.\n\n       [3]    The h modifier is always ignored and the  l  and  L\n              modifiers  are  ignored when converting real values\n              (i.e. type double is used for the  internal  repre-\n              sentation).  The ll modifier has no sscanf counter-\n              part.\n\n       [4]    If the end of the input string  is  reached  before\n              any  conversions  have  been performed and no vari-\n              ables are given, an empty string is returned.\n\nEXAMPLES\n       Convert a UNICODE character to its numeric value:\n              set char 'x'\n              set value [scan $char %c]\n\n       Parse a simple color specification  of  the  form  #RRGGBB\n       using hexadecimal conversions with substring sizes:\n              set string '#08D03F'\n              scan $string '#%2x%2x%2x' r g b\n\n       Parse  a  HH:MM time string, noting that this avoids prob-\n       lems with octal numbers by forcing interpretation as deci-\n       mals  (if  we did not care, we would use the %i conversion\n       instead):\n              set string '08:08'   ;# *Not* octal!\n              if {[scan $string '%d:%d' hours minutes] != 2} {\n                 error 'not a valid time string'\n              }\n              # We have to understand numeric ranges ourselves...\n              if {$minutes < 0 || $minutes > 59} {\n                 error 'invalid number of minutes'\n              }\n\n       Break a string up into sequences of non-whitespace charac-\n       ters  (note  the  use  of the %n conversion so that we get\n       skipping over leading whitespace correct):\n              set string ' a string {with braced words} + leading space '\n              set words {}\n              while {[scan $string %s%n word length] == 2} {\n                 lappend words $word\n                 set string [string range $string $length end]\n              }\n\n       Parse a simple coordinate string, checking that it is com-\n       plete by looking for the terminating character explicitly:\n              set string '(5.2,-4e-2)'\n              # Note that the spaces before the literal parts of\n              # the scan pattern are significant, and that ')' is\n              # the Unicode character \\u0029\n              if {\n                 [scan $string ' (%f ,%f %c' x y last] != 3\n                 || $last != 0x0029\n              } then {\n                 error 'invalid coordinate string'\n              }\n              puts 'X=$x, Y=$y'\n\n       An interactive session  demonstrating  the  truncation  of |\n       integer values determined by size modifiers:               |\n              % set tcl_platform(wordSize)                        |\n              4                                                   |\n              % scan 20000000000000000000 %d                      |\n              2147483647                                          |\n              % scan 20000000000000000000 %ld                     |\n              9223372036854775807                                 |\n              % scan 20000000000000000000 %lld                    |\n              20000000000000000000                                |\n\nSEE ALSO\n       format(n), sscanf(3)\n\nKEYWORDS\n       conversion specifier, parse, scan\n\n\n\nTcl                            8.4                        scan(n)\n",
"apply": "apply(n)              Tcl Built-In Commands              apply(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       apply - Apply an anonymous function\n\nSYNOPSIS\n       apply func ?arg1 arg2 ...?\n_________________________________________________________________\n\nDESCRIPTION\n       The  command  apply applies the function func to the argu-\n       ments arg1 arg2 ... and returns the result.\n\n       The function func is a two element list {args body}  or  a\n       three  element  list {args body namespace} (as if the list\n       command had been used).  The first element args  specifies\n       the  formal  arguments  to  func. The specification of the\n       formal arguments args is shared with the proc command, and\n       is described in detail in the corresponding manual page.\n\n       The  contents  of body are executed by the Tcl interpreter\n       after the local  variables  corresponding  to  the  formal\n       arguments  are  given  the values of the actual parameters\n       arg1 arg2 ....  When  body  is  being  executed,  variable\n       names normally refer to local variables, which are created\n       automatically  when  referenced  and  deleted  when  apply\n       returns.   One local variable is automatically created for\n       each of the function's arguments.   Global  variables  can\n       only  be  accessed  by  invoking the global command or the\n       upvar command.  Namespace variables can only  be  accessed\n       by invoking the variable command or the upvar command.\n\n       The invocation of apply adds a call frame to Tcl's evalua-\n       tion stack (the stack of frames accessed via uplevel). The\n       execution  of  body  proceeds  in  this call frame, in the\n       namespace given by namespace or in the global namespace if\n       none  was  specified.  If  given, namespace is interpreted\n       relative to the global namespace even if its name does not\n       start with '::'.\n\n       The semantics of apply can also be described by:\n\n              proc apply {fun args} {\n                 set len [llength $fun]\n                 if {($len < 2) || ($len > 3)} {\n                    error 'can't interpret \\'$fun\\' as anonymous function'\n                 }\n                 lassign $fun argList body ns\n                 set name ::$ns::[getGloballyUniqueName]\n                 set body0 {\n                    rename [lindex [info level 0] 0] {}\n                 }\n                 proc $name $argList ${body0}$body\n                 set code [catch {uplevel 1 $name $args} res opt]\n                 return -options $opt $res\n              }\n\nEXAMPLES\n       This  shows  how  to  make  a  simple general command that\n       applies a transformation to each element of a list.\n              proc map {lambda list} {\n                 set result {}\n                 foreach item $list {\n                    lappend result [apply $lambda $item]\n                 }\n                 return $result\n              }\n              map {x {return [string length $x]:$x}} {a bb ccc dddd}\n                    -> 1:a 2:bb 3:ccc 4:dddd\n              map {x {expr {$x**2 + 3*$x - 2}}} {-4 -3 -2 -1 0 1 2 3 4}\n                    -> 2 -2 -4 -4 -2 2 8 16 26\n\n       The apply command is also useful  for  defining  callbacks\n       for use in the trace command:\n              set vbl '123abc'\n              trace add variable vbl write {apply {{v1 v2 op} {\n                 upvar 1 $v1 v\n                 puts 'updated variable to \\'$v\\''\n              }}}\n              set vbl 123\n              set vbl abc\n\nSEE ALSO\n       proc(n), uplevel(n)\n\nKEYWORDS\n       argument, procedure, anonymous function\n\n\n\nTcl                                                      apply(n)\n",
"report_attribute": "",
"unmark_objects": "unmark_objects\n\nDescription: \nUnmark items that are currently marked\n\nSyntax: \nunmark_objects  [-color_index <arg>] [-rgb <args>] [-color <arg>] [-quiet]\n                [-verbose] [<objects>]\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-color_index]  Color index\n  [-rgb]          RGB color index list\n  [-color]        Valid values are red green blue magenta yellow cyan and \n                  orange\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  [<objects>]     Objects to unmark\n\nCategories: \nGUIControl\n\nDescription:\n\n  Unmarks the specified object or objects that were previously marked by the\n  mark_objects command. This command is for use in GUI mode.\n\n  This command supports the color options as specified below. However, these\n  options are not necessary to unmark a specific object, but can be used to\n  unmark all objects currently marked in the specified color. See the example\n  below.\n\nArguments:\n\n  -rgb <args> - (Optional) The color to unmark in the form of an RGB code\n  specified as {R G B}. For instance, {255 255 0} specifies the color yellow.\n\n  -color <arg> - (Optional) The color to unmark. Supported highlight colors\n  are red, green, blue, magenta, yellow, cyan, and orange.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) One or more objects to be unmarked. If no objects\n  are specified, all marked objects of the specified color will be unmarked.\n  If no color is specified, all marked objects will be unmarked.\n\nExamples:\n\n  The following example unmarks the selected objects:\n\n    unmark_objects [get_selected_objects] \n    \n\n  The following example unmarks all objects currently marked in the color\n  yellow:\n\n    unmark_objects -color yellow \n    \n\nSee Also:\n\n   *  get_selected_objects\n   *  mark_objects\n",
"delete_macros": "delete_macros\n\nDescription: \nDelete a list of macros\n\nSyntax: \ndelete_macros  [-quiet] [-verbose] <macros>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <macros>    Macros to delete\n\nCategories: \nXDC\n\nDescription:\n\n  Delete one or more macro defined by the create_macro command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <macros> - (Required) Specify the name or names of the macros to delete.\n\nExamples:\n\n  The following example deletes a macro called usbMacro1:\n\n    \n    delete_macros usbMacro1 \n    \n\nSee Also:\n\n   *  create_macro\n",
"strip_logic_functions": "strip_logic_functions\n\nDescription: \nStrip the logic functions from LUTs, RAMBs, etc.\n\nSyntax: \nstrip_logic_functions  [-cells <args>] [-exclude_cells <args>] [-quiet]\n                       [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-cells]          Strip logic functions only for the given list of cells \n                    (not valid with -exclude_cells)\n  [-exclude_cells]  Strip logic functions from the entire design with the \n                    exception of the given list of cells (not valid with \n                    -cells)\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nFileIO\n",
"unplace_cell": "unplace_cell\n\nDescription: \nUnplace one or more instances. \n\nSyntax: \nunplace_cell  [-quiet] [-verbose] <cell_list>...\n\nUsage: \n  Name         Description\n  ------------------------\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <cell_list>  a list of cells to be unplaced \n\nCategories: \nFloorplan\n\nDescription:\n\n  Unplace the specified cells from their current placement site.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cell_list> - (Required) Specifies a list of one or more cells to be\n  unplaced from the device.\n\nExamples:\n\n  The following example unplaces the specified cell:\n\n    unplace_cell {fftEngine/fftInst/ingressLoop[6].ingressFifo/buffer_fifo/i_4773_12897} \n    \n\n  The following example unplaces multiple cells:\n\n    unplace_cell {div_cntr_reg_inferredi_4810_15889  div_cntr_reg[0] div_cntr_reg[1]} \n    \n\nSee Also:\n\n   *  create_cell\n   *  place_cell\n   *  remove_cell\n",
"get_constant_paths": "get_constant_paths\n\nDescription: \nGet constant paths\n\nSyntax: \nget_constant_paths  [-max_paths_per_endpoint <arg>] [-filter <arg>] [-regexp]\n                    [-nocase] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-max_paths_per_endpoint]  number of branches per endpoint to report traces\n                             for\n                             Default: 1\n  [-filter]                  Filter list with expression\n  [-regexp]                  Patterns specified in filter are full regular \n                             expressions\n  [-nocase]                  Perform case-insensitive matching for patterns \n                             specified in filter (valid only when -regexp \n                             specified)\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n  <objects>                  endpoint pins or instances\n\nCategories: \nObject, Timing\n\nDescription:\n\n  Get constant paths objects that meet the specified criteria.\n\nArguments:\n\n  -max_paths_per_endpoint - Specifies maximum number of paths to report per\n  constant endpoint object.\n\n  Note: By default, 1 path per endpoint has been reported.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  the search pattern, based on specified property values.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string.\n\n  Note: You can add '.*' to the beginning or end of a search string to widen\n  the search to include a substring.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  <objects> - (Required) design cell(s) or pin(s) object list to report\n\nExample:\n\n  Gets constant paths of the specified pin.\n\n    get_constant_paths [get_pins cpuEngine/or1200_cpu/or1200_sprs/esr/D]\n\n  Gets constant paths of the specified cell.\n\n    report_constant_paths [get_cells cpuEngine/or1200_cpu/or1200_sprs/esr]\n\nSee also:\n\n   *  report_constant_paths\n\n   *  get_path_groups\n\n   *  group_path\n\n   *  place_design\n\n   *  report_timing_summary\n\n   *  route_design\n\n   *  set_clock_groups\n\n   *  set_false_path\n",
"get_board_parts": "get_board_parts\n\nDescription: \nGet the list of board_part available in the project\n\nSyntax: \nget_board_parts  [-regexp] [-nocase] [-latest_file_version]\n                 [-latest_hw_revision] [-filter <arg>] [-quiet] [-verbose]\n                 [<patterns>...]\n\nReturns: \nlist of board_part objects\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-regexp]               Patterns are full regular expressions\n  [-nocase]               Perform case-insensitive matching\n  [-latest_file_version]  Show only latest board parts by file version\n  [-latest_hw_revision]   Show only latest board parts by board revision\n  [-filter]               Filter list with expression\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  [<patterns>]            Match Board Part names against patterns\n                          Default: *\n                          Values: The default search pattern is the wildcard \n                          *, or .* when -regexp is specified.\n\nCategories: \nObject, Project, XPS, Board\n\nDescription:\n\n  Gets a list of available board parts in the board repository, as defined by\n  the Board Interface files available for use by the current project or\n  design.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The board part provides a representation of the Xilinx device in the\n  context of the board-level system, and is represented by the part0\n  component in the Board Interface file. The current_board_part command\n  returns the board part in use by the current project. Refer to the\n  current_board_part command for the different methods of defining the board\n  in use.\n\n  This command returns the list of available Xilinx devices (part0) in the\n  Board Interface files defined in the current board repository, or returns\n  an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -latest_file_version - (Optional) Return the board parts defined in the\n  latest version of the Board Interface file. There can be multiple versions\n  of the Board Interface file. This option returns the board parts in the\n  latest version only. Refer to the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895) for more information on the Board\n  Interface file.\n\n  -latest_hw_revision - (Optional) Return the board parts defined in the\n  latest compatible hardware revision of the board represented in the Board\n  Interface file. The board Interface file can represent multiple compatible\n  revisions of boards. This option only returns the latest revision.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_parts based on property values on the board parts. You can find\n  the properties on an object with the report_property or list_property\n  commands. Any property/value pair can be used as a filter. In the case of\n  the board part object, 'NAME', 'PART_NAME', and 'BOARD_NAME' are some of\n  the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match board parts against the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  board parts available for use in the project. More than one pattern can be\n  specified to find multiple boards based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the board parts matching the specified filter\n  search pattern:\n\n    get_board_parts -filter {BOARD_NAME=~z*} \n    \n\n  The following example returns all board parts matching the specified search\n  patterns:\n\n    get_board_parts {*av* *kc*} \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_part_interfaces\n   *  get_board_part_pins\n   *  list_property\n   *  report_property\n   *  set_property\n",
"remove_annotated_delay": "remove_annotated_delay\n\nDescription: \nremove annotated delay\n\nSyntax: \nremove_annotated_delay  [-from <args>] [-to <args>] [-all] [-of_objects <args>]\n                        [-quiet] [-verbose]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-from]        From pins or top level ports\n  [-to]          To pins or top level ports\n  [-all]         Specifies that all annotated delays are removed\n  [-of_objects]  List of timing arcs\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nTiming\n",
"save_constraints_as": "save_constraints_as\n\nDescription: \nSave current design's constraints as a new set of constraints files\n\nSyntax: \nsave_constraints_as  [-dir <arg>] [-target_constrs_file <arg>] [-quiet]\n                     [-verbose] <name>\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-dir]                  Directory to save constraints to\n  [-target_constrs_file]  Target constraints file for the new fileset\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  <name>                  Name of the new constraints fileset\n\nCategories: \nProject\n\nDescription:\n\n  Copies the active constraints set to create a new constraints set, with\n  local copies of any constraints files that are part of the constraints set.\n  You can also specify a new constraints file to use as the target for the\n  copied constraints set.\n\n  Use this command to save changes to the constraints in a design without\n  affecting the current constraints files. This allows you to do some\n  'what-if' type development of design constraints.\n\n  Note: The new constraint set created by the save_constraints_as command\n  will not be active in the design, although it will be referenced by the\n  design. To make the constraints set active you must set the constrset\n  property to point to the new constraints set for specific runs. See the\n  example below.\n\nArguments:\n\n  -dir <arg> - (Optional) The directory into which constraints files are\n  saved. If the directory is not specified, the new constraints set is\n  located in the project sources directory. The constraints files from the\n  active constraints set are copied into the specified directory.\n\n  -target_constrs_file <arg> - (Optional) Specifies a new target constraints\n  file for the new constraints fileset. If a path is not specified as part of\n  the file name, the file will be created in the fileset directory.\n\n  Note: You must specify the .xdc file extension, or the command will report\n  a warning that the filetype is invalid, and cannot be set to the target\n  constraint set. In this case, the existing target constraints file will be\n  used as the target.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the constraints set to write.\n\nExamples:\n\n  The following example saves the active constraints set into a new\n  constraints set called constrs_2, and copies any constraints files into the\n  specified directory, as well as creating a new target constraints file for\n  the constraints set:\n\n    save_constraints_as -dir C:/Data/con1 \\  \n       -target_constrs_file rev1.xdc constrs_2 \n    \n\n  The following example saves the active constraints set as a new constraints\n  set called newCon2, and copies any constraint files into the newCon2\n  constraint directory under project sources. The constrset property for the\n  specified synthesis and implementation runs are then set to point to the\n  new constraints set:\n\n    save_constraints_as newCon2  \n    set_property CONSTRSET newCon2 [get_runs synth_1]  \n    set_property CONSTRSET newCon2 [get_runs impl_1] \n    \n\n  Note: The constraints set is not active in the design until it has been set\n  to active for the current runs.\n\nSee Also:\n\n   *  save_constraints\n",
"report_qor_assessment": "report_qor_assessment\n\nDescription: \nFeasibility Checks\n\nSyntax: \nreport_qor_assessment  [-file <arg>] [-csv_output_dir <arg>] [-name <arg>]\n                       [-append] [-exclude_methodology_checks]\n                       [-max_paths <arg>] [-return_string]\n                       [-full_assessment_details] [-quiet] [-verbose]\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-file]                        Filename to output results to. (send output \n                                 to console if -file is not used)\n  [-csv_output_dir]              Reports directory consisting of RQA timing \n                                 paths.csv and dont touch.csv \n  [-name]                        Output the results to GUI panel with this \n                                 name\n  [-append]                      Append the results to file, do not overwrite\n                                 the results file\n  [-exclude_methodology_checks]  Methodology checks are skipped\n  [-max_paths]                   Number of paths to consider for suggestion \n                                 analysis\n                                 Default: 100\n  [-return_string]               Return report as string\n  [-full_assessment_details]     Show detailed table\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n\nCategories: \nFeasibility, Report, Timing\n\nDescription:\n\n  This command look for trouble spots in the design and assesses the\n  likelihood of a design meeting design goals. This command requires an open\n  elaborated, synthesized or implemented design for analysis.\n\n  The Report QoR Assessment covers multiple categories:\n\n   *  Design Methodology\n\n   *  Synthesis\n\n   *  Implementation\n\n   *  Design Hierarchy\n\n   *  Partial Reconfiguration\n\n   *  Floorplanning\n\n  The report_qor_assessment command includes a subset of report_methodology\n  checks identifying bad practices that can lead to an expected problem. Yet,\n  report_qor_assessment is also more comprehensive than report_methodology,\n  because it includes other checks that are not necessarily bad practices but\n  may have low success due to the structure, style, size, or complexity of\n  the current design.\n\n  A key feature of Report QOR Assessment is the ability to predict certain\n  conditions that lead to congestion and performance degradation. This\n  command can be run at any stage of the implementation flow after synthesis.\n  The report_qor_assessment command will return a score from 1 - 5, where 1\n  is a failing grade, and 5 means the design will likely pass implementation\n  and meet timing.\n\n  For violations found by Report QOR Assessment, the Report QOR Suggestions\n  command will make recommendations on how to avoid issues, or modify the\n  design to improve results.\n\nArguments:\n\n  -file <arg> - (Optional) Write the QOR Assessment report into the specified\n  file. The specified file will be overwritten if one already exists, unless\n  -append is also specified.\n\n  Note: If the path is not specified as part of the file name for either\n  -file or -csv, the file will be written into the current working directory\n  that can be identified using the [pwd] Tcl command.\n\n  -csv_output_dir - Directory to write supporting CSV files. CSV files contain:\n\n   *  Timing path details and show suggestions that are applicable to the\n      timing path.\n\n   *  Cells and nets with DONT_TOUCH properties\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -exclude_methodology_checks - (Optional) By default, methodology checks are\n  included in the report. This switch prevents methodology checks being\n  reported and reduces the time taken to execute the command.\n\n  -report_all_suggestions - (Optional) When running report_qor_assessment\n  followed by report_qor_suggestions, this option should match in both\n  commands to reduce the compile time.\n\n  -max_paths <arg> - (Optional) Specify the number of critical paths to\n  analyze. The default is the 100 worst timing paths.\n\n  -full_assessment_details - (Optional) In the Details table, report items\n  that have passed the checks performed.\n\n  -return_string - (Optional) Direct the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  -name - (Optional) Specifies the name of the results set for the GUI.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Report suggestions after analyzing the worst 10 paths.\n\n    report_qor_assessment -max_paths 10\n\nSee Also:\n\n   *  report_design_analysis\n   *  report_qor_suggestions\n",
"create_net": "create_net\n\nDescription: \nCreate nets in the current design\n\nSyntax: \ncreate_net  [-from <arg>] [-to <arg>] [-quiet] [-verbose] <nets>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-from]     Starting bus index\n  [-to]       Ending bus index\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <nets>      Names of nets to create\n\nCategories: \nNetlist\n\nDescription:\n\n  Create new nets in the current netlist of an open Synthesized or\n  Implemented Design.\n\n  Note: You cannot add nets to library macros, or macro-primitives.\n\n  Nets can be created hierarchically from the top-level of the design, or\n  within any level of the hierarchy by specifying the hierarchical net name.\n\n  Bus nets can be created with increasing or decreasing bus indexes, using\n  negative and positive index values.\n\n  New nets are unconnected in the netlist at the time of creation. You must\n  connect nets as desired using the connect_net command. Connected nets can\n  be unconnected using the disconnect_net command, and can be removed from\n  the netlist using the remove_net command.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -from <arg> - (Optional) The starting index of a new bus.\n\n  -to <arg> - (Optional) The ending index of a new bus.\n\n  Note: Specifying -from or -to without the other will results in a one-bit\n  bus with index value specified by the -from or -to argument.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <nets> - (Required) The names of nets to create. Net names can be specified\n  from the top-level, as name only (net1), or can be specified within the\n  design hierarchy by specifying the hierarchical net name\n  (cell1/cellA/net1).\n\nExample:\n\n  The following example creates a new 24-bit bus in the current Synthesized\n  or Implemented Design:\n\n    create_net tempBus -from 23 -to 0 \n    \n\nSee Also:\n\n   *  connect_net\n   *  create_pin\n   *  create_port\n   *  disconnect_net\n   *  get_nets\n   *  remove_net\n   *  resize_net_bus\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"generate_switch_network_for_noc": "generate_switch_network_for_noc\n\nDescription: \nGenerate switch network and simulation wrapper for NoC\n\nSyntax: \ngenerate_switch_network_for_noc  [-mode <arg>] [-type <arg>] [-quiet]\n                                 [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-mode]     Simulation mode. Values: behavioral, post-synthesis, \n              post-implementation\n              Default: behavioral\n  [-type]     Netlist type. Values: functional, timing. This is only \n              applicable when mode is set to post-synthesis or post-impleme  \n                ntation\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nToolLaunch, Simulation\n",
"report_delay_model": "report_delay_model\n\nDescription: \nReport settings affecting timing analysis\n\nSyntax: \nreport_delay_model  [-file <arg>] [-append] [-return_string] [-all] [-quiet]\n                    [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Output the results to file\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-return_string]  return report as string\n  [-all]            report all configuration settings (by default, only the \n                    typically important settings are reported\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  This command reports the configuration setting that affect delay\n  calculation for the current design. The command requires an open\n  synthesized or implemented design. Delay configuration settings include\n  delay models used for interconnect delays and cell delays.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to a file or returned as a string\n  if desired.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -all - (Optional) Report all configuration settings affecting the delay\n  calculation for the design. By default, only typically important settings\n  are reported.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example shows all of the delay model configuration settings\n  for the current design:\n\n    report_delay_model -all \n    \n\nSee Also:\n\n   *  report_timing\n   *  report_timing_summary\n",
"config_run": "config_run\n\nDescription: \nConfigure individual program options for a run\n\nSyntax: \nconfig_run  [-quiet] [-verbose] <run> <program> <option> <value>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <run>       Run to modify\n  <program>   Name of the program to set an option for\n  <option>    Name of option to set\n  <value>     Value of the argument to set for the option\n\nCategories: \nProject\n\nDescription:\n\n  Configures the various settings and options of a synthesis or\n  implementation run for use in the tool. The run can be created with the use\n  of the create_run command, and can be launched with launch_runs.\n\n  The config_run command defines the value of a single option for a specified\n  synthesis or implementation program. You will need multiple config_run\n  statements to define all of the various options needed to configure XST for\n  synthesis, or NGDBUILD, MAP, PAR, and TRACE for implementation.\n\n  Refer to the XST User Guide (UG627) and the Command-Line Tools User Guide\n  (UG628) for more information on each of these tools and the various\n  required and optional settings that can be configured.\n\nArguments:\n\n  <run> - The name of the synthesis or implementation run to be configured.\n\n  -program <arg> - The program name the defined and <value> apply to. Program\n  names are case sensitive. For the ISE tools, the programs are xst for\n  synthesis runs, and ngdbuild, map, par, or trce for implementation runs.\n\n  Note: For the Vivado tool flow, the programs are rds for synthesis, and\n  place_design and route_design for implementation.\n\n  -option <arg> - A single command line option for the specified program.\n  Refer to the XST User Guide (UG627) for supported synthesis options, and\n  the Command-Line Tools User Guide (UG628) for supported implementation\n  options.\n\n  -value <arg> - The value for the defined tool option. Refer to the XST User\n  Guide (UG627) for allowed values for the specified synthesis options, and\n  to the Command-Line Tools User Guide (UG628) for allowed values for the\n  specified implementation options.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example configures the impl_1 run, setting options for\n  NGDBUILD, MAP and PAR:\n\n    \n    config_run impl_1 -program ngdbuild -option -aul -value true  \n    config_run impl_1 -program map -option -pr -value b  \n    config_run impl_1 -program map -option -cm -value speed  \n    config_run impl_1 -program map -option -ignore_keep_hierarchy -value true  \n    config_run impl_1 -program par -option -pl -value high  \n    config_run impl_1 -program par -option -r -value true  \n    config_run impl_1 -program ngdbuild -option -aut -value true  \n     \n    \n\n  The following example configures the synth_1 run, setting options for\n  Vivado Synthesis:\n\n    config_run synth_1 -program rds -option -flatten_hierarchy -value auto  \n    config_run synth_1 -program rds -option -gated_clock_conversion -value on  \n    config_run synth_1 -program rds -option -iob -value false  \n    config_run synth_1 -program rds -option -bufg -value 8  \n    config_run synth_1 -program rds -option -fanout_limit -value 200 \n    \n\nSee Also:\n\n   *  create_run\n\n   *  current_run\n\n   *  launch_runs\n",
"chan": "chan(n)               Tcl Built-In Commands               chan(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       chan - Read, write and manipulate channels\n\nSYNOPSIS\n       chan option ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This command provides several operations for reading from,\n       writing to and otherwise manipulating open channels  (such\n       as have been created with the open and socket commands, or\n       the default named channels stdin, stdout or  stderr  which\n       correspond  to  the  process's  standard input, output and\n       error streams respectively).  Option indicates what to  do\n       with  the  channel;  any unique abbreviation for option is\n       acceptable. Valid options are:\n\n       chan blocked channelId\n              This tests whether the last input operation on  the\n              channel  called  channelId  failed because it would\n              have otherwise caused the  process  to  block,  and\n              returns 1 if that was the case. It returns 0 other-\n              wise. Note that this only ever returns 1  when  the\n              channel has been configured to be non-blocking; all\n              Tcl channels have blocking turned on by default.\n\n       chan close channelId\n              Close and destroy  the  channel  called  channelId.\n              Note  that  this  deletes  all existing file-events\n              registered on the channel.\n\n              As part of closing the channel, all buffered output\n              is  flushed  to  the  channel's  output device, any\n              buffered input is discarded, the underlying operat-\n              ing system resource is closed and channelId becomes\n              unavailable for future use.\n\n              If the channel is blocking, the  command  does  not\n              return until all output is flushed.  If the channel\n              is nonblocking and there is unflushed  output,  the\n              channel  remains open and the command returns imme-\n              diately; output will be flushed in  the  background\n              and  the channel will be closed when all the flush-\n              ing is complete.\n\n              If channelId is a blocking channel  for  a  command\n              pipeline  then  chan close waits for the child pro-\n              cesses to complete.\n\n              If the channel is shared between interpreters, then\n              chan  close  makes  channelId  unavailable  in  the\n              invoking interpreter but has no other effect  until\n              all  of  the  sharing  interpreters have closed the\n              channel. When the last  interpreter  in  which  the\n              channel   is  registered  invokes  chan  close  (or\n              close), the cleanup actions described above  occur.\n              See the interp command for a description of channel\n              sharing.\n\n              Channels   are   automatically   closed   when   an\n              interpreter  is  destroyed  and  when  the  process\n              exits.  Channels are switched to blocking mode,  to\n              ensure  that all output is correctly flushed before\n              the process exits.\n\n              The command returns an empty string, and may gener-\n              ate an error if an error occurs while flushing out-\n              put.  If a command in a  command  pipeline  created\n              with open returns an error, chan close generates an\n              error (similar to the exec command.)\n\n       chan configure channelId ?optionName? ?value?  ?optionName\n       value?...\n              Query or set the configuration options of the chan-\n              nel named channelId.\n\n              If  no  optionName or value arguments are supplied,\n              the command returns a list  containing  alternating\n              option  names  and  values  for  the  channel.   If\n              optionName is supplied but no value then  the  com-\n              mand returns the current value of the given option.\n              If one or more pairs of optionName  and  value  are\n              supplied,  the  command  sets  each  of  the  named\n              options to the corresponding value;  in  this  case\n              the return value is an empty string.\n\n              The  options  described below are supported for all\n              channels. In addition, each channel  type  may  add\n              options that only it supports. See the manual entry\n              for the command that creates each type of  channels\n              for  the options that that specific type of channel\n              supports. For example, see the manual entry for the\n              socket command for its additional options.\n\n              -blocking boolean\n                     The  -blocking option determines whether I/O\n                     operations on the channel can cause the pro-\n                     cess  to  block  indefinitely.  The value of\n                     the option must be a proper  boolean  value.\n                     Channels are normally in blocking mode; if a\n                     channel is placed into nonblocking  mode  it\n                     will  affect the operation of the chan gets,\n                     chan read, chan puts, chan flush,  and  chan\n                     close  commands;  see  the documentation for\n                     those commands for details.  For nonblocking\n                     mode to work correctly, the application must\n                     be using the Tcl event loop (e.g. by calling\n                     Tcl_DoOneEvent  or  invoking  the vwait com-\n                     mand).\n\n              -buffering newValue\n                     If newValue is full then the I/O system will\n                     buffer  output  until its internal buffer is\n                     full or until  the  chan  flush  command  is\n                     invoked.  If  newValue is line, then the I/O\n                     system will automatically flush  output  for\n                     the  channel whenever a newline character is\n                     output. If newValue is none, the I/O  system\n                     will  flush automatically after every output\n                     operation.  The default is for -buffering to\n                     be set to full except for channels that con-\n                     nect to  terminal-like  devices;  for  these\n                     channels the initial setting is line.  Addi-\n                     tionally, stdin and stdout are initially set\n                     to line, and stderr is set to none.\n\n              -buffersize newSize\n                     Newvalue  must  be  an integer; its value is\n                     used to set the size of buffers,  in  bytes,\n                     subsequently  allocated  for this channel to\n                     store input or output. Newvalue  must  be  a\n                     number of no more than one million, allowing\n                     buffers of up to one million bytes in  size.\n\n              -encoding name\n                     This  option is used to specify the encoding\n                     of the channel as one of the named encodings\n                     returned  by  encoding  names or the special\n                     value binary, so that the data can  be  con-\n                     verted  to  and from Unicode for use in Tcl.\n                     For instance, in order for Tcl to read char-\n                     acters  from a Japanese file in shiftjis and\n                     properly process and display  the  contents,\n                     the  encoding  would  be  set  to  shiftjis.\n                     Thereafter, when reading from  the  channel,\n                     the bytes in the Japanese file would be con-\n                     verted to Unicode as they are read.  Writing\n                     is also supported - as Tcl strings are writ-\n                     ten to the channel they  will  automatically\n                     be  converted  to  the specified encoding on\n                     output.\n\n                     If a file contains  pure  binary  data  (for\n                     instance,  a  JPEG  image), the encoding for\n                     the  channel  should  be  configured  to  be\n                     binary.  Tcl will then assign no interpreta-\n                     tion to the data in the file and simply read\n                     or  write raw bytes.  The Tcl binary command\n                     can be used to manipulate this byte-oriented\n                     data.   It  is  usually  better  to  set the\n                     -translation option to binary when you  want\n                     to  transfer  binary data, as this turns off\n                     the other automatic interpretations  of  the\n                     bytes in the stream as well.\n\n                     The  default encoding for newly opened chan-\n                     nels is the same platform- and locale-depen-\n                     dent  system  encoding  used for interfacing\n                     with the operating system,  as  returned  by\n                     encoding system.\n\n              -eofchar char\n\n              -eofchar {inChar outChar}\n                     This  option  supports DOS file systems that\n                     use Control-z  (\\x1a)  as  an  end  of  file\n                     marker.   If  char  is  not an empty string,\n                     then this character signals end-of-file when\n                     it is encountered during input.  For output,\n                     the end-of-file character is output when the\n                     channel  is  closed.   If  char is the empty\n                     string, then there is no special end of file\n                     character  marker.  For read-write channels,\n                     a two-element list specifies the end of file\n                     marker  for  input and output, respectively.\n                     As a convenience, when setting  the  end-of-\n                     file  character for a read-write channel you\n                     can specify a single value that  will  apply\n                     to  both reading and writing.  When querying\n                     the end-of-file character  of  a  read-write\n                     channel,  a  two-element list will always be\n                     returned.  The default value for -eofchar is\n                     the  empty  string  in  all cases except for\n                     files  under  Windows.   In  that  case  the\n                     -eofchar is Control-z (\\x1a) for reading and\n                     the empty string for writing.   The  accept-\n                     able  range  for  -eofchar  values is \\x01 -\n                     \\x7f; attempting to set -eofchar to a  value\n                     outside  of  this  range  will  generate  an\n                     error.\n\n              -translation mode\n\n              -translation {inMode outMode}\n                     In Tcl scripts the end of a line  is  always\n                     represented using a single newline character\n                     (\\n).  However, in actual files and  devices\n                     the end of a line may be represented differ-\n                     ently on different platforms,  or  even  for\n                     different devices on the same platform.  For\n                     example, under UNIX  newlines  are  used  in\n                     files,    whereas   carriage-return-linefeed\n                     sequences are normally used in network  con-\n                     nections.   On  input  (i.e., with chan gets\n                     and chan read) the Tcl I/O system  automati-\n                     cally  translates  the  external end-of-line\n                     representation  into   newline   characters.\n                     Upon  output (i.e., with chan puts), the I/O\n                     system translates newlines to  the  external\n                     end-of-line   representation.   The  default\n                     translation mode, auto, handles all the com-\n                     mon  cases  automatically, but the -transla-\n                     tion option provides explicit  control  over\n                     the end of line translations.\n\n                     The  value associated with -translation is a\n                     single item  for  read-only  and  write-only\n                     channels.   The  value is a two-element list\n                     for read-write channels; the  read  transla-\n                     tion  mode is the first element of the list,\n                     and the write translation mode is the second\n                     element.  As a convenience, when setting the\n                     translation mode for  a  read-write  channel\n                     you  can  specify  a  single value that will\n                     apply to both  reading  and  writing.   When\n                     querying  the  translation  mode  of a read-\n                     write  channel,  a  two-element  list   will\n                     always  be  returned.   The following values\n                     are currently supported:\n\n                      auto   As the input translation mode,  auto\n                             treats any of newline (lf), carriage\n                             return (cr), or carriage return fol-\n                             lowed by a newline (crlf) as the end\n                             of line representation.  The end  of\n                             line  representation can even change\n                             from line-to-line, and all cases are\n                             translated  to  a  newline.   As the\n                             output   translation   mode,    auto\n                             chooses  a  platform specific repre-\n                             sentation; for sockets on all  plat-\n                             forms Tcl chooses crlf, for all Unix\n                             flavors, it chooses lf, and for  the\n                             various   flavors   of   Windows  it\n                             chooses crlf.  The  default  setting\n                             for  -translation  is  auto for both\n                             input and output.\n\n                      binary No end-of-line translations are per-\n                             formed.  This is nearly identical to\n                             lf mode,  except  that  in  addition\n                             binary  mode  also  sets the end-of-\n                             file character to the  empty  string\n                             (which  disables  it)  and  sets the\n                             encoding to binary  (which  disables\n                             encoding    filtering).    See   the\n                             description of -eofchar and  -encod-\n                             ing for more information.\n\n                      cr     The  end of a line in the underlying\n                             file or device is represented  by  a\n                             single  carriage  return  character.\n                             As the input  translation  mode,  cr\n                             mode  converts  carriage  returns to\n                             newline characters.  As  the  output\n                             translation mode, cr mode translates\n                             newline   characters   to   carriage\n                             returns.\n\n                      crlf   The  end of a line in the underlying\n                             file or device is represented  by  a\n                             carriage  return  character followed\n                             by a  linefeed  character.   As  the\n                             input  translation  mode,  crlf mode\n                             converts    carriage-return-linefeed\n                             sequences to newline characters.  As\n                             the output  translation  mode,  crlf\n                             mode  translates  newline characters\n                             to          carriage-return-linefeed\n                             sequences.   This  mode is typically\n                             used on Windows  platforms  and  for\n                             network connections.\n\n                      lf     The  end of a line in the underlying\n                             file or device is represented  by  a\n                             single newline (linefeed) character.\n                             In this mode no  translations  occur\n                             during either input or output.  This\n                             mode is typically used on UNIX plat-\n                             forms.\n\n       chan  copy  inputChan  outputChan  ?-size  size? ?-command\n       callback?\n              Copy  data  from  the channel inputChan, which must\n              have been opened for reading, to the  channel  out-\n              putChan,  which  must have been opened for writing.\n              The chan copy command leverages  the  buffering  in\n              the  Tcl  I/O  system  to avoid extra copies and to\n              avoid buffering too much data in main  memory  when\n              copying  large files to slow destinations like net-\n              work sockets.\n\n              The chan copy command transfers data from inputChan\n              until  end  of  file or size bytes have been trans-\n              ferred. If no -size argument  is  given,  then  the\n              copy  goes  until  end  of file.  All the data read\n              from inputChan is copied  to  outputChan.   Without\n              the  -command  option,  chan  copy blocks until the\n              copy is complete and returns the  number  of  bytes\n              written to outputChan.\n\n              The  -command  argument makes chan copy work in the\n              background.  In this case  it  returns  immediately\n              and  the  callback  is  invoked later when the copy\n              completes.  The callback is called with one or  two\n              additional  arguments that indicates how many bytes\n              were written to outputChan.  If an  error  occurred\n              during  the background copy, the second argument is\n              the error string associated with the error.  With a\n              background   copy,  it  is  not  necessary  to  put\n              inputChan or outputChan into non-blocking mode; the\n              chan copy command takes care of that automatically.\n              However, it is necessary to enter the event loop by\n              using the vwait command or by using Tk.\n\n              You are not allowed to do other I/O operations with\n              inputChan or outputChan during  a  background  chan\n              copy.  If either inputChan or outputChan get closed\n              while the copy is in progress, the current copy  is\n              stopped  and  the command callback is not made.  If\n              inputChan is closed, then all data  already  queued\n              for outputChan is written out.\n\n              Note  that  inputChan  can become readable during a\n              background copy.  You  should  turn  off  any  chan\n              event  or  fileevent  handlers  during a background\n              copy so those handlers do not  interfere  with  the\n              copy.   Any  I/O  attempted  by  a  chan  event  or\n              fileevent handler will get a 'channel busy'  error.\n\n              Chan   copy  translates  end-of-line  sequences  in\n              inputChan and outputChan according to the -transla-\n              tion  option for these channels (see chan configure\n              above).  The translations mean that the  number  of\n              bytes read from inputChan can be different than the\n              number of bytes written to  outputChan.   Only  the\n              number  of bytes written to outputChan is reported,\n              either as the return value of  a  synchronous  chan\n              copy  or  as  the  argument  to the callback for an\n              asynchronous chan copy.\n\n              Chan copy obeys the encodings and character  trans-\n              lations  configured  for  the  channels. This means\n              that the incoming characters are  converted  inter-\n              nally first UTF-8 and then into the encoding of the\n              channel chan copy writes  to  (see  chan  configure\n              above for details on the -encoding and -translation\n              options). No conversion is done  if  both  channels\n              are set to encoding binary and have matching trans-\n              lations. If only  the  output  channel  is  set  to\n              encoding  binary the system will write the internal\n              UTF-8 representation of the incoming characters. If\n              only  the  input  channel is set to encoding binary\n              the system will assume that the incoming bytes  are\n              valid  UTF-8  characters and convert them according\n              to the output encoding. The behaviour of the system\n              for  bytes  which are not valid UTF-8 characters is\n              undefined in this case.\n\n       chan create mode cmdPrefix\n              This subcommand creates a new script level  channel\n              using  the command prefix cmdPrefix as its handler.\n              Any such channel is called a reflected channel. The\n              specified command prefix, cmdPrefix, must be a non-\n              empty list, and should provide the API described in\n              the  reflectedchan  manual  page. The handle of the\n              new channel is returned as the result of  the  chan\n              create command, and the channel is open. Use either\n              close or chan close to remove the channel.\n\n              The argument mode specifies if the new  channel  is\n              opened  for reading, writing, or both. It has to be\n              a list containing any  of  the  strings  'read'  or\n              'write'.   The list must have at least one element,\n              as a channel you can neither write to nor read from\n              makes  no  sense.  The  handler command for the new\n              channel must support the chosen mode, or  an  error\n              is thrown.\n\n              The command prefix is executed in the global names-\n              pace, at the  top  of  call  stack,  following  the\n              appending of arguments as described in the reflect-\n              edchan manual page. Command resolution  happens  at\n              the  time  of  the  call.  Renaming the command, or\n              destroying it means that the next call of a handler\n              method may fail, causing the channel command invok-\n              ing the handler to fail as well. Depending  on  the\n              subcommand being invoked, the error message may not\n              be able to explain the reason for that failure.\n\n              Every channel created with  this  subcommand  knows\n              which  interpreter it was created in, and only ever\n              executes its handler command in  that  interpreter,\n              even  if  the  channel  was  shared with and/or was\n              moved into a different interpreter. Each  reflected\n              channel  also  knows  the thread it was created in,\n              and executes  its  handler  command  only  in  that\n              thread,  even  if the channel was moved into a dif-\n              ferent thread. To this end all invocations  of  the\n              handler  are  forwarded  to  the original thread by\n              posting special events to it. This means  that  the\n              original  thread (i.e. the thread that executed the\n              chan create command)  must  have  an  active  event\n              loop,  i.e. it must be able to process such events.\n              Otherwise the thread sending them will block indef-\n              initely. Deadlock may occur.\n\n              Note  that  this  permits the creation of a channel\n              whose two endpoints live in two different  threads,\n              providing  a  stream-oriented  bridge between these\n              threads. In other words, we can provide a  way  for\n              regular   stream   communication   between  threads\n              instead of having to send commands.\n\n              When a thread or interpreter is deleted, all  chan-\n              nels  created  with  this subcommand and using this\n              thread/interpreter  as  their  computing  base  are\n              deleted as well, in all interpreters they have been\n              shared with or moved into, and in  whatever  thread\n              they  have been transfered to. While this pulls the\n              rug out under the  other  thread(s)  and/or  inter-\n              preter(s),  this  cannot  be avoided. Trying to use\n              such a channel will cause the generation of a regu-\n              lar error about unknown channel handles.\n\n              This subcommand is safe and made accessible to safe\n              interpreters.  While it arranges for the  execution\n              of  arbitrary  Tcl  code the system also makes sure\n              that the code is always executed  within  the  safe\n              interpreter.\n\n       chan eof channelId\n              Test  whether the last input operation on the chan-\n              nel called channelId failed because the end of  the\n              data stream was reached, returning 1 if end-of-file\n              was reached, and 0 otherwise.\n\n       chan event channelId event ?script?\n              Arrange for the Tcl script script to  be  installed\n              as  a  file event handler to be called whenever the\n              channel called channelId enters the state described\n              by   event   (which  must  be  either  readable  or\n              writable); only one such handler may  be  installed\n              per  event per channel at a time.  If script is the\n              empty string, the current handler is deleted  (this\n              also happens if the channel is closed or the inter-\n              preter deleted).  If script is  omitted,  the  cur-\n              rently  installed  script  is returned (or an empty\n              string if no such handler is installed).  The call-\n              back  is  only performed if the event loop is being\n              serviced (e.g. via vwait or update).\n\n              A file event handler is a binding between a channel\n              and  a  script,  such  that the script is evaluated\n              whenever the channel becomes readable or  writable.\n              File event handlers are most commonly used to allow\n              data to be received  from  another  process  on  an\n              event-driven  basis,  so that the receiver can con-\n              tinue to interact with the user or with other chan-\n              nels  while  waiting for the data to arrive.  If an\n              application invokes chan gets or  chan  read  on  a\n              blocking channel when there is no input data avail-\n              able, the process will block; until the input  data\n              arrives,  it  will  not  be  able  to service other\n              events, so it will appear to the  user  to  'freeze\n              up'.   With  chan  event, the process can tell when\n              data is present and only invoke chan gets  or  chan\n              read when they will not block.\n\n              A  channel is considered to be readable if there is\n              unread data available on the underlying device.   A\n              channel  is also considered to be readable if there\n              is unread data in an input buffer,  except  in  the\n              special  case where the most recent attempt to read\n              from the channel was a chan gets  call  that  could\n              not find a complete line in the input buffer.  This\n              feature allows a file to be read a line at  a  time\n              in  nonblocking  mode  using  events.  A channel is\n              also considered to be readable if an end of file or\n              error  condition  is present on the underlying file\n              or device.  It is important for script to check for\n              these conditions and handle them appropriately; for\n              example, if there is no special check  for  end  of\n              file, an infinite loop may occur where script reads\n              no data, returns, and is immediately invoked again.\n\n              A  channel is considered to be writable if at least\n              one byte of data can be written to  the  underlying\n              file  or  device  without  blocking, or if an error\n              condition is present  on  the  underlying  file  or\n              device.   Note  that client sockets opened in asyn-\n              chronous mode become writable when they become con-\n              nected or if the connection fails.\n\n              Event-driven  I/O works best for channels that have\n              been placed into nonblocking  mode  with  the  chan\n              configure  command.   In blocking mode, a chan puts\n              command may block if you give it more data than the\n              underlying  file  or  device can accept, and a chan\n              gets or chan read command will block if you attempt\n              to  read more data than is ready; no events will be\n              processed while the commands block.  In nonblocking\n              mode  chan  puts,  chan  read,  and chan gets never\n              block.\n\n              The script for a file event is executed  at  global\n              level (outside the context of any Tcl procedure) in\n              the interpreter in which the chan event command was\n              invoked.   If  an  error occurs while executing the\n              script then  the  command  registered  with  interp\n              bgerror  is used to report the error.  In addition,\n              the file  event  handler  is  deleted  if  it  ever\n              returns  an error; this is done in order to prevent\n              infinite loops due to buggy handlers.\n\n       chan flush channelId\n              Ensures that all pending  output  for  the  channel\n              called channelId is written.\n\n              If the channel is in blocking mode the command does\n              not return until all the buffered output  has  been\n              flushed  to  the channel. If the channel is in non-\n              blocking mode, the command may  return  before  all\n              buffered  output  has  been  flushed; the remainder\n              will be flushed in the background as  fast  as  the\n              underlying file or device is able to absorb it.\n\n       chan gets channelId ?varName?\n              Reads  the  next line from the channel called chan-\n              nelId. If varName is not specified, the  result  of\n              the  command  will  be  the line that has been read\n              (without a trailing newline character) or an  empty\n              string  upon  end-of-file or, in non-blocking mode,\n              if the data available is exhausted. If  varName  is\n              specified,  the  line  that  has  been read will be\n              written to the variable called varName  and  result\n              will  be  the  number  of characters that have been\n              read or -1 if end-of-file was reached or,  in  non-\n              blocking  mode, if the data available is exhausted.\n\n              If an end-of-file occurs  while  part  way  through\n              reading  a  line, the partial line will be returned\n              (or written into  varName).  When  varName  is  not\n              specified,  the  end-of-file  case  can  be distin-\n              guished from an empty line using the chan eof  com-\n              mand, and the partial-line-but-nonblocking case can\n              be distinguished with the chan blocked command.\n\n       chan names ?pattern?\n              Produces a list of all channel names. If pattern is\n              specified,  only  those channel names that match it\n              (according to the rules of string  match)  will  be\n              returned.\n\n       chan pending mode channelId\n              Depending  on  whether  mode  is  input  or output,\n              returns the number of  bytes  of  input  or  output\n              (respectively)  currently  buffered  internally for\n              channelId (especially useful in  a  readable  event\n              callback  to  impose application-specific limits on\n              input line lengths to avoid a potential  denial-of-\n              service  attack  where  a  hostile  user  crafts an\n              extremely long line that exceeds the available mem-\n              ory  to  buffer it).  Returns -1 if the channel was\n              not opened for the mode in question.\n\n       chan postevent channelId eventSpec\n              This subcommand is used by command handlers  speci-\n              fied  with  chan  create.  It  notifies the channel\n              represented  by  the  handle  channelId  that   the\n              event(s) listed in the eventSpec have occurred. The\n              argument has to be a list  containing  any  of  the\n              strings  read  and  write. The list must contain at\n              least one element as it  does  not  make  sense  to\n              invoke  the command if there are no events to post.\n\n              Note that this subcommand can  only  be  used  with\n              channel  handles  that  were created/opened by chan\n              create. All other channels will cause this  subcom-\n              mand to report an error.\n\n              As  only  the Tcl level of a channel, i.e. its com-\n              mand handler, should post  events  to  it  we  also\n              restrict  the  usage  of this command to the inter-\n              preter that created the channel.  In  other  words,\n              posting  events  to  a  reflected  channel  from an\n              interpreter that does not contain it's  implementa-\n              tion  is  not  allowed. Attempting to post an event\n              from any other interpreter will cause this  subcom-\n              mand to report an error.\n\n              Another  restriction  is that it is not possible to\n              post events that the I/O core has not registered an\n              interest  in. Trying to do so will cause the method\n              to throw an error. See the command  handler  method\n              watch  described  in  reflectedchan,  the  document\n              specifying  the  API  of   command   handlers   for\n              reflected channels.\n\n              This  command  is  safe and made accessible to safe\n              interpreters.  It can trigger the execution of chan\n              event  handlers, whether in the current interpreter\n              or in other interpreters  or  other  threads,  even\n              where  the  event is posted from a safe interpreter\n              and listened for by  a  trusted  interpreter.  Chan\n              event  handlers  are  always executed in the inter-\n              preter that set them up.\n\n       chan puts ?-nonewline? ?channelId? string\n              Writes string to the channel named  channelId  fol-\n              lowed  by  a  newline character. A trailing newline\n              character  is  written  unless  the  optional  flag\n              -nonewline  is  given. If channelId is omitted, the\n              string is written to the standard  output  channel,\n              stdout.\n\n              Newline  characters in the output are translated by\n              chan   puts   to   platform-specific    end-of-line\n              sequences  according  to  the  currently configured\n              value of the -translation option  for  the  channel\n              (for example, on PCs newlines are normally replaced\n              with carriage-return-linefeed sequences;  see  chan\n              configure above for details).\n\n              Tcl  buffers output internally, so characters writ-\n              ten with chan puts may not  appear  immediately  on\n              the  output file or device; Tcl will normally delay\n              output until the buffer is full or the  channel  is\n              closed.  You can force output to appear immediately\n              with the chan flush command.\n\n              When the output buffer fills up, the chan puts com-\n              mand  will  normally  block  until all the buffered\n              data has been accepted for output by the  operating\n              system.   If  channelId is in nonblocking mode then\n              the chan puts command will not block  even  if  the\n              operating  system cannot accept the data.  Instead,\n              Tcl continues to buffer the data and writes  it  in\n              the  background  as  fast as the underlying file or\n              device can accept it.  The application must use the\n              Tcl event loop for nonblocking output to work; oth-\n              erwise Tcl never finds out that the file or  device\n              is  ready for more output data.  It is possible for\n              an arbitrarily large amount of data to be  buffered\n              for a channel in nonblocking mode, which could con-\n              sume a large amount of memory.   To  avoid  wasting\n              memory,  nonblocking I/O should normally be used in\n              an event-driven fashion with the chan event command\n              (do  not  invoke chan puts unless you have recently\n              been notified via a file event that the channel  is\n              ready for more output data).\n\n       chan read channelId ?numChars?\n\n       chan read ?-nonewline? channelId\n              In the first form, the result will be the next num-\n              Chars characters read from the channel named  chan-\n              nelId; if numChars is omitted, all characters up to\n              the point when the channel would signal  a  failure\n              (whether  an  end-of-file,  blocked  or other error\n              condition) are read. In the second form (i.e.  when\n              numChars  has been omitted) the flag -nonewline may\n              be given to indicate that any trailing  newline  in\n              the string that has been read should be trimmed.\n\n              If  channelId is in nonblocking mode, chan read may\n              not read as many characters as requested: once  all\n              available  input  has  been  read, the command will\n              return the  data  that  is  available  rather  than\n              blocking for more input.  If the channel is config-\n              ured to use a multi-byte encoding, then  there  may\n              actually  be  some  bytes remaining in the internal\n              buffers that do  not  form  a  complete  character.\n              These  bytes  will not be returned until a complete\n              character is available or end-of-file  is  reached.\n              The  -nonewline  switch  is  ignored if the command\n              returns before reaching the end of the file.\n\n              Chan read translates end-of-line sequences  in  the\n              input  into  newline  characters  according  to the\n              -translation option for the channel (see chan  con-\n              figure  above for a discussion on the ways in which\n              chan configure will alter input).\n\n              When reading from a serial port, most  applications\n              should configure the serial port channel to be non-\n              blocking, like this:\n                     chan configure channelId -blocking 0.\n              Then chan read behaves much like  described  above.\n              Note that most serial ports are comparatively slow;\n              it is entirely possible to get a readable event for\n              each  character  read from them. Care must be taken\n              when using chan read on blocking serial ports:\n\n              chan read channelId numChars\n                     In this form chan read blocks until numChars\n                     have been received from the serial port.\n\n              chan read channelId\n                     In  this  form  chan  read  blocks until the\n                     reception of the end-of-file character,  see\n                     chan configure -eofchar. If there no end-of-\n                     file character has been configured  for  the\n                     channel,  then chan read will block forever.\n\n       chan seek channelId offset ?origin?\n              Sets the current access position within the  under-\n              lying  data  stream for the channel named channelId\n              to be offset bytes relative to origin. Offset  must\n              be  an  integer  (which may be negative) and origin\n              must be one of the following:\n\n              start     The new access position  will  be  offset\n                        bytes  from  the  start of the underlying\n                        file or device.\n\n              current   The new access position  will  be  offset\n                        bytes from the current access position; a\n                        negative offset moves the access position\n                        backwards   in  the  underlying  file  or\n                        device.\n\n              end       The new access position  will  be  offset\n                        bytes from the end of the file or device.\n                        A negative offset places the access posi-\n                        tion  before the end of file, and a posi-\n                        tive offset places  the  access  position\n                        after the end of file.\n\n              The origin argument defaults to start.\n\n              Chan seek flushes all buffered output for the chan-\n              nel before the command returns, even if the channel\n              is  in  nonblocking  mode.   It  also  discards any\n              buffered and unread input.  This command returns an\n              empty  string.   An error occurs if this command is\n              applied to channels whose underlying file or device\n              does not support seeking.\n\n              Note that offset values are byte offsets, not char-\n              acter offsets.  Both chan seek and chan tell  oper-\n              ate  in terms of bytes, not characters, unlike chan\n              read.\n\n       chan tell channelId\n              Returns a number giving the current access position\n              within  the  underlying data stream for the channel\n              named channelId. This value returned is a byte off-\n              set that can be passed to chan seek in order to set\n              the channel to a particular  position.   Note  that\n              this  value  is  in  terms of bytes, not characters\n              like chan read.  The value returned is -1 for chan-\n              nels that do not support seeking.\n\n       chan truncate channelId ?length?\n              Sets  the byte length of the underlying data stream\n              for the channel named channelId to be length (or to\n              the  current byte offset within the underlying data\n              stream  if  length  is  omitted).  The  channel  is\n              flushed before truncation.\n\nEXAMPLE\n       This  opens  a file using a known encoding (CP1252, a very\n       common  encoding  on  Windows),  searches  for  a  string,\n       rewrites that part, and truncates the file after a further\n       two lines.\n\n              set f [open somefile.txt r+]\n              chan configure $f -encoding cp1252\n              set offset 0\n\n              # Search for string 'FOOBAR' in the file\n              while {[chan gets $f line] >= 0} {\n                 set idx [string first FOOBAR $line]\n                 if {$idx > -1} {\n                    # Found it; rewrite line\n\n                    chan seek $f [expr {$offset + $idx}]\n                    chan puts -nonewline $f BARFOO\n\n                    # Skip to end of following line, and truncate\n                    chan gets $f\n                    chan gets $f\n                    chan truncate $f\n\n                    # Stop searching the file now\n                    break\n                 }\n\n                 # Save offset of start of next line for later\n                 set offset [chan tell $f]\n              }\n              chan close $f\n\nSEE ALSO\n       close(n), eof(n),  fblocked(n),  fconfigure(n),  fcopy(n),\n       file(n),   fileevent(n),   flush(n),   gets(n),   open(n),\n       puts(n), read(n), seek(n), socket(n), tell(n), refchan(n)\n\nKEYWORDS\n       channel, input, output, events, offset\n\n\n\nTcl                            8.5                        chan(n)\n",
"copy_ip": "copy_ip\n\nDescription: \nCopy an existing IP\n\nSyntax: \ncopy_ip  -name <arg> [-dir <arg>] [-quiet] [-verbose] <objects>...\n\nReturns: \nIP file object that was added to the project\n\nUsage: \n  Name        Description\n  -----------------------\n  -name       Name of copied IP\n  [-dir]      Directory path for remote IP to be created and managed outside \n              the project\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   IP to be copied\n\nCategories: \nProject, IPFlow\n\nDescription:\n\n  Create a copy of an IP core that has been previously instanced into the\n  current project.\n\nArguments:\n\n  -name <arg> - (Required) Specify the name of the new IP to be created.\n\n  -dir <arg> - (Optional) The path to a directory outside of the local\n  project to store the newly created IP. The specified directory must already\n  exist, or the command will return an error.\n\n  Note: If a directory is not specified, the new IP will be added to the\n  local project directory structure at <project_name>.srcs/sources_1/ip.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <object> - (Required) The IP object to copy. The copy_ip command can only\n  be used to copy a single IP core at one time. The IP must be specified as\n  an IP object returned by the get_ips command, and not simply referenced by\n  name.\n\nExample:\n\n  The following example create a copy of the FIFO core previously instanced\n  into the current project and writes it to the specified directory:\n\n    copy_ip -name newFIFO -dir C:/Data/new_IP [get_ips oldFIFO] \n    \n\nSee Also:\n\n   *  create_ip\n   *  get_ips\n   *  import_ip\n   *  read_ip\n",
"remove_pin": "remove_pin\n\nDescription: \nRemove pins from the current design\n\nSyntax: \nremove_pin  [-quiet] [-verbose] <pins>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <pins>      List of pins to remove\n\nCategories: \nNetlist\n\nDescription:\n\n  Remove pins from the current netlist in either an open Synthesized or\n  Implemented design.\n\n  Note: You cannot remove pins from library macros, or macro-primitives.\n\n  To remove a bus pin, you must specify the primary pin name, and not specify\n  a bus index. This ensures that the entire bus pin is removed, and not just\n  a portion of the bits associated with the bus. You can resize a bus pin,\n  eliminating bits, using the resize_pin_bus command.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pins> - (Required) List of pins to remove from the netlist. The pins must\n  be specified hierarchically by the cell instance the pin is found on.\n\nExamples:\n\n  The following example removes the specified pin from the cpuEngine in the\n  in-memory netlist of the current design:\n\n    remove_pin cpuEngine/inPin\n\nSee Also:\n\n   *  create_pin\n",
"remove_from_power_rail": "remove_from_power_rail\n\nDescription: \nRemove power sources from Power Rail\n\nSyntax: \nremove_from_power_rail  [-power_sources <args>] [-quiet] [-verbose]\n                        <power_rail>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-power_sources]  List of power sources to remove. Can be power rails \n                    and/or power supplies\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <power_rail>      Power rail to remove power sources from\n\nCategories: \nXDC, Floorplan\n",
"get_property": "get_property\n\nDescription: \nGet properties of object\n\nSyntax: \nget_property  [-min] [-max] [-quiet] [-verbose] <name> <object>\n\nReturns: \nproperty value\n\nUsage: \n  Name        Description\n  -----------------------\n  [-min]      Return only the minimum value\n  [-max]      Return only the maximum value\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of property whose value is to be retrieved\n  <object>    Object to query for properties\n\nCategories: \nObject, PropertyAndParameter, XDC\n\nDescription:\n\n  Gets the current value of the named property from the specified object or\n  objects. If multiple objects are specified, a list of values is returned.\n\n  If the property is not currently assigned to the object, or is assigned\n  without a value, then the get_property command returns nothing, or the null\n  string. If multiple objects are queried, the null string is added to the\n  list of values returned.\n\n  If multiple objects are passed to the get_property command, you can use the\n  -min or -max options to return the smallest or greatest value of the\n  property specified by name. This feature can be useful when setting timing\n  constraints.\n\n  Note: For numeric properties, the min/max determination is based on numeric\n  values. For all other properties, the determination is based on string\n  sorting.\n\n  This command returns a value, or list of values, or returns an error if it\n  fails.\n\nArguments:\n\n  -min - (Optional) When multiple <objects> are specified, this option\n  examines the values of the property specified by <name>, and returns the\n  smallest value from the list of objects. Numeric properties are sorted by\n  value. All other properties are sorted as strings.\n\n  -max - (Optional) When multiple <objects> are specified, this option\n  examines the values of the property specified by <name>, and returns the\n  largest value from the list of objects. Numeric properties are sorted by\n  value. All other properties are sorted as strings.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the property to be returned. The name is\n  not case sensitive.\n\n  <objects> - (Required) One or more objects to examine for the specified\n  property.\n\nExamples:\n\n  The following example gets the NAME property from the specified cell:\n\n    get_property NAME [lindex [get_cells] 3] \n    \n\n  The following example returns the smallest PERIOD property from the\n  specified clock objects:\n\n    get_property -min PERIOD [get_clocks] \n    \n\n  This example demonstrates the string based sorting of the SITE property for\n  the specified ports:\n\n    get_property SITE [get_ports]  \n    IOB_X1Y75 IOB_X1Y76 IOB_X1Y98 IOB_X1Y125 IOB_X0Y94 IOB_X1Y95 IOB_X1Y96  \n    IOB_X1Y93 IOB_X1Y94  \n     \n    get_property -min SITE [get_ports]  \n    IOB_X0Y94  \n     \n    get_property -max SITE [get_ports]  \n    IOB_X1Y98 \n    \n\n  Note: While IOB_X1Y125 is the largest site value on the port objects, the\n  property value IOB_X1Y98 is returned because of the sorting of the property\n  values as strings.\n\nSee Also:\n\n   *  create_property\n   *  get_cells\n   *  get_ports\n   *  list_property\n   *  list_property_value\n   *  report_property\n   *  reset_property\n   *  set_property\n",
"validate_cluster_configurations": "validate_cluster_configurations\n\nDescription: \nValidate list of cluster configurations\n\nSyntax: \nvalidate_cluster_configurations  [-quiet] [-verbose] <cluster_configurations>\n\nUsage: \n  Name                      Description\n  -------------------------------------\n  [-quiet]                  Ignore command errors\n  [-verbose]                Suspend message limits during command execution\n  <cluster_configurations>  List of cluster configurations\n\nCategories: \ncluster_configuration\n\nDescription:\n\n  Validates the list of cluster configurations provided as an input. Use the\n  get_cluster_configurations command to get a list of cluster configurations.\n\n  validate_cluster_configurations validates the submit and kill command of\n  the cluster configuration objects to ensure if a job can be submitted using\n  a particular cluster configuration or not.\n\n  Currently, Vivado supports following clusters management tools.\n\n      Load Sharing Facility (LSF)\n\n      Sun Grid Engine (SGE)\n\n      Simple Linux Utility For Resource Management (SLURM)\n\nArguments:\n\n  <cluster_configurations> - (Required) List of cluster configurations object\n  to be removed. The get_cluster_configurations command can be used to get\n  the list of cluster configurations and provide it as input to the\n  remove_cluster_configurations command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example validates all the user defined cluster configurations.\n\n    validate_cluster_configurations [get_cluster_configurations -filter {IS_DEFAULT == 0}]\n\n  The following example validates a cluster configuration named lsf_medium.\n\n    validate_cluster_configurations [get_cluster_configurations lsf_medium]\n\nSee Also:\n\n   *  create_cluster_configuration\n   *  get_cluster_configurations\n   *  remove_cluster_configurations\n",
"report_min_pulse_width": "",
"delete_property": "delete_property\n\nDescription: \nDelete user defined property for class of object(s)\n\nSyntax: \ndelete_property  [-quiet] [-verbose] <name> <class>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of property to delete\n  <class>     Object type to delete property for; valid values are: design, \n              net, cell, pin, port, pblock, interface, fileset\n\nCategories: \nPropertyAndParameter\n\nDescription:\n\n  Deletes the user defined property for the specified object type <class>.\n  Once a property is deleted, it is not reported by report_property -all or\n  list_property.\n\nArguments:\n\n  <name> - (Required) The name of the property to be deleted. The name is\n  case sensitive.\n\n  <class> - (Required) The class of the property to delete.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example deletes the user created property called\n  INSERT_CUSTOM_IP for net objects:\n\n    delete_property INSERT_CUSTOM_IP net\n\nSee Also:\n\n   *  create_property\n\n   *  get_property\n\n   *  list_property\n\n   *  list_property_value\n\n   *  report_property\n\n   *  reset_property\n\n   *  set_property\n",
"wait_on_runs": "wait_on_runs\n\nDescription: \nBlock execution of further Tcl commands until the specified run(s) complete(s).\n\nSyntax: \nwait_on_runs  [-timeout <arg>] [-exit_condition <arg>] [-quiet] [-verbose]\n              <runs>...\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-timeout]         Maximum time to wait for the run(s) to complete (in \n                     minutes)\n                     Default: -1\n  [-exit_condition]  Exit condition for wait on run, \n                      1) ALL \n                      2. ANY_ONE \n                      3. ANY_ONE_MET_TIMING\n                     Default: ALL\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <runs>             Runs to wait on\n\nCategories: \nProject\n\nDescription:\n\n  Blocks the execution of Tcl commands until the specified runs have completed\n  either successfully or in error, or until the specified amount of time has\n  elapsed.\n\n  This command will tell you when the run(s) have terminated, but not the results\n  of the run. To determine if the run has completed successfully, you could\n  query the value of the PROGRESS property of the run:\n\n    launch_runs synth_1   \n    wait_on_runs synth_1   \n    if {[get_property PROGRESS [get_runs synth_1]] != '100%'} {   \n       error 'ERROR: synth_1 failed'   \n    } \n    \n  The wait_on_runs command can be used for runs that have been launched. If\n  the specified runs have not been launched when the wait_on_runs command is\n  used, you will get an error. Runs that have already completed do not return\n  an error.\n\n  Note: This command is used for running the tool in batch mode or from Tcl\n  scripts. It is ignored when running interactively from the GUI.\n\nArguments:\n\n  -timeout <arg> - (Optional) The time in minutes that the wait_on_runs\n  command should wait until the run(s) finishes. This allows you to define a\n  period of time beyond which the tool should resume executing Tcl commands\n  even if the specified run(s) has not finished execution. The default value of\n  -1 is used if timeout is not specified, meaning that there is no limit to\n  the amount of time the tool will wait for the run(s) to complete.\n\n  -exit_condition - (Optional) The exit condition that wait_on_runs command will\n  use to check in order to stop waiting on runs for completion. It takes the \n  following values\n    1) ALL - with this exit condition the wait_on_runs command will wait for all\n             the runs execution to finish\n    2) ANY_ONE - with this exit condition the wait_on_runs command will wait until \n                 any one of the runs finishes execution\n    3) ANY_ONE_MET_TIMING - with this exit condition the wait_on_runs command will\n                            wait until any of the runs meets timing\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <runs> - (Required) The name of the run(s) to wait on.\n\nExamples:\n\n  The following example launches the impl_1 run, and then waits for the\n  specified run to complete, or to wait for one hour, whichever occurs first:\n\n    launch_runs impl_1  \n    wait_on_runs -timeout 60 impl_1 \n    \n  The following example launches the impl_1 and impl_2 runs, and then waits for the\n  specified runs to complete, or to wait for one hour, whichever occurs first:\n\n    launch_runs impl_1 impl_2 \n    wait_on_runs -timeout 60 -exit_condition ALL impl_1 impl_2\n\n  The following example launches the impl_1 and impl_2 runs, and then waits for any one \n  of the specified runs to complete, or to wait for one hour, whichever occurs first:\n\n    launch_runs impl_1 impl_2 \n    wait_on_runs -timeout 60 -exit_condition ANY_ONE impl_1 impl_2\n\n  The following example launches the impl_1 and impl_2 runs, and then waits for any one \n  of the specified runs to meet timing, or to wait for one hour, whichever occurs first:\n\n    launch_runs impl_1 impl_2 \n    wait_on_runs -timeout 60 -exit_condition ANY_ONE_MET_TIMING impl_1 impl_2\n\nSee Also:\n\n   *  launch_runs\n",
"webtalk_dump_data": "webtalk_dump_data\n\nDescription: \nDump the webtalk data model created by calls to webtalk_add_data to standard output.\n\nSyntax: \nwebtalk_dump_data  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \n\n",
"report_environment": "report_environment\n\nDescription: \nReport system information.\n\nSyntax: \nreport_environment  [-file <arg>] [-format <arg>] [-append] [-return_string]\n                    [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Write system information to specified file.\n  [-format]         Specifies how to format the report. Default is 'text', \n                    another option is 'xml'. Only applies if -file is used. \n                    If xml output is used, -append is not allowed.\n                    Default: text\n  [-append]         Append report to existing file\n  [-return_string]  Return report content as a string value\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report the details of the system environment that the tool is running\n  under. The details of the environment report include: operating system\n  version, CPU, memory, available disk space, and specific settings of\n  various environment variables.\n\n  The default is to write the report to the standard output. However, the\n  report can be written to a file instead.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -format [ text | xml ] - (Optional) The default format of the output report\n  is text. You can also output an XML report. XML output is only valid when\n  -file is specified, and cannot be used with -append.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the current environment to the specified file:\n\n    report_environment -file C:/Data/toolEnv.txt \n    \n",
"lint_files": "lint_files\n\nDescription: \nRun the Tcl linter on specified files.\n\nSyntax: \nlint_files  [-quiet] [-verbose] [<files>...]\n\nReturns: \nnothing.\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<files>]   List of Tcl files to lint\n\nCategories: \nTools\n",
"change_qor_suggestion_property": "change_qor_suggestion_property\n\nDescription: \nSet FAILED_TO_APPLY property to 1, and APPLIED property to 0, for specified RQS suggestion ID\n\nSyntax: \nchange_qor_suggestion_property  [-set_applied] [-set_failed_to_apply]\n                                [-set_incr_friendly] [-reset_incr_friendly]\n                                [-quiet] [-verbose] [<IDs>]\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-set_applied]          set APPLIED = 1\n  [-set_failed_to_apply]  set APPLIED = 0, FAILED_TO_APPLY = 1\n  [-set_incr_friendly]    set INCR_FRIENDLY = 1\n  [-reset_incr_friendly]  set INCR_FRIENDLY = 0\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  [<IDs>]                 Match suggestion names against given names\n\nCategories: \nObject, Feasibility, Timing\n",
"export_ip_user_files": "export_ip_user_files\n\nDescription: \nGenerate and export IP/IPI user files from a project. This can be scoped to work on one or more IPs.\n\nSyntax: \nexport_ip_user_files  [-of_objects <args>] [-ip_user_files_dir <arg>]\n                      [-ipstatic_source_dir <arg>] [-lib_map_path <arg>]\n                      [-no_script] [-sync] [-reset] [-force] [-quiet]\n                      [-verbose]\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-of_objects]           IP, BD file object\n  [-ip_user_files_dir]    Base directory path for exporting IP files\n  [-ipstatic_source_dir]  Custom directory path for exporting IP static files\n  [-lib_map_path]         Compiled simulation library directory path\n  [-no_script]            Do not export simulation scripts\n  [-sync]                 Delete IP/IPI dynamic and simulation script files\n  [-reset]                Delete all IP/IPI static, dynamic and simulation \n                          script files\n  [-force]                Overwrite files\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n\nCategories: \nToolLaunch, Simulation\n\nDescription:\n\n  Export IP generated static, dynamic, netlist, verilog/vhdl stubs, and\n  memory initializaton files to the ip_user_files.\n\nArguments:\n\n  -of_objects <arg> - (Optional) Target object, IP, block design (.bd), or a\n  fileset, for which the generated files needs to be exported.\n\n  -ip_user_files_dir <arg> - (Optional) Directory path to IP user files. By\n  default, if this switch is not specified then this this command will use\n  the path specified with the IP.USER_FILES_DIR project property value.\n\n  -ipstatic_source_dir <arg> - (Optional) Directory path to the static IP\n  files. By default, if this switch is not specified then this command will\n  use the path specified with the SIM.IPSTATIC_SOURCE_DIR project property\n  value.\n\n  Note: If the -ip_user_files_dir switch is specified, then by default the IP\n  static files will be exported under the sub-directory with the name\n  ipstatic. If this switch is specified in conjunction with\n  -ipstatic_source_dir, then the IP static files will be exported in the path\n  specified with the -ipstatic_source_dir switch.\n\n  -lib_map_path <arg> - (Optional) Directory path to the pre-compiled\n  simulation library.\n\n  -no_script - (Optional) Do not export simulation scripts generated by the\n  export_simulation Tcl command. By default, this command will call the\n  export_simulation command to generate simulation scripts as well after\n  exporting the generated files.\n\n  -sync - (Optional) Delete exported IP/BD sources and simulation scripts\n  from the ip_user_files dir.\n\n  -reset - (Optional) Delete all IP/BD generated sources and simulation\n  script files from the ip_user_files dir.\n\n  -force - (Optional) Overwrite existing source files in the ip_user_files\n  directory with generated IP/BD files.\n\n  -quiet (Optional) Execute the command quietly, ignoring any command line\n  errors and returning no messages. The command also returns TCL_OK\n  regardless of any errors encountered during execution.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The command export_ip_user_files -of_objects [get_ips char_fifo] exports\n  the following:\n\n   *  Dynamic files for the char_fifo IP to\n      <project>/<project>.ip_user_files/ip/char_fifo directory\n\n   *  IP static files to <project>/<project>.ip_user_files/ipstatic directory\n\n   *  Simulation script to the\n      <project>/<project>.ip_user_files/sim_scripts/char_fifo/<simulator>\n      directory\n\n  The following command, will export char_fifo IP static and dynamic files to\n  the my_proj/user_files/static and /my_proj/user_files directories:\n\n    export_ip_user_files \\\n         -of_objects [get_ips char_fifo] \\\n         -ipstatic_source_dir /my_proj/user_files/static\n         -ip_user_files_dir /my_proj/user_files \\\n\n  The following command will export char_fifo simulation script files using\n  the pre-compiled simulation library from /my_proj/compiled_libs/lib:\n\n    export_ip_user_files \\\n         -of_objects [get_ips char_fifo] \\\n         -lib_map_path /my_proj/compiled_libs/lib\n\n  The following command will export files without generating simulation\n  scripts for the char_fifo IP:\n\n    export_ip_user_files \\\n         -of_objects [get_ips char_fifo] \\\n         -no_script\n\n  The following command will delete generated files and simulation scripts\n  for the char_fifo IP:\n\n    export_ip_user_files \\\n         -of_objects [get_ips char_fifo]\\\n         -sync\n\n  The following command will delete all generated files and simulation\n  scripts for the char_fifo IP:\n\n    export_ip_user_files \\\n         -of_objects [get_ips char_fifo] \\\n         -reset\n\n  The following command will overwrite all generated files and simulation\n  scripts for the char_fifo:\n\n    export_ip_user_files \\\n         -of_objects [get_ips char_fifo] \\\n         -force\n\nSee Also:\n\n   *  get_files\n   *  get_ips\n",
"get_partition_defs": "get_partition_defs\n\nDescription: \nGet a list of PartitionDefs\n\nSyntax: \nget_partition_defs  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n                    [<patterns>]\n\nReturns: \nlist of PartitionDef objects\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match partition definition names against patterns\n                Default: *\n\nCategories: \nObject, Partition\n\nDescription:\n\n  Note: You must first define the project as a Dynamic Function eXchange (DFX)\n  project by setting the PR_FLOW property on the project to TRUE, or by using\n  the Tools > Enable Dynamic Function eXchange command.\n\n  Get a list of all Partition Definition (partitionDef) objects in the\n  current design, or the partitionDefs that match a specified search pattern.\n\n  The Dynamic Function eXchange flow lets you create Partition Definitions\n  (partitionDefs) from hierarchical cells in a design, and to specify\n  reconfigurable modules (RMs) to be assigned to these partitionDefs to\n  create a unique configurations of the design based on the combination of\n  the core design and one or more RMs. The DFX design flow requires the\n  implementation of each PR configuration, resulting in partial bitstreams\n  for the RMs, but complete bitstreams for each integrated configuration.\n  Refer to the Vivado Design Suite User Guide: Dynamic Function eXchange\n  (UG909) for more information.\n\n  This command returns a list of partitionDef objects, or returns an error if\n  the command fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_partition_defs based on property values on the partitionDefs. You can\n  find the properties on an object with the report_property or list_property\n  commands. In the case of the 'partitionDef' object, 'DEFAULT_RM' and\n  'LIBRARY' are two of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match partitionDefs against the specified search\n  pattern. The default pattern is the wildcard `*` which gets a list of all\n  partitionDefs in the project.\n\nExample:\n\n  The following example gets all of the partitionDef objects in the project:\n\n    get_partition_defs \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  delete_partition_defs\n   *  set_property\n",
"fileevent": "fileevent(n)          Tcl Built-In Commands          fileevent(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       fileevent  - Execute a script when a channel becomes read-\n       able or writable\n\nSYNOPSIS\n       fileevent channelId readable ?script?\n\n       fileevent channelId writable ?script?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This command is used to create  file  event  handlers.   A\n       file  event  handler  is a binding between a channel and a\n       script, such that the script  is  evaluated  whenever  the\n       channel becomes readable or writable.  File event handlers\n       are most commonly used to allow data to be  received  from\n       another  process  on  an  event-driven  basis, so that the\n       receiver can continue to  interact  with  the  user  while\n       waiting for the data to arrive.  If an application invokes\n       gets or read on a blocking channel when there is no  input\n       data  available,  the  process will block; until the input\n       data arrives, it will not be able to service other events,\n       so  it  will  appear  to  the  user  to 'freeze up'.  With\n       fileevent, the process can tell when data is  present  and\n       only invoke gets or read when they will not block.\n\n       The  channelId  argument  to  fileevent  refers to an open\n       channel such as a Tcl standard channel (stdin, stdout,  or\n       stderr),  the  return  value from an invocation of open or\n       socket, or the result of a channel creation  command  pro-\n       vided by a Tcl extension.\n\n       If  the  script argument is specified, then fileevent cre-\n       ates a new event handler:  script will be evaluated  when-\n       ever  the  channel becomes readable or writable (depending\n       on the  second  argument  to  fileevent).   In  this  case\n       fileevent  returns  an  empty  string.   The  readable and\n       writable event handlers for a file  are  independent,  and\n       may be created and deleted separately.  However, there may\n       be at most one readable and one  writable  handler  for  a\n       file at a given time in a given interpreter.  If fileevent\n       is called when the specified handler already exists in the\n       invoking interpreter, the new script replaces the old one.\n\n       If the script argument is not specified, fileevent returns\n       the  current  script  for channelId, or an empty string if\n       there is none.  If the script argument is specified as  an\n       empty string then the event handler is deleted, so that no\n       script will be invoked.  A  file  event  handler  is  also\n       deleted  automatically  whenever  its channel is closed or\n       its interpreter is deleted.\n\n       A channel is considered to be readable if there is  unread\n       data  available  on  the  underlying device.  A channel is\n       also considered to be readable if there is unread data  in\n       an input buffer, except in the special case where the most\n       recent attempt to read from the channel was  a  gets  call\n       that  could  not find a complete line in the input buffer.\n       This feature allows a file to be read a line at a time  in\n       nonblocking  mode using events.  A channel is also consid-\n       ered to be readable if an end of file or  error  condition\n       is present on the underlying file or device.  It is impor-\n       tant for script to check for these conditions  and  handle\n       them  appropriately;   for example, if there is no special\n       check for end of file, an infinite loop  may  occur  where\n       script  reads no data, returns, and is immediately invoked\n       again.\n\n       A channel is considered to be writable  if  at  least  one\n       byte  of  data  can  be  written to the underlying file or\n       device without blocking,  or  if  an  error  condition  is\n       present on the underlying file or device.\n\n       Event-driven  I/O  works  best for channels that have been\n       placed into nonblocking mode with the fconfigure  command.\n       In  blocking mode, a puts command may block if you give it\n       more data than the underlying file or device  can  accept,\n       and  a  gets  or read command will block if you attempt to\n       read more data than is ready;  no events will be processed\n       while the commands block.  In nonblocking mode puts, read,\n       and gets never block.  See the documentation for the indi-\n       vidual  commands for information on how they handle block-\n       ing and nonblocking channels.\n\n       The script for a file event is executed  at  global  level\n       (outside  the  context of any Tcl procedure) in the inter-\n       preter in which the fileevent command was invoked.  If  an\n       error  occurs  while executing the script then the command\n       registered with interp  bgerror  is  used  to  report  the\n       error.   In addition, the file event handler is deleted if\n       it ever returns an error;  this is done in order  to  pre-\n       vent infinite loops due to buggy handlers.\n\nEXAMPLE\n       In  this  setup GetData will be called with the channel as\n       an argument whenever $chan becomes readable.\n              proc GetData {chan} {\n                  if {![eof $chan]} {\n                      puts [gets $chan]\n                  }\n              }\n\n              fileevent $chan readable [list GetData $chan]\n\n\nCREDITS\n       fileevent is based on the addinput command created by Mark\n       Diekhans.\n\n\nSEE ALSO\n       fconfigure(n),   gets(n),   interp(n),  puts(n),  read(n),\n       Tcl_StandardChannels(3)\n\n\nKEYWORDS\n       asynchronous I/O, blocking, channel, event  handler,  non-\n       blocking, readable, script, writable.\n\n\n\nTcl                            7.5                   fileevent(n)\n",
"webtalk_terminate": "webtalk_terminate\n\nDescription: \nTerminate webtalk mgr previously initialized via webtalk_init.\n\nSyntax: \nwebtalk_terminate  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \n\n",
"delete_waivers": "delete_waivers\n\nDescription: \nDelete one or more DRC/METHODOLOGY/CDC message waivers\n\nSyntax: \ndelete_waivers  [-scoped] [-quiet] [-verbose] [<objects>...]\n\nUsage: \n  Name         Description\n  ------------------------\n  [-scoped]    Flag waiver to interpret object wildcards as scoped to the \n               current_instance that is set\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<objects>]  List of waiver objects, or a list of message objects (cells, \n               nets, sites, etc.) for which DRC/METHODOLOGY waiver(s) were set\n\nCategories: \nWaiver, Object\n\nDescription:\n\n  After report_drc, report_methodology, or report_cdc commands are run, they\n  return messages of specific violations or conditions found in the design.\n  These violations can prevent the design from progressing until they have\n  been resolved or addressed in some way. The create_waiver command lets you\n  select individual violations or specific checks that can be waived for a\n  design, letting you move forward in the design flow.\n\n  Use the delete_waivers command to remove waivers from the design.\n\nArguments:\n\n  -scoped - (Optional) Specify that waivers should be interpreted with object\n  wildcards as scoped to the current_instance that is set.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) List of waiver objects as returned by get_waivers.\n\nExamples:\n\n  This example deletes all the DRC waivers in the design:\n\n    delete_waivers [get_waivers -type DRC] \n    \n\nSee Also:\n\n   *  create_waiver\n   *  current_instance\n   *  get_waivers\n   *  report_cdc\n   *  report_drc\n   *  report_methodology\n",
"get_attribute": "",
"regexp": "regexp(n)             Tcl Built-In Commands             regexp(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       regexp - Match a regular expression against a string\n\n\nSYNOPSIS\n       regexp  ?switches? exp string ?matchVar? ?subMatchVar sub-\n       MatchVar ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Determines whether the regular expression exp matches part\n       or  all  of  string and returns 1 if it does, 0 if it does\n       not, unless -inline is specified  (see  below).   (Regular\n       expression  matching  is described in the re_syntax refer-\n       ence page.)\n\n       If additional arguments are specified  after  string  then\n       they  are  treated  as  the names of variables in which to\n       return information about which part(s) of  string  matched\n       exp.   MatchVar  will  be  set to the range of string that\n       matched all of exp.  The first  subMatchVar  will  contain\n       the  characters in string that matched the leftmost paren-\n       thesized subexpression within exp,  the  next  subMatchVar\n       will  contain  the characters that matched the next paren-\n       thesized subexpression to the right in exp, and so on.\n\n       If the initial arguments to regexp start with - then  they\n       are  treated as switches.  The following switches are cur-\n       rently supported:\n\n       -about         Instead of attempting to match the  regular\n                      expression,   returns   a  list  containing\n                      information about the  regular  expression.\n                      The  first  element of the list is a subex-\n                      pression count.  The second  element  is  a\n                      list  of property names that describe vari-\n                      ous attributes of the  regular  expression.\n                      This   switch  is  primarily  intended  for\n                      debugging purposes.\n\n       -expanded      Enables use of the expanded regular expres-\n                      sion  syntax  where whitespace and comments\n                      are ignored.  This is the same as  specify-\n                      ing  the  (?x)  embedded  option  (see  the\n                      re_syntax manual page).\n\n       -indices       Changes what is stored in the subMatchVars.\n                      Instead  of storing the matching characters\n                      from string, each variable will  contain  a\n                      list  of  two  decimal  strings  giving the\n                      indices in string of  the  first  and  last\n                      characters in the matching range of charac-\n                      ters.\n\n       -line          Enables  newline-sensitive  matching.    By\n                      default,  newline  is a completely ordinary\n                      character with no  special  meaning.   With\n                      this flag, '[^' bracket expressions and '.'\n                      never match newline, '^' matches  an  empty\n                      string after any newline in addition to its\n                      normal function, and '$' matches  an  empty\n                      string  before  any  newline in addition to\n                      its normal function.  This flag is  equiva-\n                      lent to specifying both -linestop and -lin-\n                      eanchor, or the (?n) embedded  option  (see\n                      the re_syntax manual page).\n\n       -linestop      Changes   the   behavior  of  '[^'  bracket\n                      expressions and '.'  so that they  stop  at\n                      newlines.   This  is the same as specifying\n                      the (?p) embedded option (see the re_syntax\n                      manual page).\n\n       -lineanchor    Changes  the  behavior  of '^' and '$' (the\n                      'anchors') so they match the beginning  and\n                      end  of  a  line respectively.  This is the\n                      same as specifying the (?w) embedded option\n                      (see the re_syntax manual page).\n\n       -nocase        Causes  upper-case  characters in string to\n                      be treated as lower case during the  match-\n                      ing process.\n\n       -all           Causes the regular expression to be matched\n                      as many times as possible  in  the  string,\n                      returning   the  total  number  of  matches\n                      found.  If this  is  specified  with  match\n                      variables,  they  will  contain information\n                      for the last match only.\n\n       -inline        Causes the command to return,  as  a  list,\n                      the  data that would otherwise be placed in\n                      match variables.  When using -inline, match\n                      variables  may  not  be specified.  If used\n                      with -all, the list will be concatenated at\n                      each  iteration,  such  that a flat list is\n                      always returned.  For each match iteration,\n                      the  command  will append the overall match\n                      data, plus one element for each  subexpres-\n                      sion  in  the regular expression.  Examples\n                      are:\n                      regexp -inline -- {\\w(\\w)} ' inlined '\n                            -> in n\n                      regexp -all -inline -- {\\w(\\w)} ' inlined '\n                            -> in n li i ne e\n\n       -start index   Specifies a character index offset into the\n                      string   to   start  matching  the  regular\n                      expression at.  The index value  is  inter- |\n                      preted  in  the  same  manner  as the index |\n                      argument to string index.  When using  this\n                      switch, '^' will not match the beginning of\n                      the line, and \\A will still match the start\n                      of  the  string  at  index.  If -indices is\n                      specified,  the  indices  will  be  indexed\n                      starting from the absolute beginning of the\n                      input string.  index will be constrained to\n                      the bounds of the input string.\n\n       --             Marks  the  end  of switches.  The argument\n                      following this one will be treated  as  exp\n                      even if it starts with a -.\n\n       If  there  are more subMatchVars than parenthesized subex-\n       pressions within exp, or if a particular subexpression  in\n       exp  does  not  match the string (e.g. because it was in a\n       portion of the expression that was not matched), then  the\n       corresponding  subMatchVar  will  be  set  to  '-1  -1' if\n       -indices has been specified or to an empty  string  other-\n       wise.\n\nEXAMPLES\n       Find the first occurrence of a word starting with foo in a\n       string that is not actually an instance of foobar, and get\n       the  letters following it up to the end of the word into a\n       variable:\n              regexp {\\mfoo(?!bar\\M)(\\w*)} $string -> restOfWord\n       Note that the whole matched substring has been  placed  in\n       the  variable  '->',  which  is a name chosen to look nice\n       given that we are not actually interested in its contents.\n\n       Find  the  index of the word badger (in any case) within a\n       string and store that in the variable location:\n              regexp -indices {(?i)\\mbadger\\M} $string location\n       This could also be written as a basic  regular  expression\n       (as  opposed to using the default syntax of advanced regu-\n       lar expressions) match by prefixing the expression with  a\n       suitable flag:\n              regexp -indices {(?ib)\\<badger\\>} $string location\n\n       This counts the number of octal digits in a string:\n              regexp -all {[0-7]} $string\n\n       This  lists all words (consisting of all sequences of non-\n       whitespace characters) in a string, and  is  useful  as  a\n       more powerful version of the split command:\n              regexp -all -inline {\\S+} $string\n\nSEE ALSO\n       re_syntax(n), regsub(n), string(n)                         |\n\nKEYWORDS\n       match,  parsing,  pattern,  regular expression, splitting,\n       string\n\n\n\nTcl                            8.3                      regexp(n)\n",
"load_msg_db": "load_msg_db\n\nDescription: \nLoad Message Db file\n\nSyntax: \nload_msg_db  [-file <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-file]     Message file to be loaded\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nReport\n",
"unselect_objects": "unselect_objects\n\nDescription: \nUnselect items that are currently selected\n\nSyntax: \nunselect_objects  [-quiet] [-verbose] [<objects>]\n\nUsage: \n  Name         Description\n  ------------------------\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<objects>]  Objects to unselect\n\nCategories: \nGUIControl\n\nDescription:\n\n  Unselects the specified object or objects that were previously selected by\n  the select_objects command.\n\n  This command will unselect both primary and secondary selected objects. The\n  selection of secondary objects is controlled through the use of Selection\n  Rules defined in the Tools > Settings command. Refer to the Vivado Design\n  Suite User Guide: Using the IDE (UG893) for more information on Setting\n  Selection Rules.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) One or more objects to be unselected. If no objects\n  are specified, all selected objects will be unselected.\n\nExamples:\n\n  The following example unselects the specified site on the device:\n\n    unselect_objects [get_sites SLICE_X56Y214] \n    \n\n  The following example unselects all currently selected objects:\n\n    unselect_objects \n    \n\nSee Also:\n\n   *  get_selected_objects\n   *  select_objects\n",
"rename_port": "rename_port\n\nDescription: \nrename a port\n\nSyntax: \nrename_port  -to <arg> [-quiet] [-verbose] <port>...\n\nUsage: \n  Name        Description\n  -----------------------\n  -to         New name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <port>      Port to rename\n\nCategories: \nNetlist\n\nDescription:\n\n  Rename a single port in the current synthesized or implemented design.\n\n  Note: You cannot rename individual bits of a bus port, but you can\n  collectively rename the whole bus.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  Changes to the names of cells, nets, pins, and ports, will also affect the\n  design constraints defined in the in-memory design. Constraints are\n  automatically modified to target the new object name, however these are not\n  written back to the source XDC file. Saving the modified in-memory design\n  using write_checkpoint will save both the renamed objects and modified\n  constraints.\n\n  This command returns nothing if successful, or an error if it fails.\n\nArguments:\n\n  -to <arg> - (Required) Specify the new name to assign to the specified\n  port. Specified names can not contain Tcl special characters: `'\\{};$#\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <port> - (Required) Name of the port to rename.\n\nExamples:\n\n  The following example renames the specified bus port:\n\n    rename_port -to wbInputData wbInDat \n    \n\nSee Also:\n\n   *  connect_net\n   *  create_net\n   *  create_port\n   *  remove_port\n   *  set_hierarchy_separator\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"set_noc_frequency": "set_noc_frequency\n\nDescription: \nSet NOC clock frequency for the currently loaded part\n\nSyntax: \nset_noc_frequency  [-quiet] [-verbose] <freq>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <freq>      NOC clock frequency\n\nCategories: \nNOC\n",
"generate_rl_platform": "generate_rl_platform\n\nDescription: \nGenerate new platform based on base platform and wrapper module\n\nSyntax: \ngenerate_rl_platform  [-use_source <arg>] [-reconfig_platform <arg>]\n                      [-base_platform <arg>] [-platform <arg>] [-quiet]\n                      [-verbose]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-use_source]         Specify wrapper checkpoint path\n  [-reconfig_platform]  (Required) Specify reconfigurable platform module \n                        name\n  [-base_platform]      (Required) Specify base platform checkpoint path\n  [-platform]           (Optional) Specify new platform checkpoint path, the \n                        default file name is 'rl_platform.dcp'\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nFileIO\n",
"find_routing_path": "find_routing_path\n\nDescription: \nFind a routing path between two nodes.\n\nSyntax: \nfind_routing_path  [-from <args>] [-to <args>] [-max_nodes <arg>]\n                   [-min_nodes <arg>] [-exclude_nodes <args>]\n                   [-include_nodes <args>] [-sort_include_nodes]\n                   [-ignore_all_routing] [-show_fixed_routes] [-allow_overlap]\n                   [-quiet] [-verbose]\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-from]                -from <start node> or <start site_pin> Start of \n                         routing path.\n  [-to]                  -to <end node> or <end site_pin> End of routing \n                         path.\n  [-max_nodes]           Specifies the maximum number of nodes (including \n                         from and to nodes) allowed in solution.\n                         Default: 500\n  [-min_nodes]           Specifies the minimum number of nodes (including \n                         from and to nodes) allowed in solution.\n                         Default: 2\n  [-exclude_nodes]       Exclude specified nodes from routing path.\n  [-include_nodes]       Specify the nodes which must exist in the path.\n  [-sort_include_nodes]  Sort the given nodes which must exist in the path.\n  [-ignore_all_routing]  Solution may include nodes used in any existing \n                         (including fixed) routes.\n  [-show_fixed_routes]   Solution will mark fix routes with '*'.\n  [-allow_overlap]       Solution may include nodes used in existing \n                         non-fixed routes.\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n\nCategories: \nDevice, Object\n\nDescription:\n\n  Finds a routing solution between two nodes on an unrouted, or partially\n  routed net, in an implemented design.\n\n  This command can be used to define a routing path to assign to the FIXED_ROUTE\n  property of a net, which can be saved to the XDC file for later reuse. Refer\n  to Vivado Design Suite Tutorial: Implementation (UG986) for an example of \n  manual routing and the use of the FIXED_ROUTE property.\n\n  You must define nodes for the start and end points of the routing path, and can\n  specify the maximum and minimum number of nodes to use for the route path,\n  including the start and end points. The nodes must be specified as objects\n  returned by the get_nodes command. For unrouted net objects, since nodes have\n  not been assigned to the net, the nodes can be found by association of the net\n  to the bel_pin or site_pin:\n\n   *  Net > Bel_Pin > Bel > Tile > Node\n\n   *  Net > Site_Pin > Tile > Node\n\n  For partially routed nets, the nodes can be found associated directly tothe net.\n  Refer to the Vivado Design Suite Properties Reference Guide (UG912) for more\n  information on the relationship between these objects.\n\n  The find_routing_path command returns a list of nodes representing the route \n  path found from the start point to the end point, or returns 'no path found'\n  if the command runs but has no result, or returns an error if the command fails\n  to run.\n\n  The returned list of nodes can be assigned to the FIXED_ROUTE property using\n  the set_property command as shown in the example.\n\n  Note: The report_property command does not return the string of the FIXED_ROUTE\n  property. Use the get_property command instead.\n\nArguments:\n\n  Note: This option can be used to generate a meandering route that will provide\n  some added timing delay.\n\n  -from <arg> - (Optional) The starting node of the route path. Nodes must be\n   specified as objects returned by the get_nodes command.\n\n  -to <arg> - (Optional) The ending node of the route path. Nodes must be\n   specified as objects returned by the get_nodes command.\n\n  -max_nodes <arg> - (Optional) Indicates the maximum number of nodes the route\n   can contain, including the -from node and the -to node. The default is 500.\n\n  -min_nodes <arg> - (Optional) Indicates the minimum number of nodes the route\n   can contain, including the -from node and the -to node. The default is 2, and\n   the value specified must be >= 2.\n\n  -exclude_nodes <args> - Excludes given nodes from the path which would be found.\n\n  -include_nodes <args> - Considers given nodes while finding a path, so the path\n   will pass through those nodes.\n\n  -sort_include_nodes - Sorts the given include nodes(Defasul value is 'false').\n\n  -allow_overlap - (Optional) Enable a loose style of routing which can create\n   conflicts that must be later resolved. These overlapping routes will need to\n   be cleaned up to eliminate routing conflicts. Route conflicts can be\n   identified using the report_route_status command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n   the command. The command also returns TCL_OK regardless of any errors\n   encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the command,\n  will be returned. Only errors occurring inside the command will be trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return all\n   messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example finds a routing path for the specified net, using one\n  end as the -from point and the other end as the -to point, and assigns that\n  path to the specified Tcl variable. Then it uses that Tcl variable to\n  assign the path to the FIXED_ROUTE property of the net:\n\n    set fndPath [find_routing_path -from [lindex [get_nodes -of \\\n       [get_site_pins -of [get_nets wbOutputData_OBUF[14]]]] 0] -to \\\n       [lindex [get_nodes -of  [get_site_pins -of \\\n       [get_nets wbOutputData_OBUF[14]]]] 1]]\n    set_property FIXED_ROUTE $fndPath [get_nets wbOutputData_OBUF[14]]\n\n\nSee Also:\n\n   *  get_bel_pins\n   *  get_nets\n   *  get_nodes\n   *  get_property\n   *  get_site_pins\n   *  report_property\n   *  report_route_status\n   *  set_property\n",
"disconnect_debug_port": "disconnect_debug_port\n\nDescription: \nDisconnect nets and pins from debug port channels\n\nSyntax: \ndisconnect_debug_port  [-channel_index <arg>] [-quiet] [-verbose] <port>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-channel_index]  Disconnect the net at channel index\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <port>            Debug port name\n\nCategories: \nDebug\n\nDescription:\n\n  Disconnect signals from the debug ports.\n\n  Signals from the Netlist Design are connected to ports of a ILA debug core\n  using the connect_debug_port command.\n\n  A port can also be deleted from the debug core rather than simply\n  disconnected by using the delete_debug_port command.\n\n  If you need to determine the specific name of a port on a debug core, use\n  the get_debug_ports command to list all ports on a core. You can also use\n  the report_debug_core command to list all of the cores in the projects, and\n  their specific parameters.\n\nArguments:\n\n  -channel_index <value> - (Optional) The channel index of the port to\n  disconnect.\n\n  Note: The entire port is disconnected if -channel_index is not specified.\n\n  <port> - (Required) The name of the port on the debug core to disconnect.\n  The port name must be specified as core_name/port_name. See the examples\n  below.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example disconnects only the specified channel index from the\n  PROBE1 port of myCore:\n\n    disconnect_debug_port -channel_index 2 myCore/PROBE1 \n    \n\n  If you do not specify the channel_index, all of the channels of the\n  specified port will be disconnected, as in the following example:\n\n    disconnect_debug_port myCore/PROBE1 \n    \n\nSee Also:\n\n   *  connect_debug_port\n   *  delete_debug_port\n   *  get_debug_ports\n   *  report_debug_core\n",
"create_sysgen": "create_sysgen\n\nDescription: \nCreate DSP source for Xilinx System Generator and add to the source fileset\n\nSyntax: \ncreate_sysgen  [-quiet] [-verbose] <name>\n\nReturns: \nName for the new sub module\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Sub module name\n\nCategories: \nSysGen\n\nDescription:\n\n  Create a DSP sub-module for use in the current project, and add it to the\n  source files.\n\n  This command will launch System Generator for DSP to let you design the\n  hardware portion of your system design. System Generator is a DSP design\n  tool from Xilinx that allows the RTL source files, Simulink and MATLAB\n  software models, and C/C++ components of a DSP system to come together in a\n  single simulation and implementation environment.\n\n  For more information on using specific features of the tool refer to System\n  Generator for DSP Getting Started Guide (UG639).\n\n  You can also add existing DSP model files (.mdl) from System Generator into\n  the current project using the add_files command.\n\n  The command returns the name of the DSP module created and added to the\n  project.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the DSP module to create and add to the\n  current project.\n\nExamples:\n\n  The following example launches System Generator and allows you to define\n  and configure the specified DSP module:\n\n    create_sysgen DSP_mod1 \n    \n\nSee Also:\n\n   *  add_files\n   *  generate_target\n   *  list_targets\n   *  make_wrapper\n",
"write_hw_emu_dir": "write_hw_emu_dir\n\nDescription: \nWrite the Xilinx Shell Archive for the current design\n\nSyntax: \nwrite_hw_emu_dir  [-force] [-quiet] [-verbose] [<output_dir>]\n\nReturns: \nThe name of the Shell file\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-force]        Overwrite existing output directory\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  [<output_dir>]  Output directory name\n                  Default: .\n\nCategories: \nVitis, Platform, FileIO\n",
"report_exceptions": "report_exceptions\n\nDescription: \nReport timing exceptions\n\nSyntax: \nreport_exceptions  [-from <args>] [-rise_from <args>] [-fall_from <args>]\n                   [-to <args>] [-rise_to <args>] [-fall_to <args>]\n                   [-through <args>] [-rise_through <args>]\n                   [-fall_through <args>] [-ignored] [-scope_override]\n                   [-summary] [-coverage] [-ignored_objects] [-count_objects]\n                   [-write_merged_exceptions] [-write_valid_exceptions]\n                   [-no_header] [-file <arg>] [-append] [-return_string]\n                   [-name <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-from]                     From pins, ports, cells or clocks\n  [-rise_from]                Rising from pins, ports, cells or clocks\n  [-fall_from]                Falling from pins, ports, cells  or clocks\n  [-to]                       To pins, ports, cells or clocks\n  [-rise_to]                  Rising to pins, ports, cells or clocks\n  [-fall_to]                  Falling to pins, ports, cells or clocks\n  [-through]                  Through pins, ports, cells or nets\n  [-rise_through]             Rising through pins, ports, cells or nets\n  [-fall_through]             Falling through pins, ports, cells or nets\n  [-ignored]                  Only report exceptions which are fully ignored\n  [-scope_override]           Only report scoped exceptions which are fully \n                              or partially overriden\n  [-summary]                  Report a summary of all exceptions\n  [-coverage]                 Report the coverage of all timing exceptions\n  [-ignored_objects]          Report the list of ignored startpoints and \n                              endpoints\n  [-count_objects]            Report the number of objects in the timing \n                              exceptions\n  [-write_merged_exceptions]  Write merged timing exceptions\n  [-write_valid_exceptions]   Write timing exceptions with the valid objects \n                              only\n  [-no_header]                Do not generate a report header\n  [-file]                     Filename to output results to. (send output to \n                              console if -file is not used)\n  [-append]                   Append the results to file, don't overwrite the\n                              results file\n  [-return_string]            Return report as string\n  [-name]                     Output the results to GUI panel with this name\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Report all timing exceptions applied to setup and hold checks defined by\n  timing constraints in the current design, or report the exceptions on the\n  specified timing paths.\n\n  Timing exceptions can be defined by timing constraints such as\n  set_false_path or set_multicycle_path that change the default assumptions\n  for timing paths in the design.\n\n  The exceptions are reported to the standard output by default, but can be\n  redirected to a file or to a Tcl string variable.\n\nArguments:\n\n  -from <args> - (Optional) A list of start points on the timing path to\n  report exceptions on.\n\n  -rise_from <args> - (Optional) A list of the start points on the timing\n  path to report exceptions on the rising-edge of the path.\n\n  -fall_from <args> - (Optional) A list of the start points on the timing\n  path to report exceptions on the falling-edge of the path.\n\n  Important: Using the report_exceptions command with -from/-through/-to\n  options only matches timing exceptions that have been defined with the same\n  -from/-through/-to command line options. The specified patterns can be\n  different but the cell, pin, and port objects must also be the same to be\n  reported as an exception.\n\n  -to <args> - (Optional) A list of the end points for the timing path to\n  report exceptions on.\n\n  -rise_to <args> - (Optional) A list of the end points on the timing path to\n  report exceptions on the rising-edge of the path.\n\n  -fall_to <args> - (Optional) A list of the end points on the timing path to\n  report exceptions on the falling-edge of the path.\n\n  -through <args> - (Optional) A list of pins, cell, or nets through which\n  the timing path passes.\n\n  -rise_through <args> - (Optional) A list of pins, cell, or nets through\n  which the rising-edge timing path passes.\n\n  -fall_through <args> - (Optional) Specifies the list of pins, cell, or nets\n  through which the falling-edge timing path passes.\n\n  -ignored - (Optional) Report timing path exceptions in the current design\n  that are fully ignored by the Vivado timing engine. Ignored constraints\n  could be the result of an incorrectly defined constraint, or of missing\n  design objects, or of non-existent path. Timing exceptions that are\n  partially overridden are not reported with this option.\n\n  -scope_override - (Optional) Report scoped timing path exceptions in the\n  current design that are fully or partially overridden by top-level\n  constraints. This option does not report when the scoped constraints are\n  overridden by other scoped constraints whether from the same scope or from\n  a different scope.\n\n  -summary - (Optional) Report a summary of all timing exceptions.\n\n  -coverage - (Optional) Report the coverage of all timing exceptions.\n  Coverage is expressed as a percentage showing the number of pins reached by\n  the timing exception compared to the number of pins specified by the\n  -from/-through/-to options.\n\n  -ignored_objects - (Optional) Report the start points and endpoint objects\n  that are part of timing path exceptions, and ignored by the timing engine.\n\n  -count_objects - (Optional) Returns the number of objects in the exceptions\n  report.\n\n  -write_valid_exceptions - (Optional) Write only the valid timing exceptions\n  to the report. Valid exceptions have valid start points and endpoints.\n\n  -write_merged_exceptions - (Optional) Write the merged timing exceptions.\n  Merged timing exceptions include both the valid and invalid timing\n  exceptions.\n\n  -no_header - (Optional) Do not write a header to the report.\n\n  -file <arg> - (Optional) Write the report into the specified file. By\n  default the timing exceptions are reported to the standard output, or the\n  Tcl console. The specified file will be overwritten if one already exists,\n  unless -append is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -name <arg> - (Optional) The name of the report view to display in the\n  Vivado IDE when run in GUI mode. If the name has already been used in an\n  open report view, that view will be closed and a new report opened.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Report all timing exceptions in the current design.\n\n    report_exceptions\n\n  Report all timing exceptions ignored or overridden in the current design.\n\n    report_exceptions -ignored\n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n   *  report_timing\n   *  report_timing_summary\n   *  set_false_path\n   *  set_input_delay\n   *  set_max_delay\n   *  set_min_delay\n   *  set_multicycle_path\n   *  set_output_delay\n",
"generate_qor_suggestions": "generate_qor_suggestions\n\nDescription: \nGenerate QoR Suggestions\n\nSyntax: \ngenerate_qor_suggestions  [-max_paths <arg>] [-evaluate_pipelining]\n                          [-cell <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-max_paths]            Number of paths to consider for suggestion analysis\n                          Default: 100\n  [-evaluate_pipelining]  Generate DSP/BRAM pipelining xdc file\n  [-cell]                 Report QOR suggestions for a given cell\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n\nCategories: \nFeasibility, Report, Timing\n",
"split_diff_pair_ports": "split_diff_pair_ports\n\nDescription: \nRemove differential pair relationship between 2 ports\n\nSyntax: \nsplit_diff_pair_ports  [-quiet] [-verbose] <ports>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <ports>     Ports to split\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Splits an existing differential pair of ports into two single-ended ports.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ports> - (Required) The names of two ports of a differential pair to split\n  into single-ended ports.\n\nExamples:\n\n  The following example splits the specified diff pair ports to form two\n  single ended ports:\n\n    split_diff_pair_ports PORT_N PORT_P \n    \n\nSee Also:\n\n   *  make_diff_pair_ports\n   *  create_port\n   *  create_interface\n",
"export_simulation": "export_simulation\n\nDescription: \nExport a script and associated data files (if any) for driving standalone simulation using the specified simulator.\n\nSyntax: \nexport_simulation  [-simulator <arg>] [-of_objects <args>] [-step <arg>]\n                   [-ip_user_files_dir <arg>] [-ipstatic_source_dir <arg>]\n                   [-lib_map_path <arg>] [-install_path <arg>]\n                   [-gcc_install_path <arg>] [-script_name <arg>]\n                   [-directory <arg>] [-runtime <arg>] [-define <args>]\n                   [-generic <args>] [-include <args>] [-more_options <args>]\n                   [-single_step] [-use_ip_compiled_libs] [-absolute_path]\n                   [-export_source_files] [-generate_hier_access] [-exec]\n                   [-report_ip_status] [-force] [-quiet] [-verbose]\n\nUsage: \n  Name                     Description\n  ------------------------------------\n  [-simulator]             Target simulator (all|xsim|modelsim|questa|xcelium\n                           |vcs|riviera|activehdl). Default:all\n  [-of_objects]            Export simulation script for the specified object \n                           (IP/BD)\n  [-step]                  Write script for the specified step (Values: \n                           'compile', 'elaborate', 'simulate'). For \n                           -single_step specify 'simulate' value.\n  [-ip_user_files_dir]     Directory path to the exported IP/BD files \n                           (static, dynamic, data)\n  [-ipstatic_source_dir]   Directory path to the exported IP/BD static files\n  [-lib_map_path]          Compiled simulation library directory path\n  [-install_path]          Simulator installation directory path\n  [-gcc_install_path]      GNU compiler installation directory path for the \n                           g++/gcc executables\n  [-script_name]           Output script filename (Default:<ip>)\n  [-directory]             output directory path for the generated script\n  [-runtime]               Simulation run time (default:full simulation run \n                           or until a logical break or finish condition)\n  [-define]                Verilog defines\n  [-generic]               Vhdl generics\n  [-include]               Include directory path(s)\n  [-more_options]          Additional options for simulator tools\n  [-single_step]           Write single-step script (supported simulators: \n                           xcelium)\n  [-use_ip_compiled_libs]  Reference pre-compiled IP simulation library\n  [-absolute_path]         Make all file paths absolute\n  [-export_source_files]   Copy IP/BD source files to the output directory\n  [-generate_hier_access]  Extract path for hierarchical access simulation\n  [-exec]                  Execute generated script\n  [-report_ip_status]      Check IP/BD generation status for 'not generated' \n                           or 'stale' simulation targets\n  [-force]                 Overwrite previous files\n  [-quiet]                 Ignore command errors\n  [-verbose]               Suspend message limits during command execution\n\nCategories: \nToolLaunch, Simulation\n\nDescription:\n\n  Export a simulation script file for the target simulator. The generated\n  script will contain simulator tool commands for compiling, elaborating, and\n  simulating the design.\n\n  The command retrieves the simulation compile order of specified object and\n  export this information in a shell script, .do or .prj file.\n\n  The specified object can be either a simulation fileset, IP or a BD (Block\n  Design). If the object is not specified, then this command will generate a\n  script for the active simulation top in the current simulation fileset\n  source hierarchy.\n\n  By default, the design source file and include directory paths in the\n  compiler command line will be set in relative format. To make these paths\n  absolute, specify the -absolute_path switch. The command will also copy\n  data files (if any) from the fileset, IP or a BD to the output directory.\n  If the design contains verilog sources, then the generated script will also\n  copy the glbl.v file from the Vivado software installation area to the\n  output directory.\n\n  Note: In order to perform simulation with the generated script, the Xilinx\n  simulation library must be compiled first using compile_simlib Tcl command.\n  The compiled library directory path then must be specified when generating\n  the script. The generated script will automatically include the setup files\n  for the target simulator from the compiled library directory.\n\n  Note: If a design contains IP/BD sources, these sources will be generated\n  automatically before exporting the script.\n\n  This command returns nothing.\n\nArguments:\n\n  -simulator <arg> - (Required) Specify the target simulator name for which\n  the simulation script needs to be generated. The valid simulator names are: \n  xsim, modelsim, questa, xcelium, vcs, riviera, and activehdl. If this\n  option is not specified, then the command will generate the script for \n  all simulators.\n\n  -of_objects <arg> - (Optional) Specify the target object for which the\n  simulation script needs to be generated. The target object can be a\n  simulation fileset (simset), an IP, or BD source. If this option is not\n  specified, then the command will generate scripts for the current \n  simulation fileset.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_files, get_ips, current_fileset, or current_fileset -simset commands\n  rather than specifying objects by name. In addition, -of_objects cannot be\n  used with a search <pattern>.\n\n  -step <arg> - (Optional) Specify the name of the step for which the\n  simulation script needs to be generated. The valid step values are:\n  compile, elaborate, simulate. If this option is not specified, the script\n  will execute all the steps applicable for the specified simulator.\n\n  Note: The dependent steps (if applicable) will be generated first.\n\n  -ip_user_files_dir <arg> - (Optional) Specify the directory path to the\n  extracted design files for the generated IP/BD source. This is generally\n  the sub-directory named <project>/project.ip_user_files in the project \n  directory structure. For a managed-IP project, the default path is \n  ip_user_files. If this option is not specified, the extracted design files\n  will be picked automatically from the default directory path that is set\n  by the 'ip.user_files_dir' project property.\n\n  -ipstatic_source_dir <arg> - (Optional) Specify the directory path to the\n  exported IP/BD generated static source files. This is generally the\n  sub-directory named <project>/<project>.ip_user_files/ipstatic. For a\n  managed-IP project, the default path is ip_user_files/ipstatic. If this\n  option is not specified, the extracted design file (static) will be\n  picked automatically from the default directory path that is set by the\n  'sim.ipstatic.source_dir' project property.\n\n  -lib_map_path <arg> - (Optional) Specify directory path to the pre-compiled\n  simulation library for the specified simulator. The simulation library is\n  compiled using compile_simlib Tcl Command (Please see the header section in\n  the generated script for more information).\n\n  Alternatively, the pre-compiled simulation library path can be specified\n  using the 'compxlib.<simulator>_compiled_library_dir' fileset property.\n\n  Note: If the design reference SystemC/C++/C based IPs or Simulation models,\n  then you MUST specify the simulation library path using the -lib_map_path\n  switch or using the above mentioned property.\n \n  Note: If the specified path does not contain the compiled library, then the\n  generated script will compile the static IP files locally.\n\n   Use following syntax when exporting script for a single simulator:\n\n    -lib_map_path <compiled-library>\n\n    or,\n\n    set_property \\\n        compxlib.<simulator>_compiled_library_dir <compiled-library> \\\n        [current_project]\n\n   Use following syntax when exporting script for multiple simulators:\n\n    -lib_map_path [list {<simulator>=<compiled-library>}\n                        {<simulator>=<compiled-library>}\n                        ...\n                        {<simulator>=<compiled-library>}]\n\n    or,\n\n    Execute set_property Tcl command for respective simulators:\n\n    set_property \\\n        compxlib.<simulator>_compiled_library_dir <compiled-library> \\\n        [current_project]\n\n\n    Where <simulator> is the name of the simulator and <compiled-library>\n    is the path to the simulation library that is compiled for the\n    simulator specified with -simulator <simulator> switch.\n\n  -install_path <arg> - (Optional) Specify the directory path to the\n  simulator executables for the target simulator. If this option is not\n  specified, then the path to these executables must be set before executing\n  the generated script.\n\n  -gcc_install_path <arg> - (Optional) Specify the directory path to the GNU\n  executables for the target simulator. This option is required for designs\n  that contain SystemC, C++, or C sources. If this option is not specified,\n  then an attempt will be made to calculate the path to the GNU executables\n  based on the simulator install path settings.\n\n  -script_name <arg> - (Optional) Specify name of the generated script.\n  Default name is <simulation_top>.sh. If the -of_objects switch is\n  specified, then the default syntax of the script will be as follows:\n\n    -------------------------------------------------------------\n         Object Type                            Script Name\n        -------------------------------------------------------------\n        -of_objects [current_fileset -simset]   <simulation_top>.sh\n        -of_objects [get_ips <ip>]              <ip_name>.sh\n        -of_objects [get_files <ip>.xci]        <ip_name>.sh\n        -of_objects [get_files <name>.bd]       <bd_name>.sh\n        -------------------------------------------------------\n\n  -directory <arg> - (Optional) Specify the directory path where the script\n  file needs to be generated. By default, the script will be generated in the\n  export_sim/<simulator> directory.\n\n  -runtime <arg> - (Optional) Specify the simulation run time.\n\n  Alternatively, the simulation run time can be specified using the\n  '<simulator>.simulate.runtime' simulation fileset property.\n\n  If the run time value is empty, then simulation will run for infinite time\n  or until a logical break or finish condition.\n\n  -define <arg> - (Optional) Specify the Verilog defines applicable for the\n  current design. The syntax for specifying the defines is:\n\n    -define [list {<variable[=value]} ... [{<variable[=value]>}]]\n\n  Alternatively, the Verilog defines can be specified using the\n  'verilog_defines' simulation fileset property.\n\n  -generic <arg> - (Optional) Specify the VHDL generics applicable for the\n  current design. The syntax for specifying the generic variables is:\n\n    -generic [list {<variable[=value]} ... [{<variable[=value]>}]]\n\n  Alternatively, the VHDL generics can be specified using the 'vhdl_generic'\n  simulation fileset property.\n\n  -include <arg> - (Optional) Specify include directory paths for verilog\n  include files in the design. The syntax for specifying the include file\n  directory paths is:\n\n    -include [list {<include-directory} ... [{<include-directory>}]]\n\n  Alternatively, the include directory paths can be specified using the\n  'include_dirs' simulation fileset property.\n\n  -more_options <arg> - (Optional) Specify additional switches/args for the\n  simulator tools that need to be added when executing the script. The syntax\n  for specifying the switches/args is:\n\n    -more_options [list {<simulator>.<step>.<tool>:<list of switches/args>}\n                  {<simulator>.<step>.<tool>:<list of switches/args>}\n                  ...\n                  {<simulator>.<step>.<tool>:<list of switches/args>}]\n\n  Alternatively, the additional switches/args can be specified using the\n  '<simulator>.<step>.<tool>.more_options' simulation fileset property.\n\n  where,\n\n   *  <simulator> : Name of the simulator\n\n   *  <step> : Name of the step (compile, elaborate, simulate)\n\n   *  <tool> : Name of the simulator tool (xvlog, vcom, vcs, etc.)\n\n  -single_step - (Optional) Generate a single-step based script. If this\n  option is not specified, then a 3-step based script will be generated.\n\n  Note: This option is currently applicable for 'xcelium' simulator only.\n\n  -use_ip_compiled_libs - (Optional) Reference precompiled IP static library\n  during compilation. The IP static source will not be compiled but instead\n  it is compiled version will be referenced during elaboration. This switch\n  can also work with -ip_user_files_dir and -ipstatic_source_dir switches\n  for generating scripts using the pre-compiled IPs.\n\n  Alternatively, the usage or non-usage of precompiled IP static library can\n  be set using the 'sim.ipstatic.use_precompiled_libs' simulation fileset\n  property.\n\n  -absolute_path - (Optional) Specify this option to make the source and\n  include directory paths into absolute format in the generated script file.\n  By default, all the paths are written relative to the script output directory.\n\n  -export_source_files - (Optional) Specify this option to copy the design,\n  generated IP/BD, and data sources to the <simulator>/srcs sub-directory. If\n  the -of_objects specifies an IP or BD source, then the source files for\n  these objects will be copied to the <IP/BD>/<simulator>/srcs sub-directory.\n  The source and include file paths in the generated script will be set\n  relative to the srcs directory (the file paths can be made absolute using\n  the -absolute_path switch).\n\n  -generate_hier_access - (Optional) Specify this option to extract the path\n  information for the hierarchical access simulation flow.\n\n  -exec - (Optional) Execute the generated script.\n\n  -force - (Optional) Overwrite an existing script file of the same name. If\n  the script file already exists, is command returns an error unless the\n  -force argument is specified.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Generate a simulation script for the clk_core IP in a managed-IP project\n  for the questa simulator.\n\n    export_simulation \\\n         -simulator questa \\\n         -of_objects [get_ips clk_core] \\\n         -directory proj/test_ip_questa \\\n         -ip_user_files_dir managed_ip_project/ip_user_files_dir \\\n         -ipstatic_source_dir managed_ip_project/ip_user_files_dir/ipstatic \\\n         -lib_map_path /design/compiled_libs/questa/lib \\\n         -use_ip_compiled_libs\n\n  Generate a simulation script named tb_design.sh in test_xsim directory for\n  the current simulation fileset with the top set to tb_design for project\n  project_1/project_1.xpr for the xsim simulator. Use the pre-compiled IP\n  static library from the Vivado installation.\n\n    export_simulation \\\n          -simulator xsim \\\n          -directory test_xsim \\\n          -ip_user_files_dir project_1/project_1.ip_user_files_dir \\\n          -ipstatic_source_dir project_1/project_1.ip_user_files_dir/ipstatic \\\n          -use_ip_compiled_libs\n\n  Generate a simulation script for project project_1/project_1.xpr for the\n  modelsim simulator. Use the pre-compiled IP static library from the\n  /design/compiled_libs/modelsim/lib directory and export the IP/BD source\n  files to the proj/test_modelsim/srcs directory.\n\n    export_simulation \\\n          -simulator modelsim \\\n          -directory proj/test_modelsim \\\n          -ip_user_files_dir project_1/project_1.ip_user_files_dir \\\n          -ipstatic_source_dir project_1/project_1.ip_user_files_dir/ipstatic \\\n          -lib_map_path /design/compiled_libs/modelsim/lib \\\n          -export_source_files \\\n          -use_ip_compiled_libs\n\n  Generate a simulation script for project project_1/project_1.xpr for the\n  questa simulator. Use the pre-compiled IP static library from the\n  design/compiled_libs/questa/lib directory, set source file paths to the\n  absolute format.\n\n    export_simulation \\\n          -simulator questa \\\n          -directory proj/test_questa \\\n          -ip_user_files_dir project_1/project_1.ip_user_files_dir \\\n          -ipstatic_source_dir project_1/project_1.ip_user_files_dir/ipstatic \\\n          -lib_map_path design/compiled_libs/questa/lib \\\n          -absolute_path \\\n          -use_ip_compiled_libs\n\n  Generate a simulation script for the clk_core IP for the xcelium simulator.\n  Use pre-compiled IP static library from the\n  /design/compiled_libs/xcelium/lib directory and overwrite the existing\n  script named test_ip_xcelium.sh in the output directory.\n\n    export_simulation \\\n          -simulator xcelium \\\n          -of_objects [get_ips clk_core] \\\n          -directory proj/test_xcelium \\\n          -ip_user_files_dir project_1/project_1.ip_user_files_dir \\\n          -ipstatic_source_dir project_1/project_1.ip_user_files_dir/ipstatic \\\n          -lib_map_path /design/compiled_libs/xcelium/lib \\\n          -script_name output/test_ip_xcelium.sh \\\n          -force \\\n          -use_ip_compiled_libs\n\n  Generate and execute a simulation script for the clk_core BD for the vcs\n  simulator. Pass HEX_VAR verilog define, pass INCREMENT vhdl generic, pass\n  more options for vlogan and vcs and run simulation for 4000ns.\n\n   *  Export the script for the clk_core IP.\n\n        export_simulation \\\n               -simulator vcs \\\n               -of_objects [get_files clk_core.bd] \\\n               -directory xp \\\n               -ip_user_files_dir project_1/project_1.ip_user_files_dir \\\n               -ipstatic_source_dir project_1/project_1.ip_user_files_dir/ipstatic \\\n               -lib_map_path /design/compiled_libs/vcs/lib \\\n               -script_name verify.sh \\\n               -define [list {HEX_VAR=4'b0101}] \\\n               -generic [list {INCREMENT=10}] \\\n               -more_options \\\n                [list {vcs.compile.vlogan:-V} {vcs.elaborate.vcs:-timescale 1ps/1ps}] \\\n               -runtime 4000ns \\\n               -use_ip_compiled_libs\n\n   *  Verify the simulation for the clk_core IP.\n\n        cd xp/clk_core/vcs\n        ./verify.sh\n\n  Generate a simulation script for the current simulation fileset for the\n  riviera simulator. Include verilog header files from the fifo/incl\n  directory and run simulation for 3000ns.\n\n    export_simulation \\\n          -simulator riviera \\\n          -directory proj/test_riviera \\\n          -ip_user_files_dir project_1/project_1.ip_user_files_dir \\\n          -ipstatic_source_dir /project_1/project_1.ip_user_files_dir/ipstatic \\\n          -lib_map_path /design/compiled_libs/riviera/lib \\\n          -include [list {fifo/incl}] \\\n          -runtime 3000ns \\\n          -use_ip_compiled_libs\n\n  Generate a simulation script for all simulators. Use pre-compiled IP static\n  library from the respective simulator directory paths specified with the\n  -lib_map_path switch.\n\n    export_simulation \\\n          -simulator all \\\n          -directory proj/test_sim \\\n          -ip_user_files_dir project_1/project_1.ip_user_files_dir \\\n          -ipstatic_source_dir project_1/project_1.ip_user_files_dir/ipstatic \\\n          -lib_map_path [list {xsim=/compiled_libs/xsim/lib} \\\n                              {modelsim=/compiled_libs/modelsim/lib}  \\\n                              {questa=/compiled_libs/questa/lib}  \\\n                              {xcelium=/compiled_libs/xcelium/lib}  \\\n                              {vcs=/compiled_libs/vcs/lib}  \\\n                              {riviera=/compiled_libs/riviera/lib}  \\\n                              {activehdl=/compiled_libs/activehdl/lib} ] \\\n          -use_ip_compiled_libs\n\n  Generate a simulation script for the ten_gig_eth_mac IP for the Questa\n  simulator. Use option values from the in memory project and simulation fileset\n  properties that can be set upfront before calling export_simulation.\n\n    create_project -in_memory\n    set_property target_simulator questa [current_project]\n    set_property compxlib.questa_compiled_library_dir \\\n                 /design/compiled_libs/questa/lib \\\n                 [current_project]\n    set_property include_dirs [list {fifo/incl}] [current_fileset -simset]\n    set_property questa.simulate.runtime 3000ns [current_fileset -simset]\n    set_property verilog_define [list {HEX_VAR=4'b0101}] \\\n                 [current_fileset -simset]\n    set_property vhdl_generic [list {INCREMENT=10}] [current_fileset -simset]\n\n    export_simulation \\\n          -simulator questa \\\n          -of_objects [get_ips ten_gig_eth_mac] \\\n          -directory proj/test_questa \\\n          -script_name design.sh\n\nSee Also:\n\n   *  current_fileset\n   *  get_files\n   *  get_ips\n   *  compile_simlib\n   *  set_property\n",
"upvar": "upvar(n)              Tcl Built-In Commands              upvar(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       upvar - Create link to variable in a different stack frame\n\nSYNOPSIS\n       upvar ?level? otherVar myVar ?otherVar myVar ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This command arranges for one or more local  variables  in\n       the  current procedure to refer to variables in an enclos-\n       ing procedure call or to global variables.  Level may have\n       any  of  the  forms permitted for the uplevel command, and\n       may be omitted if the first letter of the  first  otherVar\n       is not # or a digit (it defaults to 1).  For each otherVar\n       argument, upvar makes the variable by  that  name  in  the\n       procedure  frame  given  by  level (or at global level, if\n       level is #0) accessible in the current  procedure  by  the\n       name given in the corresponding myVar argument.  The vari-\n       able named by otherVar need not exist at the time  of  the\n       call;   it  will be created the first time myVar is refer-\n       enced, just like an ordinary  variable.   There  must  not\n       exist  a  variable  by the name myVar at the time upvar is\n       invoked.  MyVar is always treated as the name of  a  vari-\n       able,  not  an array element.  An error is returned if the\n       name looks like an array element, such as a(b).   OtherVar\n       may refer to a scalar variable, an array, or an array ele-\n       ment.  Upvar returns an empty string.\n\n       The upvar command simplifies the implementation  of  call-\n       by-name  procedure  calling  and  also  makes it easier to\n       build new control constructs as Tcl procedures.  For exam-\n       ple, consider the following procedure:\n              proc add2 name {\n                 upvar $name x\n                 set x [expr {$x + 2}]\n              }\n       If  add2  is invoked with an argument giving the name of a\n       variable, it adds two  to  the  value  of  that  variable.\n       Although  add2  could  have been implemented using uplevel\n       instead of upvar, upvar  makes  it  simpler  for  add2  to\n       access the variable in the caller's procedure frame.\n\n       namespace  eval  is  another way (besides procedure calls)\n       that the Tcl naming context can change.  It  adds  a  call\n       frame  to  the  stack  to represent the namespace context.\n       This means each namespace eval command counts  as  another\n       call  level  for uplevel and upvar commands.  For example,\n       info level 1 will return a list describing a command  that\n       is  either  the  outermost procedure call or the outermost\n       namespace eval command.   Also,  uplevel  #0  evaluates  a\n       script at top-level in the outermost namespace (the global\n       namespace).\n\n       If an upvar variable is unset (e.g. x in add2 above),  the\n       unset  operation affects the variable it is linked to, not\n       the upvar variable.  There is no way  to  unset  an  upvar\n       variable  except  by  exiting the procedure in which it is\n       defined.  However, it is possible  to  retarget  an  upvar\n       variable by executing another upvar command.\n\nTRACES AND UPVAR\n       Upvar  interacts with traces in a straightforward but pos-\n       sibly unexpected manner.  If a variable trace  is  defined\n       on  otherVar,  that  trace  will  be  triggered by actions\n       involving myVar.  However, the  trace  procedure  will  be\n       passed  the  name of myVar, rather than the name of other-\n       Var.  Thus, the output  of  the  following  code  will  be\n       'localVar' rather than 'originalVar':\n              proc traceproc { name index op } {\n                 puts $name\n              }\n              proc setByUpvar { name value } {\n                 upvar $name localVar\n                 set localVar $value\n              }\n              set originalVar 1\n              trace variable originalVar w traceproc\n              setByUpvar originalVar 2\n\n       If  otherVar  refers to an element of an array, then vari-\n       able traces set for the entire array will not  be  invoked\n       when  myVar is accessed (but traces on the particular ele-\n       ment will still be invoked).  In particular, if the  array\n       is  env,  then changes made to myVar will not be passed to\n       subprocesses correctly.\n\nEXAMPLE\n       A decr command that works like incr  except  it  subtracts\n       the value from the variable instead of adding it:\n              proc decr {varName {decrement 1}} {\n                  upvar 1 $varName var\n                  incr var [expr {-$decrement}]\n              }\n\n\nSEE ALSO\n       global(n), namespace(n), uplevel(n), variable(n)\n\n\nKEYWORDS\n       context, frame, global, level, namespace, procedure, vari-\n       able\n\n\n\nTcl                                                      upvar(n)\n",
"set_package_pin_val": "set_package_pin_val\n\nDescription: \nSet user columns on one or more package pins\n\nSyntax: \nset_package_pin_val  [-quiet] [-verbose] <column> <value> <package_pins>...\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <column>        User column name\n  <value>         Value to set\n  <package_pins>  Package pin names\n\nCategories: \nXDC, PinPlanning\n\nDescription:\n\n  Create user-defined package pin attributes and assign values to specific\n  pins on the package.\n\n  User-defined pin attributes can be defined in a CSV file and imported into\n  an I/O Pin Planning project using read_csv, or can be edited in the project\n  using this command.\n\n  Note: Use the set_property command to set tool-defined properties of a\n  package pin.\n\nArguments:\n\n  <column> - (Required) Specify the user-defined column name. The column name\n  is case-sensitive. If the column does not already exist, a new attribute is\n  created for package pins. If the user-defined column name already exists,\n  the specified value is assigned to the specified pins.\n\n  Note: Column refers to the display of the attribute in the Package Pins\n  view in the tool GUI. The result of the command is an attribute on the\n  specified package pins that can be exported with write_csv for instance.\n\n  <value> - (Required) Specify the value to assign to the specified column.\n  You can repeat the set_package_pin_val command to assign different values\n  to different pins in the same column.\n\n  <package_pins> - (Required) Specify the package pins to assign the value\n  to. You can use the get_package_pins command to specify the package pins to\n  set.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example creates a new user-defined column in the Package Pins\n  view, and assigns the value true to the specified pin:\n\n    \n    set_package_pin_val -column track1 -value true -package_pins AK27 \n    \n\n  The following example creates a user-defined column called Test, then\n  assigns the value RED to all 'AK' package pins, then changes the value to\n  GREEN for the three specified pins:\n\n    set_package_pin_val -column Test -value RED \\  \n       -package_pins [get_package_pins AK*]  \n    set_package_pin_val -column Test -value GREEN \\  \n       -package_pins {AK1 AK2 AK3} \n    \n\nSee Also:\n\n   *  get_package_pins\n   *  set_property\n   *  write_csv\n",
"can_resolve_reference": "can_resolve_reference\n\nDescription: \nCheck if a module can be referenced\n\nSyntax: \ncan_resolve_reference  [-quiet] [-verbose] <module>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <module>    module name\n\nCategories: \nObject, Project\n\nDescription:\n\n  This command is used to validate reference to modules prior to trying to\n  import them into the design. Its primary use is in scripts like the script\n  produced by the write_bd_tcl command, though you can use it in your own\n  scripts as well.\n\n  This command returns 0 if the reference cannot be resolved, or returns 1 if\n  it can be resolved.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <module> - (Required) Specifies the name of the module to validate. The\n  module name is referenced from a loaded RTL design source file.\n\nExamples:\n\n  This example determines if the reference to the specified module can be\n  resolved:\n\n    can_resolve_reference clk_div \n    \n\nSee Also:\n\n   *  write_bd_tcl\n   *  write_project_tcl\n",
"encoding": "encoding(n)           Tcl Built-In Commands           encoding(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       encoding - Manipulate encodings\n\nSYNOPSIS\n       encoding option ?arg arg ...?\n_________________________________________________________________\n\n\nINTRODUCTION\n       Strings  in  Tcl  are encoded using 16-bit Unicode charac-\n       ters.  Different operating system interfaces  or  applica-\n       tions  may  generate  strings  in  other encodings such as\n       Shift-JIS.  The encoding command helps to bridge  the  gap\n       between Unicode and these other formats.\n\nDESCRIPTION\n       Performs  one  of  several  encoding  related  operations,\n       depending on option.  The legal options are:\n\n       encoding convertfrom ?encoding? data\n              Convert data to Unicode from the  specified  encod-\n              ing.   The characters in data are treated as binary\n              data where the lower 8-bits of  each  character  is\n              taken  as a single byte.  The resulting sequence of\n              bytes is treated  as  a  string  in  the  specified\n              encoding.   If  encoding is not specified, the cur-\n              rent system encoding is used.\n\n       encoding convertto ?encoding? string\n              Convert string from Unicode to the specified encod-\n              ing.  The result is a sequence of bytes that repre-\n              sents the converted string.  Each byte is stored in\n              the lower 8-bits of a Unicode character.  If encod-\n              ing is not specified, the current  system  encoding\n              is used.\n\n       encoding dirs ?directoryList?\n              Tcl can load encoding data files from the file sys- |\n              tem that describe additional encodings  for  it  to |\n              work  with.  This  command sets the search path for |\n              *.enc encoding data files to the list  of  directo- |\n              ries  directoryList.  If  directoryList  is omitted |\n              then the command returns the current list of direc- |\n              tories that make up the search path. It is an error |\n              for directoryList to not be a valid list. If,  when |\n              a search for an encoding data file is happening, an |\n              element in directoryList does not refer to a  read- |\n              able,   searchable   directory,   that  element  is |\n              ignored.\n\n       encoding names\n              Returns a list containing the names of all  of  the\n              encodings that are currently available.\n\n       encoding system ?encoding?\n              Set the system encoding to encoding. If encoding is\n              omitted then the command returns the current system\n              encoding.  The system encoding is used whenever Tcl\n              passes strings to system calls.\n\nEXAMPLE\n       It is common practice to write script files using  a  text\n       editor  that produces output in the euc-jp encoding, which\n       represents  the  ASCII  characters  as  singe  bytes   and\n       Japanese  characters  as two bytes.  This makes it easy to\n       embed literal strings that correspond to non-ASCII charac-\n       ters  by simply typing the strings in place in the script.\n       However, because the source  command  always  reads  files\n       using  the  current  system encoding, Tcl will only source\n       such files correctly when the encoding used to  write  the\n       file  is the same.  This tends not to be true in an inter-\n       nationalized setting.  For example, if  such  a  file  was\n       sourced  in North America (where the ISO8859-1 is normally\n       used), each byte in the file would be treated as  a  sepa-\n       rate  character  that maps to the 00 page in Unicode.  The\n       resulting  Tcl  strings  will  not  contain  the  expected\n       Japanese   characters.    Instead,  they  will  contain  a\n       sequence of Latin-1  characters  that  correspond  to  the\n       bytes of the original string.  The encoding command can be\n       used to convert this string to the expected Japanese  Uni-\n       code characters.  For example,\n              set s [encoding convertfrom euc-jp '\\xA4\\xCF']\n       would  return  the  Unicode  string '\\u306F', which is the\n       Hiragana letter HA.\n\n\nSEE ALSO\n       Tcl_GetEncoding(3)\n\n\nKEYWORDS\n       encoding\n\n\n\nTcl                            8.1                    encoding(n)\n",
"report_seu": "report_seu\n\nDescription: \nDisplay all the SEEP changes on the device\n\nSyntax: \nreport_seu  [-file <arg>] [-append] [-return_string] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to. Send output to console if \n                    -file is not used.\n  [-append]         Append to existing file\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Many devices, especially those that operate in space or in high altitudes,\n  must be able to handle single-event upsets (SEUs), caused when charged\n  particles collide with electronic circuitry.\n\n  Xilinx IP cores, like the Soft Error Mitigation (SEM) core, and design\n  techniques such as triple module redundancy (TMR), let you design layers of\n  SEU protection into your products. If one circuit fails, redundant circuits\n  perform a voting function to identify and correct the circuit that has\n  failed. See https://www.xilinx.com/products/quality/single-event-upsets.htm\n  for more information.\n\n  This command reports the device resources used for mitigation of\n  single-event upsets (SEU) and other single-event effects (SEEs) in the\n  design.\n\n  This command returns the SEU report, or returns an error if it fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. This\n  command will overwrite any files of the same name without warning.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example writes the SEU report to the specified file:\n\n    report_seu -file C:/Data/seu_mitigation.txt \n    \n\nSee Also:\n\n   *  synth_design\n",
"get_nodes": "get_nodes\n\nDescription: \nGet a list of nodes in the device.\n\nSyntax: \nget_nodes  [-of_objects <args>] [-regexp] [-nocase] [-filter <arg>] [-uphill]\n           [-downhill] [-flyover] [-from <args>] [-to <args>] [-quiet]\n           [-verbose] [<patterns>]\n\nReturns: \nnodes\n\nUsage: \n  Name           Description\n  --------------------------\n  [-of_objects]  Get 'node' objects of these types: 'net tile node bel_pin \n                 site_pin wire pip speed_model'.\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-uphill]      Get the nodes uphill (driver) from the site_pin, pip, node \n                 or tile(s) provided in the -of_objects.\n  [-downhill]    Get the nodes downhill (loads) from the site_pin, pip, node \n                 or tile(s) provided in the -of_objects.\n  [-flyover]     Get the nodes that fly over the given tile(s).\n  [-from]        -from <pip/site pin> Return the nodes beginning at this pip \n                 or site pin.  May be used in combination with uphill.  \n                 Default is downhill.  -all is implied.\n  [-to]          -to <pip/site pin> Return the nodes ending at this wire or \n                 site pin.  May be used in combination with uphill.  Default \n                 is downhill.  -all is implied.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match the 'node' objects against patterns.\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Returns a list of nodes on the device that match a specified search pattern\n  in an open design.\n\n  The default command gets a list of all nodes on the device.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -of_objects <args> - (Optional) Return the nodes of the specified nets,\n  tiles, nodes, bel_pins, site_pins, wires, speed_model or pip objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - Filter the results list with the specified expression. The\n  -filter argument filters the list of objects returned by get_nodes based on\n  property values on the nodes. You can find the properties on an object with\n  the report_property or list_property commands. Any property/value pair can\n  be used as a filter. In the case of the node object, 'IS_INPUT_PIN',\n  'IS_BEL_PIN' and 'NUM_WIRES' are some of the properties that can be used to\n  filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -uphill - (Optional) Return the nodes uphill of objects specified by the\n  -of_objects option. Uphill nodes precede the specified object in the logic\n  network.\n\n  -downhill - (Optional) Return the nodes downhill of objects specified by\n  the -of_objects option. Downhill nodes follow the specified object in the\n  logic network.\n\n  -flyover - (Optional) Return the nodes that pass through (or flyover) the\n  specified tiles.\n\n  -from <args> - (Optional) Defines the starting points of the nodes to get\n  from site_pin or pip objects. This option can be combined with -uphill. The\n  default is to return nodes downhill of a start point. By default, all nodes\n  will be returned.\n\n  -to <args> - (Optional) Defines the ending points of the nodes to get from\n  site_pin or pip objects. This option can be combined with -uphill. The\n  default is to return nodes downhill of a start point to the specified end\n  point. By default, all nodes will be returned.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Return nodes matching the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  nodes on the device. More than one search pattern can be specified to find\n  nodes based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the nodes associated with the specified tile:\n\n    get_nodes -of_objects [get_tiles CLBLM_R_X11Y158] \n    \n\n  The following example returns the nodes downhill from the specified node:\n\n    get_nodes -downhill -of_objects [get_nodes LIOB33_SING_X0Y199/IOB_PADOUT0] \n    \n\nSee Also:\n\n   *  get_site_pins\n   *  get_tiles\n   *  get_wires\n   *  list_property\n   *  report_property\n",
"list_property": "list_property\n\nDescription: \nList properties of object\n\nSyntax: \nlist_property  [-class <arg>] [-regexp] [-quiet] [-verbose] [<object>]\n               [<pattern>]\n\nReturns: \nlist of property names\n\nUsage: \n  Name         Description\n  ------------------------\n  [-class]     Object type to query for properties. Ignored if object is \n               specified.\n  [-regexp]    Pattern is treated as a regular expression\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<object>]   Object to query for properties\n  [<pattern>]  Pattern to match properties against\n               Default: *\n\nCategories: \nObject, PropertyAndParameter\n\nDescription:\n\n  Gets a list of all properties on a specified object or class.\n\n  Note: report_property also returns a list of properties on an object or\n  class of objects, but also reports the property type and property value.\n\nArguments:\n\n  -class <arg> - (Optional) Return the properties of the specified class\n  instead of a specific object. The class argument is case sensitive, and\n  most class names are lower case.\n\n  Note: -class cannot be used together with an <object>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <object> - (Optional) A single object on which to report properties.\n\n  Note: If you specify multiple objects you will get an error.\n\n  <pattern> - (Optional) Match the available properties on the <object> or\n  -class against the specified search pattern. The <pattern> applies to the\n  property name, and only properties matching the specified pattern will be\n  reported. The default pattern is the wildcard `*` which returns a list of\n  all properties on the specified object.\n\n  Note: The search pattern is case sensitive, and most properties are UPPER\n  case.\n\nExamples:\n\n  The following example returns all properties of the specified CELL object:\n\n    list_property [get_cells cpuEngine] \n    \n\n  The following example returns the properties matching the specified search\n  pattern from the BEL class of objects:\n\n    list_property -class bel *NUM* \n    \n\nSee Also:\n\n   *  create_property\n   *  get_cells\n   *  get_property\n   *  list_property_value\n   *  report_property\n   *  reset_property\n   *  set_property\n",
"check_ip_cache": "",
"group_path": "group_path\n\nDescription: \nGroups paths for cost function calculations\n\nSyntax: \ngroup_path  [-name <args>] [-weight <arg>] [-default] [-from <args>]\n            [-to <args>] [-through <args>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-name]     The name of group, can be multiple names\n  [-weight]   Cost function Weight, Valid values are 1, 2\n              Default: 1.0\n  [-default]  Restore path to its default group\n  [-from]     Filter by paths starting at these path startpoints\n  [-to]       Filter by paths terminating at these path endpoints\n  [-through]  Consider paths through pins, cells or nets\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  This command lets you group a set of paths for cost function calculations,\n  primarily for timing analysis. The Vivado tool automatically defines path\n  groups of clock signals for special handling. User-defined path groups can\n  be specified generally as from a startpoint, or to an endpoint, or as\n  specific paths from-through-to specific points. Once a path group has been\n  created, some timing analysis can be performed against it with the\n  report_timing command.\n\n  You can specify a weight for an existing path group of clocks, and let the\n  placement, routing, and optimization engines prioritize those paths first.\n\n  To remove a path from a path group, you must specify the -default option to\n  remove the path from a named path group and restore the path to the\n  standard 'default' path group.\n\n  This option has the following limitations:\n\n   *  For paths originally assigned by the tool to a clock path group, the\n      -default option will revert those paths to the clock path group instead\n      of reverting them to the 'default' path group.\n\n   *  group_path -default and reset_path are completely independent commands.\n      The reset_path command doesn't affect path groups, and the group_path\n      command doesn't affect other timing exceptions .\n\n  The path groups currently defined in a design can be found by using the\n  get_path_groups command.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -name <arg> - (Optional) Specifies the name of the path group. If the path\n  group name already exists, the specified paths will be added to the\n  existing group.\n\n  -weight [ 1 | 2 ] - (Optional) Specify the priority of real clock path\n  groups with a value of 1 for standard priority, or 2 for high priority.\n  High priority path groups are processed first during placement, routing,\n  and physical optimization. The default is 1, or standard priority.\n\n  Note: The -weight option is only supported for use with clock path groups,\n  and requires the use of -name to specify the path group. It is not\n  supported for use with user-defined path groups, or with -from/-through/-to\n  options.\n\n  -default - (Optional) Restores a path group back to the 'default' group,\n  which contains all paths not assigned to other group. This option cannot be\n  specified with -name or -weight. The path must be specified by\n  -from/-through/-to as it was initially defined when assigned to a path\n  group.\n\n  -from <args> - (Optional) Include paths starting at the specified\n  startpoints. The startpoints can be specified as pins, ports, or clocks.\n\n  -through <element_names> - (Optional) Include paths routed through the\n  specified pins, cells, or nets.\n\n  -to <path_names> - (Optional) Include all paths to the specified endpoints.\n  Endpoints can be specified as pins, ports, or clocks.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example creates a group named signal_grp to the specified\n  registers' endpoints matching *signal*reg/D, and then reports timing on the\n  specified group:\n\n    group_path -to [get_pins *signal*reg/D -hierarchical] -name signal_grp  \n    report_timing -group signal_grp \n    \n\n  The path group signal_grp is also returned by the get_path_groups command:\n\n    get_path_groups signal_grp \n    \n\n  The following example removes the path from the signal_grp, restoring it to\n  the default path group:\n\n    group_path -to [get_pins *signal*reg/D -hierarchical] -default \n    \n\nSee Also:\n\n   *  get_path_groups\n   *  report_timing\n   *  reset_path\n",
"get_wires": "get_wires\n\nDescription: \nGet a list of wires.\n\nSyntax: \nget_wires  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-uphill]\n           [-downhill] [-from <args>] [-to <args>] [-quiet] [-verbose]\n           [<patterns>]\n\nReturns: \nwires\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the wires of these tiles, nodes, pips, or nets.\n  [-uphill]      Get the wires uphill from the provided pip.\n  [-downhill]    Get the wires downhill from the provided pip.\n  [-from]        -from <pip/site pin> Return the ordered list of wires \n                 beginning at this pip or site pin.  May be used in \n                 combination with uphill.  Default is downhill.  -all is \n                 implied.\n  [-to]          -to <pip/site pin> Return the ordered list of wires ending \n                 at this wire or site pin.  May be used in combination with \n                 uphill.  Default is downhill.  -all is implied.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match wires against patterns\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  Returns a list of wires in the design that match a specified search pattern\n  in an open design.\n\n  The default command gets a list of all wires in the design.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_wires based on property values on the wires. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the wire\n  object, 'NAME', 'NUM_DOWNHILL_PIPS' and 'NUM_UPHILL_PIPS' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Return the wires of the specified nodes,\n  PIPs, or tiles.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Return wires matching the specified search\n  patterns. The default pattern is the wildcard `*` which gets a list of all\n  wires in the design. More than one search pattern can be specified to find\n  wires based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the wires associated with the specified tile:\n\n    get_wires -of_objects [get_tiles IO_INT_INTERFACE_L_X0Y198] \n    \n\nSee Also:\n\n   *  get_nodes\n   *  get_pips\n   *  get_tiles\n   *  list_property\n   *  report_property\n",
"uninstall": "uninstall\n\nDescription: \nInstall board\n\nSyntax: \nuninstall  [-quiet] [-verbose] <board>\n\nReturns: \nNothing\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <board>     Name of board to uninstall\n\nCategories: \nTools\n",
"combine_hw_platforms": "combine_hw_platforms\n\nDescription: \nAdd a hw_emu Xilinx Shell Archive to an existing hw Xilinx Shell Archive\n\nSyntax: \ncombine_hw_platforms  [-hw <arg>] [-hw_emu <arg>] [-o <arg>] [-force] [-quiet]\n                      [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-hw]       A hw Xilinx Shell Archive\n              Values: A filename with alphanumeric characters and .xsa \n              extension.\n  [-hw_emu]   A hw_emu Xilinx Shell Archive\n              Values: A filename with alphanumeric characters and .xsa \n              extension.\n  [-o]        The (optional) output Xilinx Shell Archive. If not specified, \n              the hw_emu will be added to the hw file, overwriting the \n              original file.\n              Values: A filename with alphanumeric characters and .xsa \n              extension.\n  [-force]    Overwrite existing Xilinx Shell Archive file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nVitis, Platform, FileIO\n",
"exit": "exit(n)               Tcl Built-In Commands               exit(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       exit - End the application\n\nSYNOPSIS\n       exit ?returnCode?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Terminate  the process, returning returnCode to the system\n       as the exit status.  If returnCode is not  specified  then\n       it defaults to 0.\n\nEXAMPLE\n       Since non-zero exit codes are usually interpreted as error\n       cases by the calling  process,  the  exit  command  is  an\n       important  part of signaling that something fatal has gone\n       wrong. This code fragment is useful in scripts to act as a\n       general problem trap:\n              proc main {} {\n                  # ... put the real main code in here ...\n              }\n\n              if {[catch {main} msg options]} {\n                  puts stderr 'unexpected script error: $msg'\n                  if {[info exist env(DEBUG)]} {\n                      puts stderr '---- BEGIN TRACE ----'\n                      puts stderr [dict get $options -errorinfo]\n                      puts stderr '---- END TRACE ----'\n                  }\n\n                  # Reserve code 1 for 'expected' error exits...\n                  exit 2\n              }\n\n\nSEE ALSO\n       exec(n)\n\n\nKEYWORDS\n       exit, process\n\n\n\nTcl                                                       exit(n)\n",
"get_ips": "get_ips\n\nDescription: \nGet a list of IPs in the current design\n\nSyntax: \nget_ips  [-regexp] [-nocase] [-all] [-filter <arg>] [-exclude_bd_ips]\n         [-of_objects <args>] [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nlist of IP objects\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-regexp]          Patterns are full regular expressions\n  [-nocase]          Perform case-insensitive matching\n  [-all]             Include subcore IP in search\n  [-filter]          Filter list with expression\n  [-exclude_bd_ips]  Exclude all IP owned by a block design.\n  [-of_objects]      Get 'ip' objects of these types: 'ip file'.\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  [<patterns>]       Match IP names against patterns\n                     Default: *\n                     Values: The default search pattern is the wildcard *, or\n                     .* when -regexp is specified.\n\nCategories: \nObject, Project, IPFlow\n\nDescription:\n\n  Get a list of IP cores in the current project based on the specified search\n  pattern. The default command returns a list of all IPs in the project.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -all - (Optional) Returns submodules of IP objects. Submodules are IP\n  instances that are created as part of the generation of the parent IP core.\n  By default, only parent IP objects used in the current project or design\n  are returned, any IP cores used within those parent IP objects are not\n  returned.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_ips based on property values on the IP cores. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the 'IP' object, 'NAME' and 'DELIVERED_TARGETS' are some of\n  the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -exclude_bd_ips - (Optional) Do not include IPs from the current design\n  that belong to a block design object.\n\n  -of_objects <arg> - (Optional) Get a list of the IP cores of the specified\n  IP or file objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match IP cores in the design against the specified\n  search patterns. The default pattern is the wildcard `*` which gets a list\n  of all IP cores in the project. More than one pattern can be specified to\n  find multiple cores based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns a list of IP cores with names beginning with\n  the string 'EDK':\n\n    get_ips EDK* \n    \n\nSee Also:\n\n   *  create_ip\n   *  generate_target\n   *  get_ipdefs\n   *  import_ip\n   *  update_ip_catalog\n",
"send_gid_msg": "send_gid_msg\n\nDescription: \nSend a fully formatted message with unique GID. Id, ssname, severity and msg options are mandatory.\nTo register a new value for ssname, please send an email to msgmgr@xilinx.com with the following information:\n1. Requested ssname. Should be <= 12 characters in length, and contain only lower/upper case letters, digits,\nthe underscore, and (if desired) end with the :: sequence. If :: is used, everything after the first :: sequence\nin the value of ssname used with this command will be treated as a wildcard.\nSo for example, if you have registered 'board::' with msgmgr, and then use 'board::utils' as the ssname with this command,\nit will be accepted as valid.\nBut if you register 'board', the same value of ssname is invalid.\n2. The name of the engineering owner for this new ssname.\n3. The name of the manager of the engineering owner.\n4. A one-line description of the tcl files that will use this ssname.\nNote that the engineering owner and their manager are responsible for making sure the value of -id used with each instance of\nthis command is unique for the ssname that they have registered.\n\nSyntax: \nsend_gid_msg  [-continue] -id <arg> -ssname <arg> -severity <arg>\n              [-description <arg>] [-resolution <arg>] [-quiet] [-verbose]\n              <msg>\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-continue]     Continue the execution of the current tcl script (if any) \n                  in cases where severity is ERROR. Default behavior is to \n                  terminate the currently executing script on ERROR.\n  -id             An integer identifier >= 1, caller must insure that it is \n                  unique for the given value of ssname. Required.\n  -ssname         A string identifier indicating the general source of the \n                  message. For example, 'board_infra'. Any identifier used \n                  must be pre-approved by msgmgr@xilinx.com. Messages using \n                  unapproved identifiers will not be output. Required.\n  -severity       Message severity to send, e.g. 'INFO','WARNING', 'ERROR' or\n                  'CRITICAL WARNING'\n  [-description]  Optional message description. It is recommended that the \n                  description start with source file:line number where the \n                  message originated. Example:\n                  'apply_board_connection.tcl:123 This message indicates that\n                  given interface is not correctly defined.'\n                   For information on how to retrieve the tcl source file \n                  line number see:\n                  https://stackoverflow.com/questions/27834094/getting-the-li\n                  ne-number-of-executing-code-in-tcl\n  [-resolution]   Optional message resolution. Should describe to the \n                  customer possible steps for resolving the problem.\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <msg>           Complete formated message text. Required.\n\nCategories: \nReport\n",
"report_waivers": "report_waivers\n\nDescription: \nReport status of DRC/METHODOLOGY/CDC message waivers\n\nSyntax: \nreport_waivers  [-file <arg>] [-type <arg>] [-write_valid_waivers]\n                [-write_ignored_waivers] [-append] [-return_string]\n                [-show_msgs_with_no_waivers] [-quiet] [-verbose]\n\nUsage: \n  Name                          Description\n  -----------------------------------------\n  [-file]                       Name of file to report waivers\n  [-type]                       Type of waiver - ALL, DRC, METHODOLOGY, CDC\n  [-write_valid_waivers]        (special) Specifies writing out the specific \n                                waivers which were used in the last \n                                report_drc/methodology/cdc run(s)\n  [-write_ignored_waivers]      (special) Specifies writing out the specific \n                                waivers which were NOT used in the last \n                                report_drc/methodology/cdc run(s)\n  [-append]                     Append the current report results to the file\n                                specified with -file\n  [-return_string]              Return report results as a string object\n  [-show_msgs_with_no_waivers]  Also list report_drc/methodology/cdc messages\n                                which have no defined waivers\n  [-quiet]                      Ignore command errors\n  [-verbose]                    Suspend message limits during command \n                                execution\n\nCategories: \nWaiver, Report, Object\n\nDescription:\n\n  Reports DRC, METHODOLOGY, and CDC violation messages and displays what\n  waivers are in place in the current design.\n\n  In addition, the report_drc, report_methodology, and report_cdc commands\n  have options to run the reports on waived violations or checks.\n\nArguments:\n\n  -file <arg> - (Optional) Write the waivers report into the specified file.\n  The specified file will be overwritten if one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -type <arg> - (Optional) Specifies the type of waiver to report. Currently\n  supports DRC, METHODOLOGY, and CDC. If the -type is not specified, all\n  waivers will be reported.\n\n  -write_valid_waivers <arg> - (Optional) This option requires the use of the\n  -file option, and writes the valid waivers that were used during the last\n  run of the DRC, methodology, or CDC reports.\n\n  -write_ignored_waivers <arg> - (Optional) This option requires the use of\n  the -file option, and writes the waivers that were NOT used during the last\n  run of the DRC, methodology, or CDC reports.\n\n  -append - (Optional) Append the output of the report to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the report output to a Tcl string\n  rather than to the standard output. The Tcl string can be captured by a\n  variable definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -show_msgs_with_no_waivers - (Optional) By default the report_waivers\n  command will hide data for all DRC, METHODOLOGY, and CDC violations, which\n  do not have waivers defined. This options restores the reporting of\n  violation messages which have no defined waivers.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  This example reports all waivers in the current design:\n\n    report_waivers \n    \n\nSee Also:\n\n   *  create_waiver\n   *  delete_waivers\n   *  get_waivers\n   *  report_cdc\n   *  report_drc\n   *  report_methodology\n   *  write_waivers\n",
"report_constant_paths": "report_constant_paths\n\nDescription: \nReport constant paths\n\nSyntax: \nreport_constant_paths  [-max_paths_per_endpoint <arg>] [-column_style <arg>]\n                       [-file <arg>] [-append] [-no_header]\n                       [-of_objects <args>] [-return_string] [-quiet]\n                       [-verbose] [<objects>]\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-max_paths_per_endpoint]  number of branches per endpoint to report traces\n                             for\n                             Default: 1\n  [-column_style]            style for path report columns: Values: \n                             variable_width, anchor_left, fixed_width\n                             Default: variable_width\n  [-file]                    Filename to output results to. (send output to \n                             console if -file is not used)\n  [-append]                  Append the results to file, don't overwrite the \n                             results file\n  [-no_header]               Do not generate a report header\n  [-of_objects]              Report constant paths for these constant paths\n  [-return_string]           return report as string\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n  [<objects>]                endpoint pins or instances\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Reports constant path objects that meet the specified criteria.\n\nArguments:\n\n  -max_paths_per_endpoint - Specify maximum number of paths to report per\n  constant endpoint object.\n\n  Note: By default, 1 path per endpoint has been reported.\n\n  -column_style [ variable_width | anchor_left | fixed_width ] - (Optional)\n  Specify the format of the timing path portion of the timing report output.\n\n  Note: The default format is anchor_left.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  -no_header - (Optional) Will not print header which contains information\n  about tool, system, device, and design on top of the report.\n\n  -of_objects - (Optional) Report constant paths for specified paths. For\n  object retrieving get_constant_paths command can be used.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  <objects> - (Required) Design cell(s) or pin(s) object list to report.\n\nExamples:\n\n  Report constant paths of the specified pin.\n\n    report_constant_paths [get_pins cpuEngine/or1200_cpu/or1200_sprs/esr/D]\n\n  Output a report into the specified file with fixed column style and in\n  append mode.\n\n    report_constant_paths [get_pins cpuEngine/or1200_cpu/or1200_sprs/esr/D] -file filename.txt -append -column_style fixed\n\n  Report constant paths of the specified cell.\n\n    report_constant_paths [get_cells cpuEngine/or1200_cpu/or1200_sprs/esr]\n\nSee Also:\n\n   *  get_constant_paths\n",
"incr": "incr(n)               Tcl Built-In Commands               incr(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       incr - Increment the value of a variable\n\nSYNOPSIS\n       incr varName ?increment?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Increments  the value stored in the variable whose name is\n       varName.  The value of the variable must  be  an  integer.\n       If  increment is supplied then its value (which must be an\n       integer) is added to the value of variable varName;   oth-\n       erwise  1 is added to varName.  The new value is stored as\n       a decimal string in variable varName and also returned  as\n       result.\n\n       Starting  with  the  Tcl 8.5 release, the variable varName |\n       passed to incr may be unset, and in that case, it will  be |\n       set  to  the  value  increment or to the default increment |\n       value of 1.\n\nEXAMPLES\n       Add one to the contents of the variable x:\n              incr x\n\n       Add 42 to the contents of the variable x:\n              incr x 42\n\n       Add the contents of the variable y to the contents of  the\n       variable x:\n              incr x $y\n\n       Add  nothing  at  all  to the variable x (often useful for\n       checking whether an argument to a  procedure  is  actually\n       integral and generating an error if it is not):\n              incr x 0\n\n\nSEE ALSO\n       expr(n)\n\n\nKEYWORDS\n       add, increment, variable, value\n\n\n\nTcl                                                       incr(n)\n",
"tclLog": "",
"report_fit": "report_fit\n\nDescription: \nRun FIT estimation and display report\n\nSyntax: \nreport_fit  [-alt <arg>] [-long <arg>] [-lat <arg>] [-devices <arg>]\n            [-time <arg>] [-temp <arg>] [-revised_packaging_model]\n            [-file <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-alt]                      The altitude/elevation where the circuit will \n                              be deployed.  Default units are in meters.  Use\n                              set_units to change.\n                              Default: 0.0\n  [-long]                     The longitude where the circuit will be \n                              deployed:  Range 0 to 360\n                              Default: 285\n  [-lat]                      The latitude where the circuit will be \n                              deployed:  Range -90 to 90\n                              Default: 40\n  [-devices]                  The number of devices that will be deployed in \n                              the application.\n                              Default: 1\n  [-time]                     The time window in which the application will \n                              be running (in months).\n                              Default: 12\n  [-temp]                     The junction temperature in which the device(s)\n                              will be running (in degrees C):  25, 85, 100, \n                              or 125\n                              Default: 25\n  [-revised_packaging_model]  Use revised packaging model for FIT estimation\n  [-file]                     Filename to output results to. (send output to \n                              console if -file is not used)\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n\nCategories: \nReport\n",
"nlopt_child_process": "nlopt_child_process\n\nDescription: \nEntry for nlopt child process control\n\nSyntax: \nnlopt_child_process  -mainShmName <arg> -shmShift <arg> -workerId <arg>\n                     -intFolderPath <arg> -eNumber <arg> [-quiet] [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  -mainShmName    Main shared memory name\n  -shmShift       Shared memory address shift due to alignment and array \n                  overhead\n  -workerId       Worker ID\n  -intFolderPath  Relative folder path for intermediate files\n  -eNumber        E number\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nTools\n",
"report_config_implementation": "report_config_implementation\n\nDescription: \nReport Implementation flow Config param\n\nSyntax: \nreport_config_implementation  [-file <arg>] [-force] [-append] [-return_string]\n                              [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to. Send output to console if \n                    -file is not used.\n  [-force]          Overwrite existing file\n  [-append]         Append to existing file\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report the user-definable implementation flow configuration parameters for\n  the implementation processes. These are parameters that can be modified\n  using the config_implementation command.\n\n  This command returns the selected report or the name of the output file, or\n  returns an error if it fails.\n\nArguments:\n\n  -file <arg> - (Optional) Write the configuration parameters report to the\n  specified file. The specified file will not be overwritten if one already\n  exists, unless -force is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -force - (Optional) Overwrite the specified file if it already exists.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  This example reports the user-configurable implementation parameters to the\n  Tcl console:\n\n    report_config_implementation\n\nSee Also:\n\n   *  config_implementation\n",
"delete_port": "",
"get_noc_model": "get_noc_model\n\nDescription: \nGet NOC physical model\n\nSyntax: \nget_noc_model  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n               [-quiet] [-verbose] [<patterns>]\n\nReturns: \nnoc_model\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the noc_model of these device.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match noc_model against patterns\n                 Default: *\n\nCategories: \nNOC, Object\n",
"set_msg_config": "set_msg_config\n\nDescription: \nConfigure how the Vivado tool will display and manage specific messages, based on message ID, string, or severity.\n\nSyntax: \nset_msg_config  [-id <arg>] [-string <args>] [-severity <arg>] [-limit <arg>]\n                [-new_severity <arg>] [-suppress] [-regexp] [-quiet] [-verbose]\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-id]            A qualifier, apply the selected operation only to messages\n                   that match given message id. Example: '-id {Common \n                   17-35}'.\n                   Default: match any id\n  [-string]        A qualifier, apply the selected operation only to messages\n                   that contain the given list of strings.\n                   Default: none\n  [-severity]      A qualifier, apply the selected operation only to messages\n                   at the given severity level. Example: '-severity INFO'\n                   Default: match any severity\n  [-limit]         for the messages that match the qualifiers, limit the \n                   number of messages displayed to the given integer value. \n                   Can only be used in conjunction with one of -id or \n                   -severity.\n  [-new_severity]  for the messages that match the qualifiers, change the \n                   severity to the given value for the current project\n  [-suppress]      for the messages that match the qualifiers, suppress (do \n                   not display) any messages for the current project\n  [-regexp]        The values used for -string are full regular expressions\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  This command lets you configure the messages returned by the Vivado tool in\n  the current project. Use this command to change the severity of messages,\n  to limit the number of times a message is reported, or to suppress the\n  message altogether. However, you can only perform one of these actions at\n  one time with set_msg_config:\n\n   *  Customize the severity of messages returned by the tool to specific\n      levels appropriate to your usage. For instance, set the severity of a\n      specified message ID from one type, such as WARNING, to another type,\n      such as ERROR.\n\n      Note: You cannot downgrade a Vivado Design System ERROR message to make\n      it less than an error.\n\n   *  Define the number of messages that will be returned by the tool during\n      a design session, or single invocation. You can specify the limit of a\n      specific message ID, or the limit for a specific severity of messages.\n\n      Note: The default message limit for all message IDs is set to 100, and\n      is defined by the parameter messaging.defaultLimit. This is the limit\n      applied to each separate message returned by the tool. You can report\n      the current value of this parameter with the get_param command, and\n      change it as needed using the set_param command.\n\n   *  Suppress a specific message ID from being reported by the tool at all.\n      You can enable messages that were previously suppressed using the\n      reset_msg_config command.\n\n   *  An error is returned if more than one action is attempted in a single\n      set_msg_config command.\n\n  Message qualifiers of string, ID, and severity are used to determine which\n  messages are configured by the set_msg_config command. You must supply at\n  least one message qualifier to identify a message or group of messages to\n  apply the command to. Multiple qualifiers have an AND relationship; the\n  configuration rule will be applied only to messages matching all\n  qualifiers.\n\n  Note: set_msg_config does not support the use of wildcards in message\n  qualifiers.\n\n  Message configuration rules are project specific, and are persistent with\n  the project when the project is closed and reopened.\n\n  Note: Message configuration rules apply to the current project and are\n  passed automatically to subordinate processes, such as synthesis and\n  implementation runs. Do not use set_msg_config in pre and post Tcl scripts.\n\n  Use the get_msg_config command to report the current configuration of a\n  specific message, or the configuration rules defined in the current\n  project. Restore messages to their default configurations using the\n  reset_msg_config command.\n\n  The set_msg_config command is not supported by report_cdc as that command\n  does not generate messages through the message manager.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -id <arg> - (Optional) Specify a message ID pattern to find message IDs\n  that match the specified argument. The specified <arg> is used as a search\n  pattern. All message IDs that match the specified pattern will be affected\n  by the set_msg_config command. Every message delivered by the tool has a\n  unique global message ID that consists of an application sub-system code\n  and a message identifier. This results in a message ID that looks like the\n  following:\n\n    [Common 17-54]  \n    [Netlist 29-28]  \n    [Synth 8-32]  \n    [Synth 8-3295] \n    \n\n  Note: To match a specific message ID, make the search pattern specific to\n  the ID. For instance, in the following commands, the first applies to both\n  'Synth 8-32' and 'Synth 8-3295', while the second command applies only to\n  'Synth 8-32':\n\n    set_msg_config -id 'Synth 8-32' -new_severity 'CRITICAL WARNING'  \n    set_msg_config -id {[Synth 8-32]} -new_severity 'CRITICAL WARNING'  \n    \n\n  -string <args> - (Optional) Apply the selected operation only to messages\n  that contain the given list of strings. Strings must be enclosed in braces,\n  and multiple strings can be specified separated by spaces:\n\n    {{Vivado} {Synthesis}}\n\n  Note: Strings are case sensitive.\n\n  -severity - (Optional) The severity of the message. There are five message\n  severities:\n\n   *  ERROR - An ERROR condition implies an issue has been encountered which\n      will render design results unusable and cannot be resolved without user\n      intervention.\n\n   *  {CRITICAL WARNING} - A CRITICAL WARNING message indicates that certain\n      input/constraints will either not be applied or are outside the best\n      practices for a FPGA family. User action is strongly recommended.\n\n      Note: Since this is a two word value, it must be enclosed in '' or {}.\n\n   *  WARNING - A WARNING message indicates that design results may be\n      sub-optimal because constraints or specifications may not be applied as\n      intended. User action may be taken or may be reserved.\n\n   *  INFO - An INFO message is the same as a STATUS message, but includes a\n      severity and message ID tag. An INFO message includes a message ID to\n      allow further investigation through answer records if needed.\n\n   *  STATUS - A STATUS message communicates general status of the process\n      and feedback to the user regarding design processing. A STATUS message\n      does not include a message ID.\n\n      Note: Because STATUS messages do not have message IDs, you cannot\n      change the severity level of a STATUS message.\n\n  -limit <arg> - (Optional) Limit the display of the selected messages by the\n  limit value specified as an integer >= 1. You can restore the message limit\n  to the messaging.defaultLimit by specifying a count of -1.\n\n  -new_severity <arg> - (Optional) For the messages that match the qualifier,\n  specify a new message severity. Valid values are defined above under the\n  -severity option.\n\n  Note: Using -new_severity with -id or -string may appear to let you\n  downgrade an ERROR message when the command is run. However, the ERROR\n  message is not downgraded. This will be correctly reported by the Vivado\n  tool the next time the error is encountered. See the Examples section below\n  for more information.\n\n  -suppress - (Optional) Suppress the specified messages from further\n  reporting.\n\n  Note: Suppressing all messages of a specified severity, such as WARNING,\n  can suppress implementation, DRC, and clock domain crossing (CDC) messages\n  related to potential problems in your design.\n\n  -regexp - (Optional) Can be used with -string to specify the string values\n  as regular expressions. Regular expressions search strings are anchored to\n  the start of the search string. You can add '.*' to the beginning and end\n  of a string to widen the search to include a sub-string. See\n  http://perldoc.perl.org/perlre.html for more information on regular\n  expression syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example elevates a common INFO message to a Critical Warning:\n\n    set_msg_config -id {[Common 17-81]} -new_severity 'CRITICAL WARNING' \n    \n\n  Note: In the following example the 'Common 17-69' message is an ERROR\n  message, and cannot be downgraded from an ERROR. The command in this\n  example appears to work when run from the Tcl console, however it will not\n  result in any change.\n\n    \n    set_msg_config -id {[Common 17-69]} -new_severity WARNING \n    \n\n  When the 'Common 17-69' message is next thrown by the Vivado tool, a\n  warning message is returned stating that an error cannot be downgraded, and\n  the message is thrown as an ERROR:\n\n    WARNING: [Common 17-239] ERROR Messages are prohibited to be downgraded.  \n       Message `Common 17-69` is not downgraded.  \n    ERROR: [Common 17-69] Command failed: report_design_analysis   \n       -critical_paths can be run only after synthesis has successfully completed. \n    \n\n  The following example results in warning messages with message ID '17-35',\n  and containing 'clk' in the message, being redefined as Error messages:\n\n    set_msg_config -severity warning -string 'clk' -id '17-35' \\  \n       -new_severity error  \n    \n\n  This example changes the severity of messages with the specified message\n  ID, gets the current message configuration rules, and then shows two\n  different command forms to reset the specific rule and restore the message:\n\n    set_msg_config -id 'Common 17-361' -severity INFO -new_severity WARNING  \n    get_msg_config -rules  \n    ---------------------  \n    Message control rules currently in effect are:  \n    Rule Name  Rule                                                  Current Message Count    \n    1  set_msg_config -ruleid {1} -id {Common 17-361} -severity {INFO} -new_severity {WARNING} 0  \n    ---------------------  \n    reset_msg_config -id 'Common 17-361' -default_severity    \n    reset_msg_config -ruleid {1}                      \n     \n    \n\n  Note: In the preceding example, only one of the reset_msg_config commands\n  is needed to reset the message.\n\n  This example shows the use of a parameter to change the default message\n  limit, and then defines a new limit for the specified message id:\n\n    get_param messaging.defaultLimit  \n       100  \n    set_param messaging.defaultLimit 1000  \n    set_msg_config -id {[Common 17-81]} -limit 1500 \n    \n\nSee Also:\n\n   *  get_msg_config\n   *  get_param\n   *  reset_msg_config\n   *  set_param\n",
"config_webtalk": "config_webtalk\n\nDescription: \nEnable/disable WebTalk to send software, IP and device usage statistics to Xilinx.\nNote: WebTalk is always enabled for WebPACK users. WebTalk ignores user\nand install preference when a bitstream is generated using the WebPACK license.\nIf a design is using a device contained in WebPACK and a WebPACK license is available,\nthe WebPACK license will be used. To change this, please see answer record 34746.\n\nSyntax: \nconfig_webtalk  [-info] [-user <arg>] [-install <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-info]     Show whether WebTalk is currently enabled or disabled\n  [-user]     Enable/disable WebTalk for the current user. Specify either \n              'on' to enable or 'off' to disable.\n              Default: empty\n  [-install]  Enable/disable WebTalk for all users of the current \n              installation. Specify either 'on' to enable or 'off' to \n              disable. If you specify 'off', individual users will not be \n              able to enable WebTalk using the -user option. You may need \n              administrator rights to use this option.\n              Default: empty\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nFileIO\n",
"delete_drc_check": "delete_drc_check\n\nDescription: \nDelete one or more user-defined DRC checks.\n\nSyntax: \ndelete_drc_check  [-quiet] [-verbose] <name>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Specify the key for the check to remove.  This is the typically\n              of the form PREFIX-id where PREFIX is a 4-6 letter abbreviation\n              and id is a unique identifier.  Use get_drc_checks to determine\n              the correct name to use. Only user-defined DRC checks may be \n              deleted.\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Delete a single user-defined design rule check from the current project.\n  User-defined design rule checks are created using the create_drc_checks\n  command.\n\n  Note: You cannot delete factory defined rule checks.\n\n  Once it has been deleted there is no way to recover a rule check. The undo\n  command will not work.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) Specify the name of a user-defined design rule check to\n  be deleted from the current project.\n\nExamples:\n\n  The following example deletes the specified design rule check:\n\n    delete_drc_check LJH-1 \n    \n\nSee Also:\n\n   *  create_drc_check\n",
"get_dataflow_paths": "get_dataflow_paths\n\nDescription: \nGet a list of dataflow paths\n\nSyntax: \nget_dataflow_paths  [-filter <arg>] [-start_ref_name <arg>]\n                    [-end_ref_name <arg>] [-max_depth <arg>] [-quiet]\n                    [-verbose]\n\nReturns: \nList of dataflow paths\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-filter]          Filter list with given expression.\n  [-start_ref_name]  Searches for paths starting from this given start ref \n                     name.\n  [-end_ref_name]    Searches for paths ending at this given end ref name.\n  [-max_depth]       Maximum number of instances that can be skipped to find \n                     the next required end point.\n                     Default: 10\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n\nCategories: \nNetlist, Project\n\nDescription:\n\n  This command returns a list of dataflow path objects which is useful to generate a \n  group of paths to analyze within the Dataflow Design view. A dataflow design is an\n  optimized netlist that has low level objects trimmed out and focuses on sparse netlist\n  objects and wide buses. A dataflow path object is a path extracted from a dataflow\n  design.\n\n  This command works when a Dataflow Design is open and the Dataflow view is\n  selected. The command iterates through the dataflow primitives until max_depth is \n  reached and return all paths meeting the criteria. The following are the\n  dataflow primitives.\n\n  * Memories\n\n  * Multipliers, Adders, or DSPs\n\n  * Other IP blocks such as Transceivers, PCIe, and DCMAC\n\nArguments:\n\n  -max_depth <arg> - (Optional) Specify the number of netlist objects to \n  trace through before reaching the endpoint. Default value is 10.\n\n  -start_ref_name <arg> - (Optional) Provides the REF_NAME of the intended startpoint. \n   Note: Ensure that the REF_NAME exists in the dataflow design.\n\n  -end_ref_name <arg> - (Optional) Provides the REF_NAME of intended endpoint. \n   Note: Ensure that the REF_NAME exists in the dataflow design.\n\n  -filter <args> - (Optional) Filter the results list with the specified expression.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from the\n  command. The command also returns TCL_OK regardless of any errors encountered\n  during execution.\n\n    Note: Any errors encountered on the command-line, while launching the command,\n    will be returned. Only errors occurring inside the command will be trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return all\n  messages from this command.\n\n    Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example generates the dataflow path objects between RTL_RAM\n  primitives and load them into a show_objects window.\n\n   show_objects -name dfp_1 [get_dataflow_paths -start_ref_name RTL_RAM\n  -end_ref_name RTL_RAM]\n   \n  The following example generates all the REF_NAME that are available in the \n  design. This example also generates a different list when the dataflow\n  design is selected. When a different view is selected, only the dataflow \n  view is applicable.\n\n    lsort -unique [get_property REF_NAME [get_cells -hier -filter {IS_PRIMITIVE}]]\n   \nSee Also:\n   * set_max_delay\n",
"get_drc_vios": "",
"write_aie_intf_constraints": "write_aie_intf_constraints\n\nDescription: \nWrites aie interface placement information as constraints file.\n\nSyntax: \nwrite_aie_intf_constraints  [-no_fixed_only] [-cell <arg>] [-force] [-quiet]\n                            [-verbose] [<file>]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-no_fixed_only]  Export fixed and non-fixed placement (by default only \n                    fixed placement is exported)\n  [-cell]           AIE IP Name for which constraints to be written)\n  [-force]          Overwrite existing file.\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  [<file>]          Output AIE Interface constraints file.\n\nCategories: \nAIE, FileIO\n",
"get_gui_custom_command_args": "get_gui_custom_command_args\n\nDescription: \nGet custom command arguments\n\nSyntax: \nget_gui_custom_command_args  -command_name <arg> [-regexp] [-nocase] [-quiet]\n                             [-verbose] [<patterns>...]\n\nReturns: \nlist of custom command argument names\n\nUsage: \n  Name           Description\n  --------------------------\n  -command_name  Unique name of the custom command whose arguments need to be\n                 displayed.\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching (valid only when -regexp \n                 specified)\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match the custom command argument names against patterns\n                 Default: *\n\nCategories: \nGUIControl\n\nDescription:\n\n  Returns the list of GUI custom command argument names for a particular GUI\n  custom command.\n\n  You can use the get_gui_custom_commands to determine the list of defined\n  custom commands.\n\nArguments:\n\n  -command_name - The name of the custom GUI command whose arguments should\n  be returned.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match custom GUI command arguments against the\n  specified patterns. The default pattern is the wildcard `*` which returns\n  all arguments for the custom GUI command.\n\nExamples:\n\n  The following example returns a list of command arguments for the GUI\n  custom command abc:\n\n    get_gui_custom_command_args -command_name abc\n\nSee Also:\n\n   *  create_gui_custom_command\n   *  create_gui_custom_command_arg\n   *  get_gui_custom_commands\n   *  remove_gui_custom_command_arg\n   *  remove_gui_custom_command\n",
"register_proc": "register_proc\n\nDescription: \nRegister a Tcl proc with Vivado.\n\nSyntax: \nregister_proc  [-quiet] [-verbose] <proc> [<tasknm>]\n\nReturns: \nNothing\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <proc>      Name of proc to register. Proc must be known to Tcl\n  [<tasknm>]  Name of Tcl task that wraps the proc.\n              Default: Register the proc using the root name proc (no \n              namespaces).\n\nCategories: \nTools\n\nDescription:\n\n  Register a Tcl procedure (proc) with the Vivado Tcl command interpretor to\n  register the command with the Vivado Design Suite help system.\n\n  The following is an example Tcl proc defined for use with the Vivado Design\n  Suite:\n\n    proc findCommand {option} {  \n      # Summary:  \n      # Searches through all Vivado Tcl commands for commands implementing   \n      #   the specified argument.  \n      # Argument Usage:   \n      # option: Specifies the argument to search for.     \n      # Return Value:  \n      # Returns a list of Tcl commands that implement the option.      \n      # Categories: personal  \n     \n      foreach cmd [lsort [info commands *]]   \n      {  \n           catch {  \n              if {[regexp '$option' [help -syntax $cmd]]}   \n      {  \n                 puts $cmd  \n              }  \n           }  \n       }  \n      } ;   \n      # End  \n    \n\n  The commented lines beginning with `#` are used to define the help text for\n  the registered command in the Vivado Design Suite help system.\n\n   *  # Summary: provides a brief description of the command.\n\n   *  # Argument Usage: provides a list and description of the various\n      arguments for the proc.\n\n   *  # Return Value: provides a description of what is returned by the proc.\n\n   *  # Categories: provides an ability to define categories for registered\n      procedures.\n\n  After registering the procedure as a Tcl command, the Vivado help system\n  will return this text when queried with:\n\n    \n    tasknm -help   \n    -or-  \n    help tasknm \n    \n\n  This command returns the name of the registered proc.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <proc> - (Required) The name of the Tcl procedure loaded into the current\n  Vivado Design Suite session. The Tcl proc must be defined and loaded into\n  the Vivado Design Suite prior to registration.\n\n  <tasknm> - (Optional) Specify the Tcl command name that wraps the proc, for\n  use in the Vivado Design Suite. Default: Register the proc using the root\n  name proc.\n\nExample:\n\n  The following example registers a Tcl proc called findCommand as a Tcl\n  command named findCmd:\n\n    \n    register_proc findCommand findCmd \n    \n\nSee Also:\n\n   *  unregister_proc\n",
"get_libs": "get_libs\n\nDescription: \nGet a list of Libraries\n\nSyntax: \nget_libs  [-regexp] [-filter <arg>] [-nocase] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of libraries\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are regular expressions\n  [-filter]     Filter list with expression\n  [-nocase]     Perform case-insensitive matching when a pattern has been \n                specified. This argument applies to the use of -regexp only.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match library names against patterns. \n                Default: *\n\nCategories: \nObject\n\nDescription:\n\n  Gets the cell library for the target device in the current design. There is\n  a library for each device family because there are primitives that may be\n  available in one device family but not in others.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_libs based on property values on the objects. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match libraries against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all libraries in\n  the project.\n\nExamples:\n\n  The following example gets the cell library for the target part:\n\n    get_libs \n    \n\nSee Also:\n\n   *  get_lib_cells\n   *  get_lib_pins\n   *  list_property\n   *  report_property\n",
"write_verilog": "write_verilog\n\nDescription: \nExport the current netlist in Verilog format\n\nSyntax: \nwrite_verilog  [-cell <arg>] [-mode <arg>] [-lib] [-port_diff_buffers]\n               [-write_all_overrides] [-keep_vcc_gnd] [-rename_top <arg>]\n               [-sdf_anno <arg>] [-sdf_file <arg>] [-force]\n               [-include_xilinx_libs] [-logic_function_stripped]\n               [-skip_clock_attributes] [-quiet] [-verbose] <file>\n\nReturns: \nthe name of the output file or directory\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-cell]                     Root of the design to write, e.g. \n                              des.subblk.cpu\n                              Default: whole design\n  [-mode]                     Values: design, pin_planning, synth_stub, sta, \n                              funcsim, timesim\n                              Default: design\n  [-lib]                      Write each library into a separate file\n  [-port_diff_buffers]        Output differential buffers when writing in \n                              -port mode\n  [-write_all_overrides]      Write parameter overrides on Xilinx primitives \n                              even if the override value is the same as the \n                              default value\n  [-keep_vcc_gnd]             Don't replace VCC/GND instances by literal \n                              constants on load terminals.  For simulation \n                              modes only.\n  [-rename_top]               Replace top module name with custom name e.g. \n                              netlist\n                              Default: new top module name\n  [-sdf_anno]                 Specify if sdf_annotate system task statement \n                              is generated\n  [-sdf_file]                 Full path to sdf file location\n                              Default: <file>.sdf\n  [-force]                    Overwrite existing file\n  [-include_xilinx_libs]      Include simulation models directly in netlist \n                              instead of linking to library\n  [-logic_function_stripped]  Convert INIT strings on LUTs & RAMBs to fixed \n                              values.  Resulting netlist will not behave \n                              correctly.\n  [-skip_clock_attributes]    Do not write the default special clock signal \n                              attributes when writing the synthesis directive\n                              in synth_stub mode.\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n  <file>                      Which file to write\n\nCategories: \nFileIO, Simulation\n\nDescription:\n\n  Write a Verilog netlist of the current design or from a specific cell of\n  the design to the specified file or directory. The output is a IEEE\n  1364-2001 compliant Verilog HDL file that contains netlist information\n  obtained from the input design files.\n\n  You can output a complete netlist of the design or specific cell, or output\n  a port list for the design, or a Verilog netlist for simulation or static\n  timing analysis.\n\nArguments:\n\n  -cell <arg> - (Optional) Write the Verilog netlist from a specified cell or\n  block level of the design hierarchy. The output Verilog file or files will\n  only include information contained within the specified cell or module.\n\n  -mode <arg> - (Optional) The mode to use when writing the Verilog file. By\n  default, the Verilog netlist is written for the whole design. Valid mode\n  values are:\n\n   *  design - Output a Verilog netlist for the whole design. This acts as a\n      snapshot of the design, including all post placement, implementation,\n      and routing information in the netlist.\n\n   *  pin_planning - Output only the I/O ports for the top-level of the design.\n\n   *  synth_stub - Output the ports from the top-level of the design for use\n      as a synthesis stub.\n\n   *  sta - Output a Verilog netlist to be used for static timing analysis\n      (STA).\n\n   *  funcsim - Output a Verilog netlist to be used for functional\n      simulation. The output netlist is not suitable for synthesis.\n\n   *  timesim - Output a Verilog netlist to be used for timing simulation.\n      The output netlist is not suitable for synthesis.\n\n  -lib - (Optional) Create a separate Verilog file for each library used by\n  the design.\n\n  Note: The -library option can only be used for simulation. Vivado synthesis\n  will treat all Verilog files as being in the default work library.\n\n  -port_diff_buffers - (Optional) Add the differential pair buffers and\n  internal wires associated with those buffers into the output ports list.\n  This argument is only valid when -mode pin_planning or -mode synth_stub is\n  specified.\n\n  -write_all_overrides [ true | false ] - (Optional) Write parameter\n  overrides, in the design to the Verilog output even if the value of the\n  parameter is the same as the defined primitive default value. If the option\n  is false then parameter values which are equivalent to the primitive\n  defaults are not output to the Verilog file. Setting this option to true\n  will not change the result but makes the output Verilog more verbose.\n\n  -keep_vcc_gnd - (Optional) By default, when writing a nelist for\n  simulation, or from an IP integrator block design, the Vivado Design Suite\n  replaces VCC and GND primitives, and the nets they drive, with literal\n  constants on each of the loads on the net. The -keep_vcc_gnd option\n  disables this default behavior and preserves the VCC or GND primitives.\n\n  -rename_top <arg> - (Optional) Rename the top module in the output as\n  specified. This option only works with -mode funcsim or -mode timesim to\n  allow the Verilog netlist to plug into top-level simulation test benches.\n\n  -sdf_anno [ true | false ] - (Optional) Add the $sdf_annotate statement to\n  the Verilog netlist. Valid values are true (or 1) and false (or 0). This\n  option only works with -mode timesim, and is set to false by default.\n\n  -sdf_file <arg> - (Optional) The path and filename of the SDF file to use\n  when writing the $sdf_annotate statement into the output Verilog file. When\n  not specified, the SDF file is assumed to have the same name and path as\n  the Verilog output specified by <file>, with a file extension of .sdf. The\n  SDF file must be separately written to the specified file path and name\n  using the write_sdf command.\n\n  -force - (Optional) Overwrite the Verilog files if they already exists.\n\n  -include_xilinx_libs - (Optional) Write the simulation models directly in\n  the output netlist file rather than pointing to the libraries by reference.\n\n  -logic_function_stripped - (Optional) Hides the INIT values for LUTs & RAMs\n  by converting them to fixed values in order to create a netlist for debug\n  purposes that will not behave properly in simulation or synthesis.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The path and filename of the Verilog file to write. The\n  path is optional, but if one is not provided the Verilog file will be\n  written to the current working directory, or the directory from which the\n  Vivado tool was launched.\n\nExamples:\n\n  The following example writes a Verilog simulation netlist file for the\n  whole design to the specified file and path:\n\n    write_verilog C:/Data/my_verilog.v \n    \n\n  In the following example, because the -mode timesim and -sdf_anno options\n  are specified, the $sdf_annotate statement will be added to the Verilog\n  netlist. However, since the -sdf_file option is not specified, the SDF file\n  is assumed to have the same name as the Verilog output file, with an .sdf\n  file extension:\n\n    write_verilog C:/Data/my_verilog.net -mode timesim -sdf_anno true \n    \n\n  Note: The SDF filename written to the $sdf_annotate statement will be\n  my_verilog.sdf.\n\n  In the following example, the functional simulation mode is specified, the\n  option to keep VCC and GND primitives in the output simulation netlist is\n  enabled, and the output file is specified:\n\n    write_verilog -mode funcsim -keep_vcc_gnd out.v \n    \n\nSee Also:\n\n   *  write_sdf\n   *  write_vhdl\n",
"set_delay_model": "set_delay_model\n\nDescription: \nSets the interconnect delay model for timing analysis.\n\nSyntax: \nset_delay_model  [-interconnect <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-interconnect]  Interconnect delay model used for timing analysis: Values:\n                   estimated, actual(default), none\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n\nCategories: \nTiming\n\nDescription:\n\n  Sets the interconnect delay model for timing analysis. There are three\n  settings for the interconnect delay model: 'actual', 'estimated', or\n  'none'.\n\n   *  If 'actual' is selected, the actual delay from the routed interconnect\n      will be used in timing analysis. If the design is only partially\n      routed, then the actual delay from the routed portion will be used,\n      along with estimated delay for the unrouted portion. The timing report\n      will provide details regarding the source of the calculated delay.\n\n   *  If 'estimated' delays are selected, the timing analysis will include an\n      estimate of the interconnect delays based on the placement and\n      connectivity of the design onto the device prior to implementation.\n      Estimated delay can be specified even if the design is fully routed.\n\n   *  If 'none' is selected, then no interconnect delay is included in the\n      timing analysis, and only the logic delay is applied.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -interconnect [ actual | estimated | none ] - (Optional) Delay model to be\n  used. The default setting is actual.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following command will use a timing delay model which is an estimated\n  value.\n\n    set_delay_model -interconnect estimated \n    \n\nSee Also:\n\n   *  report_timing\n",
"write_fdts": "write_fdts\n\nDescription: \nWrites flattened device tree\n\nSyntax: \nwrite_fdts  [-force] [-quiet] [-verbose] <file>\n\nReturns: \nsuccess/failure status of applied action.\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrites the existing fdts file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      fdts file (Values: A filename with alphanumeric characters and \n              .dts extention.) \n\nCategories: \nProject\n",
"glob": "glob(n)               Tcl Built-In Commands               glob(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       glob - Return names of files that match patterns\n\nSYNOPSIS\n       glob ?switches? pattern ?pattern ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  performs  file name 'globbing' in a fashion\n       similar to the csh shell.  It returns a list of the  files\n       whose  names  match any of the pattern arguments.  No par-\n       ticular order is guaranteed in the list, so  if  a  sorted\n       list is required the caller should use lsort.\n\n       If  the  initial  arguments to glob start with - then they\n       are treated as switches.  The following switches are  cur-\n       rently supported:\n\n       -directory directory\n              Search  for  files  which  match the given patterns\n              starting  in  the  given  directory.   This  allows\n              searching  of directories whose name contains glob-\n              sensitive characters without the need to quote such\n              characters explicitly.  This option may not be used\n              in conjunction with -path, which is used  to  allow\n              searching  for  complete file paths whose names may\n              contain glob-sensitive characters.\n\n       -join  The remaining pattern arguments are  treated  as  a\n              single  pattern  obtained  by joining the arguments\n              with directory separators.\n\n       -nocomplain\n              Allows an empty list to be returned without  error;\n              without  this  switch  an  error is returned if the\n              result list would be empty.\n\n       -path pathPrefix\n              Search for files with the  given  pathPrefix  where\n              the  rest  of  the name matches the given patterns.\n              This allows searching for files with names  similar\n              to  a  given  file (as opposed to a directory) even\n              when the names contain  glob-sensitive  characters.\n              This  option  may  not  be used in conjunction with\n              -directory.  For example, to find  all  files  with\n              the  same  root name as $path, but differing exten-\n              sions, you should use  glob  -path  [file  rootname\n              $path]  .*  which  will work even if $path contains\n              numerous glob-sensitive characters.\n\n       -tails Only return the part of each file found which  fol-\n              lows  the last directory named in any -directory or\n              -path path specification.  Thus glob -tails -direc-\n              tory  $dir  *  is  equivalent to set pwd [pwd] ; cd\n              $dir ; glob *; cd $pwd.  For -path  specifications,\n              the  returned names will include the last path seg-\n              ment,  so  glob   -tails   -path   [file   rootname\n              ~/foo.tex]  .*   will  return  paths  like  foo.aux\n              foo.bib foo.tex etc.\n\n       -types typeList\n              Only list files or directories  which  match  type-\n              List,  where  the items in the list have two forms.\n              The first form is like the -type option of the Unix\n              find  command: b (block special file), c (character\n              special file), d (directory),  f  (plain  file),  l\n              (symbolic  link),  p  (named  pipe), or s (socket),\n              where multiple types may be specified in the  list.\n              Glob will return all files which match at least one\n              of the types given.  Note that symbolic links  will\n              be  returned  both  if -types l is given, or if the\n              target of a link matches the requested type.  So, a\n              link  to  a  directory will be returned if -types d\n              was specified.\n\n              The second form specifies types where all the types\n              given  must  match.  These are r, w, x as file per-\n              missions, and readonly, hidden as  special  permis-\n              sion cases.  On the Macintosh, MacOS types and cre-\n              ators are also supported, where any item  which  is\n              four  characters long is assumed to be a MacOS type\n              (e.g. TEXT).  Items which are of the  form  {macin-\n              tosh  type  XXXX}  or {macintosh creator XXXX} will\n              match types or creators respectively.  Unrecognized\n              types,   or   specifications   of   multiple  MacOS\n              types/creators will signal an error.\n\n              The two forms may be mixed, so -types  {d  f  r  w}\n              will  find  all  regular  files OR directories that\n              have both read AND write permissions.  The  follow-\n              ing are equivalent:\n                             glob -type d *\n                             glob */\n              except  that  the  first  case  doesn't  return the\n              trailing '/' and is more platform independent.\n\n       --     Marks the end of switches.  The argument  following\n              this  one  will  be treated as a pattern even if it\n              starts with a -.\n\n       The pattern arguments may contain  any  of  the  following\n       special characters:\n\n       ?         Matches any single character.\n\n       *         Matches any sequence of zero or more characters.\n\n       [chars]   Matches any single character in chars.  If chars\n                 contains  a  sequence  of  the form a-b then any\n                 character  between  a  and  b  (inclusive)  will\n                 match.\n\n       \\x        Matches the character x.\n\n       {a,b,...} Matches any of the strings a, b, etc.\n\n       On  Unix, as with csh, a '.'  at the beginning of a file's\n       name or just after a '/' must  be  matched  explicitly  or\n       with  a  {}  construct,  unless  the -types hidden flag is\n       given (since '.'  at the beginning of a file's name  indi-\n       cates  that  it  is  hidden).   On  other platforms, files\n       beginning with a '.'  are handled no  differently  to  any\n       others,  except  the  special  directories  '.'   and '..'\n       which must be matched  explicitly  (this  is  to  avoid  a\n       recursive pattern like 'glob -join * * * *' from recursing\n       up the directory hierarchy as well as down). In  addition,\n       all '/' characters must be matched explicitly.\n\n       If  the first character in a pattern is '~' then it refers\n       to the home directory for the user whose name follows  the\n       '~'.   If  the '~' is followed immediately by '/' then the\n       value of the HOME environment variable is used.\n\n       The glob command differs from csh globbing  in  two  ways.\n       First,  it  does  not  sort its result list (use the lsort\n       command if you want the list sorted).  Second,  glob  only\n       returns the names of files that actually exist;  in csh no\n       check for existence is made unless a pattern contains a ?,\n       *, or [] construct.\n\n       When  the  glob command returns relative paths whose file-\n       names start with a tilde '~' (for example through  glob  *\n       or glob -tails, the returned list will not quote the tilde\n       with './'.  This means care must be taken if  those  names\n       are  later  to be used with file join, to avoid them being\n       interpreted as absolute paths pointing to a  given  user's\n       home directory.\n\nPORTABILITY ISSUES\n       Windows  For  Windows UNC names, the servername and share-\n       name components of the path may not contain ?,  *,  or  []\n       constructs.   On  Windows  NT,  if  pattern is of the form\n       '~username@domain', it refers to the home directory of the\n       user whose account information resides on the specified NT\n       domain server.  Otherwise,  user  account  information  is\n       obtained  from  the local computer.  On Windows 95 and 98,\n       glob accepts patterns like '.../' and '..../' for  succes-\n       sively higher up parent directories.\n\n       Since the backslash character has a special meaning to the\n       glob command, glob patterns containing Windows style  path\n       separators  need  special  care. The pattern C:\\\\foo\\\\* is\n       interpreted as C:\\foo\\* where \\f  will  match  the  single\n       character  f  and \\* will match the single character * and\n       will not be interpreted as a wildcard character. One solu-\n       tion  to  this  problem  is  to use the Unix style forward\n       slash as a path separator. Windows style paths can be con-\n       verted  to  Unix  style  paths  with the command file join\n       $path (or file normalize $path in Tcl 8.4).\n\nEXAMPLES\n       Find all the Tcl files in the current directory:\n              glob *.tcl\n\n       Find all the Tcl files in the user's home directory, irre-\n       spective of what the current directory is:\n              glob -directory ~ *.tcl\n\n       Find all subdirectories of the current directory:\n              glob -type d *\n\n       Find  all  files  whose name contains an 'a', a 'b' or the\n       sequence 'cde':\n              glob -type f *{a,b,cde}*\n\n\nSEE ALSO\n       file(n)\n\n\nKEYWORDS\n       exist, file, glob, pattern\n\n\n\nTcl                            8.3                        glob(n)\n",
"create_cluster_configuration": "create_cluster_configuration\n\nDescription: \nCreates a cluster configuration\n\nSyntax: \ncreate_cluster_configuration  -submit_cmd <arg> -kill_cmd <arg>\n                              [-monitor_cmd <arg>] -type <arg> [-force]\n                              [-quiet] [-verbose] <name>\n\nUsage: \n  Name            Description\n  ---------------------------\n  -submit_cmd     Submit command of cluster configuration\n  -kill_cmd       Kill command of cluster configuration\n  [-monitor_cmd]  Monitor command of cluster configuration\n  -type           Type of cluster configuration\n  [-force]        Force to overwrite a cluster configuration if it already \n                  exists.\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <name>          Name of cluster configuration\n\nCategories: \ncluster_configuration\n\nDescription:\n\n  Creates cluster configuration to be used for launching runs (synthesis and\n  implementation). Cluster configuration is defined using name, submit\n  command, kill command and type.\n\n  Cluster configuration allows user to create configurations for different\n  clusters and are persisted in Vivado tool settings. So user has to create\n  cluster configuration just once and use whenever required.\n\n  Currently, Vivado supports following clusters management tools.\n\n      Load Sharing Facility (LSF)\n\n      Sun Grid Engine (SGE)\n\n      Simple Linux Utility For Resource Management (SLURM)\n\nArguments:\n\n  <name> - (Required) Name of the cluster configuration. Cluster\n  configuration is identified using its name, hence name of the cluster\n  configuration should be unique. You can get a list of existing cluster\n  configurations with the get_cluster_configurations command.\n\n  -submit_cmd <arg> - (Required) Submit command for this cluster configuration.\n  This is the command that will be used to submit the job on the cluster.\n\n  -monitor_cmd <arg> - (Optional) Tcl command used to monitor the progress of the job on the cluster. \n\n  -kill_cmd <arg> - (Required) Kill command for this cluster configuration. This\n  is the command that will be used to kill the job on the cluster. The kill\n  command must take job-id as input to kill the job.\n\n  -type <arg> - (Required) Type of cluster configuration. This is the type of\n  cluster for the cluster configuration being created.\n\n      LSF - Cluster of type 'Load Sharing Facility'\n\n      SGE - Cluster of type 'Sun Grid Engine'\n\n      SLURM - Cluster of type 'Simple Linux Utility For Resource Management'\n\n      CUSTOM - Lets you create a cluster configuration for a cluster type\n      which is not supported by Vivado. This is an experimental feature and\n      the cluster configuration of this type will not be validated\n      thoroughly. It is provided to allow you to add cluster configuration\n      for non-supported cluster types.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example creates a cluster configuration named lsf_cluster_1\n  of type LSF. The submit command is bsub and the kill command is bkill.\n\n    create_cluster_configuration lsf_cluster_1 -submit_cmd bsub -kill_cmd bkill -type LSF\n\n  The following example creates a cluster configuration named lsf_medium of\n  type LSF. The submit command is bsub with resource requirement string which\n  looks for 64bit linux os with either rhel or centos distro and version of\n  the os is 7 and the jobs will be submitted to medium queue. The kill\n  command is bkill.\n\n    create_cluster_configuration lsf_medium -submit_cmd {bsub -R 'select[os == lin && type == X86_64 && (osdistro == rhel || osdistro == centos) && (osver == ws7)]' -N -q medium} -kill_cmd bkill -type LSF\n\n  The following example creates a cluster configuration named sge_conf of\n  type SGE. The submit command is qsub and the kill command is qdel.\n\n    create_cluster_configuration sge_conf -submit_cmd qsub -kill_cmd qdel -type SGE\n\n  The following example creates a cluster configuration named slurm_conf of\n  type SLURM. The submit command is sbatch and the kill command is scancel.\n\n    create_cluster_configuration slurm_conf -submit_cmd sbatch -kill_cmd scancel -type SLURM\n\n  The following example creates a cluster configuration named lsf_cluster_1 \n  of type LSF. The submit command is bsub and the kill command is bkill and monitor command as bjobs\n\n  create_cluster_configuration lsf_cluster_1 -submit_cmd bsub -kill_cmd bkill -monitor_cmd bjobs -type LSF\n\n  Note: monitor and kill command must support <job id> as input\n        For example: bkill is a valid kill command becuase it supports <job id> (bkill <job id>)\n                     bjobs is a valid monitor command becuase it supports <job id> (bjobs <job id>)  \n\nSee Also:\n\n   *  get_cluster_configurations\n   *  remove_cluster_configuration\n   *  validate_cluster_configurations\n",
"reimport_files": "reimport_files\n\nDescription: \nReimport files when they are found out-of-date\n\nSyntax: \nreimport_files  [-force] [-quiet] [-verbose] [<files>...]\n\nReturns: \nlist of file objects that were imported\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force a reimport to happen even when the local files may be \n              newer\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<files>]   List of files to reimport. If no files are specified, all files\n              in the project that are out-of-date, will be reimported\n\nCategories: \nProject\n\nDescription:\n\n  Reimports project files. This updates the local project files from the\n  original referenced source files.\n\nArguments:\n\n  -force - (Optional) Reimport files even when the local project files may be\n  newer than their referenced source files.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Optional) List of files to reimport. If no files are specified,\n  all files in the project that are out-of-date, will be reimported. If you\n  use -force and specify no files, all files in the project will be\n  reimported.\n\nExamples:\n\n  The following example reimports all project files regardless of whether\n  they are out of date, or the local files are newer than the referenced\n  source file:\n\n    reimport_files -force \n    \n\n  Note: No warnings will be issued for newer local files that will be\n  overwritten.\n\n  The following example reimports the specified files to the project, but\n  only if the original source file is newer than the local project file:\n\n    reimport_files C:/Data/FPGA_Design/source1.v \\  \n       C:/Data/FPGA_Design/source2.vhdl \n    \n\nSee Also:\n\n   *  add_files\n   *  import_files\n",
"create_generated_clock": "create_generated_clock\n\nDescription: \nCreate a generated clock object\n\nSyntax: \ncreate_generated_clock  [-name <arg>] [-source <args>] [-edges <args>]\n                        [-divide_by <arg>] [-multiply_by <arg>]\n                        [-combinational] [-duty_cycle <arg>] [-invert]\n                        [-edge_shift <args>] [-add] [-master_clock <args>]\n                        [-quiet] [-verbose] <objects>\n\nReturns: \nnew clock object\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-name]           Generated clock name\n  [-source]         Master clock source object pin/port\n  [-edges]          Edge Specification\n  [-divide_by]      Period division factor: Value >= 1\n                    Default: 1\n  [-multiply_by]    Period multiplication factor: Value >= 1\n                    Default: 1\n  [-combinational]  Create a divide_by 1 clock through combinational logic\n  [-duty_cycle]     Duty cycle of clock period: Range: 0.0 to 100.0\n                    Default: 50.0\n  [-invert]         Invert the signal\n  [-edge_shift]     Edge shift specification\n  [-add]            Add to the existing clock in source_objects\n  [-master_clock]   Use this clock if multiple clocks present at master pin\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <objects>         List of clock source ports, pins, or nets\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Generate a new clock object from an existing physical clock object in the\n  design.\n\n  Clocks can be added to a design in one of three ways:\n\n   *  Primary physical or virtual clocks defined with the create_clock command.\n\n   *  Derived clocks defined with the create_generated_clock command\n      generated from a primary physical clock.\n\n   *  Derived clocks automatically generated by the Vivado Design Suite when\n      a clock propagates through an MMCM/PLL/BUFR.\n\n  You can also use the create_generated_clock command to change the name of\n  clocks that the Vivado tool has auto-derived from an MMCM/PLL/BUFR. In this\n  case, a new clock is not created, but an existing clock defined on the\n  specified source object is renamed to the provided name. This requires\n  -name and <object> to be specified, and supports the use of -source and/or\n  -master_clock to further identify the clock to rename when multiple clocks\n  exist on the source object. Refer to the Vivado Design Suite User Guide:\n  Using Constraints (UG903) for more information on renaming auto-derived\n  clocks.\n\n  Note: You cannot rename a clock that is already in use by other constraints\n  at the time of renaming. You must rename the clock prior to any other\n  appearance or use of the clock in an XDC file.\n\n  This command returns the name of the clock object that is created, or\n  returns an error if it fails.\n\nArguments:\n\n  -name <arg> - (Optional) The name of the generated clock to create on the\n  specified object, or the name to assign to an existing clock on the\n  specified object. If no name is specified, the generated clock will be\n  given the name of the <object> it is assigned to. If assigned to multiple\n  <objects>, the name will be the first object in the list.\n\n  -source <arg> - (Optional) The pin or port of the master clock from which\n  to derive the generated clock. The master clock must be a previously\n  defined physical clock, not a virtual clock; but can be a primary clock or\n  another generated clock. If the source pin or port currently has multiple\n  clocks defined, the -master_clock option must be used to identify which\n  clock on the source is to be used to define the generated clock.\n\n  -edges <arg> - (Optional) Specifies the edges of the master clock to use in\n  defining transitions on the generated clock. Specify transitions on the\n  generated clock in a sequence of 1, 2, 3, by referencing the appropriate\n  edge count from the master clock in numerical order, counting from the\n  first edge. The sequence of transitions on the generated clock defines the\n  period and duty cycle of the clock: position 1 is the first rising edge of\n  the generated clock, position 2 is the first falling edge of the generated\n  clock and so defines the duty cycle, position 3 is the second rising edge\n  of the generated clock and so defines the clock period. Enclose multiple\n  edge numbers in braces {}. See the example below for specifying edge\n  numbers.\n\n  -divide_by <arg> - (Optional) Divide the frequency of the master clock by\n  the specified value to establish the frequency of the generated clock\n  object. The value specified must be >= 1, and must be specified as an\n  integer.\n\n  -multiply_by <arg> - (Optional) Multiply the frequency of the master clock\n  by the specified value to establish the frequency of the generated clock\n  object. The value specified must be >= 1, and must be specified as an\n  integer. The default is 1.\n\n  -combinational - (Optional) Calculate the generated clock latency by\n  tracing delays through only the combinational paths between the source pin\n  of the generated clock and the source pin of the master clock. By default\n  the tool computes the latency for the generated clock by tracing both\n  sequential and combinational paths.\n\n  -duty_cycle <arg> - (Optional) The duty cycle of the generated clock\n  defined as a percentage of the new clock period when used with the\n  -multiply_by argument. The value is specified as a percentage from 0.0 to\n  100. The default value is 50.0.\n\n  -invert - (Optional) Create a generated clock with the phase inverted from\n  the master clock.\n\n  -edge_shift <arg> - (Optional) Shift the edges of the generated clock by\n  the specified values relative to the master clock. See the example below\n  for specifying edge shift.\n\n  -add - (Optional) Define multiple clocks on the same source for\n  simultaneous analysis with different clock waveforms. Use -name to specify\n  the new clock to add. If you do not specify this option, the create_clock\n  command will automatically assign a name and will overwrite any existing\n  clock of the same name.\n\n  Note: -master_clock and -name options must be specified with -add.\n\n  -master_clock <arg> - (Optional) If there are multiple clocks found on the\n  source pin or port, the specified clock object is the one to use as the\n  master for the generated clock object.\n\n  Note: -add and -name options must be specified with -master_clock.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) The pin or port objects to which the generated clock\n  should be assigned. If the specified objects already have a clock defined,\n  use the -add option to add the new generated clock and not overwrite any\n  existing clocks on the object.\n\nExamples:\n\n  The following example defines a generated clock that is divided from the\n  master clock found on the specified CLK pin. Since -name is not specified,\n  the generated clock is assigned the same name as the pin it is assigned to:\n\n    create_generated_clock -divide_by 2 -source \\  \n       [get_pins clkgen/cpuClk] [get_nets fftEngine/CLK] \n    \n\n  The following example defines a generated clock named CLK1 from the\n  specified source clock, specifying the edges of the master clock to use as\n  transition points for the generated clock, with edges shifted by the\n  specified amount. In this example, the -edges option indicates that the\n  second edge of the source clock is the first rising edge of the generated\n  clock, the third edge of the source clock is the first falling edge of the\n  generated clock, and the eighth edge of the source clock is the second\n  rising edge of the generated clock. These values determine the period of\n  the generated clock as the time from edge 2 to edge 8 of the source clock,\n  and the duty cycle as the percentage of the period between edge 2 and edge\n  3 of the source clock. In addition, each edge of the generated clock is\n  shifted by the specified amount:\n\n    create_generated_clock -name CLK1 -source CMB/CLKIN -edges {2 3 8} \\  \n    -edge_shift {0 -1.0 -2.0} CMB/CLKOUT \n    \n\n  Note: The waveform pattern of the generated clock is repeated based on the\n  transitions defined by the -edges argument.\n\n  This example creates two generated clocks from the output of a MUX, using\n  -master_clock to identify which clock to use, using -add to assign the\n  generated clocks to the Q pin of a flip flop, and using -name to define a\n  name for the generated clock, since the object it is assigned to has\n  multiple clocks assigned:\n\n    create_generated_clock -source [get_pins muxOut] -master_clock M_CLKA \\  \n    -divide_by 2 -add -name gen_CLKA [get_pins flop_Q]  \n    create_generated_clock -source [get_pins muxOut] -master_clock M_CLKB \\  \n    -divide_by 2 -add -name gen_CLKB [get_pins flop_Q] \n    \n\n  The following example renames the automatically named clock that is derived\n  by the Vivado Design Suite on the MMCM clock output:\n\n    \n    create_generated_clock -name CLK_DIV2 [get_pins mmcm/CLKOUT1] \n    \n\nSee Also:\n\n   *  check_timing\n   *  create_clock\n   *  get_generated_clocks\n   *  get_pins\n   *  report_clock\n   *  set_clock_latency\n   *  set_clock_uncertainty\n   *  set_propagated_clock\n",
"read_twx": "read_twx\n\nDescription: \nRead timing results from Trace STA tool\n\nSyntax: \nread_twx  [-cell <arg>] [-pblock <arg>] [-quiet] [-verbose] <name> <file>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-cell]     Interpret names in the report file as relative to the specified\n              cell\n  [-pblock]   Interpret names in the report file as relative to the specified\n              pblock\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name for the set of results\n  <file>      Name of the Trace import file\n\nCategories: \nFileIO\n\nDescription:\n\n  Imports timing results in the TWX format timing report files generated by\n  the Xilinx Timing Reporter And Circuit Evaluator (TRACE) tool. The TWX file\n  can be imported at the top-level, which is the default, or at a specific\n  cell-level or relative to a specific Pblock.\n\n  After the TWX files are imported, the timing results display in the Timing\n  Results view in GUI mode.\n\nArguments:\n\n  -cell <arg> - (Optional) Specify The name of a hierarchical cell in the\n  current design to import the TWX file into. The timing paths will be\n  applied to the specified cell.\n\n  -pblock <arg> - (Optional) The name of a Pblock in the current design. The\n  timing paths will be imported relative to the specified block.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the Timing Results view to create when\n  importing the timing paths in the TWX file.\n\n  Note: Both <name> and <file> are required positional arguments. The <name>\n  argument must be provided first.\n\n  <file> - (Required) The file name of the TWX file to be imported.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example reads the specified TWX file into the top-level of\n  the design:\n\n    read_twx C:/Data/timing_files/bft.twx \n    \n\nSee Also:\n\n   *  report_timing\n",
"create_pblock": "create_pblock\n\nDescription: \nCreate a new Pblock\n\nSyntax: \ncreate_pblock  [-quiet] [-verbose] <name>\n\nReturns: \nnew pblock object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of the new pblock\n\nCategories: \nXDC, Floorplan\n\nDescription:\n\n  Defines a Pblock to allow you to add logic instances for floorplanning\n  purposes.\n\n  You can add logic elements to the Pblock using the add_cells_to_pblock\n  command, and then place the Pblocks onto the fabric of the FPGA using the\n  resize_pblocks command. The resize_pblock command can also be used to\n  manually move and resize Pblocks.\n\n  You can nest one Pblock inside another for hierarchical floorplanning using\n  the set_property command to define the PARENT property as shown in the\n  second example.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the Pblock to be created.\n\nExamples:\n\n  The following example creates a Pblock called pb_cpuEngine, and then adds\n  only the leaf-cells found in the cpuEngine module, clearing placement\n  constraints for placed instances:\n\n    create_pblock pb_cpuEngine  \n    add_cells_to_pblock pb_cpuEngine [get_cells cpuEngine/*] \\  \n       -add_primitives -clear_locs \n    \n\n  The following example shows nesting Pblocks, by creating Pblocks called\n  pb_usbEngine0 and pb_usbEngine1, and a third Pblock called pb_usbTop. Then\n  pb_usbEngine0 and pb_usbEngine1 are nested inside pb_usbTop using the\n  set_property command:\n\n    create_pblock pb_usbEngine0  \n    create_pblock pb_usbEngine1  \n    create_pblock pb_usbTop  \n    set_property PARENT pb_usbTop [get_pblocks {pb_usbEngine?}] \n    \n\nSee Also:\n\n   *  add_cells_to_pblock\n   *  get_pblocks\n   *  place_pblocks\n   *  resize_pblock\n   *  set_property\n",
"time": "time(n)               Tcl Built-In Commands               time(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       time - Time the execution of a script\n\nSYNOPSIS\n       time script ?count?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command will call the Tcl interpreter count times to\n       evaluate script (or once if count is not  specified).   It\n       will then return a string of the form\n              503 microseconds per iteration\n       which  indicates  the  average amount of time required per\n       iteration, in microseconds.  Time is measured  in  elapsed\n       time, not CPU time.\n\nEXAMPLE\n       Estimate  how  long  it takes for a simple Tcl for loop to\n       count to a thousand:\n              time {\n                  for {set i 0} {$i<1000} {incr i} {\n                      # empty body\n                  }\n              }\n\n\nSEE ALSO\n       clock(n)\n\n\nKEYWORDS\n       script, time\n\n\n\nTcl                                                       time(n)\n",
"eval": "eval(n)               Tcl Built-In Commands               eval(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       eval - Evaluate a Tcl script\n\nSYNOPSIS\n       eval arg ?arg ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Eval  takes one or more arguments, which together comprise\n       a Tcl script containing one or more commands.   Eval  con-\n       catenates  all  its  arguments  in the same fashion as the\n       concat command, passes the concatenated string to the  Tcl\n       interpreter  recursively,  and  returns the result of that\n       evaluation (or any error generated by it).  Note that  the\n       list  command quotes sequences of words in such a way that\n       they are not further expanded by the eval command.\n\nEXAMPLES\n       Often, it is useful to store a fragment of a script  in  a\n       variable  and  execute  it  later  on  with  extra  values\n       appended. This technique is used in  a  number  of  places\n       throughout  the  Tcl  core (e.g. in fcopy, lsort and trace\n       command callbacks). This example  shows  how  to  do  this\n       using core Tcl commands:\n              set script {\n                  puts 'logging now'\n                  lappend $myCurrentLogVar\n              }\n              set myCurrentLogVar log1\n              # Set up a switch of logging variable part way through!\n              after 20000 set myCurrentLogVar log2\n\n              for {set i 0} {$i<10} {incr i} {\n                  # Introduce a random delay\n                  after [expr {int(5000 * rand())}]\n                  update    ;# Check for the asynch log switch\n                  eval $script $i [clock clicks]\n              }\n\n       Note  that in the most common case (where the script frag- |\n       ment is actually just a list of words  forming  a  command |\n       prefix),  it  is  better to use {*}$script when doing this |\n       sort of invocation pattern.  It is less general  than  the |\n       eval command, and hence easier to make robust in practice.\n       The following procedure acts in a way that is analogous to\n       the lappend command, except it inserts the argument values\n       at the start of the list in the variable:\n              proc lprepend {varName args} {\n                 upvar 1 $varName var\n                 # Ensure that the variable exists and contains a list\n                 lappend var\n                 # Now we insert all the arguments in one go\n                 set var [eval [list linsert $var 0] $args]\n              }\n       However, the last line would now normally be written with- |\n       out eval, like this:                                       |\n              set var [linsert $var 0 {*}$args]                   |\n\n\nSEE ALSO\n       catch(n),  concat(n), error(n), interp(n), list(n), names-\n       pace(n), subst(n), tclvars(n), uplevel(n)\n\n\nKEYWORDS\n       concatenate, evaluate, script\n\n\n\nTcl                                                       eval(n)\n",
"create_property": "create_property\n\nDescription: \nCreate property for class of objects(s)\n\nSyntax: \ncreate_property  [-description <arg>] [-type <arg>] [-enum_values <args>]\n                 [-default_value <arg>] [-file_types <args>]\n                 [-display_text <arg>] [-quiet] [-verbose] <name> <class>\n\nReturns: \nThe property that was created if success, '' if failure\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-description]    Description of property\n  [-type]           Type of property to create; valid values are: string, \n                    int, long, double, bool, enum, file\n                    Default: string\n  [-enum_values]    Enumeration values\n  [-default_value]  Default value of type string\n  [-file_types]     File type extensions (without the dot)\n  [-display_text]   Text to display when selecting the file in file browser\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <name>            Name of property to create\n  <class>           Object type to create property for; valid values are: \n                    design, net, cell, pin, port, pblock, interface, fileset\n\nCategories: \nPropertyAndParameter, XDC\n\nDescription:\n\n  Creates a new property of the <type> specified with the user-defined <name>\n  for the specified <class> of objects. The property that is created can be\n  assigned to an object of the specified class with the set_property command,\n  but is not automatically associated with all objects of that class.\n\n  The report_property -all command will not report the newly created property\n  for an object of the specified class until the property has been assigned\n  to that object.\n\nArguments:\n\n  -description <arg> - (Optional) Provide a description of the property being\n  created. The description will be returned by the Vivado Design Suite help\n  system when the property is queried.\n\n  -type <arg> - (Optional) The type of property to create. There allowed\n  property types include:\n\n   *  string - Allows the new property to be defined with string values. This\n      is the default value when -type is not specified.\n\n   *  int - Allows the new property to be defined with short four-byte signed\n      integer values with a range of -2,147,483,648 to 2,147,483,647. If a\n      floating point value is specified for an int property type, the Vivado\n      tool will return an error.\n\n   *  long - Specifies signed 64-bit integers with value range of\n      -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807. If a floating\n      point value is specified for an long property type, the tool will\n      return an error.\n\n   *  double - Allows the new property value to be defined with a floating\n      point number.\n\n   *  bool - Allows the new property to be defined as a boolean with a true\n      (1, or yes) or false (0, or no) value.\n\n   *  enum - An enumerated data type, with the valid enumerated values\n      specified by the -enum_values option.\n\n   *  string_list - A Tcl list of string values.\n\n   *  int_list - A Tcl list of integer values.\n\n   *  double_list - A Tcl list of floating point values.\n\n  -enum_values <args> - (Optional) A list of enumerated values that the\n  property can have. The list must be enclosed in braces, {}, with values\n  separated by spaces. This option can only be used with -type enum.\n\n  -default_value <args> - (Optional) The default value to assign to the\n  property. This option can be used for string, int, bool, and enum type\n  properties.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the property to be defined. The name is\n  case sensitive.\n\n  <class> - (Required) The class of object to assign the new property to. All\n  objects of the specified class will be assigned the newly defined property.\n  Valid classes are: design, net, cell, pin, port, Pblock, interface, and\n  fileset.\n\nExamples:\n\n  The following example defines a property called PURPOSE for cell objects:\n\n    create_property PURPOSE cell \n    \n\n  Note: Because the -type was not specified, the value will default to strings.\n\n  The following example creates a pin property called COUNT which holds an\n  Integer value:\n\n    create_property -type int COUNT pin \n    \n\nSee Also:\n\n   *  get_property\n   *  list_property\n   *  list_property_value\n   *  report_property\n   *  reset_property\n   *  set_property\n",
"open_checkpoint": "open_checkpoint\n\nDescription: \nOpen a design checkpoint in a new project\n\nSyntax: \nopen_checkpoint  [-part <arg>] [-ignore_timing] [-quiet] [-verbose] <file>\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-part]           Override the checkpoint part. Note that this may cause \n                    errors if the checkpoint contains xdef.\n  [-ignore_timing]  reload a checkpoint without the timing constraints. Will \n                    not work if '-time' option given.\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <file>            Design checkpoint file\n\nCategories: \nProject\n\nDescription:\n\n  Open a design checkpoint file (DCP), create a new in-memory project and\n  initialize a design immediately in the new project with the contents of the\n  checkpoint. This command can be used to open a top-level design checkpoint,\n  or the checkpoint created for an out-of-context module.\n\n  When opening a checkpoint, there is no need to create a project first. The\n  open_checkpoint command reads the design data into memory, opening the\n  design in Non-Project Mode. Refer to the Vivado Design Suite User Guide:\n  Design Flows Overview (UG892) for more information on Project Mode and\n  Non-Project Mode.\n\n  Note: When multiple design checkpoints are open in the Vivado tool, you\n  must use the current_project command to switch between the open designs.\n  You can use current_design to check which checkpoint is the active design.\n\nArguments:\n\n  -part <arg> - (Optional) Specify a target part for the imported checkpoint\n  design. This option lets you change the speed grade of the part used by the\n  design checkpoint file, or change early availability parts for production\n  parts of the same device and package.\n\n  Note: The use of -part is limited in terms of the range of parts that can\n  be used, and can result in an error when opening the checkpoint if an\n  incompatible part is specified.\n\n  -ignore_timing - (Optional) Open the checkpoint without the timing\n  constraints to make opening the checkpoint quicker.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The path and filename of the checkpoint file.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example opens the specified checkpoint file, and specifies\n  the target part for the design:\n\n    open_checkpoint C:/Data/state1/checkpoint.dcp -part xc7k325tffg900-2  \n    \n\n  Note: If the specified part is not compatible with the device and package\n  used by the specified checkpoint, the command will return an error.\n\nSee Also:\n\n   *  current_design\n   *  current_project\n   *  read_checkpoint\n   *  write_checkpoint\n",
"lassign": "lassign(n)            Tcl Built-In Commands            lassign(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lassign - Assign list elements to variables\n\nSYNOPSIS\n       lassign list varName ?varName ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  treats the value list as a list and assigns\n       successive elements from that list to the variables  given\n       by  the  varName  arguments  in  order.  If there are more\n       variable names than list elements, the remaining variables\n       are  set to the empty string.  If there are more list ele-\n       ments than variables, a list  of  unassigned  elements  is\n       returned.\n\nEXAMPLES\n       An illustration of how multiple assignment works, and what\n       happens when there are either too few  or  too  many  ele-\n       ments.\n              lassign {a b c} x y z       ;# Empty return\n              puts $x                     ;# Prints 'a'\n              puts $y                     ;# Prints 'b'\n              puts $z                     ;# Prints 'c'\n\n              lassign {d e} x y z         ;# Empty return\n              puts $x                     ;# Prints 'd'\n              puts $y                     ;# Prints 'e'\n              puts $z                     ;# Prints ''\n\n              lassign {f g h i} x y       ;# Returns 'h i'\n              puts $x                     ;# Prints 'f'\n              puts $y                     ;# Prints 'g'\n       The  lassign  command  has  other uses.  It can be used to\n       create the analogue of the 'shift' command in  many  shell\n       languages like this:\n              set ::argv [lassign $::argv argumentToReadOff]\n\nSEE ALSO\n       lindex(n), list(n), lset(n), set(n)\n\n\nKEYWORDS\n       assign, element, list, multiple, set, variable\n\n\n\nTcl                            8.5                     lassign(n)\n",
"proto_synth_design": "proto_synth_design\n\nDescription: \nSynthesize a design using Vivado Prototyping Synthesis and open that design\n\nSyntax: \nproto_synth_design  [-name <arg>] [-part <arg>] [-constrset <arg>] [-top <arg>]\n                    [-include_dirs <args>] [-generic <args>]\n                    [-verilog_define <args>] [-flatten_hierarchy <arg>]\n                    [-gated_clock_conversion <arg>] [-directive <arg>] [-rtl]\n                    [-lint] [-file <arg>] [-dataflow] [-bufg <arg>] [-no_lc]\n                    [-shreg_min_size <arg>] [-mode <arg>]\n                    [-fsm_extraction <arg>] [-rtl_skip_mlo] [-rtl_skip_ip]\n                    [-rtl_skip_constraints] [-srl_style <arg>]\n                    [-keep_equivalent_registers] [-resource_sharing <arg>]\n                    [-cascade_dsp <arg>] [-control_set_opt_threshold <arg>]\n                    [-incremental_mode <arg>] [-max_bram <arg>]\n                    [-max_uram <arg>] [-max_dsp <arg>]\n                    [-max_bram_cascade_height <arg>]\n                    [-max_uram_cascade_height <arg>] [-retiming] [-no_retiming]\n                    [-no_srlextract] [-assert] [-no_timing_driven] [-sfcu]\n                    [-debug_log] [-quiet] [-verbose]\n\nReturns: \ndesign object\n\nUsage: \n  Name                          Description\n  -----------------------------------------\n  [-name]                       Design name\n  [-part]                       Target part\n  [-constrset]                  Constraint fileset to use\n  [-top]                        Specify the top module name\n  [-include_dirs]               Specify verilog search directories\n  [-generic]                    Specify generic parameters. Syntax: -generic \n                                <name>=<value> -generic <name>=<value> ...\n  [-verilog_define]             Specify verilog defines. Syntax: \n                                -verilog_define <macro_name>[=<macro_text>] \n                                -verilog_define <macro_name>[=<macro_text>] \n                                ...\n  [-flatten_hierarchy]          Flatten hierarchy during LUT mapping. Values:\n                                full, none, rebuilt\n                                Default: rebuilt\n  [-gated_clock_conversion]     Convert clock gating logic to flop enable. \n                                Values: off, on, auto\n                                Default: off\n  [-directive]                  Synthesis directive. Values: default, \n                                RuntimeOptimized, AreaOptimized_high, \n                                AreaOptimized_medium, AlternateRoutability, \n                                AreaMapLargeShiftRegToBRAM, \n                                AreaMultThresholdDSP, FewerCarryChains, \n                                PerformanceOptimized, LogicCompaction, \n                                PowerOptimized_high, PowerOptimized_medium\n                                Default: default\n  [-rtl]                        Elaborate and open an rtl design\n  [-lint]                       Run RTL Linter on source files. Recommended \n                                to run before RTL simulation and synthesis to\n                                identify potential issues at early design \n                                cycle.\n  [-file]                       Linter Filename to output results to. (send \n                                output to console if -file is not used)\n  [-dataflow]                   Present the Dataflow view of the RTL design\n  [-bufg]                       Max number of global clock buffers used by \n                                synthesis\n                                Default: 12\n  [-no_lc]                      Disable LUT combining. Do not allow combining\n                                LUT pairs into single dual output LUTs.\n  [-shreg_min_size]             Minimum length for chain of registers to be \n                                mapped onto SRL\n                                Default: 3\n  [-mode]                       The design mode. Values: default, \n                                out_of_context\n                                Default: default\n  [-fsm_extraction]             FSM Extraction Encoding. Values: off, \n                                one_hot, sequential, johnson, gray, \n                                user_encoding, auto\n                                Default: auto\n  [-rtl_skip_mlo]               Skip mandatory logic optimization for RTL \n                                elaboration of the design; requires -rtl \n                                option.\n  [-rtl_skip_ip]                Exclude subdesign checkpoints in the RTL \n                                elaboration of the design; requires -rtl \n                                option.\n  [-rtl_skip_constraints]       Do not load and validate constraints against \n                                elaborated design; requires -rtl option.\n  [-srl_style]                  Static SRL Implementation Style. Values: \n                                register, srl, srl_reg, reg_srl, reg_srl_reg\n  [-keep_equivalent_registers]  Prevents registers sourced by the same logic \n                                from being merged. (Note that the merging can\n                                otherwise be prevented using the synthesis \n                                KEEP attribute)\n  [-resource_sharing]           Sharing arithmetic operators. Value: auto, \n                                on, off\n                                Default: auto\n  [-cascade_dsp]                Controls how adders summing DSP block outputs\n                                will be implemented. Value: auto, tree, force\n                                Default: auto\n  [-control_set_opt_threshold]  Threshold for synchronous control set \n                                optimization to lower number of control sets.\n                                Valid values are 'auto' and non-negative \n                                integers. The higher the number, the more \n                                control set optimization will be performed \n                                and fewer control sets will result. To \n                                disable control set optimization completely, \n                                set to 0.\n                                Default: auto\n  [-incremental_mode]           Mode of incremental synthesis \n                                (aggressive/default/off/quick)\n                                Default: default\n  [-max_bram]                   Maximum number of block RAM allowed in \n                                design. (Note -1 means that the tool will \n                                choose the max number allowed for the part in\n                                question)\n                                Default: -1\n  [-max_uram]                   Maximum number of Ultra RAM blocks allowed in\n                                design. (Note -1 means that the tool will \n                                choose the max number allowed for the part in\n                                question)\n                                Default: -1\n  [-max_dsp]                    Maximum number of block DSP allowed in \n                                design. (Note -1 means that the tool will \n                                choose the max number allowed for the part in\n                                question)\n                                Default: -1\n  [-max_bram_cascade_height]    Controls the maximum number of BRAM that can \n                                be cascaded by the tool. (Note -1 means that \n                                the tool will choose the max number allowed \n                                for the part in question)\n                                Default: -1\n  [-max_uram_cascade_height]    Controls the maximum number of URAM that can \n                                be cascaded by the tool. (Note -1 means that \n                                the tool will choose the max number allowed \n                                for the part in question)\n                                Default: -1\n  [-retiming]                   For non-Versal devices where retiming is off \n                                by default. Seeks to improve circuit \n                                performance for intra-clock sequential paths \n                                by automatically moving registers (register \n                                balancing) across combinatorial gates or \n                                LUTs.  It maintains the original behavior and\n                                latency of the circuit and does not require \n                                changes to the RTL sources.\n  [-no_retiming]                Turn off retiming feature for Versal devices \n                                where retiming is on by default. If both \n                                -retiming and -no_retiming are set, retiming \n                                will not occur\n  [-no_srlextract]              Prevents the extraction of shift registers so\n                                that they get implemented as simple registers\n  [-assert]                     Enable VHDL assert statements to be \n                                evaluated. A severity level of failure will \n                                stop the synthesis flow and produce an error.\n  [-no_timing_driven]           Do not run in timing driven mode\n  [-sfcu]                       Run in single-file compilation unit mode\n  [-debug_log]                  Print detailed log files for debugging\n  [-quiet]                      Ignore command errors\n  [-verbose]                    Suspend message limits during command \n                                execution\n\nCategories: \nTools\n",
"get_ipdefs": "get_ipdefs\n\nDescription: \nGet a list of IP from the current IP Catalog\n\nSyntax: \nget_ipdefs  [-name] [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n            [-all] [-quiet] [-verbose] [<patterns>...]\n\nReturns: \nList of Catalog IP objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-name]        Match the pattern against IP display name instead of VLNV\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the IPDefs of the objects specified: IP inst or XCI \n                 file.\n  [-all]         Return hidden IP\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   The patterns to match against\n                 Default: *\n                 Values: The default search pattern is the wildcard *, or .* \n                 when -regexp is specified.\n\nCategories: \nObject, IPFlow\n\nDescription:\n\n  Get a list of IP cores defined in the IP catalog of the current project,\n  based on the specified search pattern. The default is to return all IP\n  cores defined in the Vivado tools IP catalog.\n\n  By default, the search is based on the VLNV property of the IP cores in the\n  catalog. You can specify the -name option to search on the display name of\n  IP cores instead.\n\nArguments:\n\n  -name - (Optional) Indicates that the specified <pattern> refers to the\n  DISPLAY_NAME property of the IP instead of the VLNV property.\n\n  Note: In the case of multi-word display names, such as 'Multiply Adder',\n  you can only search for a single string, so you would need to search for\n  *Multiply* or *Adder* to locate this IP core.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - Filter the results list with the specified expression. The\n  -filter argument filters the list of objects returned by get_ipdefs based\n  on property values on the objects. You can find the properties on an object\n  with the report_property or list_property commands. In the case of the\n  'ipdefs' object, 'VLNV', 'NAME' and 'IS_AXI' are some of the properties\n  that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Get the IP definitions for the specified IP\n  instances or IP file (.xci) objects. Objects must be specified by the\n  get_ips or get_files command.\n\n  -all - (Optional) Get the IP definitions from all defined IP catalogs and\n  repositories. By default, the get_ipdefs command will return the IP cores\n  from the standalone IP catalog. This option returns IP from both the\n  standard Vivado tool IP catalog, and the IP integrator IP catalog.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match IP core definitions in the IP catalog against\n  the specified search patterns. The default pattern is the wildcard `*`\n  which gets a list of all IP cores in the catalog. More than one pattern can\n  be specified to find multiple core definitions based on different search\n  criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns a list of all IP cores with NAME property\n  matching the specified pattern:\n\n    get_ipdefs -filter {NAME=~*agilent*} \n    \n\n  Note: The filter operator `=~` loosely matches the specified pattern.\n\n  The following example returns a list of all AXI compliant IP cores:\n\n    get_ipdefs -filter {IS_AXI==1} \n    \n\n  The following example returns IP from both the Vivado tools standard IP\n  catalog and the IP integrator IP catalog:\n\n    get_ipdefs -all *axi_interconnect* \n    \n\n  The following example filters the above results with the\n  DESIGN_TOOL_CONTEXTS property to return only the IP integrator IP:\n\n    get_ipdefs -all *axi_interconnect* -filter {DESIGN_TOOL_CONTEXTS =~*IPI*} \n    \n\n  Note: By filtering on the DESIGN_TOOL_CONTEXTS property, you can identify\n  IP from the IP integrator catalog instead of the Vivado tools standard\n  catalog.\n\n  In some cases, where multiple versions of an IP are returned, you can also\n  filter on the UPGRADE_VERSIONS property to get as specific version or the\n  latest IP version, as shown in the following example:\n\n    get_ipdefs -all *axi_interconnect* -filter {UPGRADE_VERSIONS == ''} \n    \n\n  Note: The {UPGRADE_VERSIONS == ''} filter returns IP defs that have no\n  upgrade, and so are the latest version.\n\nSee Also:\n\n   *  create_ip\n   *  generate_target\n   *  get_ips\n   *  import_ip\n   *  report_property\n   *  update_ip_catalog\n",
"set_hierarchy_separator": "set_hierarchy_separator\n\nDescription: \nSet hierarchical separator character\n\nSyntax: \nset_hierarchy_separator  [-quiet] [-verbose] [<separator>]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<separator>]  Hierarchy separator character\n                 Default: /\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets the character that will be used for separating levels of hierarchy in\n  the design.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation\n\nArguments:\n\n  <separator> - (Optional) The new character to use as a hierarchy separator.\n  Valid characters to use as the hierarchy separator are: `/`, `@`, `^`, `#`,\n  `.`, and `|`. The default character is `/`, and is used when no <separator>\n  is specified.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  This example changes the hierarchy separator to the `|` character:\n\n    set_hierarchy_separator | \n    \n\n  The following example restores the default hierarchy separator, `/`:\n\n    set_hierarchy_separator \n    \n\nSee Also:\n\n   *  get_hierarchy_separator\n",
"implement_mig_cores": "implement_mig_cores\n\nDescription: \nCall IP Services to regenerate an IP, then stitch it into the current netlist\n\nSyntax: \nimplement_mig_cores  [-output_dir <arg>] [-rtl_only] [-force] [-debug_output]\n                     [-quiet] [-verbose]\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-output_dir]    Target Output Directory for PHY IP Generated Files\n                   Default: empty\n  [-rtl_only]      Run the complete process to generate the PHY RTL code but \n                   do not replace the PHY core netlist\n  [-force]         Implement all non-optimized memory cores.  When use with \n                   -rtl_only, optimized cores will be included, as well.\n  [-debug_output]  Enable debugging output.\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n\nCategories: \nMemory\n\nDescription:\n\n  Implements the memory IP cores in the current project.\n\n  Memory IP included in the Xilinx IP catalog are used to generate memory\n  controllers and interfaces for Xilinx devices. Memory IP includes different\n  IP cores from the Xilinx IP catalog depending on the device architecture\n  and memory interface specified. Refer to Zynq-7000 SoC and 7 Series Devices\n  Memory Interface Solutions (UG586), or UltraScale Architecture-Based FPGAs\n  Memory Interface Solutions (PG150), for details of the available memory IP.\n\n  The implement_mig_cores command generates the RTL information for the\n  physical interface (PHY) of the memory controller, and integrates the\n  synthesized netlist of the memory controller into the top-level design.\n\n  A memory controller can be debug enabled when added into the design from\n  the Xilinx IP catalog. In the Vivado logic analyzer, or the Vivado Lab\n  Edition, memory controllers implemented into a design are associated with\n  hw_mig objects, one hw_mig object per debug-enabled memory controller. The\n  hw_mig object will have all the properties needed to get the calibration\n  status and draw the per-bit eye margin views.\n\n  Implementation of the memory IP, and debug core, is automatic when you\n  launch an implementation run using the launch_runs command, or when you run\n  opt_design. However, you can also use the implement_mig_cores command to\n  integrate the memory IP without having to implement the whole design.\n\n  Note: All pins of the memory controller must be assigned prior to running\n  the implement_mig_cores command, or an error will be returned. You can use\n  report_drc to check the status of the memory controller.\n\n  This command returns a transcript of its process, or returns an error if it\n  fails.\n\nArguments:\n\n  -outputdir <arg> - (Optional) Specify the output directory for the\n  generated output products of the memory IP. If -outputdir is not specified,\n  the output will be written to the current project folders.\n\n  -rtlonly - (Optional) Generate only the PHY RTL information for the memory\n  controller.\n\n  -force - (Optional) Force the implementation of the memory IP even if it is\n  up-to-date.\n\n  -debug_output - (Optional) Enable the debugging feature of the memory IP.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example implements the memory IP cores in the current design:\n\n    implement_mig_cores \n    \n\nSee Also:\n\n   *  commit_hw_mig\n   *  get_hw_migs\n   *  launch_runs\n   *  opt_design\n   *  refresh_hw_mig\n   *  report_hw_mig\n",
"create_cell": "create_cell\n\nDescription: \nCreate cells in the current design\n\nSyntax: \ncreate_cell  -reference <arg> [-black_box] [-quiet] [-verbose] <cells>...\n\nUsage: \n  Name          Description\n  -------------------------\n  -reference    Library cell or design which cells reference\n  [-black_box]  Create black box instance\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <cells>       Names of cells to create\n\nCategories: \nNetlist\n\nDescription:\n\n  Add cells to the netlist of the current Synthesized or Implemented design.\n\n  Note: You cannot add cells to library macros, or macro-primitives.\n\n  New cell instances can be added to the top-level of the design, or\n  hierarchically within any module of the design. Instances can reference an\n  existing cell from the library or design source files, or a black box\n  instance can be added that reference cells that have not yet been created.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  This command returns the name of the created cell instance or instances.\n\nArguments:\n\n  -reference <arg> - (Required) The library cell or source file module\n  referenced by the new cell instances.\n\n  -black_box - (Optional) Define a black box instance of the specified\n  reference cell. Use this argument when the reference cell does not exist\n  yet, but you would like to create a black box instance of the cell for a\n  top-down design approach.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cells> - (Required) Instance names of the cells to create. The instance\n  name can be specified as a hierarchical name, from the top-level of the\n  design. In this case, you must use the hierarchy separator character in the\n  hierarchical instance name. You can determine the current hierarchy\n  separator with the get_hierarchy_separator command.\n\nExamples:\n\n  The following example creates three new cell instances of the or1200_cpu\n  module with the specified instance names:\n\n    create_cell -reference or1200_cpu myCell1 myCell2 myCell3 \n    \n\n  The following example sets the hierarchy separator character, then creates\n  a black box instance for the referenced cell, specifying a hierarchical\n  instance name:\n\n    set_hierarchy_separator |  \n    create_cell -reference dmaBlock -black_box usbEngine0|myDMA \n    \n\n  Note: The tool will return an error when -black_box is used, but the\n  -reference cell already exists.\n\nSee Also:\n\n   *  connect_net\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  remove_cell\n   *  rename_cell\n   *  set_hierarchy_separator\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"gets": "gets(n)               Tcl Built-In Commands               gets(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       gets - Read a line from a channel\n\nSYNOPSIS\n       gets channelId ?varName?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  reads the next line from channelId, returns\n       everything in the line up to (but not including) the  end-\n       of-line character(s), and discards the end-of-line charac-\n       ter(s).\n\n       ChannelId must be an identifier for an open  channel  such\n       as  the  Tcl  standard  input  channel (stdin), the return\n       value from an invocation of open or socket, or the  result\n       of a channel creation command provided by a Tcl extension.\n       The channel must have been opened for input.\n\n       If varName is omitted the line is returned as  the  result\n       of  the command.  If varName is specified then the line is\n       placed in the variable by that name and the  return  value\n       is a count of the number of characters returned.\n\n       If  end  of file occurs while scanning for an end of line,\n       the command returns whatever input is available up to  the\n       end  of  file.   If  channelId  is in nonblocking mode and\n       there is not a full line of input available,  the  command\n       returns  an  empty  string and does not consume any input.\n       If varName is specified and an empty string is returned in\n       varName  because of end-of-file or because of insufficient\n       data in nonblocking mode, then the  return  count  is  -1.\n       Note that if varName is not specified then the end-of-file\n       and no-full-line-available  cases  can  produce  the  same\n       results  as if there were an input line consisting only of\n       the end-of-line character(s).  The eof and  fblocked  com-\n       mands can be used to distinguish these three cases.\n\nEXAMPLE\n       This example reads a file one line at a time and prints it\n       out with the current line number attached to the start  of\n       each line.\n\n              set chan [open 'some.file.txt']\n              set lineNumber 0\n              while {[gets $chan line] >= 0} {\n                  puts '[incr lineNumber]: $line'\n              }\n              close $chan\n\n\nSEE ALSO\n       file(n), eof(n), fblocked(n), Tcl_StandardChannels(3)\n\n\nKEYWORDS\n       blocking,  channel,  end  of file, end of line, line, non-\n       blocking, read\n\n\n\nTcl                            7.5                        gets(n)\n",
"reset_param": "reset_param\n\nDescription: \nReset a parameter\n\nSyntax: \nreset_param  [-quiet] [-verbose] <name>\n\nReturns: \noriginal value\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Parameter name\n\nCategories: \nPropertyAndParameter\n\nDescription:\n\n  Restores a user-definable configuration parameter that has been changed\n  with the set_param command to its default value.\n\n  You can use the report_param command to see which parameters are currently\n  defined.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of a parameter to reset. You can only reset\n  one parameter at a time.\n\nExamples:\n\n  The following example restores the tcl.statsThreshold parameter to its\n  default value:\n\n    reset_param tcl.statsThreshold \n    \n\nSee Also:\n\n   *  get_param\n   *  list_param\n   *  report_param\n   *  set_param\n",
"customize_kernel": "customize_kernel\n\nDescription: \nCustomize a baseline RTL kernel by assigning values for parameters on the top module to create a new customized kernel while keeping the baseline IP definition the same. The customized kernel cannot be incrementally customized again.\n\nSyntax: \ncustomize_kernel  -xo_path <arg> [-output_xo_path <arg>] -kernel_name <arg>\n                  [-output_kernel <arg>] [-ip_params <args>]\n                  [-ip_params_file <arg>] [-target_board <arg>] [-quiet]\n                  [-verbose]\n\nReturns: \nPath to destination object file\n\nUsage: \n  Name               Description\n  ------------------------------\n  -xo_path           Absolute path to the object file that contains the named\n                     kernel\n  [-output_xo_path]  Write results to the given .xo file, leaving input file \n                     unmodified\n  -kernel_name       Kernel to customize\n  [-output_kernel]   A kernel name. Must differ from the value specified by \n                     -kernel_name\n  [-ip_params]       Customize RTL based IP used by the kernel. A list of \n                     config name/value pairs.\n  [-ip_params_file]  Customize RTL based IP used by the kernel. Reads input \n                     from file.\n  [-target_board]    Customize DCP based IP used by the kernel. Add the \n                     support for the target board.\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n\nCategories: \nVitis, Acceleration, FileIO\n",
"get_board_interface_ports": "get_board_interface_ports\n\nDescription: \nGets the list of interface ports object\n\nSyntax: \nget_board_interface_ports  [-regexp] [-nocase] [-filter <arg>]\n                           -of_objects <args> [-quiet] [-verbose]\n                           [<patterns>...]\n\nReturns: \nlist of ports in the given interface\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching\n  [-filter]     Filter list with expression\n  -of_objects   Get 'board_component_pin' objects of these types: \n                'board_component_interface board_component_pin'.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  match interface port names against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *, or .* \n                when -regexp is specified.\n\nCategories: \nObject, Board\n\nDescription:\n\n  Gets a list of various physical ports assigned to the component interfaces\n  defined on the current board, as defined in the Board Interface file. The\n  interface ports can be returned from component interfaces as specified by\n  the get_board_component_interfaces command, or from the component pins\n  returned by get_board_component_pins.\n\n  The Board Interface file, board.xml located in the data/boards folder of\n  the Vivado Design Suite installation area, stores information regarding\n  board attributes. The board provides a representation of the overall system\n  that the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  In the Board Interface file, a component interface includes a map of the\n  logical ports, that are defined in the interface file, with a physical port\n  that relates to the component pin or pins on the Xilinx device (part0).\n\n  This command returns a list of the physical ports of the specified\n  component interface, or returns an error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter - (Optional) Filter the results list with the specified expression.\n  The -filter argument filters the list of objects returned by\n  get_board_interface_ports based on property values on the interface ports.\n  You can find the properties on an object with the report_property or\n  list_property commands. Any property/value pair can be used as a filter. In\n  the case of the interface port object, 'LOGICAL_NAME' and 'DIRECTION' are\n  two of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Required) Get the physical interface ports of the\n  specified board component interface, or board component pin objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match physical interface ports against the\n  specified search patterns. The default pattern is the wildcard `*` which\n  gets a list of all component interface ports defined on the specified\n  object.\n\nExamples:\n\n  The following example gets the board interface ports defined in the Board\n  Interface file for the specified board component:\n\n    get_board_interface_ports -of_objects \\  \n       [get_board_component_interfaces *gmii*] \n    \n\nSee Also:\n\n   *  current_board_part\n   *  get_board_component_interfaces\n   *  get_board_component_pins\n   *  get_board_components\n   *  get_boards\n",
"variable": "variable(n)           Tcl Built-In Commands           variable(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       variable - create and initialize a namespace variable\n\nSYNOPSIS\n       variable ?name value...? name ?value?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This command is normally used within a namespace eval com-\n       mand to create one or more variables within  a  namespace.\n       Each  variable  name is initialized with value.  The value\n       for the last variable is optional.\n\n       If a variable name does not exist, it is created.  In this\n       case,  if  value is specified, it is assigned to the newly\n       created variable.  If no value is specified, the new vari-\n       able  is  left undefined.  If the variable already exists,\n       it is set to value if value is specified or left unchanged\n       if no value is given.  Normally, name is unqualified (does\n       not include the names of any containing  namespaces),  and\n       the variable is created in the current namespace.  If name\n       includes any namespace qualifiers, the variable is created\n       in  the  specified  namespace.   If  the  variable  is not\n       defined, it will be visible to the  namespace  which  com-\n       mand, but not to the info exists command.\n\n       If  the  variable  command is executed inside a Tcl proce-\n       dure, it creates local variables linked to the correspond-\n       ing namespace variables (and therefore these variables are\n       listed by info vars.)  In this way  the  variable  command\n       resembles  the global command, although the global command\n       only links to variables in the global namespace.   If  any\n       values  are  given,  they are used to modify the values of\n       the associated namespace variables.  If a namespace  vari-\n       able does not exist, it is created and optionally initial-\n       ized.\n\n       A name argument cannot  reference  an  element  within  an\n       array.   Instead,  name should reference the entire array,\n       and the initialization value should be  left  off.   After\n       the  variable has been declared, elements within the array\n       can be set using ordinary set or array commands.\n\nEXAMPLES\n       Create a variable in a namespace:\n              namespace eval foo {\n                  variable bar 12345\n              }\n\n       Create an array in a namespace:\n              namespace eval someNS {\n                  variable someAry\n                  array set someAry {\n                      someName  someValue\n                      otherName otherValue\n                  }\n              }\n\n       Access variables in namespaces from a procedure:\n              namespace eval foo {\n                  proc spong {} {\n                      # Variable in this namespace\n                      variable bar\n                      puts 'bar is $bar'\n\n                      # Variable in another namespace\n                      variable ::someNS::someAry\n                      parray someAry\n                  }\n              }\n\n\nSEE ALSO\n       global(n), namespace(n), upvar(n)\n\n\nKEYWORDS\n       global, namespace, procedure, variable\n\n\n\nTcl                            8.0                    variable(n)\n",
"llength": "llength(n)            Tcl Built-In Commands            llength(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       llength - Count the number of elements in a list\n\nSYNOPSIS\n       llength list\n_________________________________________________________________\n\n\nDESCRIPTION\n       Treats  list as a list and returns a decimal string giving\n       the number of elements in it.\n\n\nEXAMPLES\n       The result is the number of elements:\n              % llength {a b c d e}\n              5\n              % llength {a b c}\n              3\n              % llength {}\n              0\n\n       Elements are not guaranteed to be exactly words in a  dic-\n       tionary sense of course, especially when quoting is used:\n              % llength {a b {c d} e}\n              4\n              % llength {a b { } c d e}\n              6\n\n       An empty list is not necessarily an empty string:\n              % set var { }; puts '[string length $var],[llength $var]'\n              1,0\n\n\nSEE ALSO\n       list(n),  lappend(n),  lindex(n),  linsert(n), lsearch(n),\n       lset(n), lsort(n), lrange(n), lreplace(n)\n\n\nKEYWORDS\n       element, list, length\n\n\n\nTcl                                                    llength(n)\n",
"report_qor_suggestions": "report_qor_suggestions\n\nDescription: \nRecommend QoR Suggestions\n\nSyntax: \nreport_qor_suggestions  [-file <arg>] [-csv_output_dir <arg>] [-name <arg>]\n                        [-append] [-return_string] [-max_strategies <arg>]\n                        [-max_paths <arg>] [-no_split]\n                        [-report_all_suggestions] [-cells <args>]\n                        [-of_objects <args>] [-quiet] [-verbose]\n\nUsage: \n  Name                       Description\n  --------------------------------------\n  [-file]                    Filename to output results to. (send output to \n                             console if -file is not used)\n  [-csv_output_dir]          Output Dir\n  [-name]                    Output the results to GUI panel with this name\n  [-append]                  Append the results to file, don't overwrite the \n                             results file\n  [-return_string]           Return report as string\n  [-max_strategies]          Number of strategies to suggest\n                             Default: 3\n  [-max_paths]               Number of paths to consider for suggestion \n                             analysis\n                             Default: 100\n  [-no_split]                Report without spliting the lines in tables\n  [-report_all_suggestions]  Report all suggestions\n  [-cells]                   Report QOR suggestions for a given cell\n  [-of_objects]              List of QoR suggestion objects\n  [-quiet]                   Ignore command errors\n  [-verbose]                 Suspend message limits during command execution\n\nCategories: \nFeasibility, Report, Timing, Object\n\nDescription:\n\n  Report design and tool option recommendations related to improving the\n  quality of results (QoR). The report looks at timing constraints, netlist\n  characteristics, failing timing paths, and congestion information to\n  determine suggestions that can enhance the QoR. The report can be generated\n  after synthesis, or after any implementation step, but requires a design to\n  be open.\n\n  The report_qor_suggestions command creates QoR suggestion objects related\n  to the suggestions identified. These suggestion objects can be enabled for\n  use by the Vivado tools to improve the quality of synthesis and\n  implementation results. Some of these suggestions can be automatically\n  applied, and some may require more manual intervention to implement design\n  changes, or write Tcl design constraints.\n\n  Suggestion objects can be obtained using the get_qor_suggestions command.\n  The QoR objects have properties that define what step they are\n  APPLICABLE_FOR, if they are ENABLED to be used, if they can be\n  automatically applied (AUTO), or what step the suggestions was\n  GENERATED_AT. A suggestion must be ENABLED and the APPLICABLE_FOR synthesis\n  or implementation step run in order for a suggestion to be applied to the\n  design.\n\n  You can write the suggestions from the design into an RQS file using the\n  write_qor_suggestions command. After resetting the design flow to the\n  appropriate step, you can read suggestions back into the design using the\n  read_qor_suggestions command, and then run the synthesis or implementation\n  step to apply the enabled suggestions.\n\n  The recommended method for working with QoR suggestions is:\n\n   *  Run the report to create recommendations (report_qor_suggestions)\n\n   *  Write the suggestions to an RQS file on disk (write_qor_suggestions).\n\n   *  Reset the design to the appropriate step.\n\n   *  Read the RQS file into the design to restore the suggestions\n      (read_qor_suggestions).\n\n   *  Run the synthesis or implementation step to apply the suggestion\n      (synth_design, opt_design...).\n\n  For strategy suggestions, a machine learning based analysis is conducted\n  and the best 3 strategies are reported. This analysis is only conducted on\n  a routed design that has been implemented with\n\n   *  the Default or Explore directive for opt_design and\n\n   *  place_design, phys_opt_design, and route_design must have the directive\n      set to Default or Explore. Mix and match of directives is not allowed\n      within these commands.\n\n  Strategy suggestions do not apply to synthesis. Unlike the non-strategy\n  suggestions, only one strategy suggestion can be applied to each run.\n\n  The recommended method for working with QoR strategy suggestions is:\n\n   *  Run the report to create strategies and other\n      recommendations(report_qor_suggestions).\n\n   *  Write the suggestions to a directory disk. There is one RQS file per\n      strategy (write_qor_suggestions -strategy_dir).\n\n   *  Update all the directive settings to -directive RQS for opt_design,\n      place_design, phys_opt_design, and route_design commands.\n\n   *  For each run, read one RQS file into the design. This will contain the\n      strategy suggestion and all exported non-strategy\n      suggestions(read_qor_suggestions).\n\n   *  Run the implementation step from the opt_design command to apply the\n      strategy and all the design suggestions.\n\nArguments:\n\n  -file <arg> - (Optional) Write the QoR report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name for either\n  -file or -csv, the file will be written into the current working directory\n  that can be identified using the [pwd] Tcl command.\n\n  -csv_output_dir - Directory to write supporting CSV files. CSV files contain:\n\n   *  Timing path details and show suggestions that are applicable to the\n      timing path.\n\n   *  Cells and nets with DONT_TOUCH properties\n\n  -name <arg> - (Optional) The name of the view to display in the Vivado IDE\n  when run in GUI mode. Only one QoR suggestion report can be opened in the\n  Vivado tool at one time. This makes it different from most other available\n  reports. If there is already an open report in the Report view, that report\n  will be closed and a new report is opened.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Direct the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -max_strategies <args> - (Optional) Specify the maximum number of ML\n  strategies returned. The algorithm may generate less than the maximum\n  specified number if not enough suitable strategies are identified. Default\n  is 3.\n\n  -max_paths <arg> - (Optional) Specify the number of critical paths to\n  analyze. The default is the 100 worst timing paths per timing group. Timing\n  paths that have a WNS > 0.000 are ignored unless -report_all_suggestions is\n  set.\n\n  -no_split - (Optional) Do not split the lines in the table when generating\n  the report.\n\n  -report_all_suggestions - (Optional) Relaxes the criteria that suppresses\n  suggestions.\n\n   *  Utilization suggestions do not need to save a critical resource\n\n   *  Congestion suggestions are offered on designs when timing is closed\n\n   *  Timing suggestions on paths that have a WNS < +0.500\n\n  -cells <arg> - (Optional) Report QoR suggestions for the specified\n  hierarchical cells and all data paths passing through them.\n\n  -of_objects <args> - (Optional) Report existing suggestions defined by the\n  specified list of QoR objects as returned by the get_qor_suggestions\n  command. When -of_objects is specified, the report does not analyze the\n  design to identify new suggestions, it merely reports the specified\n  existing suggestion objects.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Report suggestions after analyzing the worst 10 paths.\n\n    report_qor_suggestions -max_paths 10\n\n  Report existing suggestions in the design from a prior run of\n  report_qor_suggestions.\n\n    report_qor_suggestions -of_objects [get_qor_suggestions]\n\nSee Also:\n\n   *  get_qor_suggestions\n   *  read_qor_suggestions\n   *  report_qor_assessment\n   *  write_qor_suggestions\n",
"set_ip_msg_config": "set_ip_msg_config\n\nDescription: \nConfigure filtering of messages issued when processing a specified IP.\n\nSyntax: \nset_ip_msg_config  [-synth_msg] [-idlist <args>] [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-synth_msg]  Filter synthesis message(s) with the given message ids. \n                Specified separately because these messages may be issued \n                before a design has been created.\n  [-idlist]     Filter messages that match the given message ids. Example: \n                '-idlist {17-35 17-33}'.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nSDC, XDC\n",
"add_cells_to_pblock": "add_cells_to_pblock\n\nDescription: \nAdd cells to a Pblock\n\nSyntax: \nadd_cells_to_pblock  [-top] [-add_primitives] [-clear_locs] [-quiet] [-verbose]\n                     <pblock> [<cells>...]\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-top]             Add the top level instance; This option can't be used \n                     with -cells, or -add_primitives options. You must \n                     specify either -cells or -top option.\n  [-add_primitives]  Assign to the pblock only primitive cells from the \n                     specified list of cells.\n  [-clear_locs]      Clear instance location constraints\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <pblock>           Pblock to add cells to\n  [<cells>]          Cells to add. You can't use this option with -top \n                     option. You must specify either -cells or -top option.\n\nCategories: \nFloorplan, XDC\n\nDescription:\n\n  Adds specified logic instances to a Pblock in an open implemented design.\n  Once cells have been added to a Pblock, you can place the Pblocks onto the\n  fabric of the FPGA using the resize_pblock command. The resize_pblock\n  command can also be used to manually move and resize Pblocks.\n\n  You can remove instances from the Pblock using the remove_cells_from_pblock\n  command.\n\nArguments:\n\n  -top - (Optional) Add the top level instance to create a Pblock for the\n  whole design. You must either specify <cells> or the -top option to add\n  objects to the Pblock.\n\n  -add_primitives - (Optional) Assign all primitives of the specified\n  instances to a Pblock. This lets you select all cells in a hierarchical\n  module, and assign only the leaf-cells of the selected cells to the\n  specified Pblock.\n\n  Note: This option cannot be used with -top.\n\n  -clear_locs - (Optional) Clear instance location constraints for any cells\n  that are already placed. This allows you to reset the LOC constraint for\n  cells when defining new Pblocks for floorplanning purposes. When this\n  option is not specified, any instances with assigned placement will not be\n  unplaced as they are added to the Pblock.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pblock> - The name assigned to the Pblock.\n\n  <cells> - One or more cell objects to add to the specified Pblock.\n\n  Note: If -top is specified, you cannot also specify <cells>.\n\nExamples:\n\n  The following example creates a Pblock called pb_cpuEngine, and then adds\n  only the leaf-cells found in the cpuEngine module, clearing placement\n  constraints for placed instances:\n\n    create_pblock pb_cpuEngine  \n    add_cells_to_pblock pb_cpuEngine [get_cells cpuEngine/*] \\  \n       -add_primitives -clear_locs \n    \n\nSee Also:\n\n   *  get_pblocks\n   *  place_pblocks\n   *  remove_cells_from_pblock\n   *  resize_pblock\n",
"get_highlighted_objects": "get_highlighted_objects\n\nDescription: \nGet highlighted objects\n\nSyntax: \nget_highlighted_objects  [-color_index <arg>] [-rgb <args>] [-color <arg>]\n                         [-quiet] [-verbose]\n\nReturns: \nlist of highlighted objects\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-color_index]  Color index\n  [-rgb]          RGB color index list\n  [-color]        Valid values are red green blue magenta yellow cyan and \n                  orange\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nObject, GUIControl\n\nDescription:\n\n  Gets the highlighted objects in the current design open in the Vivado IDE.\n  Objects can be highlighted with the highlight_objects command.\n\n  You can get all highlighted objects in the design, or specify highlighted\n  objects by color, by color index, or by RGB value.\n\n  Note: This Tcl command works only when Vivado is run in GUI mode.\n\nArguments:\n\n  -color_index <arg> - (Optional) Valid values are integers from 1 to 19.\n  Specifies the color index used for highlighting the selected object or\n  objects. The color index is defined by the Colors > Highlight category of\n  the Tools > Settings command. Refer to the Vivado Design Suite User Guide:\n  Using the IDE (UG893) for more information on setting themes.\n\n  -rgb <args> - (Optional) The color used for highlighting objects in the\n  form of an RGB code specified as {R G B}. For instance, {255 255 0}\n  specifies the color yellow.\n\n  -color <arg> - (Optional) The color used for highlighting the specified\n  object or objects. Supported highlight colors are: red, green, blue,\n  magenta, yellow, cyan, and orange.\n\n  Note: White is the color used to display selected objects with the\n  select_objects command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example gets all the highlighted objects in the current design:\n\n    get_highlighted_objects \n    \n\n  The following example gets the object in the current design that are\n  highlighted in the specified color:\n\n    get_highlighted_objects -color cyan \n    \n\nSee Also:\n\n   *  get_marked_objects\n   *  get_selected_objects\n   *  highlight_objects\n   *  mark_objects\n   *  select_objects\n",
"get_nets": "get_nets\n\nDescription: \nGet a list of nets in the current design\n\nSyntax: \nget_nets  [-hsc <arg>] [-hierarchical] [-regexp] [-nocase] [-filter <arg>]\n          [-of_objects <args>] [-match_style <arg>]\n          [-top_net_of_hierarchical_group] [-segments] [-parent_net]\n          [-boundary_type <arg>] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of net objects\n\nUsage: \n  Name                              Description\n  ---------------------------------------------\n  [-hsc]                            Hierarchy separator\n                                    Default: /\n  [-hierarchical]                   Search level-by-level in current instance\n  [-regexp]                         Patterns are full regular expressions\n  [-nocase]                         Perform case-insensitive matching (valid \n                                    only when -regexp specified)\n  [-filter]                         Filter list with expression\n  [-of_objects]                     Get nets of these pins, ports, cells, \n                                    timing paths or clocks, drc violations\n  [-match_style]                    Style of pattern matching, valid values \n                                    are ucf, sdc\n                                    Default: sdc\n  [-top_net_of_hierarchical_group]  Return net segment(s) which belong(s) to \n                                    the high level of a hierarchical net\n  [-segments]                       Return all segments of a net across the \n                                    hierarchy\n  [-parent_net]                     Return parent net(s)\n  [-boundary_type]                  Return net segment connected to a \n                                    hierarchical pin which resides at the \n                                    same level as the pin (upper) or at the \n                                    level below (lower), or both. Valid \n                                    values are : upper, lower, both\n                                    Default: upper\n  [-quiet]                          Ignore command errors\n  [-verbose]                        Suspend message limits during command \n                                    execution\n  [<patterns>]                      Match net names against patterns\n                                    Default: *\n\nCategories: \nSDC, XDC, Object\n\nDescription:\n\n  Gets a list of nets in the current design that match a specified search\n  pattern. The default command gets a list of all nets in the\n  current_instance of the open design, as specified by the current_instance\n  command.\n\n  You can use the -hierarchical option to extract nets from the hierarchy of\n  the current design.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -hsc <arg> - (Optional) The default hierarchy separator is `/`. Use this\n  argument to specify a different hierarchy separator.\n\n  -hierarchical - (Optional) Get nets from all levels of the design hierarchy\n  starting at the current instance. Without this argument, the command will\n  only get nets from the current instance, as set by the current_instance\n  command. When using -hierarchical, the search pattern should not contain a\n  hierarchy separator because the search pattern is applied at each level of\n  the hierarchy, not to the full hierarchical net name. For instance,\n  searching for U1/* searches each level of the hierarchy for nets with U1/\n  in the name. This may not return the intended results. See get_cells for\n  examples of -hierarchical searches.\n\n  Note: When used with -regexpr, the specified search string is matched\n  against the full hierarchical name, and the U1/* search pattern will work\n  as intended.\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_nets based on property values on the nets. You can find the properties\n  on an object with the report_property or list_property commands. In the\n  case of the nets object, 'PARENT', 'TYPE' and 'MARK_DEBUG' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get a list of the nets connected to the\n  specified cells, pins, ports, or clocks; or nets associated with specified\n  DRC violation objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -parent_net - (Optional) Only return the parent nets from a list of net\n  segments. The parent net is the net segment connected to the driver leaf\n  pin.\n\n  Note: The command line options -parent_net and\n  -top_net_of_hierarchical_group are mutually exclusive.\n\n  -match_style [sdc | ucf] - (Optional) Indicates that the search pattern\n  matches UCF constraints or SDC constraints. The default is SDC.\n\n  -top_net_of_hierarchical_group - (Optional) Returns the top-level net\n  segment of a hierarchical net, or nets, or the top-level net segments of\n  all nets. Use this option with -segment to return the top-level net segment\n  from all the segments of a hierarchical net.\n\n  -segments - (Optional) Get all the segments of a hierarchical net, across\n  all levels of the hierarchy. This differs from the -hierarchical argument\n  in that it returns all segments of the specified net, rather than just the\n  specified net.\n\n  Note: The -segments option is applied after the -filter option has\n  eliminated nets that do not match the filter pattern. Because of this, you\n  may expect to see net segments returned that have already been filtered out\n  of the returned results. To change this behavior, you can use the filter\n  command rather than the -filter option to apply the -segments option to the\n  get_nets command, and then filter the segments returned. See the Examples\n  for more information.\n\n  -boundary_type [ upper | lower | both ] - (Optional) Gets the net segment\n  at the level (upper) of a specified hierarchical pin, at the level below\n  (lower) the pin or port, or both the level of and the level below. Valid\n  values are upper, lower, or both. The default value is upper.\n\n  Note: This argument must be used with the -of_objects argument to specify\n  the hierarchical pin.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match nets against the specified patterns. The\n  default pattern is the wildcard `*` which returns a list of all nets in the\n  project. More than one pattern can be specified to find multiple nets based\n  on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example runs the report_drc command on the current design,\n  returns the list of violations in the specified DRC report, and then\n  returns any nets associated with the driverless net rule (NDRV):\n\n    \n    report_drc -name drc_1  \n    get_drc_violations -name drc_1  \n    get_nets -of_objects [get_drc_violations -name drc_1 NDRV*] \n    \n\n  The following example returns a list of nets that have been marked for\n  debug with the connect_debug_port command:\n\n    \n    get_nets -hier -filter {MARK_DEBUG==1} \n    \n\n  This example returns the net attached to the specified hierarchical pin\n  object, then returns the net segments attached to the pin object, then\n  returns the top-level net segment attached to the pin object:\n\n    \n    get_nets \\  \n       -of [get_pins cpuEngine/or1200_cpu/or1200_sprs/esr_reg[9]_i_3/I0]  \n     \n    get_nets -segments \\  \n       -of [get_pins cpuEngine/or1200_cpu/or1200_sprs/esr_reg[9]_i_3/I0]  \n     \n    get_nets -top -segments \\  \n       -of [get_pins cpuEngine/or1200_cpu/or1200_sprs/esr_reg[9]_i_3/I0]  \n    \n\n  In the following example, the first command applies the -filter to find\n  nets that have the IS_INTERNAL property, and then -segment is applied to\n  return the segments of those nets. This command returns 0 net segments (and\n  a warning). The second command, returns the segments of all nets, and\n  filters the results to find the segments that have the IS_INTERNAL\n  property, of which there are 448:\n\n    llength [get_nets -segments -filter {IS_INTERNAL}]  \n    WARNING: [Vivado 12-1023] No nets matched for command `get_nets -segments   \n    -filter IS_INTERNAL`.  \n    0  \n    llength [filter [get_nets -segments] {IS_INTERNAL}]  \n    448 \n    \n\nSee Also:\n\n   *  connect_debug_port\n   *  current_instance\n   *  get_cells\n   *  get_clocks\n   *  get_drc_violations\n   *  get_pins\n   *  get_ports\n   *  list_property\n   *  report_drc\n   *  report_property\n",
"report_clock_utilization": "report_clock_utilization\n\nDescription: \nReport information about clock nets in design\n\nSyntax: \nreport_clock_utilization  [-file <arg>] [-append] [-write_xdc <arg>]\n                          [-cells <args>] [-clock_roots_only] [-return_string]\n                          [-name <arg>] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-file]              Filename to output results to. (send output to console\n                       if -file is not used)\n  [-append]            Append to existing file\n  [-write_xdc]         File to output clock constraint. File name must be \n                       given.\n  [-cells]             Cells/bel_instances for which to report clock \n                       utilization\n  [-clock_roots_only]  Report only the Clock Root Assignments\n  [-return_string]     Return report as string\n  [-name]              Output the results to GUI panel with this name\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Returns information related to clock nets in the design and clock resource\n  usage on the target device.\n\n  The generated clock utilization report can generate placement constraints\n  for the currently placed clock resources. You can use these constraints to\n  preserve the placement of clock resources for future iterations of the\n  design, by using the -write_xdc option.\n\n  Note: For Ultrascale devices, if the intent is to recreate the current\n  clock placement then use the BUFGCE LOC properties from the written XDC\n  file. However, if the intent is to use the constraints as a starting point\n  for the clocking architecture, while allowing the Vivado Design Suite some\n  flexibility in placing clock resources, use the equivalent CLOCK_REGION\n  properties instead of the BUFGCE LOC properties.\n\n  By default the report is written to the Tcl console or STD output. However,\n  the results can also be written to a file or returned as a string if\n  desired.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -write_xdc <filename> - (Optional) Output XDC location constraints for the\n  various clock resources to the specified filename. If the path is not\n  specified as part of the file name the file will be created in the current\n  working directory, or the directory from which the tool was launched.\n\n  -cells <arg> - (Option) The details of the report will be based on the\n  specified cells rather than the whole design.\n\n  -clock_roots_only - (Optional) For UltraScale, and device architectures\n  with clock roots, limit the report output to cover just the clock root\n  assignments for each clock net.\n\n  Note: This option is not supported for Xilinx 7 series devices.\n\n  -return_string - (Optional) Direct the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  -name <arg> - (Optional) The name of the Clock Utilization report view to\n  display in the Vivado IDE when run in GUI mode. If the name has already\n  been used in an open Report view, that view will be closed and a new report\n  opened.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns information about the clock nets in the\n  design and the clock resources utilized on the target device, and writes it\n  to the specified file:\n\n    report_clock_utilization -file C:/Data/FPGA_Design/clock_util.txt  \n    \n\n  The following example reports the clock nets and clock resource utilization\n  to the standard output, but writes the XDC location constraints to the\n  specified file:\n\n    report_clock_utilization -write_xdc clock_util_xdc.txt \n    \n\n  Note: Because the path is not specified as part of the XDC file name, the\n  file will be created in the current working directory, or the directory\n  from which the tool was launched.\n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n",
"get_dashboards": "get_dashboards\n\nDescription: \nGet list of Project summary dashboards\n\nSyntax: \nget_dashboards  [-quiet] [-verbose] [<patterns>...]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match gadget names against patterns\n                Default: *\n                Values: The default search pattern is the wildcard *\n\nCategories: \nProject\n",
"write_project_tcl": "write_project_tcl\n\nDescription: \n(User-written application)\nExport Tcl script for re-creating the current project\n\n\nSyntax: \nwrite_project_tcl  [-paths_relative_to <arg>] [-origin_dir_override <arg>]\n                   [-target_proj_dir <arg>] [-force] [-all_properties]\n                   [-no_copy_sources] [-absolute_remote_path] [-no_ip_version]\n                   [-absolute_path] [-dump_project_info] [-use_bd_files]\n                   [-no_bd_xlnoc] [-internal] [-validate]\n                   [-ignore_msg_control_rules] [-quiet] [-verbose] <file>\n\nReturns: \ntrue (0) if success, false (1) otherwise\n\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-paths_relative_to]         Override the reference directory variable for \n                               source file relative paths\n                               Default: Script output directory path\n  [-origin_dir_override]       Set 'origin_dir' directory variable to the \n                               specified value (Default is value specified \n                               with the -paths_relative_to switch)\n                               Default: None\n  [-target_proj_dir]           Directory where the project needs to be \n                               restored\n                               Default: Current project directory path\n  [-force]                     Overwrite existing tcl script file\n  [-all_properties]            Write all properties (default & non-default) \n                               for the project object(s)\n  [-no_copy_sources]           Do not import sources even if they were local \n                               in the original project\n                               Default: 1\n  [-absolute_remote_path]      Write remote sources with absolute paths\n  [-no_ip_version]             Flag to not include the IP version as part of \n                               the IP VLNV in create_bd_cell commands.\n                               Default: 1\n  [-absolute_path]             Make all file paths absolute wrt the original \n                               project directory\n  [-dump_project_info]         Write object values\n  [-use_bd_files]              Use BD sources directly instead of writing out\n                               procs to create them\n  [-no_bd_xlnoc]               Do not create BD xlnoc cell\n                               Default: 1\n  [-internal]                  Print basic header information in the \n                               generated tcl script\n  [-validate]                  Runs a validate script before recreating the \n                               project. To test if the files and paths \n                               refrenced in the tcl file exists or not.\n  [-ignore_msg_control_rules]  Do not imports message control rules in tcl \n                               script\n  [-quiet]                     Execute the command quietly, returning no \n                               messages from the command.\n  [-verbose]                   Suspend message limits during command \n                               execution\n  <file>                       Name of the tcl script file to generate\n\nCategories: \nxilinxtclstore, projutils, user-written\nDescription:\n\n  Create a Tcl script to re-create the current project. The generated script\n  will contain the Tcl commands for creating the project, setting the project\n  type, creating filesets, adding/importing source files, and defining runs and\n  run properties. The re-created project will be functionally equivalent to\n  the original project.\n\n  This generated Tcl project script and the various design sources can be stored\n  in a version control system for source file management and project archival.\n\n  To re-create the project, you should source the generated Tcl script in a \n  Vivado Tcl shell from the same directory where the script was generated. If the\n  original project already exists in the same project directory, the script may\n  fail with an error message that the project already exists. In this case you may\n  want to run the script from a different directory path or update the generated\n  script by adding a '-force' switch to the 'create_project' command. \n\n  In the generated Tcl script, the project source files are referenced relative to\n  the 'origin_dir' variable. By default, the source files are referenced relative\n  to the directory where the tcl script is generated. The 'origin_dir' is set to '.'\n  (the current tcl script directory). When the script is executed from this directory,\n  any source files will be referenced relative to this 'origin_dir' path value.\n\n  In the case where the script is sourced from a different directory or physically\n  moved to a different directory, then the 'origin_dir' variable MUST be manually set\n  relative to the new directory. Manually set the 'origin_dir' to make sure that the\n  source files are correctly referenced relative to the original location.\n\n  You can have the 'origin_dir' automatically set to a directory of your choice by \n  using the -paths_relative_to option. All the source file paths will be defined\n  relative to the directory specified with this option.\n \n  If -absolute_path is specified, the project source files will be referenced\n  using absolute paths only. In this case, the script can be executed from any\n  directory provided these absolute paths are accessible in the same filesystem. \n\n  If the original project contains IP cores, the following rules apply in the generated\n  script while re-creating the project:-\n\n  1. The IP will not be regenerated, if it was generated in the original project.\n\n    In this case, the script will 'add' the IP from the original project with\n    generated synthesis/simulation products.\n \n  2. The IP will be generated, if it was not generated in the original project.\n  \n    In this case, the script will 'add' the IP from the original project and \n    create OOC synthesis runs for generating the synthesis/simulation products.\n\n  If the original project had completed runs, those runs will be re-created with\n  the same settings in the generated project; however those runs will not be\n  automatically launched in order to save runtime.\n\nArguments:\n\n  -paths_relative_to - (Optional) Specify the directory path relative to which\n  the sources will referenced when re-creating the project. The path will be\n  set for the 'origin_dir' variable in the generated script.\n\n  -target_proj_dir - (Optional) Specify the directory path where the project\n  will be recreated. The tool will write 'create_project' command with the\n  directory path specified with this switch.\n\n  -force - (Optional) Overwrite an existing project script file of the same\n  name. If the script file already exists, the tool returns an error unless\n  the -force argument is specified. \n\n  -all_properties - (Optional) Write all properties (default and non-default)\n  for the project. The tool will write 'set_property' commands for setting the\n  properties for objects like project, filesets, files, runs etc. \n\n  Note: By default, if the -all_properties switch is not specified, then only\n  the non-default properties will be written to the script.\n\n  -no_copy_sources - (Optional) Do not import sources even if they are local to\n  the original project. The tool will not import the files that were local in\n  the original project into the new project. If the design contains BD sources then\n  -use_bd_files switch must also be provided.\n\n  -no_ip_version - (Optional) Flag to not include the IP version as part of the\n  IP VLNV in create_bd_cell commands. NOTE - this may have implications if there \n  are major IP version changes.\n\n  -absolute_path - (Optional) Make all file paths absolute in the generated script.\n  This allows running the script from any location in that filesystem. By default the \n  file paths will be relative to the origin_dir variable.\n\n  -dump_project_info - (Optional) Dump information about all properties to two text files, \n  <project_name>_dump.txt (short), and <project_name>_def_val.txt (detailed).\n\n  -use_bd_files - (Optional) Use block design sources directly instead of writing out\n  procs to create them. If the -no_copy_sources switch is provided the BD files will be \n  added (but not copied locally) to the project. Otherwise the files will be imported \n  (copied locally) to the project.\n\n  -internal - (Optional) Print only basic header information in the generated tcl script.\n  By default information about required file sources will also be part of the header.\n\n  -quiet - (Optional) Execute the command quietly, returning only ERROR messages. \n\n  -verbose - (Optional) Temporarily override any message limits and return all\n  messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The name of the output Tcl script file to be created by\n   the write_project_tcl command. The tool will apply an extension of '.tcl' if\n   a file extension is not supplied. \n\nExamples:\n\n  The following example exports a Tcl script named 'recreate.tcl' for the test project:-\n  \n  Start Vivado in tcl mode and execute following commands:\n    % open_project test/test.xpr\n    % write_project_tcl recreate.tcl\n    % close_project\n\n  The following example exports a Tcl script named 'recreate.tcl' for the test\n  project in the './script' directory and specifies the '/tmp/test' directory path\n  in the 'create_project' command. When the 'recreate.tcl' script is sourced in the\n  Vivado Tcl shell, the project will be re-created in '/tmp/test' directory:-\n\n  Start Vivado in tcl mode and execute following commands:\n    % open_project test/test.xpr\n    % write_project_tcl -target_proj_dir '/tmp/test' ./script/recreate.tcl\n    % close_project\n    % source script/recreate.tcl\n\n  The following Tcl commands exports Tcl script for the current project and writes\n  all the properties, both default or non-default values:-\n\n  % write_project_tcl -all_properties recreate.tcl\n\n  The following Tcl commands exports Tcl script for the current project and adds files\n  that are local in this project. The recreated project will reference these files:-\n\n  % write_project_tcl -no_copy_sources recreate.tcl\n\n  The following Tcl and shell commands opens a test project, exports 'recreate.tcl'\n  script for the current project in the current working directory, creates a new\n  project in ./my_test directory, prints the list of files in the new project, prints\n  the current project settings and then closes the newly created project:-\n\n  Start Vivado in tcl mode and execute following commands:\n    % open_project test/test.xpr\n    % write_project_tcl -force recreate.tcl\n    % close_project\n    % exit\n\n  From OS shell:\n    # mkdir my_test\n    # cd my_test\n    # vivado -mode batch -source ../recreate.tcl -tclargs --origin_dir ..\n\n  Start Vivado in tcl mode and execute following commands:\n    % open_project test/test.xpr \n    % get_files -of_objects [get_filesets sources_1]\n    % report_property [current_project]\n    % close_project\n\n  The following Tcl commands creates a new project named bft_test, adds files to the\n  project, sets the fileset property, exports a tcl script named 'bft.tcl' in the current\n  working directory, creates a new project in './my_bft' directory, prints the list of\n  files in the new project (test_1.v and test_2.v), prints the 'verilog_define' property\n  value and then closes the newly created project:-\n\n  Start Vivado in tcl mode and execute following commands:\n    % create_project bft_test ./bft_test\n    % add_files test_1.v\n    % add_files test_2.v\n    % set_property verilog_define {a=10} [get_filesets sources_1]\n    % write_project_tcl -force bft.tcl\n    % close_project\n    % exit\n\n  From OS shell:\n    # mkdir my_bft\n    # cd my_bft\n    # vivado -mode batch -source ../bft.tcl -tclargs --origin_dir ..\n    \n  Start Vivado in tcl mode and execute following commands:\n    % open_project bft_test/bft_test.xpr \n    % get_files -of_objects [get_filesets sources_1]\n    % get_property verilog_define [get_filesets sources_1]\n    % close_project\n\nSee Also:\n\n   *  add_files\n   *  archive_project\n   *  close_project\n   *  create_project\n   *  current_project\n   *  get_files\n   *  get_property\n   *  open_project\n   *  report_property\n   *  set_property\n",
"get_msg_config": "get_msg_config\n\nDescription: \nReturns the current message count, limit, or the message configuration rules previously defined by the set_msg_config command.\n\nSyntax: \nget_msg_config  [-id <arg>] [-severity <arg>] [-rules] [-limit] [-count]\n                [-quiet] [-verbose]\n\nUsage: \n  Name         Description\n  ------------------------\n  [-id]        The message id to match. Should be used in conjunction with \n               -limit or -count\n               Default: empty\n  [-severity]  The message severity to match. Should be used in conjunction \n               with -limit or -count\n               Default: empty\n  [-rules]     Show a table displaying all message control rules for the \n               current project\n  [-limit]     Show the limit for the number of messages matching either -id \n               or -severity that will be displayed\n  [-count]     Show the number of messages matching either -id or -severity \n               that have been displayed\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Returns the current message limit or count applied to a specified message\n  ID or severity, or returns all message configuration rules defined in the\n  current project. Message configuration rules are defined using the\n  set_msg_config command.\n\n  When used with -count this command will display the total number of\n  messages that have been generated with the matching message id, or for the\n  specified severity.\n\n  Note: The get_msg_config command reports the message count for the original\n  CPU process from which Vivado was launched. Any sub-processes that the\n  Vivado Design Suite launches, such as sub-processes used by the launch_runs\n  command to launch synthesis and implementation runs, will not be reported\n  in the message count. This can create confusion when the message count\n  returned by get_msg_config -count is different from what is displayed in\n  the Vivado IDE for instance, or different from what you expect. For this\n  reason, the -count option is best used for non-project based designs.\n\n  When used with -limit this command will display the current limit of\n  messages with the matching message id, or for the specified severity.\n\n  When used with -rules, it will display a table of all message configuration\n  rules currently in effect.\n\n  Note: You can only return the limit, the count, or the rules in a single\n  get_msg_config command. An error is returned if more than one action is\n  attempted.\n\nArguments:\n\n  -id <arg> - (Optional) The message ID, which is included in all returned\n  messages. For example, 'Common 17-54' and 'Netlist 29-28'.\n\n  -severity <value> - (Optional) The severity of the message. There are five\n  message severities:\n\n   *  ERROR - An ERROR condition implies an issue has been encountered which\n      will render design results unusable and cannot be resolved without user\n      intervention.\n\n   *  {CRITICAL WARNING} - A CRITICAL WARNING message indicates that certain\n      input/constraints will either not be applied or are outside the best\n      practices for a FPGA family. User action is strongly recommended.\n\n      Note: Since this is a two word value, it must be enclosed in {}.\n\n   *  WARNING - A WARNING message indicates that design results may be\n      sub-optimal because constraints or specifications may not be applied as\n      intended. User action may be taken or may be reserved.\n\n   *  INFO - An INFO message is the same as a STATUS message, but includes a\n      severity and message ID tag. An INFO message includes a message ID to\n      allow further investigation through answer records if needed.\n\n   *  STATUS - A STATUS message communicates general status of the process\n      and feedback to the user regarding design processing. A STATUS message\n      does not include a message ID.\n\n  -rules - (Optional) Return the message configuration rules in the current\n  project as defined by the set_msg_config command.\n\n  Note: When -rule is specified, all configuration rules for the current\n  project are returned regardless of any message qualifier such as -id or\n  -severity.\n\n  -limit - (Optional) Return the current limit of messages that match the\n  message ID or the message severity.\n\n  -count - (Optional) Return the current count of messages that match the\n  specified message ID or message severity.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example gets the current count of the specified INFO message:\n\n    get_msg_config -id 'Common 17-81' -count \n    \n\n  The following example returns the message configuration rules in the\n  current project:\n\n    get_msg_config -rules \n    \n\n  This example changes the severity of messages with the specified message\n  ID, gets the current message configuration rules, and then shows two\n  different command forms to reset the specific rule and restore the message:\n\n    set_msg_config -id 'Common 17-361' -severity INFO -new_severity WARNING  \n    get_msg_config -rules  \n    ---------------------  \n    Message control rules currently in effect are:  \n    Rule Name  Rule                                                  Current Message Count    \n    1  set_msg_config -ruleid {1} -id {Common 17-361} -severity {INFO} -new_severity {WARNING} 0  \n    ---------------------  \n    reset_msg_config -id 'Common 17-361' -default_severity    \n    reset_msg_config -ruleid {1}                      \n     \n    \n\n  Note: In the preceding example, only one of the reset_msg_config commands\n  is needed to reset the message.\n\nSee Also:\n\n   *  reset_msg_config\n   *  set_msg_config\n",
"read_waivers": "read_waivers\n\nDescription: \nRead one or more DRC/METHODOLOGY/CDC message waivers data sets from binary file(s)\n\nSyntax: \nread_waivers  [-type <arg>] [-cleanup <arg>] [-file <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-type]     Type of waiver - ALL, DRC, METHODOLOGY, CDC\n  [-cleanup]  Type of waivers to cleanup - ALL, DRC, METHODOLOGY, CDC\n  [-file]     Name of file to read waivers (or as TYPE.<filename>, if more \n              than one Type was saved\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nWaiver, Object\n",
"get_package_pins": "get_package_pins\n\nDescription: \nGet a list of package pins\n\nSyntax: \nget_package_pins  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                  [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of package pin objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the list of package pin objects of these sites, bels, \n                 iobanks, pkgpin_bytegroups, pkgpin_nibbles, or ports.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match list of package pin objects against patterns\n                 Default: *\n\nCategories: \nXDC, Object\n\nDescription:\n\n  Gets a list of the pins on the selected package for the target device. The\n  default command gets a list of all pins on the package.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_package_pins based on property values on the pins. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the package pin object, 'IS_CLK_CAPABLE', 'IS_VREF' and\n  'IS_GLOBAL_CLK' are some of the properties that can be used to filter\n  results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the package pins connected to the\n  specified objects. Valid objects include sites, bels, iobanks,\n  pkgpin_bytegroups, pkgpin_nibbles, or ports.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match pins against the specified patterns. The\n  default pattern is the wildcard `*` which returns all pins on the package.\n  More than one pattern can be specified to find multiple pins based on\n  different search criteria.\n\nExamples:\n\n  The following example gets a list of the package pins associated with the\n  specified bytegroup of an UltraScale device:\n\n    get_package_pins -of [get_pkgpin_bytegroups BANK44_BYTE0] \n    \n\n  The following example gets the number of clock capable (CC) pins on the\n  package:\n\n    llength [get_package_pins -filter {IS_CLK_CAPABLE==1}] \n    \n\n  Note: If there are no pins matching the pattern you will get a warning.\n\nSee Also:\n\n   *  get_pkgpin_bytegroups\n   *  get_pkgpin_nibble\n   *  get_ports\n   *  get_sites\n   *  list_property\n   *  place_ports\n   *  report_property\n",
"info": "info(n)               Tcl Built-In Commands               info(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       info  -  Return  information  about  the  state of the Tcl\n       interpreter\n\nSYNOPSIS\n       info option ?arg arg ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This command provides information about various  internals\n       of  the  Tcl interpreter.  The legal options (which may be\n       abbreviated) are:\n\n       info args procname\n              Returns a list containing the names  of  the  argu-\n              ments  to  procedure  procname, in order.  Procname\n              must be the name of a Tcl command procedure.\n\n       info body procname\n              Returns the body of procedure  procname.   Procname\n              must be the name of a Tcl command procedure.\n\n       info cmdcount\n              Returns  a  count  of  the total number of commands\n              that have been invoked in this interpreter.\n\n       info commands ?pattern?\n              If pattern is not  specified,  returns  a  list  of |\n              names  of  all  the Tcl commands visible (i.e. exe- |\n              cutable without using a qualified name) to the cur- |\n              rent  namespace,  including  both the built-in com- |\n              mands written  in  C  and  the  command  procedures |\n              defined  using  the  proc  command.   If pattern is |\n              specified, only those names  matching  pattern  are |\n              returned.   Matching  is  determined using the same |\n              rules as for string match.  pattern can be a quali- |\n              fied  name like Foo::print*.  That is, it may spec- |\n              ify a particular  namespace  using  a  sequence  of |\n              namespace  names  separated  by double colons (::), |\n              and may have pattern matching special characters at |\n              the end to specify a set of commands in that names- |\n              pace.  If pattern is a qualified name, the  result- |\n              ing  list  of  command names has each one qualified |\n              with the name of the specified namespace, and  only |\n              the  commands  defined  in  the named namespace are |\n              returned.\n\n       info complete command\n              Returns 1 if command is a complete Tcl  command  in\n              the  sense  of  having  no unclosed quotes, braces,\n              brackets or array element names.   If  the  command\n              does  not appear to be complete then 0 is returned.\n              This command is  typically  used  in  line-oriented\n              input  environments  to allow users to type in com-\n              mands that span multiple lines;  if the command  is\n              not  complete,  the  script can delay evaluating it\n              until additional lines have been typed to  complete\n              the command.\n\n       info default procname arg varname\n              Procname  must  be the name of a Tcl command proce-\n              dure and arg must be the name  of  an  argument  to\n              that  procedure.   If  arg  does not have a default\n              value then the command  returns  0.   Otherwise  it\n              returns  1 and places the default value of arg into\n              variable varname.\n\n       info exists varName\n              Returns 1 if the variable named varName  exists  in\n              the  current  context  (either as a global or local\n              variable) and has been defined  by  being  given  a\n              value, returns 0 otherwise.\n\n       info frame ?number?\n              This  command  provides access to all frames on the\n              stack, even those hidden from info level. If number\n              is  not  specified,  this  command returns a number\n              giving the frame level of the command. This is 1 if\n              the  command  is invoked at top-level. If number is\n              specified, then the result is a dictionary contain-\n              ing the location information for the command at the\n              numbered level on the stack.\n\n              If number is positive (> 0) then it selects a  par-\n              ticular  stack  level  (1  refers  to  the top-most\n              active command, i.e., info frame itself, 2  to  the\n              command  it  was called from, and so on); otherwise\n              it gives a level relative to the current command (0\n              refers  to  the  current  command, i.e., info frame\n              itself, -1 to its caller, and so on).\n\n              This is similar to how  info  level  works,  except\n              that  this  subcommand  reports  all  frames,  like\n              sourced scripts, evals, uplevels, etc.\n\n              Note that  for  nested  commands,  like  'foo  [bar\n              [x]]',  only  'x'  will  be  seen  by an info frame\n              invoked within 'x'.  This is the same as  for  info\n              level and error stack traces.\n\n              The  result  dictionary may contain the keys listed\n              below, with the specified meanings for  their  val-\n              ues:\n\n              type   This  entry  is always present and describes\n                     the nature of the location for the  command.\n                     The  recognized  values  are  source,  proc,\n                     eval, and precompiled.\n\n                     source\n                             means that the command is found in a\n                             script loaded by the source command.\n\n                     proc\n                             means that the command is  found  in\n                             dynamically  created procedure body.\n\n                     eval\n                             means that the command  is  executed\n                             by eval or uplevel.\n\n                     precompiled\n                             means that the command is found in a\n                             precompiled script (loadable by  the\n                             package  tbcload),  and  no  further\n                             information will be available.\n\n              line   This entry provides the number of  the  line\n                     the command is at inside of the script it is\n                     a part of. This information is  not  present\n                     for  type  precompiled. For type source this\n                     information  is  counted  relative  to   the\n                     beginning  of the file, whereas for the last\n                     two types the line is  counted  relative  to\n                     the start of the script.\n\n              file   This  entry is present only for type source.\n                     It provides the normalized path of the  file\n                     the command is in.\n\n              cmd    This  entry  provides the string representa-\n                     tion of the command.  This  is  usually  the\n                     unsubstituted  form,  however  for  commands\n                     which are a pure list executed by eval it is\n                     the  substituted  form as they have no other\n                     string representation. Care  is  taken  that\n                     the  pure-List property of the latter is not\n                     spoiled.\n\n              proc   This entry is present only if the command is\n                     found  in  the  body of a regular Tcl proce-\n                     dure. It then provides the name of that pro-\n                     cedure.\n\n              lambda This entry is present only if the command is\n                     found in the body of an anonymous Tcl proce-\n                     dure,  i.e.  a  lambda. It then provides the\n                     entire definition of the lambda in question.\n\n              level  This  entry  is  present only if the queried\n                     frame has a corresponding frame returned  by\n                     info  level.  It  provides the index of this\n                     frame, relative to the current level (0  and\n                     negative numbers).\n\n              A  thing  of note is that for procedures statically\n              defined in files the locations of commands in their\n              bodies  will be reported with type source and abso-\n              lute line numbers, and not as type proc.  The  same\n              is true for procedures nested in statically defined\n              procedures, and literal eval scripts  in  files  or\n              statically defined procedures.\n\n              In  contrast, a procedure definition or eval within\n              a dynamically evaluated environment count  linenum-\n              bers relative to the start of their script, even if\n              they would be able to count relative to  the  start\n              of  the  outer  dynamic script. That type of number\n              usually makes more sense.\n\n              A different way of  describing  this  behaviour  is\n              that  file based locations are tracked as deeply as\n              possible, and where this is not possible the  lines\n              are  counted based on the smallest possible eval or\n              procedure body, as that scope is usually easier  to\n              find than any dynamic outer scope.\n\n              The  syntactic  form {*} is handled like eval. I.e.\n              if it is given a literal list argument  the  system\n              tracks  the  linenumber  within  the  list words as\n              well, and otherwise  all  linenumbers  are  counted\n              relative to the start of each word (smallest scope)\n\n       info functions ?pattern?\n              If pattern is not specified, returns a list of  all\n              the  math  functions currently defined.  If pattern\n              is  specified,  only  those  functions  whose  name\n              matches  pattern  are returned.  Matching is deter-\n              mined using the same rules as for string match.\n\n       info globals ?pattern?\n              If pattern is not specified, returns a list of  all\n              the  names  of  currently-defined global variables.\n              Global variables are variables in the global names-\n              pace.   If  pattern  is specified, only those names\n              matching pattern are returned.  Matching is  deter-\n              mined using the same rules as for string match.\n\n       info hostname\n              Returns  the  name  of  the  computer on which this\n              invocation is being executed.  Note that this  name\n              is  not guaranteed to be the fully qualified domain\n              name of the host.  Where machines have several dif-\n              ferent  names  (as  is  common on systems with both\n              TCP/IP   (DNS)   and    NetBIOS-based    networking\n              installed,)  it  is  the  name that is suitable for\n              TCP/IP networking that is returned.\n\n       info level ?number?\n              If number is not specified, this command returns  a\n              number  giving the stack level of the invoking pro-\n              cedure, or 0 if the  command  is  invoked  at  top-\n              level.   If number is specified, then the result is\n              a list consisting of the name and arguments for the\n              procedure  call  at  level number on the stack.  If\n              number is positive then  it  selects  a  particular\n              stack level (1 refers to the top-most active proce-\n              dure, 2 to the procedure it  called,  and  so  on);\n              otherwise  it gives a level relative to the current\n              level (0 refers to the current procedure, -1 to its\n              caller,  and  so  on).  See the uplevel command for\n              more information on what stack levels mean.\n\n       info library\n              Returns the name of the library directory in  which\n              standard  Tcl scripts are stored.  This is actually\n              the value of the tcl_library variable  and  may  be\n              changed  by  setting  tcl_library.  See the tclvars\n              manual entry for more information.\n\n       info loaded ?interp?\n              Returns a list describing all of the packages  that\n              have been loaded into interp with the load command.\n              Each list element is a sub-list with  two  elements\n              consisting  of  the name of the file from which the\n              package was loaded and the  name  of  the  package.\n              For  statically-loaded  packages the file name will\n              be an empty string.   If  interp  is  omitted  then\n              information  is returned for all packages loaded in\n              any interpreter in the process.  To get a  list  of\n              just the packages in the current interpreter, spec-\n              ify an empty string for the interp argument.\n\n       info locals ?pattern?\n              If pattern is not specified, returns a list of  all\n              the  names  of  currently-defined  local variables,\n              including arguments to the  current  procedure,  if\n              any.  Variables defined with the global, upvar  and\n              variable commands will not be returned.  If pattern\n              is specified, only those names matching pattern are\n              returned.  Matching is determined  using  the  same\n              rules as for string match.\n\n       info nameofexecutable\n              Returns  the full path name of the binary file from\n              which the application  was  invoked.   If  Tcl  was\n              unable  to  identify the file, then an empty string\n              is returned.\n\n       info patchlevel\n              Returns the value of the global variable tcl_patch-\n              Level; see the tclvars manual entry for more infor-\n              mation.\n\n       info procs ?pattern?\n              If pattern is not specified, returns a list of  all\n              the  names of Tcl command procedures in the current\n              namespace.  If pattern  is  specified,  only  those\n              procedure  names  in the current namespace matching\n              pattern are returned.  Matching is determined using\n              the  same  rules  as  for string match.  If pattern\n              contains any namespace separators, they are used to\n              select  a  namespace relative to the current names-\n              pace (or relative to the global namespace  if  pat-\n              tern  starts with ::) to match within; the matching\n              pattern is taken to be  the  part  after  the  last\n              namespace separator.\n\n       info script ?filename?\n              If  a  Tcl script file is currently being evaluated\n              (i.e. there is a call  to  Tcl_EvalFile  active  or\n              there  is  an  active invocation of the source com-\n              mand), then this command returns the  name  of  the\n              innermost  file  being  processed.   If filename is\n              specified, then the return value  of  this  command\n              will  be  modified  for  the duration of the active\n              invocation to return that name.  This is useful  in\n              virtual  file  system  applications.  Otherwise the\n              command returns an empty string.\n\n       info sharedlibextension\n              Returns the extension used on this platform for the\n              names  of  files  containing  shared libraries (for\n              example, .so under Solaris).  If  shared  libraries\n              are  not  supported  on this platform then an empty\n              string is returned.\n\n       info tclversion\n              Returns the value of the global  variable  tcl_ver-\n              sion;  see the tclvars manual entry for more infor-\n              mation.\n\n       info vars ?pattern?\n              If pattern is not specified, returns a list of  all\n              the  names  of  currently-visible  variables.  This\n              includes locals and currently-visible globals.   If\n              pattern  is  specified,  only  those names matching\n              pattern are returned.  Matching is determined using\n              the same rules as for string match.  pattern can be\n              a qualified name like Foo::option*.   That  is,  it\n              may specify a particular namespace using a sequence\n              of namespace names separated by double colons (::),\n              and may have pattern matching special characters at\n              the end to specify  a  set  of  variables  in  that\n              namespace.   If  pattern  is  a qualified name, the\n              resulting list of variable names has each  matching\n              namespace  variable  qualified with the name of its\n              namespace.  Note that a currently-visible  variable\n              may  not yet 'exist' if it has not been set (e.g. a\n              variable declared but not set by variable).\n\nEXAMPLE\n       This command prints out a procedure suitable for saving in\n       a Tcl script:\n\n              proc printProc {procName} {\n                  set result [list proc $procName]\n                  set formals {}\n                  foreach var [info args $procName] {\n                      if {[info default $procName $var def]} {\n                          lappend formals [list $var $def]\n                      } else {\n                          # Still need the list-quoting because variable\n                          # names may properly contain spaces.\n                          lappend formals [list $var]\n                      }\n                  }\n                  puts [lappend result $formals [info body $procName]]\n              }\n\nSEE ALSO\n       global(n), proc(n)\n\nKEYWORDS\n       command,  information, interpreter, level, namespace, pro-\n       cedure, variable\n\n\n\nTcl                            8.4                        info(n)\n",
"clock": "clock(n)              Tcl Built-In Commands              clock(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       clock - Obtain and manipulate dates and times\n\nSYNOPSIS\n       package require Tcl 8.5\n\n       clock add timeVal ?count unit...? ?-option value?\n\n       clock clicks ?-option?\n\n       clock format timeVal ?-option value...?\n\n       clock microseconds\n\n       clock milliseconds\n\n       clock scan inputString ?-option value...?\n\n       clock seconds\n\n_________________________________________________________________\n\nDESCRIPTION\n       The  clock command performs several operations that obtain\n       and manipulate values that represent times.   The  command\n       supports several subcommands that determine what action is\n       carried out by the command.\n\n       clock add timeVal ?count unit...? ?-option value?\n              Adds a (possibly negative) offset to a time that is\n              expressed  as  an  integer  number of seconds.  See\n              CLOCK ARITHMETIC for a full description.\n\n       clock clicks ?-option?\n              If no -option argument is supplied, returns a high-\n              resolution time value as a system-dependent integer\n              value.  The unit of the value  is  system-dependent\n              but  should  be the highest resolution clock avail-\n              able on the system such as  a  CPU  cycle  counter.\n              See  HIGH RESOLUTION TIMERS for a full description.\n\n              If the -option argument is -milliseconds, then  the\n              command  is synonymous with clock milliseconds (see\n              below).  This usage is  obsolete,  and  clock  mil-\n              liseconds  is to be considered the preferred way of\n              obtaining a count of milliseconds.\n\n              If the -option argument is -microseconds, then  the\n              command  is synonymous with clock microseconds (see\n              below).   This  usage  is   obsolete,   and   clock\n              microseconds  is to be considered the preferred way\n              of obtaining a count of microseconds.\n\n       clock format timeVal ?-option value...?\n              Formats a time that is expressed as an integer num-\n              ber  of seconds into a format intended for consump-\n              tion by users or external programs.  See FORMATTING\n              TIMES for a full description.\n\n       clock microseconds\n              Returns  the  current  time as an integer number of\n              microseconds.  See HIGH  RESOLUTION  TIMERS  for  a\n              full description.\n\n       clock milliseconds\n              Returns  the  current  time as an integer number of\n              milliseconds.  See HIGH  RESOLUTION  TIMERS  for  a\n              full description.\n\n       clock scan inputString ?-option value...?\n              Scans  a  time  that  is  expressed  as a character\n              string and produces an integer number  of  seconds.\n              See SCANNING TIMES for a full description.\n\n       clock seconds\n              Returns  the  current  time as an integer number of\n              seconds.\n\n   PARAMETERS\n       count  An integer representing a count  of  some  unit  of\n              time.  See CLOCK ARITHMETIC for the details.\n\n       timeVal\n              An  integer  value passed to the clock command that\n              represents an absolute time as a number of  seconds\n              from  the  epoch time of 1 January 1970, 00:00 UTC.\n              Note that the count of seconds does not include any\n              leap  seconds;  seconds  are counted as if each UTC\n              day has exactly 86400  seconds.   Tcl  responds  to\n              leap  seconds by speeding or slowing its clock by a\n              tiny fraction for some minutes until it is back  in\n              sync  with  UTC;  its data model does not represent\n              minutes that have 59 or 61 seconds.\n\n       unit   One of the words, seconds,  minutes,  hours,  days,\n              weeks,  months,  or  years, or any unique prefix of\n              such a word. Used  in  conjunction  with  count  to\n              identify  an  interval of time, for example, 3 sec-\n              onds or 1 year.\n\n   OPTIONS\n       -base time\n              Specifies that any  relative  times  present  in  a\n              clock  scan  command  are  to  be given relative to\n              time.  time must be expressed as a count of nominal\n              seconds  from  the  epoch  time  of 1 January 1970,\n              00:00 UTC.\n\n       -format format\n              Specifies the desired output format for clock  for-\n              mat  or  the  expected input format for clock scan.\n              The format string consists of any number of charac-\n              ters  other  than  the  per-cent  sign ('%') inter-\n              spersed with any number of format groups, which are\n              two-character sequences beginning with the per-cent\n              sign.  The permissible  format  groups,  and  their\n              interpretation,  are described under FORMAT GROUPS.\n\n              On clock format, the default format is\n                     %a %b %d %H:%M:%S %z %Y\n\n              On clock scan, the lack of a -format  option  indi-\n              cates  that  a 'free format scan' is requested; see\n              FREE FORM SCAN for a description of what happens.\n\n       -gmt boolean\n              If boolean is true, specifies that a time specified\n              to  clock add, clock format or clock scan should be\n              processed in UTC.  If boolean is  false,  the  pro-\n              cessing  defaults  to  the  local  time zone.  This\n              usage is obsolete; the correct current usage is  to\n              specify  the UTC time zone with '-timezone :UTC' or\n              any of the equivalent ways to specify it.\n\n       -locale localeName\n              Specifies that locale-dependent scanning  and  for-\n              matting  (and  date  arithmetic for dates preceding\n              the adoption of the Gregorian calendar)  is  to  be\n              done  in  the locale identified by localeName.  The\n              locale name may be any of the locales acceptable to\n              the  msgcat  package, or it may be the special name\n              system, which represents the current locale of  the\n              process, or the null string, which represents Tcl's\n              default locale.\n\n              The effect of locale on scanning and formatting  is\n              discussed  in  the  descriptions  of the individual\n              format groups under FORMAT GROUPS.  The  effect  of\n              locale on clock arithmetic is discussed under CLOCK\n              ARITHMETIC.\n\n       -timezone zoneName\n              Specifies that clock  arithmetic,  formatting,  and\n              scanning  are to be done according to the rules for\n              the time zone specified by zoneName.  The permissi-\n              ble values, and their interpretation, are discussed\n              under TIME ZONES.  On  subcommands  that  expect  a\n              -timezone  argument, the default is to use the cur-\n              rent time zone.  The current time  zone  is  deter-\n              mined, in order of preference, by:\n\n              [1]    the environment variable TCL_TZ.\n\n              [2]    the environment variable TZ.\n\n              [3]    on  Windows  systems, the time zone settings\n                     from the Control Panel.\n       If none of these is present, the C  localtime  and  mktime\n       functions  are  used  to  attempt to convert times between\n       local and Greenwich.  On 32-bit systems, this approach  is\n       likely  to have bugs, particularly for times that lie out-\n       side the window (approximately the  years  1902  to  2037)\n       that can be represented in a 32-bit integer.\n\nCLOCK ARITHMETIC\n       The clock add command performs clock arithmetic on a value\n       (expressed as nominal seconds from the  epoch  time  of  1\n       January 1970, 00:00 UTC) given as its first argument.  The\n       remaining arguments (other than  the  possible  -timezone,\n       -locale  and  -gmt  options)  are integers and keywords in\n       alternation, where the keywords are chosen  from  seconds,\n       minutes,  hours,  days,  weeks,  months,  or years, or any\n       unique prefix of such a word.\n\n       Addition of seconds, minutes and hours is fairly straight-\n       forward;  the  given  time increment (times sixty for min-\n       utes, or 3600 for hours) is simply added  to  the  timeVal\n       given to the clock add command.  The result is interpreted\n       as a nominal number of seconds from the Epoch.\n\n       Surprising results may be obtained when crossing  a  point\n       at  which  a leap second is inserted or removed; the clock\n       add command simply  ignores  leap  seconds  and  therefore\n       assumes  that  times come in sequence, 23:59:58, 23:59:59,\n       00:00:00.  (This assumption is handled by  the  fact  that\n       Tcl's  model of time reacts to leap seconds by speeding or\n       slowing the clock by a minuscule amount until  Tcl's  time\n       is back in step with the world.\n\n       The  fact  that adding and subtracting hours is defined in\n       terms of absolute  time  means  that  it  will  add  fixed\n       amounts  of  time  in  time zones that observe summer time\n       (Daylight Saving Time).  For example, the  following  code\n       sets  the  value  of  x  to 04:00:00 because the clock has\n       changed in the interval in question.\n              set s [clock scan {2004-10-30 05:00:00} \\\n                         -format {%Y-%m-%d %H:%M:%S} \\\n                         -timezone :America/New_York]\n              set a [clock add $s 24 hours -timezone :America/New_York]\n              set x [clock format $a \\\n                         -format {%H:%M:%S} -timezone :America/New_York]\n\n       Adding and subtracting days and weeks is  accomplished  by\n       converting  the  given  time to a calendar day and time of\n       day in the appropriate time zone and locale.   The  requi-\n       site number of days (weeks are converted to days by multi-\n       plying by seven) is added to the  calendar  day,  and  the\n       date  and  time are then converted back to a count of sec-\n       onds from the epoch time.\n\n       Adding and subtracting a given number of days  across  the\n       point  that the time changes at the start or end of summer\n       time (Daylight Saving Time) results in the same local time\n       on  the day in question.  For instance, the following code\n       sets the value of x to 05:00:00.\n              set s [clock scan {2004-10-30 05:00:00} \\\n                         -format {%Y-%m-%d %H:%M:%S} \\\n                         -timezone :America/New_York]\n              set a [clock add $s 1 day -timezone :America/New_York]\n              set x [clock format $a \\\n                         -format {%H:%M:%S} -timezone :America/New_York]\n\n       In cases of ambiguity, where the same local  time  happens\n       twice on the same day, the earlier time is used.  In cases\n       where  the  conversion  yields  an  impossible  time  (for\n       instance,  02:30  during  the  Spring Daylight Saving Time\n       change using US rules), the time is converted  as  if  the\n       clock  had not changed.  Thus, the following code will set\n       the value of x to 03:30:00.\n              set s [clock scan {2004-04-03 02:30:00} \\\n                         -format {%Y-%m-%d %H:%M:%S} \\\n                         -timezone :America/New_York]\n              set a [clock add $s 1 day -timezone :America/New_York]\n              set x [clock format $a \\\n                         -format {%H:%M:%S} -timezone :America/New_York]\n\n       Adding a given number of days  or  weeks  works  correctly\n       across  the  conversion  between  the Julian and Gregorian\n       calendars; the omitted days are  skipped.   The  following\n       code sets z to 1752-09-14.\n              set x [clock scan 1752-09-02 -format %Y-%m-%d -locale en_US]\n              set y [clock add $x 1 day -locale en_US]\n              set z [clock format $y -format %Y-%m-%d -locale en_US]\n\n       In  the  bizarre case that adding the given number of days\n       yields a date that does not exist because it falls  within\n       the  dropped  days  of the Julian-to-Gregorian conversion,\n       the date is converted as if it was on the Julian calendar.\n\n       Adding  a number of months, or a number of years, is simi-\n       lar; it converts the given time to  a  calendar  date  and\n       time  of day.  It then adds the requisite number of months\n       or years, and reconverts the resulting date  and  time  of\n       day to an absolute time.\n\n       If  the resulting date is impossible because the month has\n       too few days (for example, when adding 1 month to 31  Jan-\n       uary),  the  last  day of the month is substituted.  Thus,\n       adding 1 month to 31 January will result in 28 February in\n       a common year or 29 February in a leap year.\n\n       The  rules  for handling anomalies relating to summer time\n       and  to  the  Gregorian  calendar  are   the   same   when\n       adding/subtracting  months  and  years  as  they  are when\n       adding/subtracting days and weeks.\n\n       If multiple count unit pairs are present on  the  command,\n       they are evaluated consecutively, from left to right.\n\nHIGH RESOLUTION TIMERS\n       Most  of  the  subcommands  supported by the clock command\n       deal with times represented as a count of seconds from the\n       epoch time, and this is the representation that clock sec-\n       onds returns.  There are three exceptions, which  are  all\n       intended   for   use  where  higher-resolution  times  are\n       required.  clock milliseconds returns the  count  of  mil-\n       liseconds  from  the  epoch  time,  and clock microseconds\n       returns the count of microseconds from the epoch time.  In\n       addition,  there  is a clock clicks command that returns a\n       platform-dependent high-resolution  timer.   Unlike  clock\n       seconds  and clock milliseconds, the value of clock clicks\n       is not guaranteed to be tied to any  fixed  epoch;  it  is\n       simply  intended  to  be  the  most precise interval timer\n       available, and is intended only for relative timing  stud-\n       ies such as benchmarks.\n\nFORMATTING TIMES\n       The  clock  format command produces times for display to a\n       user or  writing  to  an  external  medium.   The  command\n       accepts times that are expressed in seconds from the epoch\n       time of 1 January 1970, 00:00 UTC, as  returned  by  clock\n       seconds,  clock scan, clock add, file atime or file mtime.\n\n       If a -format option is present, the following argument  is\n       a  string  that  specifies how the date and time are to be\n       formatted.  The string consists of any number  of  charac-\n       ters  other than the per-cent sign ('%') interspersed with\n       any number  of  format  groups,  which  are  two-character\n       sequences beginning with the per-cent sign.  The permissi-\n       ble format groups, and their interpretation, are described\n       under FORMAT GROUPS.\n\n       If  a  -timezone option is present, the following argument\n       is a string that specifies the time zone in which the date\n       and  time  are  to  be  formatted.   As  an alternative to\n       '-timezone :UTC', the obsolete usage '-gmt  true'  may  be\n       used.  See TIME ZONES for the permissible variants for the\n       time zone.\n\n       If a -locale option is present, the following argument  is\n       a string that specifies the locale in which the time is to\n       be formatted, in the same format that is used for the msg-\n       cat  package.   Note  that  the default, if -locale is not\n       specified, is the root locale {} rather than  the  current\n       locale.   The  current  locale  may  be  obtained by using\n       -locale current.  In addition, some  platforms  support  a\n       system  locale  that  reflects the user's current choices.\n       For instance, on Windows, the format  that  the  user  has\n       selected  from dates and times in the Control Panel can be\n       obtained by using the system locale.  On platforms that do\n       not define a user selection of date and time formats sepa-\n       rate from  LC_TIME,  -locale  system  is  synonymous  with\n       -locale current.\n\nSCANNING TIMES\n       The clock scan command accepts times that are formatted as\n       strings and converts them to counts of  seconds  from  the\n       epoch  time  of  1  January  1970, 00:00 UTC.  It normally\n       takes a -format  option  that  is  followed  by  a  string\n       describing  the  expected  format of the input.  (See FREE\n       FORM SCAN for the effect of clock  scan  without  such  an\n       argument.)   The  string consists of any number of charac-\n       ters other than the per-cent sign ('%'), interspersed with\n       any  number  of  format  groups,  which  are two-character\n       sequences beginning with the per-cent sign.  The permissi-\n       ble format groups, and their interpretation, are described\n       under FORMAT GROUPS.\n\n       If a -timezone option is present, the  following  argument\n       is a string that specifies the time zone in which the date\n       and time are to be  interpreted.   As  an  alternative  to\n       -timezone  :UTC, the obsolete usage -gmt true may be used.\n       See TIME ZONES for the permissible variants for  the  time\n       zone.\n\n       If  a -locale option is present, the following argument is\n       a string that specifies the locale in which the time is to\n       be  interpreted,  in  the same format that is used for the\n       msgcat package.  Note that the default, if -locale is  not\n       specified,  is  the root locale {} rather than the current\n       locale.  The current  locale  may  be  obtained  by  using\n       -locale  current.   In  addition, some platforms support a\n       system locale that reflects the  user's  current  choices.\n       For  instance,  on  Windows,  the format that the user has\n       selected from dates and times in the Control Panel can  be\n       obtained by using the system locale.  On platforms that do\n       not define a user selection of date and time formats sepa-\n       rate  from  LC_TIME,  -locale  system  is  synonymous with\n       -locale current.\n\n       If a -base option is present, the following argument is  a\n       time  (expressed  in  seconds from the epoch time) that is\n       used as a base time for interpreting relative  times.   If\n       no  -base  option is present, the base time is the current\n       time.\n\n       Scanning of times in fixed  format  works  by  determining\n       three  things:  the  date,  the  time of day, and the time\n       zone.  These three are then combined into a point in time,\n       which is returned as the number of seconds from the epoch.\n\n       Before scanning begins, the format string is  preprocessed\n       to  replace %c, %Ec, %x, %Ex, %X. %Ex, %r, %R, %T, %D, %EY\n       and %+ format groups with counterparts that are  appropri-\n       ate  to  the  current locale and contain none of the above\n       groups.  For instance, %D will (in the  en_US  locale)  be\n       replaced with %m/%d/%Y.\n\n       The  date  is  determined according to the fields that are\n       present in the preprocessed format string.   In  order  of\n       preference:\n\n       [1]    If  the  string  contains a %s format group, repre-\n              senting seconds from the epoch, that group is  used\n              to determine the date.\n\n       [2]    If  the  string  contains a %J format group, repre-\n              senting the Julian Day Number, that group  is  used\n              to determine the date.\n\n       [3]    If  the  string  contains  a complete set of format\n              groups specifying century, year, month, and day  of\n              month;  century,  year, and day of year; or ISO8601\n              fiscal year, week of year, and day of  week;  those\n              groups are combined and used to determine the date.\n              If more than one complete set is present,  the  one\n              at the rightmost position in the string is used.\n\n       [4]    If the string lacks a century but contains a set of\n              format groups specifying year of century, month and\n              day  of  month; year of century and day of year; or\n              two-digit ISO8601 fiscal year, week  of  year,  and\n              day  of week; those groups are combined and used to\n              determine the date.  If more than one complete  set\n              is  present,  the  one at the rightmost position in\n              the string is used.  The year is presumed to lie in\n              the range 1938 to 2037 inclusive.\n\n       [5]    If  the string entirely lacks any specification for\n              the year (or contains the year only on the locale's\n              alternative  calendar) and contains a set of format\n              groups specifying month and day of  month,  day  of\n              year, or week of year and day of week, those groups\n              are combined and used to determine  the  date.   If\n              more  than  one complete set is present, the one at\n              the rightmost position in the string is used.   The\n              year is determined by interpreting the base time in\n              the given time zone.\n\n       [6]    If the string contains none of the above sets,  but\n              has  a day of the month or day of the week, the day\n              of the month or day of the week are used to  deter-\n              mine  the date by interpreting the base time in the\n              given time zone and returning the given day of  the\n              current  week or month.  (The week runs from Monday\n              to Sunday, ISO8601-fashion.)  If both day of  month\n              and  day  of week are present, the day of the month\n              takes priority.\n\n       [7]    If none of the above  rules  results  in  a  usable\n              date,  the  date of the base time in the given time\n              zone is used.\n\n       The time is also determined according to the  fields  that\n       are  present  in the preprocessed format string.  In order\n       of preference:\n\n       [1]    If the string contains a %s  format  group,  repre-\n              senting  seconds  from the epoch, that group deter-\n              mines the time of day.\n\n       [2]    If the  string  contains  either  an  hour  on  the\n              24-hour  clock or an hour on the 12-hour clock plus\n              an AM/PM indicator, that hour determines  the  hour\n              of the day.  If the string further contains a group\n              specifying the minute of the hour, that group  com-\n              bines  with  the  hour.  If the string further con-\n              tains a group specifying the second of the  minute,\n              that group combines with the hour and minute.\n\n       [3]    If  the  string  contains neither a %s format group\n              nor a group specifying the hour of  the  day,  then\n              midnight  (00:00,  the  start of the given date) is\n              used.  The time zone is determined  by  either  the\n              -timezone  or -gmt options, or by using the current\n              time zone.\n\n       If a format string lacks a %z or %Z format  group,  it  is\n       possible  for  the time to be ambiguous because it appears\n       twice in the same day, once without and once with Daylight\n       Saving  Time.   If this situation occurs, the first occur-\n       rence of the time is chosen.  (For this reason, it is wise\n       to  have  the input string contain the time zone when con-\n       verting local times.  This caveat does not  apply  to  UTC\n       times.)\n\nFORMAT GROUPS\n       The  following  format  groups are recognized by the clock\n       scan and clock format commands.\n\n       %a     On output, receives an abbreviation (e.g., Mon) for\n              the day of the week in the given locale.  On input,\n              matches the name of the day  of  the  week  in  the\n              given  locale  (in either abbreviated or full form,\n              or any unique prefix of either form).\n\n       %A     On output, receives the full name (e.g., Monday) of\n              the day of the week in the given locale.  On input,\n              matches the name of the day  of  the  week  in  the\n              given  locale  (in either abbreviated or full form,\n              or any unique prefix of either form).\n\n       %b     On output, receives an abbreviation (e.g., Jan) for\n              the  name  of  the  month  in the given locale.  On\n              input, matches the name of the month in  the  given\n              locale  (in either abbreviated or full form, or any\n              unique prefix of either form).\n\n       %B     On output, receives the full name  (e.g.,  January)\n              of  the  month  in  the  given  locale.   On input,\n              matches the name of the month in the  given  locale\n              (in  either abbreviated or full form, or any unique\n              prefix of either form).\n\n       %c     On output, receives a localized  representation  of\n              date  and time of day; the localized representation\n              is expected to  use  the  Gregorian  calendar.   On\n              input, matches whatever %c produces.\n\n       %C     On  output,  receives  the number of the century in\n              Indo-Arabic numerals.  On input, matches one or two\n              digits,  possibly with leading whitespace, that are\n              expected to be the number of the century.\n\n       %d     On output, produces the number of the  day  of  the\n              month,  as  two  decimal digits.  On input, matches\n              one or two digits, possibly  with  leading  whites-\n              pace, that are expected to be the number of the day\n              of the month.\n\n       %D     This format group is synonymous with %m/%d/%Y.   It\n              should  be  used only in exchanging data within the\n              en_US locale, since other locales typically do  not\n              use this order for the fields of the date.\n\n       %e     On  output,  produces  the number of the day of the\n              month, as one or two decimal digits (with a leading\n              blank  for one-digit dates).  On input, matches one\n              or two digits, possibly  with  leading  whitespace,\n              that  are  expected  to be the number of the day of\n              the month.\n\n       %Ec    On output, produces a locale-dependent  representa-\n              tion  of  the  date and time of day in the locale's\n              alternative calendar.  On input,  matches  whatever\n              %Ec  produces.   The  locale's alternative calendar\n              need not be the Gregorian calendar.\n\n       %EC    On output, produces a locale-dependent name  of  an\n              era  in  the  locale's  alternative  calendar.   On\n              input, matches the name of the era  or  any  unique\n              prefix.\n\n       %EE    On output, produces the string B.C.E. or C.E., or a\n              string of the same meaning in the locale, to  indi-\n              cate  whether  %Y  refers  to years before or after\n              Year 1 of the Common Era.  On  input,  accepts  the\n              string  B.C.E.,  B.C., C.E., A.D., or the abbrevia-\n              tion appropriate to the current locale, and uses it\n              to  fix  whether %Y refers to years before or after\n              Year 1 of the Common Era.\n\n       %Ex    On output, produces a locale-dependent  representa-\n              tion of the date in the locale's alternative calen-\n              dar.  On input, matches whatever %Ex produces.  The\n              locale's  alternative calendar need not be the Gre-\n              gorian calendar.\n\n       %EX    On output, produces a locale-dependent  representa-\n              tion of the time of day in the locale's alternative\n              numerals.  On input, matches whatever %EX produces.\n\n       %Ey    On  output,  produces  a locale-dependent number of\n              the year of the era  in  the  locale's  alternative\n              calendar  and  numerals.   On input, matches such a\n              number.\n\n       %EY    On output, produces a representation of the year in\n              the locale's alternative calendar and numerals.  On\n              input, matches what %EY produces.  Often synonymous\n              with %EC%Ey.\n\n       %g     On  output,  produces a two-digit year number suit-\n              able for use with the week-based ISO8601  calendar;\n              that  is,  the  year number corresponds to the week\n              number produced by %V.  On input,  accepts  such  a\n              two-digit   year   number,  possibly  with  leading\n              whitespace.\n\n       %G     On output, produces a four-digit year number  suit-\n              able  for use with the week-based ISO8601 calendar;\n              that is, the year number corresponds  to  the  week\n              number  produced  by  %V.  On input, accepts such a\n              four-digit  year  number,  possibly  with   leading\n              whitespace.\n\n       %h     This format group is synonymous with %b.\n\n       %H     On  output,  produces a two-digit number giving the\n              hour of the day (00-23) on  a  24-hour  clock.   On\n              input, accepts such a number.\n\n       %I     On  output,  produces a two-digit number giving the\n              hour of the day (12-11) on  a  12-hour  clock.   On\n              input, accepts such a number.\n\n       %j     On output, produces a three-digit number giving the\n              day of the year (001-366).  On input, accepts  such\n              a number.\n\n       %J     On  output,  produces a string of digits giving the\n              Julian Day Number.  On input, accepts a  string  of\n              digits  and  interprets  it as a Julian Day Number.\n              The Julian Day Number is a count of the  number  of\n              calendar  days  that  have elapsed since 1 January,\n              4713 BCE of the  proleptic  Julian  calendar.   The\n              epoch  time of 1 January 1970 corresponds to Julian\n              Day Number 2440588.\n\n       %k     On output, produces a one- or two-digit number giv-\n              ing  the hour of the day (0-23) on a 24-hour clock.\n              On input, accepts such a number.\n\n       %l     On output, produces a one- or two-digit number giv-\n              ing the hour of the day (12-11) on a 12-hour clock.\n              On input, accepts such a number.\n\n       %m     On output, produces the number of the month (01-12)\n              with  exactly  two  digits.   On input, accepts two\n              digits and interprets them as  the  number  of  the\n              month.\n\n       %M     On output, produces the number of the minute of the\n              hour (00-59) with exactly two  digits.   On  input,\n              accepts  two digits and interprets them as the num-\n              ber of the minute of the hour.\n\n       %N     On output, produces the number of the month  (1-12)\n              with  one  or  two  digits, and a leading blank for\n              one-digit dates.  On input, accepts one or two dig-\n              its,  possibly  with leading whitespace, and inter-\n              prets them as the number of the month.\n\n       %Od, %Oe, %OH, %OI, %Ok, %Ol, %Om, %OM, %OS, %Ou, %Ow, %Oy\n              All of these  format  groups  are  synonymous  with\n              their counterparts without the 'O', except that the\n              string is produced and parsed in the  locale-depen-\n              dent alternative numerals.\n\n       %p     On  output,  produces  an indicator for the part of\n              the day, AM or PM, appropriate to the given locale.\n              If the script of the given locale supports multiple\n              letterforms, lowercase  is  preferred.   On  input,\n              matches  the  representation  AM or PM in the given\n              locale, in either case.\n\n       %P     On output, produces an indicator for  the  part  of\n              the day, am or pm, appropriate to the given locale.\n              If the script of the given locale supports multiple\n              letterforms,  uppercase  is  preferred.   On input,\n              matches the representation AM or PM  in  the  given\n              locale, in either case.\n\n       %Q     This  format  group  is  reserved  for internal use\n              within the Tcl library.\n\n       %r     On output, produces a locale-dependent time of  day\n              representation   on  a  12-hour  clock.  On  input,\n              accepts whatever %r produces.\n\n       %R     On output, produces a locale-dependent time of  day\n              representation   on  a  24-hour  clock.  On  input,\n              accepts whatever %R produces.\n\n       %s     On output, simply formats the timeVal argument as a\n              decimal  integer  and  inserts  it  into the output\n              string.  On input, accepts a  decimal  integer  and\n              uses  is as the time value without any further pro-\n              cessing. Since %s uniquely determines  a  point  in\n              time, it overrides all other input formats.\n\n       %S     On  output, produces a two-digit number of the sec-\n              ond of the minute (00-59). On  input,  accepts  two\n              digits and uses them as the second of the minute.\n\n       %t     On  output,  produces  a  TAB  character. On input,\n              matches a TAB character.\n\n       %T     Synonymous with %H:%M:%S.\n\n       %u     On output, produces the number of the  day  of  the\n              week (1->Monday, 7->Sunday). On input, accepts a sin-\n              gle digit and interprets it as the day of the week.\n              Sunday may be either 0 or 7.\n\n       %U     On  output, produces the ordinal number of the week\n              of the year (00-53). The first Sunday of  the  year\n              is  the  first day of week 01. On input accepts two\n              digits which are  otherwise  ignored.  This  format\n              group  is  never used in determining an input date.\n              This interpretation of the week  of  the  year  was\n              once  common in US banking but is now largely obso-\n              lete.  See %V for the ISO8601 week number.\n\n       %V     On output, produces the number of the ISO8601  week\n              as  a two digit number (01-53). Week 01 is the week\n              containing January 4; or the first week of the year\n              containing  at least 4 days; or the week containing\n              the first Thursday of the year  (the  three  state-\n              ments  are  equivalent). Each week begins on a Mon-\n              day. On input, accepts the ISO8601 week number.\n\n       %w     On output, produces the ordinal number of  the  day\n              of  the  week  (Sunday==0; Saturday==6).  On input,\n              accepts a single digit and interprets it as the day\n              of  the week; Sunday may be represented as either 0\n              or 7.  Note that %w is not the ISO8601 weekday num-\n              ber, which is produced and accepted by %u.\n\n       %W     On  output,  produces  a week number (00-53) within\n              the year; week 01 begins on the first Monday of the\n              year.  On input, accepts two digits, which are oth-\n              erwise ignored. This format group is never used  in\n              determining  an  input date.  It is not the ISO8601\n              week number; that week is produced and accepted  by\n              %V.\n\n       %x     On  output, produces the date in a locale-dependent\n              representation. On input, accepts whatever %x  pro-\n              duces and is used to determine calendar date.\n\n       %X     On  output,  produces  the time of day in a locale-\n              dependent representation. On input,  accepts  what-\n              ever  %X  produces and is used to determine time of\n              day.\n\n       %y     On output, produces the two-digit year of the  cen-\n              tury.  On input, accepts two digits, and is used to\n              determine calendar date. The date  is  presumed  to\n              lie  between  1938 and 2037 inclusive. Note that %y\n              does not yield a year appropriate for use with  the\n              ISO8601  week number %V; programs should use %g for\n              that purpose.\n\n       %Y     On output, produces the four-digit  calendar  year.\n              On  input,  accepts  four digits and may be used to\n              determine calendar date.  Note  that  %Y  does  not\n              yield  a  year appropriate for use with the ISO8601\n              week number %V; programs should  use  %G  for  that\n              purpose.\n\n       %z     On   output,   produces   the  current  time  zone,\n              expressed in hours and minutes east (+hhmm) or west\n              (-hhmm) of Greenwich. On input, accepts a time zone\n              specifier (see TIME ZONES below) that will be  used\n              to determine the time zone.\n\n       %Z     On  output,  produces the current time zone's name,\n              possibly translated to the given locale. On  input,\n              accepts  a  time  zone  specifier  (see  TIME ZONES\n              below) that will be  used  to  determine  the  time\n              zone.  This  option  should, in general, be used on\n              input only when parsing RFC822  dates.  Other  uses\n              are  fraught  with  ambiguity;  for  instance,  the\n              string BST may represent  British  Summer  Time  or\n              Brazilian  Standard  Time.  It  is recommended that\n              date/time strings for use by computers use  numeric\n              time zones instead.\n\n       %%     On  output,  produces  a  literal '%' character. On\n              input, matches a literal '%' character.\n\n       %+     Synonymous with '%a %b %e %H:%M:%S %Z %Y'.\n\nTIME ZONES\n       When the clock command is processing a local time, it  has\n       several  possible  sources  for  the time zone to use.  In\n       order of preference, they are:\n\n       [1]    A time zone specified inside a string being  parsed\n              and matched by a %z or %Z format group.\n\n       [2]    A  time zone specified with the -timezone option to\n              the clock command (or, equivalently, by -gmt 1).\n\n       [3]    A time zone specified in  an  environment  variable\n              TCL_TZ.\n\n       [4]    A  time  zone  specified in an environment variable\n              TZ.\n\n       [5]    The local time zone from the Control Panel on  Win-\n              dows systems.\n\n       [6]    The  C  library's  idea  of the local time zone, as\n              defined by the mktime and localtime functions.\n\n       In case [1] only, the string is tested to see if it is one\n       of the strings:\n               gmt     ut      utc     bst     wet     wat     at\n               nft     nst     ndt     ast     adt     est     edt\n               cst     cdt     mst     mdt     pst     pdt     yst\n               ydt     hst     hdt     cat     ahst    nt      idlw\n               cet     cest    met     mewt    mest    swt     sst\n               eet     eest    bt      it      zp4     zp5     ist\n               zp6     wast    wadt    jt      cct     jst     cast\n               cadt    east    eadt    gst     nzt     nzst    nzdt\n               idle\n       If it is a string in the above list, it designates a known\n       time zone, and is interpreted as such.\n\n       For time zones in case [1] that do not match  any  of  the\n       above strings, and always for cases [2]-[6], the following\n       rules apply.\n\n       If the time zone begins with a colon, it is one of a stan-\n       dardized  list  of  names like :America/New_York that give\n       the rules for various locales.  A  complete  list  of  the\n       location  names is too lengthy to be listed here.  On most\n       Tcl installations, the definitions of the locations are to\n       be    found    in    named    files   in   the   directory\n       '/no_backup/tools/lib/tcl8.5/clock/tzdata'.  On some  Unix\n       systems,  these files are omitted, and the definitions are\n       instead obtained from system  files  in  '/usr/share/zone-\n       info',  '/usr/share/lib/zoneinfo' or '/usr/local/etc/zone-\n       info'.  As a special case, the name :localtime  refers  to\n       the local time zone as defined by the C library.\n\n       A time zone string consisting of a plus or minus sign fol-\n       lowed by four or six decimal digits is interpreted  as  an\n       offset  in  hours, minutes, and seconds (if six digits are\n       present) from UTC.  The plus sign denotes a sign  east  of\n       Greenwich; the minus sign one west of Greenwich.\n\n       A  time  zone string conforming to the Posix specification\n       of the TZ environment variable will  be  recognized.   The\n       specification    may    be   found   at   http://www.open-\n       group.org/onlinepubs/009695399/basedefs/xbd_chap08.html.\n\n       Any other time zone string is  processed  by  prefixing  a\n       colon  and  attempting  to  use  it as a location name, as\n       above.\n\nLOCALIZATION\n       Developers wishing to localize the date and  time  format-\n       ting and parsing are referred to http://tip.tcl.tk/173 for\n       a specification.\n\nFREE FORM SCAN\n       If the clock scan command is  invoked  without  a  -format\n       option,  then  it requests a free-form scan.  This form of\n       scan is deprecated.  The reason  for  the  deprecation  is\n       that  there  are  too  many  ambiguities. (Does the string\n       '2000' represent a year, a time of day,  or  a  quantity?)\n       No set of rules for interpreting free-form dates and times\n       has been found to give unsurprising results in all  cases.\n\n       If free-form scan is used, only the -base and -gmt options\n       are accepted.  The  -timezone  and  -locale  options  will\n       result in an error if -format is not supplied.\n\n       For  the  benefit  of  users who need to understand legacy\n       code that uses free-form scan, the documentation  for  how\n       free-form scan interprets a string is included here:\n\n       If  only a time is specified, the current date is assumed.\n       If the inputString does not contain a time zone  mnemonic,\n       the  local  time zone is assumed, unless the -gmt argument\n       is true, in which  case  the  clock  value  is  calculated\n       assuming  that the specified time is relative to Greenwich\n       Mean Time.  -gmt, if specified, affects only the  computed\n       time  value;  it  does  not  impact  the interpretation of\n       -base.\n\n       If the -base flag is specified, the next  argument  should\n       contain  an  integer  clock  value.  Only the date in this\n       value is used, not the time.  This is useful for determin-\n       ing  the  time on a specific day or doing other date-rela-\n       tive conversions.\n\n       The inputString argument consists of zero or more specifi-\n       cations of the following form:\n\n       time   A  time  of day, which is of the form: hh?:mm?:ss??\n              ?meridian? ?zone?  or hhmm ?meridian? ?zone?  If no\n              meridian  is  specified,  hh  is  interpreted  on a\n              24-hour clock.\n\n       date   A specific month and day with optional  year.   The\n              acceptable  formats  are  'mm/dd?/yy?',  'monthname\n              dd?, yy?', 'day, dd monthname ?yy?', 'dd  monthname\n              yy',  '?CC?yymmdd', and 'dd-monthname-?CC?yy'.  The\n              default year is the current year.  If the  year  is\n              less   than  100,  we  treat  the  years  00-68  as\n              2000-2068 and the years 69-99  as  1969-1999.   Not\n              all  platforms can represent the years 38-70, so an\n              error may result if these years are used.\n\n       ISO 8601 point-in-time\n              An ISO 8601 point-in-time  specification,  such  as\n              'CCyymmddThhmmss,'  where  T  is  the  literal 'T',\n              'CCyymmdd hhmmss',  or  'CCyymmddThh:mm:ss'.   Note\n              that  only  these  three formats are accepted.  The\n              command does not accept the full range of point-in-\n              time  specifications  specified  in ISO8601.  Other\n              formats can be recognized  by  giving  an  explicit\n              -format option to the clock scan command.\n\n       relative time\n              A  specification relative to the current time.  The\n              format is number unit. Acceptable units  are  year,\n              fortnight, month, week, day, hour, minute (or min),\n              and second (or sec).  The unit can be specified  as\n              a  singular  or plural, as in 3 weeks.  These modi-\n              fiers may also be specified:  tomorrow,  yesterday,\n              today, now, last, this, next, ago.\n\n       The  actual  date is calculated according to the following\n       steps.\n\n       First, any absolute date and/or time is processed and con-\n       verted.  Using that time as the base, day-of-week specifi-\n       cations are  added.   Next,  relative  specifications  are\n       used.   If  a date or day is specified, and no absolute or\n       relative time is given, midnight is used.  Finally, a cor-\n       rection  is applied so that the correct hour of the day is\n       produced after allowing for daylight savings time  differ-\n       ences  and  the  correct date is given when going from the\n       end of a long month to a short month.\n\nSEE ALSO\n       msgcat(n)\n\nKEYWORDS\n       clock, date, time\n\nCOPYRIGHT\n       Copyright (c) 2004 Kevin B. Kenny  <kennykb@acm.org>.  All\n       rights reserved.\n\n\n\nTcl                            8.5                       clock(n)\n",
"report_param": "report_param\n\nDescription: \nGet information about all parameters\n\nSyntax: \nreport_param  [-file <arg>] [-append] [-non_default] [-return_string] [-quiet]\n              [-verbose] [<pattern>]\n\nReturns: \nparam report\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-append]         Append the results to file, don't overwrite the results \n                    file\n  [-non_default]    Report only params that are set to a non default value\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  [<pattern>]       Display params matching pattern\n                    Default: *\n\nCategories: \nPropertyAndParameter, Report\n\nDescription:\n\n  Gets a list of all user-definable parameters, the current value, and a\n  description of what the parameter configures or controls.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -non_default - (Optional) Report only the parameters that have been changed\n  from their default values.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pattern> - (Optional) Match parameters against the specified pattern. The\n  default pattern is the wildcard `*` which gets all user-definable\n  parameters.\n\nExamples:\n\n  The following example returns the name, value, and description of all\n  user-definable parameters:\n\n    report_param \n    \n\n  The following example returns the name, value, and description of\n  user-definable parameters that match the specified search pattern:\n\n    report_param *coll* \n    \n\nSee Also:\n\n   *  get_param\n   *  list_param\n   *  reset_param\n   *  set_param\n",
"instantiate_template_bd_design": "instantiate_template_bd_design\n\nDescription: \nCreates a block design in IP integrator from a predefined template.\n\nSyntax: \ninstantiate_template_bd_design  -design <arg> [-hier <arg>] [-options <args>]\n                                [-quiet] [-verbose] <template>\n\nReturns: \nReturns the name of the template applied.\n\nUsage: \n  Name        Description\n  -----------------------\n  -design     Block Design Name\n  [-hier]     Hierarchy Block\n  [-options]  Configurable options\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <template>  Configurable Design Name\n\nCategories: \nIPIntegrator\n\nDescription:\n\n  This command creates an example design from a template Block Design in the\n  IP integrator of the Vivado Design Suite.\n\n  The template diagram is created in an existing and open block design. In\n  addition, the target part specified by the current project or in-memory\n  project must be compatible with the template design or an error is\n  returned.\n\n  The command returns a transcript of its process, or returns an error if it\n  fails.\n\nArguments:\n\n  -design <arg> - (Required) Specifies the name of the block design to\n  instantiate the template diagram into. The specified block design must\n  exist and be open in the IP integrator, or an error is returned.\n\n  -hier - (Optional) Hierarchy Block\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <template> - Specifies the template diagram to be instantiated into the\n  specified design. The template can be specified by name, or as an object\n  specified by the get_template_db_designs command.\n\nExamples:\n\n  The following example builds the specified template block design in the\n  specified design:\n\n    instantiate_template_bd_design -design myFirstZynq \\  \n    [lindex [get_template_bd_designs] 1] \n    \n\nSee Also:\n\n   *  get_template_bd_designs\n",
"reset_methodology": "reset_methodology\n\nDescription: \nRemove Methodology report\n\nSyntax: \nreset_methodology  [-name <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-name]     Methodology result name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nMethodology, Report\n\nDescription:\n\n  Clear the methodology results from the specified named result set.\n\n  This command operates silently, returning nothing if successful, or\n  returning an error if it fails.\n\nArguments:\n\n  -name <arg> - (Optional) Specifies the name of the methodology results to\n  be cleared. The name is established by the -name argument in the\n  report_methodology command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example clears the specified results set from memory and the\n  GUI:\n\n    reset_methodology -name ultrafast_methodology_3 \n    \n\nSee Also:\n\n   *  get_methodology_violations\n   *  report_methodology\n   *  reset_methodology_check\n",
"create_macro": "create_macro\n\nDescription: \nCreate a Macro\n\nSyntax: \ncreate_macro  [-quiet] [-verbose] <name>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Macro to create.\n\nCategories: \nXDC\n\nDescription:\n\n  Create a macro for the relative placement of cells.\n\n  Macros are primarily used to place small groups of associated cells\n  together to improve resource efficiency and enable faster interconnections.\n  The create_macro command lets you define macros in an open synthesized or\n  implemented design for relative placement by place_design, like RPMs\n  defined by the RLOC constraint in RTL source files. Refer to the Vivado\n  Design Suite User Guide: Implementation (UG904) for more information on\n  defining relatively placed macros.\n\n  After creating the macro, specific cells can be assigned to the macro using\n  the update_macro command. To change a currently defined macro, you must\n  delete the macro with delete_macro, recreate the macro, and update the\n  macro with the new contents. You cannot simply overwrite an existing macro.\n\n  Use delete_macro to delete a defined macro. Use get_macros to return a list\n  of currently defined macros in the design.\n\n  This command operates silently and does not return anything.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) Specify the name of the macro to create.\n\nExamples:\n\n  The following example creates a macro called usbMacro1:\n\n    create_macro usbMacro1 \n    \n\nSee Also:\n\n   *  delete_macros\n   *  get_macros\n   *  place_design\n   *  update_macro\n",
"all_fanout": "all_fanout\n\nDescription: \nGet a list of pins or cells in fanout of specified sources\n\nSyntax: \nall_fanout  [-endpoints_only] [-flat] [-only_cells] [-levels <arg>]\n            [-pin_levels <arg>] [-trace_arcs <arg>] [-quiet] [-verbose] <from>\n\nReturns: \nlist of cell or pin objects\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-endpoints_only]  Find only the timing endpoints\n  [-flat]            Hierarchy is ignored\n  [-only_cells]      Only cells\n  [-levels]          Maximum number of cell levels to traverse:Value >= 0\n                     Default: 0\n  [-pin_levels]      Maximum number of pin levels to traverse:Value >= 0\n                     Default: 0\n  [-trace_arcs]      Type of network arcs to trace: Values: timing, enabled, \n                     all\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <from>             List of source pins, ports, or nets\n\nCategories: \nXDC\n\nDescription:\n\n  Returns a list of port, pin, or cell objects in the fanout of the specified\n  sources.\n\n  The all_fanout command is scoped to return objects from current level of\n  the hierarchy of the design, either from the top-level or from the level of\n  the current instance. By default the current instance is defined as the top\n  level of the design, but can be changed by using the current_instance\n  command. To return the fanout across all levels of the hierarchy, use the\n  -flat option.\n\nArguments:\n\n  -endpoints_only - (Optional) Find only the timing endpoints. When this\n  option is used, none of the intermediate points in the fan-out network are\n  returned. This option can be used to identify the primary loads of the\n  drivers.\n\n  -flat - (Optional) Ignore the hierarchy of the design. By default, only the\n  objects at the same level of hierarchy as the sinks are returned. When\n  using this option, all the objects in the fan-out network of the drivers\n  are considered, regardless of hierarchy.\n\n  -only_cells - (Optional) Return only the cell objects in the fanout path of\n  the specified sources.\n\n  -levels <value> - (Optional) Maximum number of cell levels to traverse. A\n  value of 1 means to traverse the top-level of the current instance. The\n  default value is 0 and indicates that the tool should traverse all levels\n  in the hierarchy.\n\n  -pin_levels <value> - (Optional) Maximum number of pin levels to traverse.\n  The default value is 0.\n\n  -trace_arcs <value> - (Optional) Type of network arcs to trace. Valid\n  values are 'timing', 'enabled', and 'all'\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <from> - (Required) The source ports, pins, or nets from which to list the\n  objects in the fanout path.\n\nExamples:\n\n  The following example gets the fanout for all input ports in the design:\n\n    all_fanout [all_inputs] \n    \n\n  This example gets the fanout for all inputs assigned to I/O Bank 15 in the\n  current design:\n\n    all_fanout [filter [all_inputs] {IOBANK == 15}] \n    \n\nSee Also:\n\n   *  all_fanin\n   *  current_instance\n   *  filter\n   *  get_cells\n   *  get_pins\n   *  get_ports\n",
"tie_unused_pins": "tie_unused_pins\n\nDescription: \nTie off unused cell pins\n\nSyntax: \ntie_unused_pins  [-of_objects <args>] [-quiet] [-verbose]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-of_objects]  tie unused pins of specified cell(s)\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n\nCategories: \nNetlist\n\nDescription:\n\n  Tie up or down the unconnected pins of cells in the open synthesized or\n  implemented design. The command uses an internal process to identify\n  whether a pin should be tied up or down.\n\n  This command is intended to tie up or down the unconnected pins of cells\n  added to the netlist with the create_cell command.\n\nArguments:\n\n  -of_objects <args> - (Optional) Tie up or down the unused pins of the\n  specified cell objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example ties the unused pins of cells up or down, depending\n  on their usage:\n\n    tie_unused_pins -of_objects [get_cells cpuEngine] \n    \n\nSee Also:\n\n   *  create_cell\n   *  create_pin\n   *  get_cells\n   *  get_pins\n",
"write_bmm": "write_bmm\n\nDescription: \nWrite a bmm file\n\nSyntax: \nwrite_bmm  [-force] [-quiet] [-verbose] <file>\n\nReturns: \nThe name of the bmm file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrite existing BMM file.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Design bmm file\n              Values: A filename with alphanumeric characters and .bmm \n              extension.\n\nCategories: \nFileIO\n\nDescription:\n\n  The Block RAM Memory Map (BMM) file is a text file that describes how\n  individual block RAMs on an FPGA are grouped together into a contiguous\n  address space called an Address Block.\n\n  The write_bmm command exports BMM information from the current design to\n  the specified file. For implemented designs the BMM file will be include\n  placement information. The data2mem command uses the BMM file as input to\n  direct the translation of programming data into the proper form for use in\n  simulation, device programming, or software development in SDK.\n\n  The command returns the name of the output file, or an error.\n\nArguments:\n\n  -force - (Optional) Overwrite the BMM file if it already exists.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The filename of the BMM file to write.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExample:\n\n  The following example writes the BMM file for the current design:\n\n    write_bmm C:/Data/design1.bmm \n    \n\nSee Also:\n\n   *  data2mem\n",
"resize_port_bus": "resize_port_bus\n\nDescription: \nResize port bus in the current design\n\nSyntax: \nresize_port_bus  [-from <arg>] [-to <arg>] [-quiet] [-verbose]\n                 <port_bus_name>...\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-from]          New starting bus index\n  [-to]            New ending bus index\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <port_bus_name>  Name of the port bus to resize\n\nCategories: \nPinPlanning\n\nDescription:\n\n  Resize an existing bus port, to grow the bus, shrink the bus, or renumber\n  the current range of port indexes. You can only do a single grow, shrink,\n  or renumber operation with each command.\n\n   *  You can grow the bus by indicating a new range of port indexes outside\n      the current range of indexes. Growing the bus leaves existing port\n      indexes connected as they currently are.\n\n   *  You can shrink the bus by indicating a new range of port indexes inside\n      the current range of indexes. Shrinking the bus, eliminates connections\n      to removed bus ports, but leaves the remaining ports connected as they\n      currently are.\n\n   *  You can renumber the current bus indexes by providing a new range of\n      port indexes with the same width as the current range. Renumbering\n      ports changes the port index, but does not otherwise change\n      connections.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  This command returns nothing if successful, and returns an error if it fails.\n\nArguments:\n\n  -from <arg> - (Optional) The new starting index of the specified bus port.\n\n  -to <arg> - (Optional) The new ending index of the specified bus port.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <bus_port_name> - (Required) The name of the bus port to modify.\n\nExamples:\n\n  The following example creates a 32-bit output bus port, then renumbers the\n  ports to include negative bus indexes, then shrinks the bus width from\n  32-bits to 16-bits:\n\n    create_port -direction out -from 0 -to 31 outPorts  \n    resize_port_bus -from -16 -to 15 outPorts  \n    resize_port_bus -from -8 -to 7 outPorts \n    \n\nSee Also:\n\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  get_ports\n   *  remove_port\n   *  resize_net_bus\n   *  resize_pin_bus\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"get_sites": "get_sites\n\nDescription: \nGet a list of Sites\n\nSyntax: \nget_sites  [-regexp] [-filter <arg>] [-nocase] [-range <args>]\n           [-of_objects <args>] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of site objects\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-filter]      Filter list with expression\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-range]       Match site names which fall into the range.  Range is \n                 defined by exactly two site names.\n  [-of_objects]  Get the sites of slrs, tiles, bels, site_pins, package_pins,\n                 ports, pblocks, nets, site_types, io_banks, cells, \n                 clock_regions or drc_violation\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match site names against patterns. Bonded sites will also \n                 match on package pin names.\n                 Default: *\n\nCategories: \nDevice, XDC, Object\n\nDescription:\n\n  Gets a list of sites on the target device that match a specified search\n  pattern. The default command gets a list of all sites on the target device.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_sites based on property values on the sites. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the site object, 'SITE_TYPE', 'IS_USED', 'NUM_INPUTS', and\n  'NUM_OUTPUTS' are some of the properties that can be used to filter\n  results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -range <arg> - (Optional) Get all the sites that fall into a specified\n  range. The range of sites must be specified with two site values, of the\n  same SITE_TYPE, such as {SLICE_X2Y12 SLICE_X3Y15}. The SITE_TYPE of a site\n  can be determined by the report_property command.\n\n  Note: Specifying a range with two different types will result in an error.\n\n  -of_objects <arg> - (Optional) Get sites from the specified object or\n  objects. Valid objects include: tiles, BELs, pins, package pins, ports,\n  Pblocks, I/O Banks, cells, and clock_regions; or sites associated with\n  specified DRC violation objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match sites against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all sites on the\n  target device.\n\nExamples:\n\n  The following example gets a list of all sites available on the target\n  device:\n\n    get_sites \n    \n\n  The following example returns the number of sites that are not currently\n  used on the device. Both command forms in the example return the same\n  results. The second command directly evaluates the IS_USED boolean\n  property:\n\n    llength [get_sites -filter {IS_USED==0}]  \n    -or-  \n    llength [get_sites -filter !IS_USED] \n    \n\n  Note: If no sites match the pattern you will get a warning.\n\n  The following example gets all of the sites on the device, and returns the\n  unique SITE_TYPEs:\n\n    set sites [get_sites]  \n    set type {}  \n    foreach x $sites {  \n       set prop [get_property SITE_TYPE $x]  \n       if { [lsearch -exact $type $prop] == -1 } {   \n          lappend type $prop   \n       }   \n    }  \n    foreach y $type {   \n       puts 'SITE_TYPE: $y'   \n    } \n    \n\n  The following example shows three different forms for specifying the range\n  of sites to return:\n\n    get_sites -range {SLICE_X0Y0 SLICE_X1Y1}  \n    SLICE_X0Y0 SLICE_X0Y1 SLICE_X1Y0 SLICE_X1Y1 \n    get_sites -range SLICE_X0Y0 -range SLICE_X1Y1  \n    SLICE_X0Y0 SLICE_X0Y1 SLICE_X1Y0 SLICE_X1Y1 \n    get_sites -range {SLICE_X0Y0:SLICE_X1Y1}  \n    SLICE_X0Y0 SLICE_X0Y1 SLICE_X1Y0 SLICE_X1Y1 \n    \n\nSee Also:\n\n   *  get_cells\n   *  get_drc_violations\n   *  get_property\n   *  list_property\n   *  report_property\n",
"write_sysdef": "write_sysdef\n\nDescription: \nWrites hardware definition for use in the software development\n\nSyntax: \nwrite_sysdef  [-force] [-hwdef <arg>] [-bitfile <arg>] [-pdifile <arg>]\n              [-meminfo <arg>] [-quiet] [-verbose] <file>\n\nReturns: \nsuccess/failure status of applied action.\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrites the existing hardware definition file\n  [-hwdef]    Input Hardware definition file \n  [-bitfile]  Bitstream file \n  [-pdifile]  PDI file for Versal \n  [-meminfo]  BRAM file \n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      System definition file (Values: A filename with alphanumeric \n              characters and .sysdef extention.) \n\nCategories: \nProject\n\nDescription:\n\n  Writes a post-implementation hardware definition of the open design,\n  including the generated bitstream, for use in the software development\n  tools (SDK).\n\n  The write_sysdef command, as well as the write_hwdef command, is intended\n  to simplify the movement of designs from the Vivado Design Suite to\n  software development in SDK. Both of these commands are run automatically\n  by the Vivado Design Suite when generating the output products for a\n  top-level design that includes a block design with an embedded processor\n  like MicroBlaze, or Zynq-7000 SoC. Block designs are created in the IP\n  integrator of the Vivado Design Suite with the create_bd_design command.\n\n  The write_hwdef command runs after place_design, and the write_sysdef\n  command runs after write_bitstream. The sysdef file includes all of the\n  contents of the hardware definition file created by the write_hwdef\n  command, with the addition of the bitstream (.bit) file and the memory map\n  information (.mmi).\n\n  The write_sysdef command returns nothing if successful, or an error if the\n  command fails.\n\nArguments:\n\n  -force - (Optional) Overwrite and existing system definition file if one\n  exists. If this option is not specified, then the Vivado Design Suite will\n  not overwrite an existing file.\n\n  -hwdef <arg> - (Required) Specify the hardware definition file to include\n  in the system definition file.\n\n  -bitfile <arg> - (Required) Specify the bitstream file to include in the\n  system definition file.\n\n  -meminfo <arg> - (Optional) Specify the BRAM memory file to include in the\n  system definition file. This file can be either the memory map information\n  file (.mmi) written by the write_mem_info command, or the block memory map\n  file created by write_bmm.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Specify the name of the system definition file to\n  write. The file can include the path and file extension. The default file\n  extension of .sysdef is used if an extension is not specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes a system definition file from the specified\n  hardware definition file, including the bitfile and the block memory map as\n  specified:\n\n    write_sysdef -hwdef 'C:/Data/ug940/lab1/zynq_design.hwdef' \\  \n       -bitfile 'C:/ug940/lab1/zynq_debug/zynq_debug.runs/impl_1/zynq_design.bit' \\  \n       -meminfo 'C:/ug940/lab1/zynq_debug/zynq_debug.runs/impl_1/zynq_design.mmi' \\  \n        C:/Data/ug940/lab1/zynq_design.sysdef \n    \n\nSee Also:\n\n   *  create_bd_design\n   *  launch_sdk\n   *  place_design\n   *  write_bitstream\n   *  write_bmm\n   *  write_hwdef\n   *  write_mem_info\n",
"power_opt_design": "power_opt_design\n\nDescription: \nOptimize dynamic power using intelligent clock gating\n\nSyntax: \npower_opt_design  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nPower\n\nDescription:\n\n  Optimizes the dynamic power consumption of the design by changing clock\n  gating to take advantage of clock enable on a flop. Clock gating\n  optimizations are automatically performed on the entire design to improve\n  power consumption while making no changes to the existing logic or the\n  clocks that would alter the behavior of the design.\n\n  You can configure the power optimization to include or exclude specific\n  cells using the set_power_opt command.\n\n  Note: Block RAM power optimizations are performed by default with the\n  opt_design command. You can disable BRAM optimization by changing the\n  defaults of opt_design, or by excluding specific cells from optimization\n  using the set_power_opt command.\n\n  You can also use the read_saif command prior to optimization, and\n  power_opt_design will consider the activity data while optimizing the\n  design.\n\n  You can run power optimization after synthesis, or after placement. When\n  run before placement, this command optimizes the design to save power. When\n  run after placement, this command optimizes the design to save power while\n  preserving timing. Running after placement limits the optimizations\n  available to the power_opt_design command. To achieve the best results, the\n  command should be run prior to placement.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example performs power optimization of the open design:\n\n    power_opt_design \n    \n\n  This example optimizes the design, excluding the BRAM power optimization by\n  specifying the optimizations to run, and then runs power optimization on\n  the design:\n\n    opt_design -retarget -propconst -sweep  \n    power_opt_design \n    \n\nSee Also:\n\n   *  opt_design\n   *  phys_opt_design\n   *  read_saif\n   *  report_power\n   *  report_power_opt\n   *  set_power_opt\n",
"delete_pblocks": "delete_pblocks\n\nDescription: \nRemove Pblock\n\nSyntax: \ndelete_pblocks  [-hier] [-quiet] [-verbose] <pblocks>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-hier]     Also delete all the children of Pblock\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <pblocks>   Pblocks to delete\n\nCategories: \nFloorplan, XDC\n\nDescription:\n\n  Deletes the specified Pblocks from the design. Pblocks are created using\n  the create_pblock command.\n\nArguments:\n\n  -hier - (Optional) Specifies that Pblocks nested inside the specified\n  Pblock should also be deleted. If the parent Pblock is deleted without the\n  -hier option specified, the nested Pblocks will simply be moved up one\n  level.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <pblocks> - (Required) One or more Pblocks to be deleted.\n\nExamples:\n\n  The following example deletes the specified Pblock as well as any Pblocks\n  nested inside:\n\n    delete_pblocks -hier cpuEngine \n    \n\nSee Also:\n\n   *  create_pblock\n",
"set_property": "set_property\n\nDescription: \nSet property on object(s)\n\nSyntax: \nset_property  [-dict <args>] [-quiet] [-verbose] <name> <value> <objects>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-dict]     list of name/value pairs of properties to set\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of property to set. Not valid with -dict option\n  <value>     Value of property to set. Not valid with -dict option\n  <objects>   Objects to set properties on\n\nCategories: \nObject, PropertyAndParameter, XDC\n\nDescription:\n\n  Assigns the defined property <name> and <value> to the specified <objects>.\n\n  This command can be used to define any property on an object in the design.\n  Each object has a set of predefined properties that have expected values,\n  or a range of values. The set_property command can be used to define the\n  values for these properties. To determine the defined set of properties on\n  an object, use report_property, list_property, or list_property_values.\n\n  You can also define custom properties for an object, by specifying a unique\n  <name> and <value> pair for the object. If an object has custom properties,\n  these will also be reported by the report_property and list_property\n  commands.\n\n  This command returns nothing if successful, and an error if it fails.\n\n  Note: You can use the get_property command to validate any properties that\n  have been set on an object.\n\nArguments:\n\n  -dict - (Optional) Use this option to specify a dictionary of multiple\n  properties (<name> <value> pairs) on an object with a single set_property\n  command. Multiple <name> <value> pairs must be enclosed in quotes, '', or\n  braces, {}.\n\n    -dict 'name1 value1 name2 value2 ... nameN valueN'\n\n  Note: When writing the constraints for a design using either\n  save_constraints, save_constraints_as, or write_xdc, the properties\n  specified using the -dict option will be written as separate set_property\n  commands for each name/value pair. If you don`t want the XDC constraints to\n  be expanded in this manner, you can either use the Tcl script driven\n  approach in a non-project design, or use a Tcl script as a design source in\n  your constraint set. Refer to Vivado Design Suite User Guide: Design Flows\n  Overview (UG892) for more information on non-project based design, or refer\n  to Vivado Design Suite User Guide: Using Constraints (UG903) for more\n  information on using Tcl scripts in constraint sets.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) Specifies the name of the property to be assigned to\n  the object or objects. The <name> argument is case sensitive and should be\n  specified appropriately.\n\n  <value> - (Required) Specifies the value to assign to the <name> on the\n  specified object or objects. The value is checked against the property type\n  to ensure that the value is valid. If the value is not appropriate for the\n  property an error will be returned.\n\n  Note: In some cases the value of a property may include special characters,\n  such as the dash character (`-`), which can cause the tool to interpret the\n  value as a new argument to the command. In this case, you must use the\n  explicit arguments (-name, -value, -objects) instead of the implied\n  positional arguments (name, value, objects) as described here. This is\n  shown in the Examples section below.\n\n  <objects> - (Required) One or more objects to assign the property to.\n\nExamples:\n\n  Create a user-defined boolean property, TRUTH, for cell objects, and set\n  the property on a cell:\n\n    create_property -type bool truth cell  \n    set_property truth false [lindex [get_cells] 1]\n\n  Use the -dict option to specify multiple properties at one time on the\n  current design:\n\n    set_property -dict 'POST_CRC enable POST_CRC_ACTION correct_and_continue' \\  \n    [current_design]\n\n  The following example sets the TOP property of the current fileset to\n  define the top module of the project:\n\n    set_property top fftTop [current_fileset]  \n    set_property top_file {C:/Data/sources/fftTop.v} [current_fileset]\n\n  Note: Defining the top module requires the TOP property to be set to the\n  desired hierarchical block in the source fileset of the current project. In\n  the preceding example TOP is the property name, fftTop is the value, and\n  current_fileset is the object. In addition, the TOP_FILE property should be\n  defined to point to the data source for the top module.\n\n  This example shows how to set a property value that includes the dash\n  character, `-`. The dash can cause the tool to interpret the value as a new\n  command argument, rather than part of the value being specified, and will\n  cause an error as shown. In this case, you must use the explicit form of\n  the positional arguments in the set_property command:\n\n    set_property {XELAB.MORE_OPTIONS} {-pulse_e_style ondetect} \\  \n       [get_filesets sim_1]  \n    ERROR: [Common 17-170] Unknown option `-pulse_e_style ondetect`,   \n     please type `set_property -help` for usage info. \n    set_property -name {XELAB.MORE_OPTIONS} -value {-pulse_e_style ondetect}\\  \n       -objects [get_filesets sim_1]\n\n  The following example sets the internal VREF property value for the\n  specified IO Bank:\n\n    set_property internal_vref {0.75} [get_iobanks 0]\n\n  The following example defines a DCI Cascade by setting the DCI_CASCADE\n  property for the specified IO Bank:\n\n    set_property DCI_CASCADE {14} [get_iobanks 0 ]\n\n  The following example configures the synth_1 run, setting options for\n  Vivado Synthesis 2013, and then launches the synthesis run:\n\n    set_property flow {Vivado Synthesis 2016} \\  \n       [get_runs synth_1]   \n    set_property STEPS.SYNTH_DESIGN.ARGS.GATED_CLOCK_CONVERSION on \\  \n       [get_runs synth_1]  \n    set_property STEPS.SYNTH_DESIGN.ARGS.FSM_EXTRACTION one_hot \\  \n       [get_runs synth_1]  \n    launch_runs synth_1\n\n  This example is the same as the prior example, except that it uses the\n  -dict option to set all the properties on the synthesis run in a single\n  set_property command:\n\n    set_property -dict [ list flow {Vivado Synthesis 2016} \\  \n       STEPS.SYNTH_DESIGN.ARGS.GATED_CLOCK_CONVERSION on \\  \n       STEPS.SYNTH_DESIGN.ARGS.FSM_EXTRACTION \\  \n       one_hot ] [get_runs synth_1]  \n    launch_runs synth_1\n\nSee Also:\n\n   *  current_fileset\n   *  create_property\n   *  create_run\n   *  get_cells\n   *  get_property\n   *  get_runs\n   *  launch_runs\n   *  list_property\n   *  list_property_value\n   *  report_property\n   *  reset_property\n",
"resize_net_bus": "resize_net_bus\n\nDescription: \nResize net bus in the current design\n\nSyntax: \nresize_net_bus  [-from <arg>] [-to <arg>] [-quiet] [-verbose] <net_bus_name>...\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-from]         New starting bus index\n  [-to]           New ending bus index\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  <net_bus_name>  Name of the net bus to resize\n\nCategories: \nNetlist\n\nDescription:\n\n  Resize an existing bus net, to grow the bus, shrink the bus, or renumber\n  the current range of indexes. You can only do a single grow, shrink, or\n  renumber operation with each command.\n\n   *  You can grow the bus by indicating a new range of indexes outside the\n      current range of indexes. Growing the bus leaves existing bits\n      connected as they currently are.\n\n   *  You can shrink the bus by indicating a new range of indexes inside the\n      current range of indexes. Shrinking the bus, eliminates connections to\n      removed bits, but leaves the remaining bits connected as they currently\n      are.\n\n   *  You can renumber the current bus indexes by providing a new range of\n      indexes with the same width as the current range. Renumbering bits\n      changes bus bit numeric identifiers, but doesn`t otherwise change\n      connections.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\n  This command returns nothing if successful, and returns an error if it fails.\n\nArguments:\n\n  -from <arg> - (Optional) The new starting index of the specified bus net.\n\n  -to <arg> - (Optional) The new ending index of the specified bus.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <net_bus_name> - (Required) The names of an existing bus net.\n\nExample:\n\n  The following example creates a new 24-bit bus, then renumbers the bus\n  indexes to include negative indexes, and then resizes the bus to shrink it\n  to an 8-bit bus:\n\n    create_net tempBus -from 23 -to 0  \n    resize_net_bus tempBus -from -12 -to 11  \n    resize_net_bus tempBus -from 0 -to 7 \n    \n\nSee Also:\n\n   *  connect_net\n   *  create_net\n   *  create_pin\n   *  create_port\n   *  disconnect_net\n   *  get_nets\n   *  remove_net\n   *  resize_pin_bus\n   *  resize_port_bus\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"global": "global(n)             Tcl Built-In Commands             global(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       global - Access global variables\n\nSYNOPSIS\n       global varname ?varname ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command has no effect unless executed in the context\n       of a proc body.  If the global command is executed in  the\n       context  of a proc body, it creates local variables linked\n       to the corresponding global variables (though these linked\n       variables,  like  those created by upvar, are not included\n       in the list returned by info locals).\n\n       If varname contains namespace qualifiers, the local  vari-\n       able's  name  is  the unqualified name of the global vari-\n       able, as determined by the namespace tail command.\n\n       varname is always treated as the name of a  variable,  not\n       an  array element.  An error is returned if the name looks\n       like an array element, such as a(b).\n\nEXAMPLES\n       This procedure sets the namespace variable ::a::x\n              proc reset {} {\n                  global a::x\n                  set x 0\n              }\n\n       This procedure accumulates the strings passed to it  in  a\n       global  buffer,  separated  by newlines.  It is useful for\n       situations when you want to build a message piece-by-piece\n       (as  if  with puts) but send that full message in a single\n       piece (e.g. over a connection opened  with  socket  or  as\n       part of a counted HTTP response).\n              proc accum {string} {\n                  global accumulator\n                  append accumulator $string \\n\n              }\n\n\nSEE ALSO\n       namespace(n), upvar(n), variable(n)\n\n\nKEYWORDS\n       global, namespace, procedure, variable\n\n\n\nTcl                                                     global(n)\n",
"source": "source\n\nDescription: \nAdd tracing of commands\n\nSyntax: \nsource  [-encoding <arg>] [-notrace] [-quiet] [-verbose] <file>\n\nUsage: \n  Name         Description\n  ------------------------\n  [-encoding]  specify the encoding of the data stored in filename\n  [-notrace]   disable tracing of sourced commands\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <file>       script to source\n\nCategories: \n\n",
"generate_target": "generate_target\n\nDescription: \nGenerate target data for the specified source\n\nSyntax: \ngenerate_target  [-force] [-quiet] [-verbose] <name> <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force target data regeneration\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      List of targets to be generated, or 'all' to generate all \n              supported targets\n  <objects>   The objects for which data needs to be generated\n\nCategories: \nProject, IPFlow, IPIntegrator\n\nDescription:\n\n  This command generates target data for the specified IP objects (get_ips)\n  or source file for IP cores (.xci and .xco), DSP modules (.slx or .mdl), or\n  block designs (.bd). The target data that is generated are the files\n  necessary to support the IP or block design through the FPGA design flow.\n\n  The instantiation template, synthesis netlist, and simulation netlist are\n  standard targets. However, each IP in the catalog may also support its own\n  set of targets. You can view the available targets on an object by\n  examining the SUPPORTED_TARGETS property, or you can use the list_targets\n  command to list the targets for design source file.\n\nArguments:\n\n  -force - (Optional) Force target data regeneration, and overwrite any\n  existing target data files. Without -force, the tool will not regenerate\n  any target data that is up-to-date.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The names of the types of target data to create for the\n  specified source. The specific targets supported by an IP core are listed\n  in the SUPPORTED_TARGETS property on the object. You can query this\n  property to see which targets a specific object supports. Standard values\n  are:\n\n   *  all - Generate all targets for the specified IP or file, except the\n      example project.\n\n      Note: You can generate an example project for an IP core using the\n      open_example_project command.\n\n   *  instantiation_template - Generate the Instantiation template used to\n      add the RTL module definition for the IP core into the current design.\n      The instantiation template can be copied into any desired level of the\n      design hierarchy.\n\n   *  synthesis - Synthesis targets deliver HDL files that are used during\n      synthesis for native IP, or deliver a synthesized netlist file (DCP)\n      generated by Vivado synthesis.\n\n   *  simulation - Simulation targets deliver HDL files that are used in\n      simulation.\n\n   *  implementation - Implementation generates the necessary data for\n      implementing the IP core, DSP module, or Embedded Processor in the\n      current design.\n\n  <objects> - (Required) The objects to generate the target from. Supported\n  objects can include IP core objects (get_ips), or the source files (.xci or\n  .xco), block design files (.bd) from IP integrator, and DSP modules (.slx\n  or .mdl) imported from System Generator.\n\n  Note: Use get_files to specify a file object, rather than specifying a file\n  name.\n\nExamples:\n\n  This example generates the change log for all of the IP cores in the\n  current project, forcing regeneration of any targets that are up-to-date:\n\n    generate_target changelog [get_ips] -force \n    \n\n  The following example generates the instantiation template and synthesis\n  targets for all of the IP cores in the current project:\n\n    generate_target {instantiation_template synthesis} [get_ips] \n    \n\n  Note: Note the use of the braces to pass the list of targets to the\n  command. The absence of the -force option means that only out-of-date\n  targets will be regenerated.\n\n  The following example generates all targets for the specified block design:\n\n    generate_target all \\  \n    [get_files  C:/Data/project_mb/project_mb.srcs/sources_1/bd/base_mb/base_mb.bd] \n    \n\n  Note: The use of get_ips is not supported to generate targets for\n  individual IP within block designs. The tool will return an error.\n\n  The following queries the SUPPORTED_TARGETS property of the specified IP\n  object, and then generates the example project for the IP:\n\n    get_property SUPPORTED_TARGETS [get_ips blk_mem*]  \n    open_example_project -dir C:/Data/examples -force [get_ips blk_mem*] \n    \n\nSee Also:\n\n   *  add_files\n   *  create_ip\n   *  create_sysgen\n   *  import_ip\n   *  list_targets\n   *  open_example_project\n   *  read_ip\n   *  report_property\n   *  reset_target\n",
"reset_target": "reset_target\n\nDescription: \nReset target data for the specified source\n\nSyntax: \nreset_target  [-quiet] [-verbose] <name> <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      List of targets to be reset, or 'all' to reset all generated \n              targets\n  <objects>   The objects for which data needs to be reset\n\nCategories: \nProject, IPFlow\n\nDescription:\n\n  Remove the current target data for the specified IP core. This deletes any\n  files that were delivered during generation of the specified targets. This\n  does not remove the core from the current project, but does remove the\n  associated target data from its referenced location.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) Specifies the name of the type of target to reset.\n  Valid values are:\n\n   *  all - Reset all targets for the specified core.\n\n   *  synthesis - Reset the synthesis netlist for the specified core. This\n      will remove the netlist files for the specified core.\n\n   *  simulation - Reset the simulation netlist for the specified core.\n\n   *  instantiation_template - Reset the instantiation template for the\n      specified core.\n\n  <objects> - (Required) The IP core objects to remove the target data from.\n\nExamples:\n\n  The following example resets the instantiation template for the specified\n  IP core:\n\n    reset_target instantiation_template [get_ips blk_mem*] \n    \n\nSee Also:\n\n   *  generate_target\n",
"set_part": "set_part\n\nDescription: \nSets the part on the current project. If no project is open, then a diskless project is created.\n\nSyntax: \nset_part  [-quiet] [-verbose] <part>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <part>      Set current project's part to this part.\n\nCategories: \nProject, PropertyAndParameter\n\nDescription:\n\n  Change the part used by the current project for subsequent elaboration,\n  synthesis, implementation, and analysis.\n\n  Note: The part is changed for the current project only, and not for the\n  in-memory design. You can change the speed grade of the device in the\n  in-memory design for timing analysis using the set_speed_grade command. You\n  can change the part used when opening an existing design checkpoint using\n  the -part option of the open_checkpoint or read_checkpoint commands.\n\n  This command is provided to let you change the part for the in-memory\n  project of non-project based designs, and does not support project-based\n  designs. For a project-based design set the PART property on the project as\n  follows:\n\n    set_property PART xc7vx485tffg1158-2 [current_project] \n    \n\n  Use the get_parts command to get a list of the available parts.\n\n  The set_part command creates an in-memory project for a non-project based\n  design, or assigns the part to the existing in-memory project.\n\n  Note: For a discussion of Project Mode and Non-Project Mode refer to the\n  Vivado Design Suite User Guide: Design Flows Overview (UG892).\n\n  This command returns the part that the in-memory project is set to use, or\n  returns an error if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <part> - (Required) Specifies the part to change to, or use in the current\n  project or in-memory design.\n\nExample:\n\n  The following example changes the part of the current in-memory project:\n\n    set_part xc7vx485tffg1158-2 \n    \n\nSee Also:\n\n   *  create_project\n   *  get_parts\n   *  open_checkpoint\n   *  read_checkpoint\n   *  set_property\n   *  set_speed_grade\n",
"set_data_check": "set_data_check\n\nDescription: \nCreate data to data checks\n\nSyntax: \nset_data_check  [-from <args>] [-to <args>] [-rise_from <args>]\n                [-fall_from <args>] [-rise_to <args>] [-fall_to <args>]\n                [-setup] [-hold] [-clock <args>] [-quiet] [-verbose] <value>\n\nUsage: \n  Name          Description\n  -------------------------\n  [-from]       From pin/port of data to data check\n  [-to]         To pin/port of the data to data check\n  [-rise_from]  Rise from pin/port of data to data check\n  [-fall_from]  Fall from pin/port of data to data check\n  [-rise_to]    Rise to pin/port of data to data check\n  [-fall_to]    Fall to pin/port of data to data check\n  [-setup]      Specify data check setup time\n  [-hold]       Specify data check hold time\n  [-clock]      Specify the clock domain at related pin/port of the checks\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <value>       Setup or hold time of the defined checks\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Performs a setup and hold check for a data pin with respect to another data\n  pin. This is different from a conventional setup and hold check that is\n  done with respect to a clock pin.\n\n  This command defines min and max requirements between two endpoints,\n  similar to setup (max) and hold (min) timing checks. Setup and hold checks\n  are referenced from the related pin, specified by -from, to the constrained\n  pin, specified by -to. The related pin is similar to the clock pin in a\n  conventional setup and hold check. The timing analysis compares arrival\n  times between the two specified endpoints. The difference must be less than\n  the set_data_check <value> requirement in order to meet timing.\n\n  Limitations of the set_data_check command include:\n\n   *  Variations in the destination clock delay are ignored.\n\n   *  This command is used for timing purposes only, and is not considered by\n      the Vivado placer or router.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -from <value> - (Optional) Data-to-data check for the specified pin or\n  port. The -from argument specifies the related pin.\n\n  -to <value> - (Optional) Data-to-data check for the specified pin or port.\n  The -to argument specifies the constrained pin\n\n  -rise_from <value> - (Optional) Data-to-data check from the rising edge of\n  the specified data pin or port. The -rise_from argument specifies the\n  related pin.\n\n  -fall_from <value> - (Optional) Data-to-data check from the falling edge of\n  the specified data pin or port. The -fall_from argument specifies the\n  related pin.\n\n  -rise_to <value> - (Optional) Data-to-data check to the rising edge of the\n  specified data pin or port. The -rise_to argument specifies the constrained\n  pin.\n\n  -fall_to <value> - (Optional) Data-to-data check to the falling edge of the\n  specified data pin or port. The -fall_to argument specifies the constrained\n  pin.\n\n  -setup <value> - (Optional) Perform only the setup data check. The default\n  is to perform both setup and hold checks.\n\n  -hold <value> - (Optional) Perform the hold data check. The default is to\n  perform both setup and hold checks.\n\n  -clock <value> - (Optional) Specify the clock domain at the related pin or\n  port of the checks.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <value> - (Required) The setup or hold time specified in nanoseconds (ns)\n  for the defined data checks.\n\nExamples:\n\n  The following example defines a data check for a setup violation from pin\n  A_IN to pin C_IN:\n\n    set_data_check -from A_IN -to C_IN -setup 2.0\n\nIn the above example, A_IN is the related pin and C_IN is the constrained pin. The above constraint would do a setup check of C_IN with respect to A_IN. The data at C_IN should arrive 2.0 ns prior to the edge of A_IN.\n\nSee Also:\n\n   *  report_timing\n   *  set_min_delay\n   *  set_max_delay\n",
"current_pr_configuration": "current_pr_configuration\n\nDescription: \nGet a list of PartitionDefs\n\nSyntax: \ncurrent_pr_configuration  [-quiet] [-verbose] [<config>...]\n\nReturns: \nlist of PartitionDef objects\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<config>]  Specify the PR configuration to be set as current (active); \n              optional\n\nCategories: \nObject, Partition\n\nDescription:\n\n  Get or set the current PR configuration.\n\n  In the Dynamic Function eXchange (DFX) design flow, the PR configuration lets\n  you specify a reconfigurable module (RM) to assign to a specific instance\n  of a Partition Definition (partitionDef). This flow lets you create unique\n  configurations of the design based on the combination of the core design\n  and one or more RMs. The DFX design flow requires the implementation of each\n  PR configuration, resulting in partial bitstreams for the RMs, but complete\n  bitstreams for each integrated configuration. Refer to the Vivado Design\n  Suite User Guide: Dynamic Function eXchange (UG909) for more information.\n\n  The current_pr_configuration either returns the PR configuration that is\n  the current or active configfuration in the design, or lets you specify a\n  PR configuration to make active.\n\n  This command returns the name of the current PR configuration, or returns\n  an error if the command fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <config> - (Optional) Specify a PR configuration to make current. The\n  configuration can be specified by name or returned as an object by\n  get_pr_configurations. If the configuration is not specified, the current\n  PR configuration is returned.\n\nExample:\n\n  The following example sets the current PR configuration as specified:\n\n    current_pr_configuration clockHigh \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  create_pr_configuration\n   *  create_reconfig_module\n   *  delete_pr_configurations\n   *  get_pr_configurations\n   *  setup_pr_configurations\n",
"read_checkpoint": "read_checkpoint\n\nDescription: \nRead a design checkpoint\n\nSyntax: \nread_checkpoint  [-cell <arg>] [-incremental] [-directive <arg>]\n                 [-auto_incremental] [-fix_objects <args>]\n                 [-dcp_cell_list <args>] [-force_incr] [-quiet] [-verbose]\n                 [<file>]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-cell]              Replace this cell with the checkpoint. The cell must \n                       be a black box.\n  [-incremental]       Input design checkpoint file to be used for re-using \n                       implementation.\n  [-directive]         Mode of behavior (directive) for this command. Please \n                       refer to Arguments section of this help for values for\n                       this option.\n                       Default: RuntimeOptimized\n  [-auto_incremental]  Enters automatic mode for incremental compile. This is\n                       less aggressive than the standard incremental mode and\n                       will readily switch from incremental algorithms to the\n                       default algorithms if results might not be maintained.\n                       Should not be used with -reuse_objects.\n  [-fix_objects]       Fix only given list of cells, clock regions, SLRs or \n                       Design\n  [-dcp_cell_list]     A list of cell/dcp pairs, e.g. {<cell1> <dcp1> <cell2>\n                       <dcp2>}. The option value should be in curly braces.\n  [-force_incr]        Force switch to forcefully run incremental flow \n                       irrespective of rule/ML based criteria\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  [<file>]             Design checkpoint file\n\nCategories: \nFileIO\n\nDescription:\n\n  Reads a design checkpoint file (DCP) that contains the netlist,\n  constraints, and may optionally have the placement and routing information\n  of an implemented design. You can save design checkpoints at any stage in\n  the design using the write_checkpoint command.\n\n  The read_checkpoint command simply reads the associated checkpoint file,\n  without opening a design or project in-memory. To create a project from the\n  imported checkpoint, use the open_checkpoint command instead of\n  read_checkpoint, or use the link_design command after read_checkpoint to\n  open the in-memory design from the checkpoint or checkpoint files currently\n  read.\n\n  Note: When multiple design checkpoints are open in the Vivado tool, you\n  must use the current_project command to switch between the open designs.\n  You can use current_design to check which checkpoint is the active design.\n\n  Important: The -incremental switch is not intended to merge two DCP files\n  into a single design. It applies the placement and routing of the\n  incremental checkpoint to the netlist objects in the current design.\n\n  After loading an incremental design checkpoint, you can use the\n  report_incremental_reuse command to determine the percentage of physical\n  data reused from the incremental checkpoint, in the current design. The\n  place_design and route_design commands will run incremental place and\n  route, preserving reused placement and routing information and\n  incorporating it into the design solution.\n\n  Reading a design checkpoint with -incremental, loads the physical data into\n  the current in-memory design. To clear out the incremental design data, you\n  must either reload the current design, using open_run to open the synthesis\n  run for instance, or read a new incremental checkpoint to overwrite the one\n  previously loaded.\n\nArguments:\n\n  -cell <arg> - (Optional) Specifies a black box cell in the current design\n  to populate with the netlist data from the checkpoint file being read. This\n  option cannot be used with -incremental, or any of its related options.\n\n  -auto_incremental - (Optional) Enables incremental algorithms only when the\n  quality of the reference checkpoint is high. This allows a user to set this\n  option and let the tool decide whether to run default or incremental\n  algorithms.\n\n  -incremental - (Optional) Load a checkpoint file into an already open\n  design to enable the incremental implementation design flow, where <file>\n  specifies the path and filename of the incremental design checkpoint (DCP)\n  file. In the incremental implementation flow, the placement and routing\n  from the incremental DCP is applied to matching netlist objects in the\n  current design to reuse existing placement and routing. Refer to the Vivado\n  Design Suite User Guide: Implementation (UG904) for more information on\n  incremental implementation.\n\n  -directive [ RuntimeOptimized | TimingClosure | Quick ] - (Optional)\n  Specifies a directive, or mode of operation for the -incremental process.\n\n   *  RuntimeOptimized: The target WNS is the referenced from the incremental\n      DCP. By default, more reuse from the reference checkpoint is\n      encouraged.\n\n   *  TimingClosure: The target WNS is 0. This mode attempts to meet timing\n      at the expense of runtime. Paths not meeting timing will be ripped up\n      and the incremental algorithms will be applied to fix timing on the\n      paths.\n\n   *  Quick: Specifies a low effort, non-timing-driven incremental\n      implementation mode with the fastest runtime.\n\n  -fix_objects - (Optional) When -incremental is specified, mark the\n  placement location of specifed cells as fixed (IS_LOC_FIXED) to prevent\n  changes by the place_design command. This option will fix the placement of\n  the specified list of cells, clock regions, SLRs or the current_design.\n\n  -dcp_cell_list <arg> - (Optional) Lets you specify a list of cell/dcp\n  pairs. This lets you read in multiple DCP files for specified cells in a\n  single run of the read_checkpoint command. The format is specified as a\n  list of cell/DCP pairs enclosed in curly braces: {<cell1> <dcp1> <cell2>\n  <dcp2>}.\n \n  -force_incr - (Optional) When -incremental is specified, forces the\n  incremental flow irrespective of the incremental criteria checks. When\n  -force_incr is not specified the incremental flow may exit and continue in\n  non-incremental flow.\n\n  Note: force_incr is only used along with the -incremental switch.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The path and filename of the checkpoint file to read.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example imports the specified checkpoint file into the tool,\n  and then links the various design elements to create an in-memory design of\n  the specified name.\n\n    read_checkpoint C:/Data/checkpoint.dcp\n    link_design -name Test1\n    \n\n  This example reads a design checkpoint on top of the current design for\n  incremental place and route of the design.\n\n    read_checkpoint -incremental C:/Data/routed.dcp\n    \n\n  This example reads a design checkpoint. Incremental algorithms will be used\n  only if the timing is nearly met and if there is a high reuse.\n\n    read_checkpoint -auto_incremental C:/Data/routed.dcp\n\nRelated Information:\n\n   *  all_dsps\n   *  config_implementation\n   *  current_design\n   *  current_project\n   *  get_cells\n   *  link_design\n   *  open_checkpoint\n   *  report_config_implementation\n   *  write_checkpoint\n",
"report_timing": "report_timing\n\nDescription: \nReport timing paths\n\nSyntax: \nreport_timing  [-from <args>] [-rise_from <args>] [-fall_from <args>]\n               [-to <args>] [-rise_to <args>] [-fall_to <args>]\n               [-through <args>] [-rise_through <args>] [-fall_through <args>]\n               [-delay_type <arg>] [-setup] [-hold] [-max_paths <arg>]\n               [-nworst <arg>] [-unique_pins] [-path_type <arg>] [-input_pins]\n               [-no_header] [-no_reused_label] [-slack_lesser_than <arg>]\n               [-slack_greater_than <arg>] [-group <args>] [-sort_by <arg>]\n               [-no_report_unconstrained] [-user_ignored] [-of_objects <args>]\n               [-significant_digits <arg>] [-column_style <arg>] [-file <arg>]\n               [-append] [-name <arg>] [-no_pr_attribute] [-no_pblock]\n               [-routable_nets] [-return_string] [-warn_on_violation]\n               [-cells <args>] [-rpx <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                        Description\n  ---------------------------------------\n  [-from]                     From pins, ports, cells or clocks\n  [-rise_from]                Rising from pins, ports, cells or clocks\n  [-fall_from]                Falling from pins, ports, cells  or clocks\n  [-to]                       To pins, ports, cells or clocks\n  [-rise_to]                  Rising to pins, ports, cells or clocks\n  [-fall_to]                  Falling to pins, ports, cells or clocks\n  [-through]                  Through pins, ports, cells or nets\n  [-rise_through]             Rising through pins, ports, cells or nets\n  [-fall_through]             Falling through pins, ports, cells or nets\n  [-delay_type]               Type of path delay: Values: max, min, min_max, \n                              max_rise, max_fall, min_rise, min_fall\n                              Default: max\n  [-setup]                    Report max delay timing paths (equivalent to \n                              -delay_type max)\n  [-hold]                     Report min delay timing paths (equivalent to \n                              -delay_type min)\n  [-max_paths]                Maximum number of paths to output when sorted \n                              by slack, or per path group when sorted by \n                              group: Value >=1\n                              Default: 1\n  [-nworst]                   List up to N worst paths to endpoint: Value >=1\n                              Default: 1\n  [-unique_pins]              for each unique set of pins, show at most 1 \n                              path per path group\n  [-path_type]                Format for path report: Values: end, summary, \n                              short, full, full_clock, full_clock_expanded\n                              Default: full_clock_expanded\n  [-input_pins]               Show input pins in path\n  [-no_header]                Do not generate a report header\n  [-no_reused_label]          Do not label reuse status on pins in the report\n  [-slack_lesser_than]        Display paths with slack less than this\n                              Default: 1e+30\n  [-slack_greater_than]       Display paths with slack greater than this\n                              Default: -1e+30\n  [-group]                    Limit report to paths in this group(s)\n  [-sort_by]                  Sorting order of paths: Values: group, slack\n                              Default: slack\n  [-no_report_unconstrained]  Do not report infinite slack paths\n  [-user_ignored]             Only report paths which have infinite slack \n                              because of set_false_path or set_clock_groups \n                              timing constraints\n  [-of_objects]               Report timing for these paths\n  [-significant_digits]       Number of digits to display: Range: 0 to 3\n                              Default: 3\n  [-column_style]             style for path report columns: Values: \n                              variable_width, anchor_left, fixed_width\n                              Default: anchor_left\n  [-file]                     Filename to output results to. (send output to \n                              console if -file is not used)\n  [-append]                   Append the results to file, don't overwrite the\n                              results file\n  [-name]                     Output the results to GUI panel with this name\n  [-no_pr_attribute]          for Dynamic Function eXchange designs, do not \n                              report whether netlist resources are in the \n                              static or reconfigurable regions\n  [-no_pblock]                report timing without pblock column\n  [-routable_nets]            store the number of routable nets traversed as \n                              a property on timing paths.\n  [-return_string]            return report as string\n  [-warn_on_violation]        issue a critical warning when the report \n                              contains a timing violation\n  [-cells]                    run report_timing on the specified cell(s)\n  [-rpx]                      Filename to output interactive results to.\n  [-quiet]                    Ignore command errors\n  [-verbose]                  Suspend message limits during command execution\n\nCategories: \nReport, Timing\n\nDescription:\n\n  Important: If the design has no timing constraints, report_timing reports\n  on unconstrained paths in the design. However, if even one path has timing\n  constraints then report_timing only reports on the constrained paths in the\n  design, unless unconstrained timing paths are specified by the -from/-to\n  options.\n\n  This command performs timing analysis on the specified timing paths of the\n  current Synthesized or Implemented Design. By default the tool reports the\n  timing path with the worst calculated slack within each path group.\n  However, you can optionally increase the number of paths and delays\n  reported with the use of the -nworst or -max_paths arguments.\n\n  Tip: The report_timing can be multi-threaded to speed the process. Refer to\n  the set_param command for more information on setting the\n  general.maxThreads parameter.\n\n  The timing engine runs in 'quad' timing mode, analyzing min and max delays\n  for both slow and fast corners. You can configure the type of analysis\n  performed by the config_timing_corners command. However, it is not\n  recommended to change the default because this reduces the timing analysis\n  coverage.\n\n  Note: By default the report is written to the Tcl console or STD output.\n  However, the results can also be written to the GUI, to a file, or returned\n  as a string if desired.\n\nArguments:\n\n  -from <args> - (Optional) The starting points of the timing paths to be\n  analyzed. Ports, pins, or cells can be specified as timing path\n  startpoints. You can also specify a clock object, and all startpoints\n  clocked by the named clock will be analyzed.\n\n  -rise_from <args> - (Optional) Similar to the -from option, but only the\n  rising edge of signals coming from the startpoints are considered for\n  timing analysis. If a clock object is specified, only the paths launched by\n  the rising edge of the clock are considered as startpoints.\n\n  -fall_from <args> - (Optional) Similar to the -from option, but only the\n  falling edge of signals coming from the startpoints are considered for\n  timing analysis. If a clock object is specified, only the paths launched by\n  the falling edge of the clock are considered as startpoints.\n\n  -to <args> - (Optional) The endpoints, or destination objects of timing\n  paths to be analyzed. Ports, pins, and cell objects can be specified as\n  endpoints. A clock object can also be specified, in which case endpoints\n  clocked by the named clock are analyzed.\n\n  -rise_to <args> - (Optional) Similar to the -to option, but only the rising\n  edge of signals going to the endpoints is considered for timing analysis.\n  If a clock object is specified, only the paths captured by the rising edge\n  of the named clock are considered as endpoints.\n\n  -fall_to <args> - (Optional) Similar to the -to option, but only the\n  falling edge of signals going to the endpoints is considered for timing\n  analysis. If a clock object is specified, only the paths captured by the\n  falling edge of the named clock are considered as endpoints.\n\n  -through <args> - (Optional) Consider only paths through the specified\n  pins, cell instance, or nets during timing analysis. You can specify\n  individual -through (or -rise_through and -fall_through) points in sequence\n  to define a specific path through the design for analysis. The order of the\n  specified through points is important to define a specific path. You can\n  also specify through points with multiple objects, in which case the timing\n  path can pass through any of the specified through objects.\n\n  -rise_through <args> - (Optional) Similar to the -through option, but\n  timing analysis is only performed on paths with a rising transition at the\n  specified objects.\n\n  -fall_through <args> - (Optional) Similar to the -through option, but\n  timing analysis is only performed on paths with a falling transition at the\n  specified objects.\n\n  -delay_type <arg> - (Optional) Specifies the type of delay to analyze when\n  running the timing report. The valid values are min, max, min_max,\n  max_rise, max_fall, min_rise, min_fall. The default setting for -delay_type\n  is max.\n\n  -setup - (Optional) Check for setup violations. This is the same as\n  specifying -delay_type max.\n\n  -hold - (Optional) Check for hold violations. This is the same as\n  specifying -delay_type min.\n\n  Tip: -setup and -hold can be specified together, which is the same as\n  specifying -delay_type min_max.\n\n  -max_paths <arg> - (Optional) The maximum number of paths to output when\n  sorted by slack; or maximum number of paths per path group when sorted by\n  group, as specified by -sort_by. This is specified as a value greater than\n  or equal to 1. By default the report_timing command will report the single\n  worst timing path, or the worst path per path group.\n\n  -nworst <arg> - (Optional) The number of timing paths per endpoint to\n  output in the timing report. The timing report will return the <N> worst\n  paths based on the specified value, greater than or equal to 1. The default\n  setting is 1.\n\n  -unique_pins - (Optional) Show only one timing path for each unique set of\n  pins.\n\n  -path_type <arg> - (Optional) Specify the path data to output in the timing\n  report. The default format is full_clock_expanded. The valid path types\n  are:\n\n   *  end - Shows the endpoint of the path only, with calculated timing values.\n\n   *  summary - Displays the startpoints and endpoints with slack calculation.\n\n   *  short - Displays the startpoints and endpoints with calculated timing\n      values.\n\n   *  full - Displays the full timing path, including startpoints, through\n      points, and endpoints.\n\n   *  full_clock - Displays full clock paths in addition to the full timing\n      path.\n\n   *  full_clock_expanded - Displays full clock paths between a master clock\n      and generated clocks in addition to the full_clock timing path. This is\n      the default setting.\n\n  -input_pins - (Optional) Show input pins in the timing path report. For use\n  with -path_type full, full_clock, and full_clock_expanded.\n\n  -no_header - (Optional) Do not write a header to the report.\n\n  -no_reused_label - (Optional) Disable the reporting of reuse information in\n  designs that use incremental place and route based on an existing design\n  checkpoint (DCP) file. Both placement and routing can be completed\n  incrementally, based on prior results stored in a Design Checkpoint file\n  (DCP), using the incremental implementation flow. Refer to the\n  read_checkpoint command, or to Vivado Design Suite User Guide:\n  Implementation (UG904) for more information on incremental place and route.\n  By default, designs using incremental place and route have pins labeled\n  with information related to the physical data reused from the specified\n  incremental checkpoint. This option removes the reuse labels including the\n  following:\n\n   *  Routing: Placement and routing to this pin are reused.\n\n   *  Placement: Cell placement is reused but routing to this pin is not\n      reused.\n\n   *  Moved: Neither cell placement nor routing to this pin is reused.\n\n   *  New: The cell, net, or pin is new. It does not exist in the incremental\n      checkpoint.\n\n  -slack_lesser_than <arg> - (Optional) Report timing on paths with a\n  calculated slack value less than the specified value. Used with\n  -slack_greater_than to provide a range of slack values of specific\n  interest.\n\n  -slack_greater_than <arg> - (Optional) Report timing on paths with a\n  calculated slack value greater than the specified value. Used with\n  -slack_lesser_than to provide a range of slack values of specific interest.\n\n  -group <args> - (Optional) Report timing for paths in the specified path\n  groups. Currently defined path groups can be determined with the\n  get_path_groups command.\n\n  Tip: Each clock creates a path group. Path groups can also be defined with\n  the group_path command. The -group option cannot be specified with\n  -of_objects, which also specifies timing path objects.\n\n  -sort_by [ slack | group ] - (Optional) Sort timing paths in the report by\n  slack values, or by path group. Valid values are slack or group. By\n  default, the report_timing command reports the worst, or -nworst, timing\n  paths in the design. However, with -sort_by group, the report_timing\n  command returns the worst, or -nworst, paths of each path group.\n\n  -no_report_unconstrained - (Optional) Do not report timing on unconstrained\n  paths. Without this option specified, the report_timing command will\n  include unconstrained paths which will have infinite slack.\n\n  -user_ignored - (Optional) Report only the paths that are usually ignored\n  by timing due to presence of set_false_path or set_clock_groups\n  constraints.\n\n  Note: The -user_ignored and -no_report_unconstrained options are mutually\n  exclusive and cannot be specified together. The -user_ignored option is\n  also mutually exclusive with the -slack_lesser_than and -slack_greater_than\n  options.\n\n  -of_objects <args> - (Optional) Report timing on the specified timing path\n  objects. Used with the get_timing_paths command.\n\n  Tip: The -of_objects option cannot be used with the various forms of -from,\n  -to, or -through options which are also used to identify timing paths to\n  report. The -of_objects option, which defines a timing path object\n  containing a DELAY_TYPE property, cannot be used with -setup, -hold or\n  -delay_type, which all also define a delay type. The -of_objects option\n  also cannot be specified with -group, which defines groups of timing path\n  objects.\n\n  -significant_digits <arg> - (Optional) The number of significant digits in\n  the output results. The valid range is 0 to 3. The default setting is 3\n  significant digits.\n\n  -column_style [ variable_width | anchor_left | fixed_width ] - (Optional)\n  Specify the format of the timing path portion of the timing report output.\n  The default format is anchor_left.\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) Specifies the name of the results set for the GUI.\n\n  -no_pr_attribute <arg> - (Optional) This option disables the standard\n  reporting of the Partial Reconfiguration (PR) attribute data. For PR\n  designs, the logical path is appended to identify cells as belonging to a\n  reconfigurable partition (:RP#), or to the static region of the design\n  (:S).\n\n  -no_pblock - (Optional) Do not report the Pblock information when there are\n  some Pblocks on the path.\n\n  -routable_nets - (Optional) Report the number of routable nets traversed as\n  a property of the timing paths returned.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -warn_on_violation - (Optional) Specify that a Critical Warning will be\n  generated by the Vivado Design Suite when the timing report contains a\n  timing violation.\n\n  -cells <arg> - (Option) Generate the timing report on the specified\n  hierarchical cells. The details of the report will be based on the\n  specified cells rather than the whole design.\n\n  -rpx <arg> - (Optional) Specify the file name and path of an Xilinx report\n  file (RPX) to write. This is different from writing the report results to a\n  file using the -file argument. The RPX file is an interactive report that\n  contains all the report information and can be reloaded into memory in the\n  Vivado Design Suite using the open_report command. You should add a .rpx\n  file extension to the specified file name, as the Vivado tool will not\n  automatically assign a file extension.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the timing for the 5 worst paths in the\n  design, reporting the full timing path, including input pins, with timing\n  values:\n\n    report_timing -nworst 5 -path_type full -input_pins\n\n  The following example shows the use of the multiple through points to\n  define both a specific path (through state_reg1) and alternate paths\n  (through count_3 or count_4), and writes the timing results to the\n  specified file:\n\n    report_timing -from go -through {state_reg1} \\\n       -through { count_3  count_4 } \\\n       -to done -path_type summary -file C:/Data/timing1.txt\n\nSee Also:\n\n   *  get_path_groups\n   *  get_timing_paths\n   *  group_path\n   *  place_design\n   *  report_timing_summary\n   *  route_design\n   *  set_clock_groups\n   *  set_false_path\n   *  get_msg_config\n   *  set_msg_config\n",
"read_iphys_opt_tcl": "read_iphys_opt_tcl\n\nDescription: \nload iPhysOpt script and run it.\n\nSyntax: \nread_iphys_opt_tcl  [-fanout_opt] [-critical_cell_opt] [-replicate_cell]\n                    [-reconnect] [-placement_opt] [-forward_retime]\n                    [-backward_retime] [-dsp_register_opt] [-bram_register_opt]\n                    [-uram_register_opt] [-shift_register_opt]\n                    [-shift_register_to_pipeline] [-auto_pipeline]\n                    [-pipeline_to_shift_register] [-critical_pin_opt]\n                    [-restruct_opt] [-equ_drivers_opt]\n                    [-include_skipped_optimizations] [-create_bufg]\n                    [-insert_negative_edge_ffs] [-hold_fix] [-slr_crossing_opt]\n                    [-quiet] [-verbose] [<input>]\n\nUsage: \n  Name                              Description\n  ---------------------------------------------\n  [-fanout_opt]                     Fanout optimization including very high \n                                    fanout optimizations\n  [-critical_cell_opt]              Do cell-duplication based optimization on\n                                    timing critical nets\n  [-replicate_cell]                 Atomic cell replication operation for \n                                    interconnect retiming and LUT \n                                    optimization\n  [-reconnect]                      Reconnect loads from equivalent drivers \n                                    for interconnect retiming and LUT \n                                    optimization\n  [-placement_opt]                  Move cells to reduce delay on \n                                    timing-critical nets\n  [-forward_retime]                 Forward retiming optimization\n  [-backward_retime]                Backward retiming optimization\n  [-dsp_register_opt]               DSP register optimization\n  [-bram_register_opt]              BRAM register optimization\n  [-uram_register_opt]              UltraRAM register optimization\n  [-shift_register_opt]             Shift register optimization\n  [-shift_register_to_pipeline]     Shift register to pipeline optimization\n  [-auto_pipeline]                  Auto pipeline\n  [-pipeline_to_shift_register]     pipeline to shift register optimization\n  [-critical_pin_opt]               Pin Swap optimization\n  [-restruct_opt]                   LUT restructuring optimization\n  [-equ_drivers_opt]                Equivalent driver rewiring\n  [-include_skipped_optimizations]  Apply undo changes\n  [-create_bufg]                    Insert bufg to drive HFO nets\n  [-insert_negative_edge_ffs]       Inserting negative edge triggered FFs for\n                                    high hold mitigation\n  [-hold_fix]                       Inserting buffers for hold fix \n                                    optimization\n  [-slr_crossing_opt]               Optimize slr crossing nets\n  [-quiet]                          Ignore command errors\n  [-verbose]                        Suspend message limits during command \n                                    execution\n  [<input>]                         iPhysOpt.tcl file\n\nCategories: \nTools\n\nDescription:\n\n  Interactive physical optimization can be used in two ways:\n\n   *  Applying post-placement physical optimizations to the pre-placement\n      netlist to improve the overall placement result and improve design\n      performance.\n\n   *  Saving the physical optimizations in a Tcl script to be repeated as\n      needed.\n\n  To apply post-placement optimizations to the pre-placement netlist, you can\n  reset the implementation run and open the synthesized design, or open the\n  opt_design checkpoint, and read the iphys_opt Tcl script to apply the\n  physical optimizations.\n\n  You can apply all optimizations from the iphys_opt Tcl script, or apply\n  specific optimizations using the options of the read_iphys_opt_tcl command.\n  You can also include any optimizations that were defined but skipped during\n  physical optimization.\n\n  If the iphys_opt Tcl script includes placement data, you can use that data\n  to place the optimized cells in the design.\n\n  After reading the iphys_opt Tcl script, and placing the optimized cells,\n  you can rerun placement for the overall design. The design now incorporates\n  the benefits of the phys_opt_design optimizations before placement, such as\n  fewer high-fanout nets due to replication, and fewer long distance paths\n  from block RAM outputs. The results should be a better placement, and\n  improved design performance, due to the early application of netlist\n  optimizations.\n\n  This command returns a transcript of its processes, or returns an error if\n  it fails.\n\nArguments:\n\n  -fanout_opt - (Optional) Apply the fanout optimizations that are defined in\n  the specified interactive physical optimization Tcl script.\n\n  -critical_cell_opt - (Optional) Applies the cell replication optimizations\n  that are defined in the specified Tcl script.\n\n  -placement_opt - (Optional) Applies the cell placement optimizations that\n  are defined in the specified Tcl script.\n\n  -rewire - (Optional) Applies the logic cone refactoring that are defined in\n  the specified Tcl script.\n\n  -dsp_register_opt - (Optional) Applies the DSP optimizations that are\n  defined in the specified interactive physical optimization Tcl script.\n\n  -bram_register_opt - (Optional) Applies the BRAM optimizations that are\n  defined in the specified Tcl script.\n\n  -shift_register_opt - (Optional) Applies the shift register optimization\n  that are defined in the specified Tcl script.\n\n  -critical_pin_opt - Applies the pin-swapping that are defined in the\n  specified Tcl script.\n\n  -include_skipped_optimizations - (Optional) Apply the skipped optimizations\n  that are defined in the input Tcl script, as well as the standard\n  optimizations. These are optimizations identified by phys_opt_design that\n  are skipped because suitable locations for optimized logic cannot be found.\n  When this option is specified, the iphys_opt_design command will attempt to\n  use the included skipped optimizations in the pre-placement netlist.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <input> - (Required) The name of the interactive physical optimization Tcl\n  file to read.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example applies the BRAM optimizations that are defined in\n  the specified interactive physical optimization Tcl script, and applies any\n  placement data for the optimized cells:\n\n    open_checkpoint C:/Data/opt_design.dcp  \n    read_iphys_opt_tcl -shift_register_opt -placement_opt C:/Data/my_iphys_opt.tcl \n    \n\nSee Also:\n\n   *  iphys_opt_design\n   *  phys_opt_design\n   *  report_phys_opt\n   *  write_iphys_opt_tcl\n",
"close_hw": "The command 'close_hw' is auto loaded by Tcl. To explicitly load the command type 'load_features labtools'.",
"read_schematic": "read_schematic\n\nDescription: \nImport schematic \n\nSyntax: \nread_schematic  [-name <arg>] [-quiet] [-verbose] <file>\n\nReturns: \nname of the file previously exported\n\nUsage: \n  Name        Description\n  -----------------------\n  [-name]     Schematic window title\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      Input file\n\nCategories: \nFileIO\n\nDescription:\n\n  Import a native schematic file that was previously exported from the Vivado\n  Design Suite using the write_schematic command.\n\nArguments:\n\n  -name <arg> - (Optional) The name of the Schematic window to open when\n  reading the schematic file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) The name of the Schematic file to read.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExample:\n\n  The following example reads the specified schematic file and opens a\n  Schematic window called 'Sheet_1' in the Vivado IDE:\n\n    read_schematic C:/Data/mySchematic.txt -name Sheet_1 \n    \n\nSee Also:\n\n   *  write_schematic\n",
"set_clock_uncertainty": "set_clock_uncertainty\n\nDescription: \nset clock uncertainty\n\nSyntax: \nset_clock_uncertainty  [-setup] [-hold] [-from <args>] [-rise_from <args>]\n                       [-fall_from <args>] [-to <args>] [-rise_to <args>]\n                       [-fall_to <args>] [-quiet] [-verbose] <uncertainty>\n                       [<objects>]\n\nUsage: \n  Name           Description\n  --------------------------\n  [-setup]       Specify clock uncertainty for setup checks\n  [-hold]        Specify clock uncertainty for hold checks\n  [-from]        Specify inter-clock uncertainty source clock\n  [-rise_from]   Specify inter-clock uncertainty source clock with rising edge\n  [-fall_from]   Specify inter-clock uncertainty source clock with falling \n                 edge\n  [-to]          Specify inter-clock uncertainty destination clock\n  [-rise_to]     Specify inter-clock uncertainty destination clock with rising\n                 edge\n  [-fall_to]     Specify inter-clock uncertainty destination clock with \n                 falling edge\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  <uncertainty>  Uncertainty of clock network\n  [<objects>]    List of clocks, ports or pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  This command is used to add to the uncertainty of a clock in the design,\n  and does not override the default jitter calculation. This is referred to\n  as the user clock uncertainty. The set_clock_uncertainty command provides a\n  convenient means to over-constrain some clocks in the design without\n  changing the clock definitions and relationships. It can constrain setup\n  and hold paths separately using the -setup and -hold options.\n\n  Clock uncertainty is the maximum variation, specified in nanoseconds (ns),\n  between two clock edges at registers within a single clock domain, or\n  crossing between clock domains.\n\n  The clock uncertainty is used during setup and hold analysis, where\n  uncertainty is calculated for each timing path based on the clock edges\n  used by the analysis and the clock tree topology. For example, for a path\n  where the startpoint and endpoint are connected to the same clock net, the\n  clock uncertainty is null because the same clock edge is used for both\n  source and destination, unless the set_clock_uncertainty command is used to\n  add uncertainty for the min delay analysis. The Vivado timing engine uses\n  clock uncertainty in the slack calculation as determined by the following\n  equation:\n\n   *  Setup Slack = Setup Path Requirement - Data Delay - Clock Uncertainty +\n      Clock Skew\n\n  Clock Uncertainty is a function of different elements of jitter, as\n  determined by the following equation which is returned by the\n  report_timing_summary or report_timing commands:\n\n   *  Clock Uncertainty = (sqrt(Tsj^2 + Dj^2))/2 + PE + UU\n\n  Where:\n\n   *  Tsj = Total System Jitter as calculated using the system jitter. See\n      set_system_jitter.\n\n   *  Dj = Discrete jitter is the amount of jitter introduced by hardware\n      primitives such as MMCM or PLL. Discrete jitter is a feature of clocks\n      generated by the MMCM, which includes the input jitter defined on the\n      primary clock. See set_input_jitter.\n\n   *  PE = Phase Error, which comes from the MMCM/PLL device model.\n\n   *  UU = User Uncertainty, which defines the user clock uncertainty\n      specified by this set_clock_uncertainty command.\n\n  Note: SYSTEM_JITTER is reported as a property of clocks, although it\n  applies to all clocks in the design. INPUT_JITTER is also a property of\n  primary clocks. These properties can be returned by the get_property or\n  report_property commands. Jitter and clock uncertainty are reported by the\n  report_timing_summary and report_timing commands.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -setup - (Optional) The specified clock uncertainty is applied during setup\n  checks.\n\n  -hold - (Optional) The specified clock uncertainty is applied during hold\n  checks.\n\n  -from <source_clock_name> - (Optional) Specify inter-clock uncertainty\n  source clock.\n\n  -rise_from <source_clock_name> - (Optional) Specify inter-clock uncertainty\n  source clock with rising edge.\n\n  -fall_from <source_clock_name> - (Optional) Specify inter-clock uncertainty\n  source clock with falling edge.\n\n  -to <destination_clock_name> - (Optional) Specify inter-clock uncertainty\n  destination clock.\n\n  -rise_to <destination_clock_name> - (Optional) Specify inter-clock\n  uncertainty destination clock with rising edge.\n\n  -fall_to <destination_clock_name> - (Optional) Specify inter-clock\n  uncertainty destination clock with falling edge.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <uncertainty> - (Required) Uncertainty of the clock network, specified in\n  nanoseconds.\n\n  <objects> - (Optional) List of clocks to define uncertainty for.\n\nExamples:\n\n  The following example defines the uncertainty between all clock domains:\n\n    set_clock_uncertainty 0.225 -from [get_clocks] -to [get_clocks] \n    \n\n  The following command defines setup and hold uncertainty within the wbClk\n  clock domain:\n\n    set_clock_uncertainty -setup 0.213 [get_clocks wbClk]  \n    set_clock_uncertainty -hold 0.167 [get_clocks wbClk] \n    \n\nSee Also:\n\n   *  create_clock\n   *  create_generated_clock\n   *  get_clocks\n   *  set_input_jitter\n   *  set_system_jitter\n",
"convert_ips": "convert_ips\n\nDescription: \nConvert specified IP to or from core container format.\n\nSyntax: \nconvert_ips  [-force] [-to_core_container] [-from_core_container] [-quiet]\n             [-verbose] <objects>\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-force]                Force conversion even if the IP is locked.\n  [-to_core_container]    Convert IP to core container format.\n  [-from_core_container]  Convert IP to non core container format.\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n  <objects>               Input objects for the IP. May IP or source file \n                          objects\n\nCategories: \nIPFlow\n\nDescription:\n\n  This command converts existing IP into core container format, or reverts\n  core container IP into the expanded non-core container format.\n\n  The core container format for IP is a compressed zip file that reduces the\n  file structure in the design, and increases tool performance.\n\n  By default, the Vivado tool adds IP from the Xilinx IP catalog into a\n  design using the core container format. However, the convert_ips command\n  lets you convert IP in existing designs to take advantage of the core\n  container format. In addition, the convert_ips command also lets you revert\n  the compressed core container format into the expanded non-core container\n  format.\n\n  Note: If neither -to_core_container or -from_core_container options are\n  specified then the convert_ips command will convert the IP from its current\n  format into the opposite form. Any core container IP will be converted to\n  non-core container format, and any non-core container IP will be converted\n  to core container format.\n\n  IP that is user-managed, cannot be converted from its current format. IP\n  that is locked requires the use of the -force option to convert. Refer to\n  the Vivado Design Suite User Guide: Designing with IP (UG896) for more\n  information on editing IP and the IS_LOCKED and IS_MANAGED properties.\n\n  This command returns a transcript of its actions, or returns an error if it\n  fails.\n\nArguments:\n\n  -force - (Optional) Force the conversion of IP that are currently locked\n  (IS_LOCKED).\n\n  -to_core_container - (Optional) Convert existing expanded form IP into the\n  core container format. Any IP specified that are already in core container\n  format will simply be ignored.\n\n  -from_core_container - (Optional) Convert IP currently in the core\n  container format into the expanded form of the non-core container format.\n  Any IP specified that are already in non-core container format will simply\n  be ignored.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) Specify the IP objects or IP files to convert. IP\n  files can be specified using the get_files command, or IP objects can be\n  specified with get_ips.\n\nExamples:\n\n  The following example converts all IP in the current project into core\n  container format:\n\n    \n    convert_ips -to_core_container [get_ips] \n    \n\n  Note: Any IP already in the core container format will be skipped.\n\n  The following example converts the specified IP file to core container\n  format:\n\n    convert_ips -to_core_container \\  \n    [get_files  C:/Data/wave1/wave1.srcs/sources_1/ip/char_fifo/char_fifo.xci] \n    \n\n  The following example toggles the current format of all IP in the design,\n  switching from core container to non-core container, and from non-core\n  container to core container:\n\n    convert_ips [get_ips] \n    \n\nSee Also:\n\n   *  get_files\n   *  get_ips\n   *  get_property\n   *  set_property\n",
"apply_hw_ila_trigger": "apply_hw_ila_trigger\n\nDescription: \nApply trigger at startup init values to an ILA core in the design\n\nSyntax: \napply_hw_ila_trigger  [-ila_cell <arg>] [-quiet] [-verbose] [<file>]\n\nUsage: \n  Name         Description\n  ------------------------\n  [-ila_cell]  Apply trigger settings to this ila cell\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<file>]     ILA startup trigger settings file\n\nCategories: \nDebug\n\nDescription:\n\n  Apply a trigger configuration file to the bitstream of a design, to support\n  ILA trigger at startup.\n\n  This command is used to configure the trigger settings of an ILA core in a\n  design bitstream (.bit) file, so that the ILA debug core is armed to\n  trigger on events immediately after device configuration and startup. This\n  allows data to be captured from the earliest stages of device activity,\n  which would not be possible through the use of the Hardware Manager feature\n  of the Vivado Design Suite, and the run_hw_ila command.\n\n  The apply_hw_ila_trigger command reads a trigger configuration file written\n  by run_hw_ila -file and applies the various trigger settings to the ILA\n  core in the implemented design. The trigger configuration for the ILA core\n  then become part of the bitstream written by write_bitstream, that is used\n  to program the Xilinx FPGA device.\n\n  The process for using the trigger at startup feature includes the following\n  steps:\n\n   *  From the Hardware Manager, use run_hw_ila -file to export the trigger\n      register map file for the ILA core.\n\n   *  Open the implemented design, or the implemented design checkpoint.\n\n   *  Use the apply_hw_ila_trigger command to apply the trigger settings to\n      the in-memory design.\n\n   *  Use the write_bitstream command to write the bitstream with the applied\n      trigger configuration file.\n\n      Note: Be sure to use the write_bitstream command, and not the Flow\n      Navigator commands in the Vivado IDE.\n\n   *  Return to the Hardware Manager, and use program_hw_device to program\n      the hw_device using the new bitstream file.\n\n  Once programmed, the new ILA core should immediately arm at startup. In the\n  Vivado logic analyzer feature, you should see the 'Trigger Capture Status'\n  for the ILA core is now populated with captured data samples if trigger\n  events or capture conditions have occurred. Refer to the Vivado Design\n  Suite User Guide: Vivado Programming and Debugging (UG908) for more\n  information.\n\nArguments:\n\n  -ila_cell <arg> - (Optional) Apply trigger settings to the specified ILA\n  cell. The cell must be specified as an object using the get_cells command.\n\n  Note: The trigger configuration file includes the instance information for\n  the ILA cell it applies to. The -ila_cell option is not required, and\n  should only be used to apply the trigger file to a different ILA cell in\n  the design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Optional) Specify a trigger configuration file that was created\n  by the run_hw_ila -file command.\n\nExample:\n\n  The following example applies the trigger configurations to the ILA cell\n  instance that is defined in the specified file:\n\n    apply_hw_ila_trigger C:/Data/ila1_triggers.tas \n    \n\nSee Also:\n\n   *  current_hw_device\n   *  current_hw_ila\n   *  get_hw_ilas\n   *  program_hw_device\n   *  run_hw_ila\n   *  write_bitstream\n",
"update_clock_routing": "update_clock_routing\n\nDescription: \nUpdate clock routing on global clocks if they are modified after placement\n\nSyntax: \nupdate_clock_routing  [-pin <args>] [-net <args>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-pin]      A single pin (pin should be already unrouted)\n  [-net]      A single net (net should be already unrouted)\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nTools, Tcl\n\nDescription:\n\n  The update_clock_routing command is an advanced command used for manually\n  updating the routing structures of all global clocks in designs targeting\n  the UltraScale and UltraScale+ architectures. The command operates on all global clocks in a\n  design, not individual clocks.\n\n  Due to a more flexible clocking architecture, Versal, UltraScale and UltraScale+\n  designs require a two-step process for routing global clocks. First the\n  Vivado placer assigns the routing resources required to route the global\n  clocks from the clock source to the destination clock regions (CLOCK_ROOT\n  or USER_CLOCK_ROOT). Next the Vivado router fills in the routing gaps on\n  the clock nets. In between these two steps the resulting structures are\n  called gap trees: each global clock net has its base routing resources\n  assigned but with large routing gaps where no routing resources have been\n  assigned.\n\n  After gap trees are constructed, the router optimally routes the remaining\n  clock network to all leaf-level primitives to fill in the routing gaps.\n  During an implementation run the global clock routing is handled\n  automatically. However in cases where the clock tree has been changed after\n  implementation, by modifying the USER_CLOCK_ROOT property on a clock net\n  for instance, the Vivado tool may need the update_clock_routing command to\n  properly rebuild the gap trees and fill in the routing gaps.\n\n  Examples of this include:\n\n   *  Moving the clock root of a global clock.\n\n   *  Adding or moving loads of a global clock into a clock region not yet\n      occupied by the global clock, then running timing analysis on the\n      updated design.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following examples update the USER_CLOCK_ROOT property on the specified\n  clock nets, unroutes the nets, and then updates the clock routing. In the second\n  example we use -pin and -net to specify a single unrouted pin and net\n  respectively.\n\n    set_property USER_CLOCK_ROOT X1Y0 [get_nets {clk1 clk2}]  \n    route_design -unroute -nets [get_nets {clk1 clk2}]  \n    update_clock_routing\n\n    set_property USER_CLOCK_ROOT X1Y0 [get_nets {clk1 clk2}]\n    route_design -unroute -nets [get_nets {clk1 clk2}]\n    update_clock_routing -pin [get_pins pin1]\n    update_clock_routing -net [get_nets clk2]\n       \n  Note: The unroute command is needed to clean out existing clock routing on\n  the clock nets before updating the clock routing.\n\nSee Also:\n\n   *  route_design\n   *  set_property\n",
"pr_recombine": "pr_recombine\n\nDescription: \nRe-establish a parent cell as a Reconfigurable Partition while removing a lower-level Reconfigurable Partition when using the Hierarchical Dynamic Function eXchange solution.\n\nSyntax: \npr_recombine  [-cell <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-cell]     (Required) Specify reconfigurable container module name\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nFileIO\n",
"set_min_delay": "set_min_delay\n\nDescription: \nSpecify minimum delay for timing paths\n\nSyntax: \nset_min_delay  [-rise] [-fall] [-reset_path] [-from <args>] [-rise_from <args>]\n               [-fall_from <args>] [-to <args>] [-rise_to <args>]\n               [-fall_to <args>] [-through <args>] [-rise_through <args>]\n               [-fall_through <args>] [-quiet] [-verbose] <delay>\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-rise]          Delay value applies to rising path delays\n  [-fall]          Delay value applies to falling path delays\n  [-reset_path]    Reset this path before setting min delay\n  [-from]          List of path startpoints or clocks\n  [-rise_from]     Apply to paths rising from the list of startpoints or \n                   clocks\n  [-fall_from]     Apply to paths falling from the list of startpoints or \n                   clocks\n  [-to]            List of path endpoints or clocks\n  [-rise_to]       Apply to paths with rise transition at the list of \n                   endpoints or clocks\n  [-fall_to]       Apply to paths with fall transition at the list of \n                   endpoints or clocks\n  [-through]       List of through pins, cells or nets\n  [-rise_through]  Apply to paths rising through pins, cells or nets\n  [-fall_through]  Apply to paths falling through pins, cells or nets\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n  <delay>          Delay value\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Sets the minimum delay allowed on a timing path, specified in nanoseconds\n  (ns). The specified delay value is assigned to both the rising and falling\n  edges of the defined timing paths unless the -rise or -fall arguments are\n  specified.\n\n  Note: The minimum rising and falling delay cannot be greater than the\n  maximum rising and falling delay on the same path. If this happens, the\n  first assigned delay value is removed from the timing path and reset to 0.\n\n  The delay value must be assigned to a timing path as defined by at least\n  one -from, -through, or -to argument. A general path delay such as -to\n  endpoint will be over written by a more specific path definition such as\n  -from/-to, or -from/-through/-to path definition.\n\n  This command operates silently and does not return direct feedback of its\n  operation.\n\nArguments:\n\n  -rise - (Optional) Apply the delay value to the rising edge of the timing\n  path.\n\n  -fall - (Optional) Apply the delay value to the falling edge of the timing\n  path.\n\n  -reset_path - (Optional) Clear existing rising or falling edge min delays\n  before applying the new specified path delay. If only -to is specified all\n  paths leading to the specified endpoints are cleared. If only -from is\n  specified, all paths leading from the specified starting points are\n  cleared. When -from/-to or -from/-through/-to are specified, the defined\n  paths are reset.\n\n  -from <objects> - (Optional) The starting points of the timing paths that\n  will be assigned the specified delay. A valid startpoint is a primary input\n  or inout port, or the clock pin of a sequential element. If a clock is\n  specified then all the primary input and inout ports related to that clock,\n  as well as all the clock pins of the registers connected to that clock are\n  used as startpoints.\n\n  -rise_from <objects> - (Optional) The starting points of the timing path\n  that will have the specified delay assigned to its rising edge.\n\n  -fall_from <objects> - (Optional) The starting points of the timing path\n  that will have the specified delay assigned to its falling edge.\n\n  -to <objects> - (Optional) The destination objects for the path that will\n  be affected by the minimum delay. A valid endpoint is a primary output or\n  inout port, or the data pin of a sequential element. If a clock is\n  specified then all the primary output and inout ports related to that\n  clock, as well as all the data pins of the registers connected to that\n  clock are used as endpoints.\n\n  -rise_to <objects> - (Optional) The destination objects for the rising-edge\n  path that will be affected by the minimum delay.\n\n  -fall_to <objects> - (Optional) The destination objects for the\n  falling-edge path that will be affected by the minimum delay.\n\n  -through <objects> - (Optional) A list of pins, cell, or nets through which\n  the path affected by the minimum delay travels.\n\n  -rise_through <objects> - (Optional) A list of pins, cell, or nets through\n  which the rising-edge path affected by the minimum delay travels.\n\n  -fall_through <objects> - (Optional) A list of pins, cell, or nets though\n  which the falling-edge path affected by the minimum delay travels.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <delay> - (Required) Specifies the minimum delay value in nanoseconds. The\n  <delay> is specified in nanoseconds (ns) as a positive or negative floating\n  point number, with a default value of 0.\n\nExamples:\n\n  The following example specifies a minimum delay of 20ns between the primary\n  input and output ports (combinational/feedthrough paths):\n\n    set_min_delay 20 -from [all_inputs] -to [all_outputs] \n    \n\n  The following example defines a minimum delay of 20ns for timing paths with\n  endpoints at all primary output ports:\n\n    set_min_delay 20 -to [get_ports -filter {DIRECTION == out}] \n    \n\nSee Also:\n\n   *  get_clocks\n   *  get_nets\n   *  get_ports\n   *  report_timing\n   *  set_max_delay\n",
"load_features": "load_features\n\nDescription: \nLoad Tcl commands for a specified feature.\n\nSyntax: \nload_features  [-quiet] [-verbose] [<features>...]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<features>]  Feature(s) to load, use list_features for a list of available \n                features.\n\nCategories: \nTools\n\nDescription:\n\n  Load the specified features of the Vivado Design Suite into memory.\n\n  In order to reduce the memory footprint of the Vivado Design Suite, there\n  are groups of Tcl commands called 'features' which are unavailable for use\n  until you run a command from that feature set, or unless you explicitly\n  load the feature using the load_features command.\n\n  For example, the load_features simulator command loads the commands for the\n  Vivado simulator, as does directly launching the Vivado simulator using the\n  launch_xsim command.\n\n  To access the complete list of Tcl commands associated with a feature of\n  the Vivado Design Suite, and the help text for these commands, you can load\n  the feature into the application memory using the load_features command\n  without actually running the feature of the tool.\n\n  You can list the features that are available to be loaded using the\n  list_features command. The list of features is dynamic, and changes from\n  release to release.\n\n  The command returns nothing if successful, or an error message if failed.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <features> - List of features to load.\n\nExamples:\n\n  The following example loads the Vivado simulator feature:\n\n    load_features simulator \n    \n\n  The following example loads all of the loadable feature sets of the Vivado\n  Design Suite:\n\n    load_features [list_features] \n    \n\nSee Also:\n\n   *  help\n   *  list_features\n",
"install_encrypted_package": "install_encrypted_package\n\nDescription: \nInstall an IP package previously protected by the encrypt_package command.\n\nSyntax: \ninstall_encrypted_package  [-repo <arg>] [-force] [-quiet] [-verbose]\n                           <archive>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-repo]     A directory containing an IP repo where the IP should be \n              installed to.\n              Default: cwd\n  [-force]    Force the overwrite of an existing output files.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <archive>   Name of file containing the protected IP archive.\n\nCategories: \nFileIO\n",
"write_sdf": "write_sdf\n\nDescription: \nwrite_sdf command generates flat sdf delay files for event simulation\n\nSyntax: \nwrite_sdf  [-process_corner <arg>] [-cell <arg>] [-filter_cell <arg>]\n           [-rename_top <arg>] [-force] [-mode <arg>] [-gzip]\n           [-multithread <arg>] [-quiet] [-verbose] <file>\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-process_corner]  Specify process corner for which SDF delays are \n                     required; Values: slow, fast\n                     Default: slow\n  [-cell]            Root of the design to write, e.g. des.subblk.cpu\n                     Default: whole design\n  [-filter_cell]     Confine sdf instances to those contained within this \n                     hierarchical cell and to nets which contain at least one\n                     pin within this hierarchical cell, e.g. des.subblk.cpu\n                     Default: whole design\n  [-rename_top]      Replace name of top module with custom name e.g. netlist\n                     Default: new top module name\n  [-force]           Overwrite existing SDF file\n  [-mode]            Specify sta (Static Timing Analysis) or timesim (Timing \n                     Simulation) mode for SDF\n                     Default: timesim\n  [-gzip]            write gzipped SDF\n  [-multithread]     Run in multithread mode with specified number of threads\n                     Default: -1\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <file>             File name\n\nCategories: \nFileIO, Simulation, Timing\n\nDescription:\n\n  Writes the timing delays for cells in the design to a Standard Delay Format\n  (SDF) file.\n\n  The output SDF file can be used by the write_verilog command to create\n  Verilog netlists for static timing analysis and timing simulation.\n\nArguments:\n\n  -process_corner [ fast | slow ] - (Optional) Write delays for a specified\n  process corner. Delays are greater in the slow process corner than in the\n  fast process corner. Valid values are `slow` or `fast`. By default, the SDF\n  file is written for the slow process corner.\n\n  -cell <arg> - (Optional) Write the SDF file from a specific cell of the\n  design hierarchy. The default is to create an SDF file for the whole\n  design.\n\n  -rename_top <arg> - (Optional) Rename the top module in the output SDF file\n  as specified.\n\n  -force - (Optional) Forces the overwrite of an existing SDF file of the\n  same name.\n\n  -mode [ timesim | sta ]- (Optional) Specifies the mode to use when writing\n  the SDF file. Valid values are:\n\n   *  timesim - Output an SDF file to be used for timing simulation. This is\n      the default setting.\n\n   *  sta - Output an SDF file to be used for static timing analysis (STA).\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) The file name of the SDF file to write. The SDF file is\n  referenced in the Verilog netlist by the use of the -sdf_anno and -sdf_file\n  arguments of the write_verilog command.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes an SDF file to the specified directory:\n\n    write_sdf C:/Data/FPGA_Design/designOut.sdf \n    \n\nSee Also:\n\n   *  write_verilog\n",
"cd": "cd(n)                 Tcl Built-In Commands                 cd(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       cd - Change working directory\n\nSYNOPSIS\n       cd ?dirName?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Change the current working directory to dirName, or to the\n       home directory (as specified in the HOME environment vari-\n       able)  if  dirName is not given.  Returns an empty string.\n       Note that the current working directory is  a  per-process\n       resource; the cd command changes the working directory for\n       all interpreters  and  (in  a  threaded  environment)  all\n       threads.\n\nEXAMPLES\n       Change to the home directory of the user fred:\n              cd ~fred\n\n       Change to the directory lib that is a sibling directory of\n       the current one:\n              cd ../lib\n\n\nSEE ALSO\n       filename(n), glob(n), pwd(n)\n\n\nKEYWORDS\n       working directory\n\n\n\nTcl                                                         cd(n)\n",
"get_ip_upgrade_results": "get_ip_upgrade_results\n\nDescription: \nGet a list of results for IP upgrades during the current project\n\nSyntax: \nget_ip_upgrade_results  [-srcset <arg>] [-quiet] [-verbose] [<objects>...]\n\nReturns: \nlist of IP upgrade results\n\nUsage: \n  Name         Description\n  ------------------------\n  [-srcset]    (Optional) Specifies the source file set containing the \n               upgraded IP\n               Default: The current source fileset\n               Values: Source set name\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<objects>]  IP to be upgraded\n               Values: IP instance(s) within the design, as returned by \n               'get_ips <instance name>' or 'get_bd_cells <cell name>'\n\nCategories: \nObject, Project, IPFlow\n\nDescription:\n\n  Returns the names of the upgrade_log files for the specified IPs.\n\n  This command is used by the Vivado IDE to populate the IP Status Report\n  window with information from the upgrade_log file. You can use the command\n  to quickly obtain the upgrade_log file name, and then use the appropriate\n  file commands, to read or display the contents.\n\n  This command returns the upgrade_log file names of the specified IP\n  objects, or returns an error if it fails.\n\nArguments:\n\n  -srcset <arg> - (Optional) Specify an alternate source file set to examine\n  for the specified IPs. This lets you change from the default, which is the\n  sources_1 fileset.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) Specify the IP objects to report the upgrade results\n  for. IP objects are returned by the get_ips command.\n\nExample:\n\n  The following example returns the upgrade_log filenames for all IPs in the\n  current fileset:\n\n    get_ip_upgrade_results [get_ips] \n    \n\n  The following example prints the upgrade logs for the upgraded IP to the\n  Tcl console:\n\n    set ipDefs [get_ip_upgrade_results [get_ips]]  \n    for {set x 0} {$x<[llength $ipDefs]} {incr x} {  \n       set ipRoot [file rootname [lindex $ipDefs $x]]  \n       puts 'Upgrade Log for $ipRoot'  \n       set ipDir [get_property IP_DIR [get_ips $ipRoot]]  \n       set ipLog [lindex $ipDefs $x]  \n       set catLog [concat $ipDir/$ipLog]  \n     \n       # Check for file existence, and read file contents  \n       if {[file isfile $catLog]} {  \n          # Open the file for read, save the File Handle  \n          set FH [open $catLog r]  \n          #puts 'Open $FH'  \n          set content [read $FH]   \n          foreach line [split $content \\n] {  \n             # The current line is saved inside $line variable  \n             puts $line  \n          }  \n          close $FH  \n          #puts 'Close $FH'  \n       }  \n    } \n    \n\nSee Also:\n\n   *  current_fileset\n   *  get_ips\n   *  import_ip\n   *  report_ip_status\n   *  upgrade_ip\n",
"get_noc_logical_paths": "get_noc_logical_paths\n\nDescription: \nGet a list of NOC logical paths\n\nSyntax: \nget_noc_logical_paths  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                       [-quiet] [-verbose] [<patterns>]\n\nReturns: \nnoc_logical_path\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the noc_logical_path of these noc_logical_inst.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match noc_logical_path against patterns\n                 Default: *\n\nCategories: \nNOC, Object\n",
"report_ucf_timing": "report_ucf_timing\n\nDescription: \nReport timing paths\n\nSyntax: \nreport_ucf_timing  [-file <arg>] [-append] [-name <arg>] [-return_string]\n                   [-speed <arg>] [-from <args>] [-to <args>] [-thru <args>]\n                   [-min_max <arg>] [-transition <arg>] [-sort_by <arg>]\n                   [-interconnect_type <arg>] [-maxpaths <arg>] [-nworst <arg>]\n                   [-required_times] [-quiet] [-verbose]\n\nUsage: \n  Name                  Description\n  ---------------------------------\n  [-file]               Filename to output results to. (send output to \n                        console if -file is not used)\n  [-append]             Append the results to file, don't overwrite the \n                        results file\n  [-name]               Output the results to GUI panel with this name\n                        Default: results_1\n  [-return_string]      return report as string\n  [-speed]              Speed grade name\n  [-from]               Filter by starting pin or instance name\n  [-to]                 Filter by ending pin or instance name\n  [-thru]               Filter by intermediate pin or instance names\n  [-min_max]            Run max (setup) or min (hold) timing analysis\n  [-transition]         Report rise or fall transitions\n  [-sort_by]            Sort criterion\n  [-interconnect_type]  Interconnect delay type\n  [-maxpaths]           Limit the report to this many paths\n                        Default: 1\n  [-nworst]             Limit the report to this many paths per endpoint\n                        Default: 1\n  [-required_times]     Calculate all required times\n  [-quiet]              Ignore command errors\n  [-verbose]            Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report timing for designs with UCF constraints.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -name <arg> - (Optional) Specifies the name of the results set for the GUI.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -speed [ -1 | -2 | -3 ] - (Optional) Specify the speed grade for the device\n  to report. When not specified, the default is -2.\n\n  -from <args> - (Optional) The starting points of the timing paths to be\n  analyzed. Ports, pins, or cells can be specified as timing path\n  startpoints. You can also specify a clock object, and all startpoints\n  clocked by the named clock will be analyzed.\n\n  -to <args> - (Optional) The endpoints, or destination objects of timing\n  paths to be analyzed. Ports, pins, and cell objects can be specified as\n  endpoints. A clock object can also be specified, in which case endpoints\n  clocked by the named clock are analyzed.\n\n  -thru <args> - (Optional) Consider only paths through the specified pins,\n  cell instance, or nets during timing analysis. You can specify individual\n  -through points in sequence to define a specific path through the design\n  for analysis. The order of the specified through points is important to\n  define a specific path. You can also specify through points with multiple\n  objects, in which case the timing path can pass through any of the\n  specified through objects.\n\n  -min_max [ min | max ] - (Optional) Run max (setup) or min (hold) timing\n  analysis.\n\n  -transition [ rise | fall ] - (Optional) Report rising or falling edge\n  transitions.\n\n  -sort_by [ slack | group ] - (Optional) Sort timing paths in the report by\n  slack values, or by path group. Valid values are slack or group. By\n  default, the report_timing command reports the worst, or -nworst, timing\n  paths in the design. However, with -sort_by group, the report_timingcommand\n  returns the worst, or -nworst, paths of each path group.\n\n  Note: Each clock creates a path group. Path groups can also be defined with\n  the group_path command.\n\n  -interconnect_type <arg> - (Optional) Interconnect delay type\n\n  -max_paths <arg> - (Optional) The maximum number of paths to output when\n  sorted by slack; or the maximum number of paths per path group when sorted\n  by group, as specified by -sort_by. This is specified as a value greater\n  than or equal to 1. By default the report_timing command will report the\n  single worst timing path, or the worst path per path group.\n\n  -nworst <arg> - (Optional) The number of timing paths to output in the\n  timing report. The timing report will return the <N> worst paths based on\n  the specified value, greater than or equal to 1. The default setting is 1.\n\n  -required_times - (Optional) Calculate all required times.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the timing:\n\n    report_ucf_timing \n    \n\nSee Also:\n\n   *  report_timing\n",
"file": "file(n)               Tcl Built-In Commands               file(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       file - Manipulate file names and attributes\n\nSYNOPSIS\n       file option name ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       This  command provides several operations on a file's name\n       or attributes.  Name is the name of a file; if  it  starts\n       with  a tilde, then tilde substitution is done before exe-\n       cuting the command (see the manual entry for filename  for\n       details).  Option indicates what to do with the file name.\n       Any unique abbreviation for  option  is  acceptable.   The\n       valid options are:\n\n       file atime name ?time?\n              Returns  a  decimal string giving the time at which\n              file name was last accessed.  If time is specified,\n              it is an access time to set for the file.  The time\n              is measured in the standard POSIX fashion  as  sec-\n              onds  from  a fixed starting time (often January 1,\n              1970).  If the file does not exist  or  its  access\n              time cannot be queried or set then an error is gen-\n              erated.  On Windows, FAT file systems do  not  sup-\n              port access time.\n\n       file attributes name\n\n       file attributes name ?option?\n\n       file attributes name ?option value option value...?\n              This  subcommand  returns or sets platform specific\n              values associated  with  a  file.  The  first  form\n              returns  a  list of the platform specific flags and\n              their values. The second form returns the value for\n              the  specific  option.  The  third form sets one or\n              more of the values. The values are as follows:\n\n              On Unix, -group gets or sets the group name for the\n              file.  A  group id can be given to the command, but\n              it returns a group name. -owner gets  or  sets  the\n              user  name  of  the  owner of the file. The command\n              returns the owner name, but the numerical id can be\n              passed when setting the owner. -permissions sets or\n              retrieves the octal code that chmod(1) uses.   This\n              command  does  also has limited support for setting\n              using the symbolic attributes for chmod(1), of  the\n              form   [ugo]?[[+-=][rwxst],[...]],  where  multiple\n              symbolic attributes  can  be  separated  by  commas\n              (example: u+s,go-rw add sticky bit for user, remove\n              read and write permissions for group and other).  A\n              simplified  ls  style string, of the form rwxrwxrwx\n              (must be 9 characters), is also supported (example:\n              rwxr-xr-t  is equivalent to 01755).  On versions of\n              Unix supporting file  flags,  -readonly  gives  the\n              value  or  sets or clears the readonly attribute of\n              the file, i.e. the  user  immutable  flag  uchg  to\n              chflags(1).\n\n              On  Windows,  -archive  gives  the value or sets or\n              clears the archive attribute of the  file.  -hidden\n              gives  the  value  or  sets  or  clears  the hidden\n              attribute of the file. -longname will  expand  each\n              path  element  to  its long version. This attribute\n              cannot be set. -readonly gives the value or sets or\n              clears  the readonly attribute of the file. -short-\n              name gives a string where  every  path  element  is\n              replaced  with its short (8.3) version of the name.\n              This attribute cannot be set. -system gives or sets\n              or  clears the value of the system attribute of the\n              file.\n\n              On Mac OS X and Darwin, -creator gives or sets  the\n              Finder  creator  type of the file. -hidden gives or\n              sets or clears the hidden attribute  of  the  file.\n              -readonly  gives  or  sets  or  clears the readonly\n              attribute of the file. -rsrclength gives the length\n              of  the  resource  fork of the file, this attribute\n              can only be set to the value 0,  which  results  in\n              the resource fork being stripped off the file.\n\n       file channels ?pattern?\n              If  pattern  is  not  specified,  returns a list of\n              names of  all  registered  open  channels  in  this\n              interpreter.   If  pattern is specified, only those\n              names matching pattern are returned.   Matching  is\n              determined  using  the  same  rules  as  for string\n              match.\n\n       file copy ?-force? ?--? source target\n\n       file copy ?-force? ?--? source ?source ...? targetDir\n              The first form makes a copy of the file  or  direc-\n              tory source under the pathname target. If target is\n              an existing directory,  then  the  second  form  is\n              used.   The second form makes a copy inside target-\n              Dir of each source file listed.  If a directory  is\n              specified  as  a  source,  then the contents of the\n              directory will be recursively copied  into  target-\n              Dir.  Existing files will not be overwritten unless\n              the -force option is specified (when Tcl will  also\n              attempt  to  adjust  permissions on the destination\n              file or directory if that is necessary to allow the\n              copy  to  proceed).   When  copying within a single\n              filesystem, file copy will copy  soft  links  (i.e.\n              the  links  themselves  are  copied, not the things\n              they point to).  Trying to  overwrite  a  non-empty\n              directory,  overwrite  a  directory with a file, or\n              overwrite a file with a directory will  all  result\n              in  errors even if -force was specified.  Arguments\n              are processed in the order  specified,  halting  at\n              the  first  error,  if  any.  A -- marks the end of\n              switches; the argument following  the  --  will  be\n              treated as a source even if it starts with a -.\n\n       file delete ?-force? ?--? pathname ?pathname ... ?\n              Removes  the  file  or  directory specified by each\n              pathname argument.  Non-empty directories  will  be\n              removed  only  if  the  -force option is specified.\n              When operating on symbolic links, the  links  them-\n              selves  will be deleted, not the objects they point\n              to.  Trying to delete a non-existent  file  is  not\n              considered  an error.  Trying to delete a read-only\n              file will cause the file to be deleted, even if the\n              -force  flags  is  not  specified.   If  the -force\n              option  is  specified  on  a  directory,  Tcl  will\n              attempt  both  to  change  permissions and move the\n              current directory 'pwd' out of the  given  path  if\n              that is necessary to allow the deletion to proceed.\n              Arguments are processed  in  the  order  specified,\n              halting at the first error, if any.  A -- marks the\n              end of switches; the argument following the -- will\n              be  treated  as a pathname even if it starts with a\n              -.\n\n       file dirname name\n              Returns a name comprised of all of the path  compo-\n              nents  in name excluding the last element.  If name\n              is a relative file name and only contains one  path\n              element,  then  returns  '.'.   If name refers to a\n              root  directory,  then  the   root   directory   is\n              returned.  For example,\n                     file dirname c:/\n              returns c:/.\n\n              Note that tilde substitution will only be performed\n              if it is necessary to  complete  the  command.  For\n              example,\n                     file dirname ~/src/foo.c\n              returns ~/src, whereas\n                     file dirname ~\n              returns /home (or something similar).\n\n       file executable name\n              Returns 1 if file name is executable by the current\n              user, 0 otherwise.\n\n       file exists name\n              Returns 1 if file name exists and the current  user\n              has  search  privileges for the directories leading\n              to it, 0 otherwise.\n\n       file extension name\n              Returns all of the characters  in  name  after  and\n              including the last dot in the last element of name.\n              If there is no dot in the last element of name then\n              returns the empty string.\n\n       file isdirectory name\n              Returns 1 if file name is a directory, 0 otherwise.\n\n       file isfile name\n              Returns 1 if file name is a regular file, 0  other-\n              wise.\n\n       file join name ?name ...?\n              Takes  one  or  more  file names and combines them,\n              using the correct path separator  for  the  current\n              platform.   If  a particular name is relative, then\n              it will be joined to the previous file  name  argu-\n              ment.   Otherwise,  any  earlier  arguments will be\n              discarded, and joining will proceed from  the  cur-\n              rent argument.  For example,\n                     file join a b /foo bar\n              returns /foo/bar.\n\n              Note  that any of the names can contain separators,\n              and that the result is  always  canonical  for  the\n              current platform: / for Unix and Windows.\n\n       file link ?-linktype? linkName ?target?\n              If  only  one  argument  is given, that argument is\n              assumed to be linkName, and  this  command  returns\n              the  value  of the link given by linkName (i.e. the\n              name of the file it points to).  If linkName is not\n              a  link  or its value cannot be read (as, for exam-\n              ple, seems to be the case with  hard  links,  which\n              look  just  like  ordinary files), then an error is\n              returned.\n\n              If 2 arguments are given, then these are assumed to\n              be linkName and target. If linkName already exists,\n              or if target does  not  exist,  an  error  will  be\n              returned.  Otherwise, Tcl creates a new link called\n              linkName which points to  the  existing  filesystem\n              object  at  target  (which  is  also  the  returned\n              value), where the type of the link is platform-spe-\n              cific   (on  Unix  a  symbolic  link  will  be  the\n              default).  This is useful for the  case  where  the\n              user  wishes  to  create a link in a cross-platform\n              way, and does not care what type of  link  is  cre-\n              ated.\n\n              If  the  user  wishes  to make a link of a specific\n              type only, (and signal an error if for some  reason\n              that  is not possible), then the optional -linktype\n              argument should  be  given.   Accepted  values  for\n              -linktype are '-symbolic' and '-hard'.\n\n              On  Unix,  symbolic  links  can be made to relative\n              paths, and those paths  must  be  relative  to  the\n              actual linkName's location (not to the cwd), but on\n              all other platforms where relative  links  are  not\n              supported, target paths will always be converted to\n              absolute, normalized form before the link  is  cre-\n              ated  (and therefore relative paths are interpreted\n              as relative  to  the  cwd).   Furthermore,  '~user'\n              paths  are  always expanded to absolute form.  When\n              creating links on filesystems that  either  do  not\n              support  any  links, or do not support the specific\n              type requested, an error message will be  returned.\n              In  particular Windows 95, 98 and ME do not support\n              any links at present, but most Unix platforms  sup-\n              port  both  symbolic and hard links (the latter for\n              files only) and Windows NT/2000/XP (on NTFS drives)\n              support  symbolic  directory  links  and  hard file\n              links.\n\n       file lstat name varName\n              Same as stat option (see  below)  except  uses  the\n              lstat kernel call instead of stat.  This means that\n              if name refers to a symbolic link  the  information\n              returned in varName is for the link rather than the\n              file it refers to.  On systems that do not  support\n              symbolic links this option behaves exactly the same\n              as the stat option.\n\n       file mkdir dir ?dir ...?\n              Creates each directory specified.  For  each  path-\n              name  dir  specified,  this command will create all\n              non-existing parent  directories  as  well  as  dir\n              itself.   If  an  existing  directory is specified,\n              then no action is taken and no error  is  returned.\n              Trying  to overwrite an existing file with a direc-\n              tory will result in an error.  Arguments  are  pro-\n              cessed in the order specified, halting at the first\n              error, if any.\n\n       file mtime name ?time?\n              Returns a decimal string giving the time  at  which\n              file name was last modified.  If time is specified,\n              it is a modification  time  to  set  for  the  file\n              (equivalent  to  Unix touch).  The time is measured\n              in the standard POSIX fashion  as  seconds  from  a\n              fixed  starting  time  (often January 1, 1970).  If\n              the file does not exist or its modified time cannot\n              be queried or set then an error is generated.\n\n       file nativename name\n              Returns  the  platform-specific  name  of the file.\n              This is useful if the filename is needed to pass to\n              a  platform-specific  call, such as to a subprocess\n              via exec under Windows (see EXAMPLES below).\n\n       file normalize name\n              Returns a unique normalized path representation for\n              the  file-system  object  (file,  directory,  link,\n              etc), whose string value can be used  as  a  unique\n              identifier  for  it.  A normalized path is an abso-\n              lute path which has all  '../'  and  './'  removed.\n              Also  it  is  one which is in the 'standard' format\n              for the native platform.  On Unix, this  means  the\n              segments  leading  up  to  the path must be free of\n              symbolic links/aliases (but the very last path com-\n              ponent  may  be a symbolic link), and on Windows it\n              also means we want the long form with  that  form's\n              case-dependence  (which  gives  us  a unique, case-\n              dependent path).  The one exception concerning  the\n              last  link in the path is necessary, because Tcl or\n              the user may wish to operate on the actual symbolic\n              link  itself (for example file delete, file rename,\n              file copy are defined to operate on symbolic links,\n              not on the things that they point to).\n\n       file owned name\n              Returns  1  if  file  name  is owned by the current\n              user, 0 otherwise.\n\n       file pathtype name\n              Returns one of absolute, relative,  volumerelative.\n              If  name  refers  to  a specific file on a specific\n              volume, the path type will  be  absolute.  If  name\n              refers  to  a  file relative to the current working\n              directory, then the path type will be relative.  If\n              name refers to a file relative to the current work-\n              ing directory on a specified volume, or to  a  spe-\n              cific  file on the current working volume, then the\n              path type is volumerelative.\n\n       file readable name\n              Returns 1 if file name is readable by  the  current\n              user, 0 otherwise.\n\n       file readlink name\n              Returns  the  value  of  the symbolic link given by\n              name (i.e. the name of the file it points to).   If\n              name  is npt a symbolic link or its value cannot be\n              read, then an error is returned.  On  systems  that\n              do  not support symbolic links this option is unde-\n              fined.\n\n       file rename ?-force? ?--? source target\n\n       file rename ?-force? ?--? source ?source ...? targetDir\n              The first form takes the file or  directory  speci-\n              fied  by  pathname source and renames it to target,\n              moving the file if the pathname target specifies  a\n              name  in  a  different  directory.  If target is an\n              existing directory, then the second form  is  used.\n              The second form moves each source file or directory\n              into the directory targetDir. Existing  files  will\n              not  be  overwritten  unless  the  -force option is\n              specified.  When operating inside a single filesys-\n              tem, Tcl will rename symbolic links rather than the\n              things that they point to.  Trying to  overwrite  a\n              non-empty  directory,  overwrite a directory with a\n              file, or a file with a directory will all result in\n              errors.  Arguments are processed in the order spec-\n              ified, halting at the first error, if  any.   A  --\n              marks  the  end of switches; the argument following\n              the -- will be treated  as  a  source  even  if  it\n              starts with a -.\n\n       file rootname name\n              Returns all of the characters in name up to but not\n              including the last '.'  character in the last  com-\n              ponent of name.  If the last component of name does\n              not contain a dot, then returns name.\n\n       file separator ?name?\n              If no argument  is  given,  returns  the  character\n              which  is used to separate path segments for native\n              files on this platform.  If a path  is  given,  the\n              filesystem  responsible  for  that path is asked to\n              return its separator character.  If no file  system\n              accepts name, an error is generated.\n\n       file size name\n              Returns  a  decimal  string giving the size of file\n              name in bytes.  If the file does not exist  or  its\n              size  cannot be queried then an error is generated.\n\n       file split name\n              Returns a list whose elements are the  path  compo-\n              nents  in name.  The first element of the list will\n              have the same path type as name.   All  other  ele-\n              ments  will  be  relative.  Path separators will be\n              discarded unless they are  needed  ensure  that  an\n              element  is  unambiguously  relative.  For example,\n              under Unix\n                     file split /foo/~bar/baz\n              returns /  foo  ./~bar  baz to  ensure  that  later\n              commands  that  use  the  third  component  do  not\n              attempt to perform tilde substitution.\n\n       file stat  name varName\n              Invokes the stat kernel call on name, and uses  the\n              variable  given  by  varName  to  hold  information\n              returned from the kernel call.  VarName is  treated\n              as an array variable, and the following elements of\n              that variable are set: atime, ctime, dev, gid, ino,\n              mode,  mtime, nlink, size, type, uid.  Each element\n              except type is a decimal string with the  value  of\n              the corresponding field from the stat return struc-\n              ture; see the manual entry for stat for details  on\n              the meanings of the values.  The type element gives\n              the type of the file in the same form  returned  by\n              the  command  file  type.   This command returns an\n              empty string.\n\n       file system name\n              Returns a list of one or two elements, the first of\n              which  is the name of the filesystem to use for the\n              file, and the second, if given, an arbitrary string\n              representing the filesystem-specific nature or type\n              of the  location  within  that  filesystem.   If  a\n              filesystem  only  supports  one  type  of file, the\n              second element may not be  supplied.   For  example\n              the native files have a first element 'native', and\n              a second element which when given  is  a  platform-\n              specific  type  name  for  the  file's system (e.g.\n              'NTFS', 'FAT', on Windows).  A generic virtual file\n              system might return the list 'vfs ftp' to represent\n              a file on a remote ftp site mounted  as  a  virtual\n              filesystem  through  an extension called 'vfs'.  If\n              the file does not  belong  to  any  filesystem,  an\n              error is generated.\n\n       file tail name\n              Returns  all of the characters in the last filesys-\n              tem component of name.  Any trailing directory sep-\n              arator  in  name  is  ignored.  If name contains no\n              separators then returns name.  So, file  tail  a/b,\n              file tail a/b/ and file tail b all return b.\n\n       file type name\n              Returns  a  string  giving  the  type of file name,\n              which will be one of file, directory, characterSpe-\n              cial, blockSpecial, fifo, link, or socket.\n\n       file volumes\n              Returns  the  absolute paths to the volumes mounted\n              on the system, as a proper Tcl list.   Without  any\n              virtual  filesystems  mounted  as  root volumes, on\n              UNIX, the command will always return '/', since all\n              filesystems  are  locally  mounted.  On Windows, it\n              will return a list of the  available  local  drives\n              (e.g.   'a:/  c:/').  If any virtual filesystem has\n              mounted additional volumes, they  will  be  in  the\n              returned list.\n\n       file writable name\n              Returns  1  if file name is writable by the current\n              user, 0 otherwise.\n\nPORTABILITY ISSUES\n       Unix\n              These commands always operate using the  real  user\n              and group identifiers, not the effective ones.\n\nEXAMPLES\n       This  procedure shows how to search for C files in a given\n       directory that have a correspondingly-named object file in\n       the current directory:\n              proc findMatchingCFiles {dir} {\n                 set files {}\n                 switch $::tcl_platform(platform) {\n                    windows {\n                       set ext .obj\n                    }\n                    unix {\n                       set ext .o\n                    }\n                 }\n                 foreach file [glob -nocomplain -directory $dir *.c] {\n                    set objectFile [file tail [file rootname $file]]$ext\n                    if {[file exists $objectFile]} {\n                       lappend files $file\n                    }\n                 }\n                 return $files\n              }\n\n       Rename  a file and leave a symbolic link pointing from the\n       old location to the new place:\n              set oldName foobar.txt\n              set newName foo/bar.txt\n              # Make sure that where we're going to move to exists...\n              if {![file isdirectory [file dirname $newName]]} {\n                 file mkdir [file dirname $newName]\n              }\n              file rename $oldName $newName\n              file link -symbolic $oldName $newName\n\n       On Windows, a file can be 'started' easily enough (equiva-\n       lent  to  double-clicking on it in the Explorer interface)\n       but the name passed to the operating  system  must  be  in\n       native format:\n              exec {*}[auto_execok start] {} [file nativename ~/example.txt]\n\nSEE ALSO\n       filename(n),  open(n), close(n), eof(n), gets(n), tell(n),\n       seek(n), fblocked(n), flush(n)\n\nKEYWORDS\n       attributes, copy files,  delete  files,  directory,  file,\n       move files, name, rename files, stat\n\n\n\nTcl                            8.3                        file(n)\n",
"create_gui_custom_command": "create_gui_custom_command\n\nDescription: \nCreate a custom command in the GUI\n\nSyntax: \ncreate_gui_custom_command  -name <arg> [-menu_name <arg>] [-description <arg>]\n                           [-show_on_toolbar] [-run_proc <arg>]\n                           [-toolbar_icon <arg>] [-command <arg>]\n                           [-tcl_file <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                Description\n  -------------------------------\n  -name               Unique name of the command to create.\n  [-menu_name]        Menu name for the custom command.\n  [-description]      Display this text for the description of the menu item \n                      and optionally the toolbar button\n  [-show_on_toolbar]  Add this command to the toolbar\n  [-run_proc]         Needed when '-command' and 'tcl_file' options are both \n                      specified.\n                      If true, gui button will run command mentioned in \n                      '-command' option otherwise source script mentioned in \n                      '-tcl_file' option\n  [-toolbar_icon]     The full path to the PNG or JPEG file to display on the\n                      toolbar button\n  [-command]          The command to execute\n  [-tcl_file]         The full path to the Tcl file to source\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  This commands creates a GUI menu item for a user custom command. The menu\n  command appears in the Tools > Custom Commands menu in the Vivado IDE.\n\n  The custom GUI command can also be shown/hidden on the toolbar menu. When\n  the GUI button is clicked the custom command is executed. A Tcl file can\n  also be sourced when the GUI button is clicked.\n\n  You can use the get_gui_custom_commands to determine the list of\n  user-defined custom commands.\n\nArguments:\n\n  -name - (Required) Unique name of the command to create.\n\n  -menu_name - (Optional) Menu name for the custom command.\n\n  -description - (Optional) Display this text for the description of the menu\n  item and optionally the toolbar button\n\n  -show_on_toolbar - (Optional) Add this command to the toolbar\n\n  -run_proc - (Optional) Needed when both -command and -tcl_file options are\n  specified. If TRUE, the menu command will run the specified -command,\n  otherwise source the Tcl script specified by -tcl_file.\n\n  -toolbar_icon - (Optional) The full path to the PNG or JPEG file to display\n  on the toolbar button\n\n  -command - (Optional) The command to be executed.\n\n  -tcl_file - (Optional) The full path to the Tcl file to source.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example creates a GUI custom command with name\n  'print_version', and adds it to the toolbar.\n\n    create_gui_custom_command -name print_version -command 'version' \\ \n    -description 'Gets tool version' -show_on_toolbar\n\nSee Also:\n\n   *  create_gui_custom_command_arg\n   *  get_gui_custom_command_args\n   *  get_gui_custom_commands\n   *  remove_gui_custom_command_arg\n   *  remove_gui_custom_command\n",
"compile_simlib": "compile_simlib\n\nDescription: \nCompile simulation libraries\n\nSyntax: \ncompile_simlib  [-directory <arg>] [-family <arg>] [-force] [-language <arg>]\n                [-library <arg>] [-print_library_info <arg>] -simulator <arg>\n                [-simulator_exec_path <arg>] [-gcc_exec_path <arg>]\n                [-source_library_path <arg>] [-no_ip_compile]\n                [-no_systemc_compile] [-skip_libraries <args>] [-quiet]\n                [-verbose]\n\nUsage: \n  Name                    Description\n  -----------------------------------\n  [-directory]            Directory path for saving the compiled results\n                          Default: .\n  [-family]               Select device architecture\n                          Default: all\n  [-force]                Overwrite the pre-compiled libraries\n  [-language]             Compile libraries for this language\n                          Default: all\n  [-library]              Select library to compile\n                          Default: all\n  [-print_library_info]   Print Pre-Compiled library information\n  -simulator              Compile libraries for this simulator\n  [-simulator_exec_path]  Use simulator executables from this directory\n  [-gcc_exec_path]        Use GNU executables from this directory\n  [-source_library_path]  If specified, this directory will be searched for \n                          the library source files before searching the \n                          default path(s) found in environment variable \n                          XILINX_VIVADO for Vivado\n  [-no_ip_compile]        Do not compile IP static files from repository\n  [-no_systemc_compile]   Do not compile models for system simulation\n  [-skip_libraries]       Name of the libraries to skip for compilation\n  [-quiet]                Ignore command errors\n  [-verbose]              Suspend message limits during command execution\n\nCategories: \nSimulation\n\nDescription:\n\n  Compile Xilinx simulation libraries for the cells and IP used in the\n  current project, or from a specified directory for use in multiple design\n  projects.\n\n  The Vivado Design Suite provides simulation models as a set of files and\n  libraries that contain the behavioral and timing models for use by the\n  Vivado simulator. The compile_simlib command compiles these libraries for\n  use by third-party simulators prior to design simulation. Libraries must\n  generally be compiled or recompiled with a new software release to update\n  simulation models and to support a new version of a simulator.\n\n  Important: You should rerun the compile_simlib command any time a new third\n  party simulator will be used, or a new Vivado Design Suite version or\n  update is installed.\n\n  When this command is run from a current project, the tool will use the\n  device family, target language, and library settings specified by the\n  project as the default values, rather than the default settings of the\n  command defined below. The default settings can be overridden by specifying\n  the necessary options when the command is run.\n\n  The compile_simlib command uses simulator compilation directives when\n  compiling the simulation libraries. You can edit the default configuration\n  settings using the config_compile_simlib command.\n\n  The command returns information related to the compiled libraries, or an\n  error if it fails.\n\nArguments:\n\n  -directory <arg> - (Optional) Directory path for saving the compiled\n  library results.\n\n  Note: By default, the libraries are saved in the current working directory\n  in Non-Project mode, and the libraries are saved in\n  <project>/<project>.cache/compile_simlib directory in Project mode. Refer\n  to the Vivado Design Suite User Guide: Design Flows Overview (UG892) for\n  more information on Project and Non-Project modes.\n\n  -family <arg> - (Optional) Compile simulation libraries for the specified\n  device family. If this switch is not specified, the libraries for all\n  families will be compiled.\n\n  <arg>: all, kintex7, virtex7, artix7, spartan7, zynq, kintexu, kintexuplus,\n  virtexu, virtexuplus, artixuplus, zynquplus, zynquplusrfsoc, versal\n\n   *  all (generate libraries for all device families, the default)\n\n   *  kintex7 - Kintex-7 family\n\n   *  virtex7 - Virtex-7 family\n\n   *  artix7 - Artix-7 family\n\n   *  spartan7 - Spartan-7 family\n\n   *  zynq - Zynq-7000 family\n\n   *  kintexu - Kintex UltraScale family\n\n   *  kintexuplus - Kintex UltraScale+ family\n\n   *  virtexu - Virtex UltraScale family\n\n   *  virtexuplus - Virtex UltraScale+ family\n\n   *  artixuplus - Artix UltraScale+ family\n\n   *  zynquplus - Zynq UltraScale+ family\n\n   *  zynquplusrfsoc - Zynq UltraScale+ RFSoCs family\n\n   *  versal - Versal ACAP family\n\n  -force - (Optional) Overwrite the current pre-compiled libraries.\n\n  -language [ verilog | vhdl | all ] - (Optional) This option is only needed\n  for use with -no_ip_compile, and will compile base simulation libraries for\n  the specified language. If this option is not specified then the language\n  will be set according to the simulator selected with -simulator. For\n  multi-language simulators both Verilog and VHDL libraries will be compiled.\n\n  Tip: By default, compile_simlib compiles simulation libraries for IP, and\n  compiles all languages for the IP.\n\n  -library <arg> - (Optional) Specify the simulation library to compile. As a\n  default, the compile_simlib command will compile all simulation libraries.\n  Valid values are:\n\n   *  all (the default)\n\n   *  unisim\n\n   *  simprim\n\n  To specify multiple libraries, repeat the -lib options for each library.\n  For example:\n\n    .. -library unisim -library simprim ..\n\n  -print_library_info - (Optional) Print the library information for the\n  compiled simulation library.\n\n  -simulator <arg> - (Required) Compile simulation libraries for the\n  specified simulator.\n\n  <arg>: modelsim, questa (or questasim), xcelium, vcs (or vcs_mx),\n  riviera, activehdl (or active_hdl)\n\n   *  modelsim - ModelSim Simulator version 2022.2 or later\n\n   *  questa - Questa Advanced Simulator version 2022.2 or later\n\n   *  xcelium - (Linux only) Xcelium Parallel Simulator version 21.09.009 or\n      later\n\n   *  vcs_mx - (Linux only) Verilog Compiler Simulator version S-2021.09-SP2\n      or later\n\n   *  riviera - Riviera-PRO Simulator version 2022.04 or later\n\n   *  activehdl - (Windows only) Active-HDL Simulator version 13.0\n\n  -simulator_exec_path <arg> - (Optional) Specify the directory to locate the\n  third-party compiler and simulator executables. This option is required if\n  the target simulator is not specified in the $PATH or %PATH% environment\n  variable; or to override the path from the $PATH or %PATH% environment\n  variable.\n\n  -gcc_exec_path <arg> - (Optional) Specify the directory to locate the\n  third-party simulator GCC executables. If this switch is not specified,\n  then the directory path will be determined from the path set by the\n  GCC_SIM_EXE_PATH environment variable. If this variable is not set, then\n  compile_simlib will automatically try to calculate the path from the\n  simulator installation. If not able to determine, the path will be then\n  searched from the $PATH (Linux) or %PATH% (Windows) environment variable.\n\n  Supported GCC versions.\n\n   *  questa - 7.4.0\n\n   *  xcelium - 9.3.0\n\n   *  vcs - 9.2.0\n\n   *  riviera - 9.3.0\n\n  -source_library_path <arg> - (Optional) If specified, this directory will\n  be searched for the library source files before searching the default\n  path(s) defined by the environment variables ($XILINX or $XILINX_VIVADO).\n\n  Note: Do not use this option unless explicitly instructed to by Xilinx\n  Technical Support.\n\n  -skip_libraries <arg> - (Optional) Disables the compilation of specified\n  libraries.\n\n  <arg>: [list <lib1> <lib2> ... <libn>]\n\n  -no_ip_compile - (Optional) Disables the compilation of simulation files\n  for IP in the design or the specified repositories. By default, the\n  compile_simlib command compiles the static simulation files for all IP in\n  the IP catalog, including added user and third-party repositories. Use this\n  option to disable that feature.\n\n  -no_systemc_compile - (Optional) Disables the compilation of Systemc/C++/C\n  based IPs. If your design does not need to be verified for system\n  simulation then you can specify this option.\n\n  Note: By default, the compile_simlib command will compile these IPs.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  Compile UNISIM and SIMPRIM libraries for ModelSim (VHDL) for a design using\n  a Virtex-7 device.\n\n    compile_simlib -simulator modelsim -family virtex7 -library unisim \\\n       -library simprim -language vhdl\n\nSee Also:\n\n   *  config_compile_simlib\n   *  export_simulation\n   *  launch_simulation\n",
"delete_drc_ruledeck": "delete_drc_ruledeck\n\nDescription: \nDelete one or more user defined DRC rule deck objects\n\nSyntax: \ndelete_drc_ruledeck  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n                     [<patterns>]\n\nReturns: \ndrc_ruledeck\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching. (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match the 'drc_ruledeck' objects against patterns.\n                Default: *\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Delete one or more user-defined drc_ruledeck objects from the current\n  project. The rule deck does not have to be empty to be deleted, and once it\n  is deleted there is no way to recover it. The undo command will not restore\n  a deleted rule deck.\n\n  Note: You cannot delete factory defined rule decks.\n\n  A rule deck is a collection of design rule checks grouped for convenience,\n  to be run with the report_drc command at different stages of the FPGA\n  design flow, such as during I/O planning or placement. The tool comes with\n  a set of factory defined rule decks, but you can also create new\n  user-defined rule decks with the create_drc_ruledeck command.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  the search pattern, based on specified property values. You can find the\n  properties on an object with the report_property or list_property commands.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Delete the drc_ruledeck objects that match the\n  specified patterns. The default pattern is the wildcard `*` which deletes\n  all user-defined rule decks from the current project. More than one pattern\n  can be specified to delete multiple rule decks based on different search\n  criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example deletes all user-defined rule decks from the current\n  project:\n\n    delete_drc_ruledeck \n    \n\nSee Also:\n\n   *  create_drc_ruledeck\n   *  list_property\n   *  report_property\n",
"report_phys_opt": "report_phys_opt\n\nDescription: \nReport details of Physical Synthesis transformations.\n\nSyntax: \nreport_phys_opt  [-file <arg>] [-append] [-return_string] [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Output file\n  [-append]         Append the results to file\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Reports the results of the fanout driver replication and load\n  redistribution optimizations performed by the phys_opt_design command.\n\nArguments:\n\n  -file <arg> - (Optional) Write the physical optimization report into the\n  specified file. The specified file will be overwritten if one already\n  exists, unless -append is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output of the report to a Tcl\n  string. The Tcl string can be captured by a variable definition and parsed\n  or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the physical optimizations performed in the\n  current design by the phys_opt_design command:\n\n    report_phys_opt -file C:/Data/physOpt_Report.txt \n    \n\nSee Also:\n\n   *  phys_opt_design\n",
"delete_power_rails": "delete_power_rails\n\nDescription: \nDelete a Power Rail\n\nSyntax: \ndelete_power_rails  [-quiet] [-verbose] <power_rail>\n\nUsage: \n  Name          Description\n  -------------------------\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <power_rail>  power rail to delete\n\nCategories: \nXDC, Floorplan\n",
"report_carry_chains": "report_carry_chains\n\nDescription: \nReport carry chains\n\nSyntax: \nreport_carry_chains  [-file <arg>] [-append] [-return_string] [-cell <args>]\n                     [-max_chains <arg>] [-quiet] [-verbose]\n\nReturns: \nReport\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Filename to output results to. (send output to console if\n                    -file is not used)\n  [-append]         Append to existing file\n  [-return_string]  Return report as string\n  [-cell]           Report Carry Chains only for given cell\n  [-max_chains]     Number of chains for which report is to be generated\n                    Default: 1\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report the details of the carry chains used by the current open design. The\n  report includes the average depth of all carry chains, as well as the\n  specific depth of each carry chain reported.\n\n  By default, the longest carry chain is reported, but the number of chains\n  reported can be specified.\n\n  The command returns the carry chain report.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the report to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string rather than\n  to the standard output. The Tcl string can be captured by a variable\n  definition and parsed or otherwise processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -cell <arg> - (Optional) Specify a cell to use when analyzing carry chains.\n  When specified, analysis is limited to only the hierarchical cell specified\n  and to any sub-modules of that cell.\n\n  -max_chains <arg> - (Optional) Number of chains to report. By default the\n  longest carry chain is reported.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns the 10 longest carry chains in the design:\n\n    report_carry_chains -max_chains 10 \n    \n",
"report_clock_tree_status": "",
"reset_msg_count": "reset_msg_count\n\nDescription: \nReset message count\n\nSyntax: \nreset_msg_count  [-quiet] [-verbose] <id>\n\nReturns: \nnew message count\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <id>        Unique message Id to be reset, e.g. 'Common 17-99'.\n              'reset_msg_count -id *' reset all counters\n\nCategories: \nReport\n\n\nDescription:\n\n  Reset the message count for the specified message ID to 0. This restarts\n  the message counter toward the specified message limit. This can be used to\n  reset the count of specific messages that may be reaching the limit, or\n  reset the count of all messages returned by the tool.\n\n  Every message delivered by the tool has a unique global message ID that\n  consists of an application sub-system code and a message identifier. This\n  results in a message ID that looks like the following:\n\n    'Common 17-54'\n    'Netlist 29-28'\n    'Synth 8-3295'\n\n  You can get the current message count for a specific message ID using the\n  get_msg_count command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <id> - (Required) Specifies the message ID to reset the count to 0. Specify\n  * to reset the count of all messages to 0.\n\nExamples:\n\n  The following example resets the message count for all messages:\n\n    reset_msg_count *\n\nSee Also:\n\n   *  set_msg_config\n",
"write_chipscope_archive": "write_chipscope_archive\n\nDescription: \nchipscope container\n\nSyntax: \nwrite_chipscope_archive  [-rp <arg>] [-force] [-quiet] [-verbose] <file>\n\nReturns: \nname of the output file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-rp]       rp name\n  [-force]    Overwrite existing file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      container file name\n\nCategories: \nFileIO, Debug\n",
"current_board": "current_board\n\nDescription: \nGet the current board object\n\nSyntax: \ncurrent_board  [-quiet] [-verbose]\n\nReturns: \ncurrent board object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nObject, Board\n\nDescription:\n\n  Returns the board in use in the current project.\n\n  The board file, board.xml located in the data/boards folder of the Vivado\n  Design Suite installation area, stores information regarding board\n  attributes. The board provides a representation of the overall system that\n  the Xilinx device is a part of, and can help define key aspects of the\n  design, such as clock constraints, I/O port assignments, and supported\n  interfaces. You can create custom boards by defining a custom Board\n  Interface file, as described in the Vivado Design Suite User Guide:\n  System-Level Design Entry (UG895).\n\n  The board can be specified:\n\n   *  When the project is created by selecting Boards from the Default Part\n      dialog box.\n\n   *  By setting the BOARD_PART property on the current project as shown in\n      the example.\n\n   *  By selecting the Project Device in the Settings dialog box in an open\n      project in the Vivado IDE.\n\n  Refer to the Vivado Design Suite User Guide: System-Level Design Entry\n  (UG895) for information on creating projects, and on configuring project\n  settings.\n\n  Note: When you specify the board with the set_property command, the target\n  part is also changed to match the part required by the specified BOARD\n  property.\n\n  The current_board command returns the Vendor:Board_Name:File_Version\n  attributes of the current board, as defined in the BOARD_PART property. The\n  command returns nothing when the project targets a Xilinx FPGA instead of a\n  TRD and board, or when the BOARD_PART property has not been defined. The\n  command returns an error if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example sets the BOARD property for the current project, then\n  reports the board in use by the project:\n\n    set_property BOARD_PART xilinx.com:kc705:1.0 [current_project]  \n    current_board  \n       xilinx.com:kintex7:kc705:1.0 \n    \n\n  This example shows the results of setting the BOARD_PART property, causing\n  the target part to be changed as a result. The target part, as defined in\n  the PART property, is changed automatically, and a warning is returned:\n\n    set_property BOARD_PART xilinx.com:ac701:1.0 [current_project]  \n       WARNING: [Project 1-153] The current project part `xc7k325tffg900-2` does   \n       not match with the `XILINX.COM:AC701:1.0` board part settings. The project   \n       part will be reset to `XILINX.COM:AC701:1.0` board part. \n    \n\n  Note: You can use the report_property command to check the BOARD_PART and\n  PART property on the current_project to see the changes.\n\nSee Also:\n\n   *  current_board_part\n   *  current_project\n   *  get_board_components\n   *  get_board_interfaces\n   *  get_board_parts\n   *  get_board_pins\n   *  get_boards\n   *  report_property\n   *  set_property\n",
"get_noc_logical_nets": "get_noc_logical_nets\n\nDescription: \nGet a list of NOC logical nets\n\nSyntax: \nget_noc_logical_nets  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                      [-quiet] [-verbose] [<patterns>]\n\nReturns: \nnoc_logical_net\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the noc_logical_net of these noc_logical_inst.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match noc_logical_net against patterns\n                 Default: *\n\nCategories: \nNOC, Object\n",
"read_mem": "read_mem\n\nDescription: \nRead one or more data files (.mem .mif .dat).\n\nSyntax: \nread_mem  [-quiet] [-verbose] <files>...\n\nReturns: \nlist of file objects that were added\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <files>     Data (.mem .coe .dat) file name(s)\n\nCategories: \nFileIO\n\nDescription:\n\n  This command reads memory files of type MEM, DAT, or COE, and adds the\n  files to the in-memory design, or the current project, to initialize BRAM\n  memory for behavioral simulation, synthesis and post-synthesis simulation.\n\n  If the memory is not initialized in the design, then it will be initialized\n  to all 0s.\n\n  This command returns the name of the files read, or returns an error if it\n  fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) The name of the MEM, DAT, or COE file to read.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example:\n\n    read_mem  C:/Data/design1.mem \n    \n\nSee Also:\n\n   *  generate_mem_files\n   *  write_bmm\n",
"reset_runs": "reset_runs\n\nDescription: \nReset existing run(s).\n\nSyntax: \nreset_runs  [-prev_step] [-from_step <arg>] [-quiet] [-verbose] <runs>\n\nUsage: \n  Name          Description\n  -------------------------\n  [-prev_step]  Reset last run step\n  [-from_step]  First Step to reset\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <runs>        Runs to modify\n\nCategories: \nProject\n\nDescription:\n\n  Resets the specified run(s) to an unimplemented or unsynthesized state. Use\n  this command to reset the run(s) to prepare it to be run again.\n\nArguments:\n\n  -prev_step - (Optional) Reset an implementation run from the last step\n  completed. This can be used to reset an implementation run that is only\n  partially completed because it was launched with the launch_runs -to_step\n  command.\n\n  -from_step <arg> - (Optional) Reset an implementation run from a specified\n  step. This lets you restart a run from the specified step using the\n  launch_runs -next_step command. Valid step values include:\n\n   *  opt_design - Optionally optimize the logical design to more efficiently\n      use the target device resources.\n\n   *  power_opt_design - Optionally optimize elements of the logic design to\n      reduce power demands of the implemented FPGA.\n\n   *  place_design - Place logic cells onto the target device. This is a\n      required step.\n\n   *  power_opt_design (Post-Place) - Optionally optimize power demands of\n      the placed logic elements.\n\n   *  phys_opt_design - Optionally optimize design timing by replicating\n      drives of high-fanout nets to better distribute the loads.\n\n   *  route_design - Route the connections of the design onto the target\n      FPGA. This is a required step.\n\n   *  write_bitstream - Generate a bitstream file for Xilinx device\n      configuration. This is a required step.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <runs> - (Required) The name of the run(s) to reset.\n\nExamples:\n\n  The following example resets the implementation run:\n\n    reset_runs impl_1\n    \n\n  Note: The run directory and its contents will be removed from the hard disk\n  since -noclean_dir is not specified.\n\n  The following example resets the synthesis run, but disables the cleanup of\n  the run directory:\n\n    reset_runs -noclean_dir synth_1\n    \n\n  In this example, because -noclean_dir is specified, the synth_1 run\n  directory is not removed and a new run directory called synth_1_2 will be\n  created when the run is launched.\n\nSee Also:\n\n   *  create_run\n   *  launch_runs\n   *  opt_design\n   *  place_design\n   *  route_design\n",
"read_chipscope_cdc": "read_chipscope_cdc\n\nDescription: \nImport ChipScope Core Inserter CDC file\n\nSyntax: \nread_chipscope_cdc  [-quiet] [-verbose] <file>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      ChipScope CDC file name\n\nCategories: \nFileIO, ChipScope\n\nDescription:\n\n  Reads a ChipScope Definition and Connection (CDC) file to associate with a\n  Netlist Design in the current project. This file stores information about\n  core parameters, and core settings for ChipScope ILA debug cores, and can\n  also be used as input to the ChipScope Pro Analyzer to import signal names.\n\n  The ChipScope CDC file can be written by the tool, or from an ISE project,\n  through the write_chipscope_cdc command.\n\n  If certain parameters of the CDC file are not acceptable to the current\n  project then those parameters will not be imported. For instance, if\n  signals specified for connection to ports do not exist in the current\n  netlist, those signals will be ignored.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - The path and filename of the CDC file to read into. The CDC file\n  defines the debug core to insert, the signals to probe, and the clock\n  domains for those signals.\n\nExamples:\n\n  The following example reads the specified CDC file:\n\n    read_chipscope_cdc C:/Data/FPGA_Design/bft.cdc \n    \n\nSee Also:\n\n   *  create_debug_core\n   *  get_debug_cores\n   *  write_chipscope_cdc\n",
"write_pcf": "",
"delete_clock_networks_results": "delete_clock_networks_results\n\nDescription: \nClear a set of clock networks results from memory\n\nSyntax: \ndelete_clock_networks_results  [-quiet] [-verbose] <name>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name for the set of results to clear\n\nCategories: \nReport\n\nDescription:\n\n  Clear the results of the specified report_clock_networks report from the\n  named result set.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) Specifies the name of the clock networks results to be\n  cleared.\n\nExamples:\n\n  The following example clears the specified results set from memory:\n\n    delete_clock_network_results ClkNets \n    \n\nSee Also:\n\n   *  report_clock_networks\n",
"unload": "unload(n)             Tcl Built-In Commands             unload(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       unload - Unload machine code\n\nSYNOPSIS\n       unload ?switches? fileName\n       unload ?switches? fileName packageName\n       unload ?switches? fileName packageName interp\n_________________________________________________________________\n\nDESCRIPTION\n       This  command  tries to unload shared libraries previously\n       loaded with load from  the  application's  address  space.\n       fileName  is  the  name of the file containing the library\n       file to be unload;  it must be the same  as  the  filename\n       provided to load for loading the library.  The packageName\n       argument is the name of the package (as determined  by  or\n       passed  to  load),  and is used to compute the name of the\n       unload procedure; if not supplied,  it  is  computed  from\n       fileName  in the same manner as load.  The interp argument\n       is the path name of the interpreter from which  to  unload\n       the  package (see the interp manual entry for details); if\n       interp is omitted, it defaults to the interpreter in which\n       the unload command was invoked.\n\n       If  the initial arguments to unload start with - then they\n       are treated as switches.  The following switches are  cur-\n       rently supported:\n\n       -nocomplain\n              Suppresses  all  error  messages. If this switch is\n              given, unload will never report an error.\n\n       -keeplibrary\n              This switch will prevent unload  from  issuing  the\n              operating  system call that will unload the library\n              from the process.\n\n       --     Marks the end of switches.  The argument  following\n              this  one  will be treated as a fileName even if it\n              starts with a -.\n\n   UNLOAD OPERATION\n       When a file containing a shared library is loaded  through\n       the  load  command, Tcl associates two reference counts to\n       the library file. The first counter shows how  many  times\n       the  library  has been loaded into normal (trusted) inter-\n       preters while the second  describes  how  many  times  the\n       library  has been loaded into safe interpreters. As a file\n       containing a shared library can be loaded only once by Tcl\n       (with  the  first  load  call on the file), these counters\n       track how many interpreters use the library.  Each  subse-\n       quent  call  to load after the first simply increments the\n       proper reference count.\n\n       unload works in the opposite direction. As a  first  step,\n       unload  will  check  whether the library is unloadable: an\n       unloadable library exports a special unload procedure. The\n       name  of the unload procedure is determined by packageName\n       and whether or not the target interpreter is a  safe  one.\n       For  normal  interpreters  the  name of the initialization\n       procedure will have the form pkg_Unload, where pkg is  the\n       same  as  packageName except that the first letter is con-\n       verted to upper case and all other letters  are  converted\n       to lower case.  For example, if packageName is foo or FOo,\n       the initialization procedure's name  will  be  Foo_Unload.\n       If  the target interpreter is a safe interpreter, then the\n       name of the initialization procedure will  be  pkg_SafeUn-\n       load instead of pkg_Unload.\n\n       If  unload determines that a library is not unloadable (or\n       unload functionality has  been  disabled  during  compila-\n       tion),  an  error  will  be  returned.   If the library is\n       unloadable, then unload will call the unload procedure. If\n       the  unload  procedure returns TCL_OK, unload will proceed\n       and decrease the proper reference count (depending on  the\n       target  interpreter type). When both reference counts have\n       reached 0, the library will be detached from the  process.\n\n   UNLOAD HOOK PROTOTYPE\n       The unload procedure must match the following prototype:\n              typedef int Tcl_PackageUnloadProc(Tcl_Interp *interp, int flags);\n\n       The  interp argument identifies the interpreter from which\n       the library is to be unloaded.  The unload procedure  must\n       return  TCL_OK  or TCL_ERROR to indicate whether or not it\n       completed successfully;  in  the  event  of  an  error  it\n       should  set  the interpreter's result to point to an error\n       message.  In this case, the result of the  unload  command\n       will be the result returned by the unload procedure.\n\n       The       flags      argument      can      be      either\n       TCL_UNLOAD_DETACH_FROM_INTERPRETER                      or\n       TCL_UNLOAD_DETACH_FROM_PROCESS.  In  case the library will\n       remain attached to the process after the unload  procedure\n       returns  (i.e. because the library is used by other inter-\n       preters),   TCL_UNLOAD_DETACH_FROM_INTERPRETER   will   be\n       defined.  However, if the library is used only by the tar-\n       get interpreter and the library will be detached from  the\n       application  as  soon as the unload procedure returns, the\n       flags argument will be set to  TCL_UNLOAD_DETACH_FROM_PRO-\n       CESS.\n\n   NOTES\n       The unload command cannot unload libraries that are stati-\n       cally linked with the  application.   If  fileName  is  an\n       empty string, then the packageName argument must be speci-\n       fied.\n\n       If packageName is omitted or specified as an empty string,\n       Tcl  tries  to guess the name of the package.  This may be\n       done differently  on  different  platforms.   The  default\n       guess,  which  is  used on most UNIX platforms, is to take\n       the last element of fileName, strip off  the  first  three\n       characters  if  they are lib, and use any following alpha-\n       betic and underline characters as the  module  name.   For\n       example,  the  command unload libxyz4.2.so uses the module\n       name xyz and the command unload bin/last.so  {}  uses  the\n       module name last.\n\nPORTABILITY ISSUES\n       Unix\n              Not  all  unix  operating  systems  support library\n              unloading. Under such an  operating  system  unload\n              returns an error (unless -nocomplain has been spec-\n              ified).\n\nBUGS\n       If the same file is loaded by different fileNames, it will\n       be loaded into the process's address space multiple times.\n       The behavior of this varies from system  to  system  (some\n       systems  may  detect the redundant loads, others may not).\n       In case a library has been silently detached by the  oper-\n       ating  system  (and  as a result Tcl thinks the library is\n       still loaded), it may be dangerous to use unload on such a\n       library  (as  the library will be completely detached from\n       the application while some interpreters will  continue  to\n       use it).\n\nEXAMPLE\n       If  an  unloadable  module in the file foobar.dll had been\n       loaded using the load command like this (on Windows):\n              load c:/some/dir/foobar.dll\n       then it would be unloaded like this:\n              unload c:/some/dir/foobar.dll\n\n       This allows a C code module to  be  installed  temporarily\n       into  a  long-running  Tcl  program and then removed again\n       (either because it is no longer needed or  because  it  is\n       being  updated  with a new version) without having to shut\n       down the overall Tcl process.\n\nSEE ALSO\n       info sharedlibextension, load(n), safe(n)\n\nKEYWORDS\n       binary code, unloading, safe interpreter, shared library\n\n\n\nTcl                            8.5                      unload(n)\n",
"unhighlight_objects": "unhighlight_objects\n\nDescription: \nUnhighlight objects that are currently highlighted\n\nSyntax: \nunhighlight_objects  [-color_index <arg>] [-rgb <args>] [-color <arg>]\n                     [-leaf_cells] [-quiet] [-verbose] [<objects>]\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-color_index]  Color index\n  [-rgb]          RGB color index list\n  [-color]        Valid values are red green blue magenta yellow cyan and \n                  orange\n  [-leaf_cells]   Leaf cells\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  [<objects>]     Objects to unhighlight\n\nCategories: \nGUIControl\n\nDescription:\n\n  This command is for use in GUI mode. This command unhighlights the\n  specified object or objects that were previously highlighted by the\n  highlight_objects command.\n\n  This command supports the color options as specified below. These options\n  can be used to unhighlight all objects currently highlighted in the\n  specified color. See the example below.\n\nArguments:\n\n  -color_index <arg> - (Optional) Valid value is an integer from 1 to 20.\n  Specify the color index to unhighlight. The color index is defined by the\n  Colors > Highlight category of the Tools > Settings dialog box. Refer to\n  the Vivado Design Suite User Guide: Using the IDE (UG893) for more\n  information on setting themes.\n\n  -rgb <args> - (Optional) Specify the color to unhighlight in the form of an\n  RGB code specified as {R G B}. For instance, {255 255 0} specifies the\n  color yellow.\n\n  -color <arg> - (Optional) Specify the color to unhighlight. Supported\n  highlight colors are red, green, blue, magenta, yellow, cyan, and orange.\n\n  -leaf_cells <arg> - (Optional) Specifies one or more cell names or objects\n  to highlight with the specified color.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) Specifies one or more objects to be unhighlighted.\n  If no objects are specified, all highlighted objects of the specified color\n  will be unhighlighted. If no color is specified, all highlighted objects\n  will be unhighlighted.\n\nExamples:\n\n  The following example unhighlights the specified cell objects:\n\n    unhighlight_objects -leaf_cells [get_cells cpuEngine/*]\n\n  The following example unhighlights all objects currently highlighted in the\n  color yellow:\n\n    unhighlight_objects -color yellow \n    \n\nSee Also:\n\n   *  get_selected_objects\n   *  highlight_objects\n",
"create_ip": "create_ip\n\nDescription: \nCreate an instance of a configurable IP and add it to the fileset\n\nSyntax: \ncreate_ip  [-vlnv <arg>] -module_name <arg> [-dir <arg>] [-force]\n           [-allow_hidden] [-vendor <arg>] [-library <arg>] [-name <arg>]\n           [-version <arg>] [-revision <arg>] [-quiet] [-verbose]\n\nReturns: \nlist of file objects that were added\n\nUsage: \n  Name             Description\n  ----------------------------\n  [-vlnv]          VLNV string for the Catalog IP from which the new IP will \n                   be created (colon delimited Vendor, Library, Name, \n                   Version)\n  -module_name     Name for the new IP that will be added to the project\n  [-dir]           Directory path for remote IP to be created and managed \n                   outside the project\n  [-force]         Overwrite existing IP instance; allowed only with -dir \n                   option\n  [-allow_hidden]  Allow hidden cores to be instantiated\n  [-vendor]        IP Vendor name\n  [-library]       IP Library name\n  [-name]          IP Name\n  [-version]       IP Version\n  [-revision]      (Optional) IP core revision\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n\nCategories: \nIPFlow\n\nDescription:\n\n  This command creates an XCI file for a configurable IP core from the IP\n  catalog, and adds it to the source files of the current project. This\n  creates an IP source object which must be instantiated into the HDL design\n  to create an instance of the IP core in the netlist.\n\n  For multiple instances of the same core, simply instantiate the core module\n  into the HDL design as many times as needed. However, to use the same IP\n  core with different customizations, use the create_ip command to create\n  separate IP source objects.\n\n  The create_ip command is used to import IP cores from the current IP\n  catalog. Use the import_ip command to read existing XCI and XCO files\n  directly, without having to add IP to a catalog.\n\n  This command returns a transcript of the IP generation process, concluding\n  with the file path and name of the imported IP core file.\n\n  Note: IP cores are native to Vivado, and can be customized and regenerated\n  within that tool. The convert_ip command lets you to convert legacy IP to\n  native IP supported by Vivado.\n\nArguments:\n\n  -vlnv <arg> - (Optional) Specifies the VLNV string for the existing Catalog\n  IP from which the new IP will be created. The VLNV is the\n  Vendor:Library:Name:Version string which identifies the IP in the catalog.\n  The VLNV string maps to the IPDEF property on the IP core.\n\n  Note: You must specify either -vlnv or all of -vendor, -library, -name, and\n  -version.\n\n  -module_name <arg> - (Required) Specifies the name for the new IP instance\n  that will be created. The module is created with the\n  <module_name>/<module_name>.xci naming convention.\n\n  -dir <arg> - (Optional) The directory to write the IP core files into. If\n  this option is not specified, the IP files (.xci, .veo...) are written in\n  the hierarchy of the <project_name>.srcs directory.\n\n  -force - (Optional) Overwrite an existing IP instance of the same\n  <module_name>, if one exists in the specified directory. All files\n  associated with the existing IP will be overwritten by files associated\n  with the newly created IP. This option can only be used with the -dir\n  option.\n\n  -vendor <arg> - (Optional) Specifies the vendor name for the IP`s creator.\n\n  -library <arg> - (Optional) Specifies the IP library from which the core\n  should be added.\n\n  -name <arg> - (Optional) Specifies the name of the IP core in the catalog.\n\n  -version <arg> - (Optional) Specifies the version number for the IP core.\n\n  Note: You must specify either -vlnv or all of -vendor, -library, -name, and\n  -version.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The example below imports the IP core specified by the -vlnv string, and\n  gives it the specified module name in the current project:\n\n    create_ip -vlnv xilinx.com:ip:c_addsub:11.0 -module_name test_addr \n    \n\n  The following example, from Vivado, creates an IP block with the specified\n  -vendor, -library, -name, -version values, and assigns it the specified\n  module name. After the IP is created, attributes of the IP are customized\n  using set_property commands. Then the instantiation template and the\n  synthesis targets are generated for the IP:\n\n    create_ip -name c_addsub -version 11.0 -vendor xilinx.com -library ip \\  \n       -module_name c_addsub_v11_0_0  \n    set_property CONFIG.COMPONENT_NAME  c_addsub_v11_0_0 \\  \n       [get_ips c_addsub_v11_0_0]  \n    set_property CONFIG.A_WIDTH  32 [get_ips c_addsub_v11_0_0]  \n    set_property CONFIG.B_WIDTH 32 [get_ips c_addsub_v11_0_0]  \n    set_property CONFIG.ADD_MODE Add_Subtract [get_ips c_addsub_v11_0_0]  \n    set_property CONFIG.C_IN true [get_ips c_addsub_v11_0_0]  \n    generate_target  {instantiation_template synthesis} \\  \n       [get_files C:/Data/c_addsub_v11_0_0/c_addsub_v11_0_0.xci \\  \n       -of_objects [get_filesets sources_1]] \n    \n\nSee Also:\n\n   *  convert_ip\n   *  generate_target\n   *  import_ip\n   *  upgrade_ip\n   *  validate_ip\n",
"launch_sdk": "launch_sdk\n\nDescription: \nLaunch Xilinx Software Development Kit (SDK)\n\nSyntax: \nlaunch_sdk  [-bit <arg>] [-bmm <arg>] [-workspace <arg>] [-lp <arg>]\n            [-hwspec <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-bit]        Specify the bitstream file for FPGA programming\n  [-bmm]        Specify the BMM file for BRAM initialization\n  [-workspace]  Specify the workspace directory for SDK projects\n  [-lp]         Add <repository_path> to the list of Driver/OS/Library search\n                directories.\n  [-hwspec]     Specify the hardware platform specification file \n                (<system>.xml)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nToolLaunch\n\nDescription:\n\n  Launch the Software Development Kit (SDK) to design the software for a\n  top-level design that includes a block design with an embedded processor\n  like MicroBlaze, or Zynq-7000 SoC. Block designs are created in the IP\n  integrator of the Vivado Design Suite with the create_bd_design command.\n\n  This command uses the hardware definition file created by the write_sysdef\n  command which is run automatically by the Vivado Design Suite after\n  implementation and bitstream generation. The <top_level_design_name>.sysdef\n  file is found in the runs/impl_1 folder.\n\n  This command returns a transcript of the SDK tool launch.\n\nArguments:\n\n  -bit <arg> - (Optional) Specify the bitstream file for FPGA programming.\n\n  -bmm <arg> - (Optional) Specify the BMM file for BRAM initialization.\n\n  -workspace <arg> - (Optional) Specify the workspace directory for SDK\n  projects. This is the folder in which your software projects are stored.\n\n  -lp <arg> - (Optional) Specify the library, or repository path, for\n  Driver/OS/Library search directories. This is a collection of libraries and\n  drivers that form the lowest layer of your application software stack.\n\n  -hwspec <arg> - (Optional) Specify the hardware definition file created by\n  the write_sysdef command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example launches SDK, loading the specified hardware\n  definition file for the project, and indicates the workspace to use:\n\n    launch_sdk -hwspec C:/Data/ug940/lab1/lab1.runs/impl_1/lab1.sysdef \\  \n      -workspace C:/Data/sdk_work/ \n    \n\nSee Also:\n\n   *  write_hwdef\n   *  write_sysdef\n",
"get_nearest_site": "get_nearest_site\n\nDescription: \nGet a site of a particular site type nearest a site\n\nSyntax: \nget_nearest_site  [-site <args>] [-quiet] [-verbose] [<site_types>]\n\nReturns: \nsite object\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-site]         Site from which to search\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n  [<site_types>]  Target site types\n\nCategories: \nDevice\n",
"auto_detect_xpm": "auto_detect_xpm\n\nDescription: \nAuto detect the XPM Libraries that are used in the design and set the XPM_LIBRARIES project property.\n\nSyntax: \nauto_detect_xpm  [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nFileIO, Project\n\nDescription:\n\n  This command collects the list of Xilinx Parameterized Macros (XPM) used in\n  RTL design files and sets the XPM_LIBRARIES property. Because it identifies\n  XPM used in the RTL source files, it must be used after the RTL files are\n  read or added to the design as shown in the example.\n\n  Note: This command is intended for use in non-project mode, and is not\n  needed for project-based flows.\n\n  This command will find all the XPMs used in the user RTL and update the\n  XPM_LIBRARIES property on the current project. Synthesis and simulation\n  will use the XPM_LIBRARIES property to properly support these macros.\n\n  This command returns nothing, or returns an error if it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reads the specified RTL file, and then uses\n  auto_detect_xpm to define the XPM_LIBRARIES used in the files:\n\n    read_verilog ../top_bgRAM_173_0.v \n    read_xdc ../top_bgRAM_173_0.xdc \n    auto_detect_xpm \n    \n\nSee Also:\n\n   *  read_verilog\n   *  read_vhdl\n",
"namespace": "namespace(n)          Tcl Built-In Commands          namespace(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       namespace  -  create  and manipulate contexts for commands\n       and variables\n\nSYNOPSIS\n       namespace ?subcommand? ?arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       The namespace command lets you create, access, and destroy\n       separate  contexts  for  commands  and variables.  See the\n       section WHAT IS A NAMESPACE? below for a brief overview of\n       namespaces.   The  legal  values  of subcommand are listed\n       below.  Note that you can abbreviate the subcommands.\n\n       namespace children ?namespace? ?pattern?\n              Returns a list of all child namespaces that  belong\n              to  the  namespace  namespace.  If namespace is not\n              specified, then the children are returned  for  the\n              current  namespace.   This  command  returns fully-\n              qualified names, which start with  a  double  colon\n              (::).   If the optional pattern is given, then this\n              command returns only the names that match the glob-\n              style  pattern.   The actual pattern used is deter-\n              mined as follows: a pattern that starts with double\n              colon  (::)  is used directly, otherwise the names-\n              pace namespace (or the fully-qualified name of  the\n              current namespace) is prepended onto the pattern.\n\n       namespace code script\n              Captures  the  current  namespace context for later\n              execution of the script script.  It returns  a  new\n              script in which script has been wrapped in a names-\n              pace inscope  command.   The  new  script  has  two\n              important  properties.   First, it can be evaluated\n              in any namespace and will cause script to be evalu-\n              ated  in  the  current namespace (the one where the\n              namespace code command was invoked).  Second, addi-\n              tional  arguments  can be appended to the resulting\n              script and they will be passed to script  as  addi-\n              tional arguments.  For example, suppose the command\n              set script [namespace code {foo bar}] is invoked in\n              namespace ::a::b.  Then eval $script [list x y] can\n              be executed in any namespace (assuming the value of\n              script  has  been passed in properly) and will have\n              the same effect as  the  command  ::namespace  eval\n              ::a::b  {foo  bar  x  y}.   This  command is needed\n              because extensions like Tk normally  execute  call-\n              back  scripts  in  the  global namespace.  A scoped\n              command captures a command together with its names-\n              pace context in a way that allows it to be executed\n              properly later.  See the section SCOPED SCRIPTS for\n              some  examples  of how this is used to create call-\n              back scripts.\n\n       namespace current\n              Returns the fully-qualified name  for  the  current\n              namespace.  The actual name of the global namespace\n              is '' (i.e., an empty  string),  but  this  command\n              returns   ::   for   the   global  namespace  as  a\n              convenience to programmers.\n\n       namespace delete ?namespace namespace ...?\n              Each namespace namespace is deleted and  all  vari-\n              ables,  procedures,  and child namespaces contained\n              in the namespace are deleted.  If  a  procedure  is\n              currently   executing  inside  the  namespace,  the\n              namespace will be kept alive  until  the  procedure\n              returns;  however,  the namespace is marked to pre-\n              vent other code from looking it up by name.   If  a\n              namespace  does  not exist, this command returns an\n              error.  If no namespace names are given, this  com-\n              mand does nothing.\n\n       namespace ensemble subcommand ?arg ...?\n              Creates  and  manipulates  a command that is formed |\n              out of an ensemble of subcommands.  See the section |\n              ENSEMBLES below for further details.\n\n       namespace eval namespace arg ?arg ...?\n              Activates  a  namespace called namespace and evalu-\n              ates some code in that context.  If  the  namespace\n              does  not  already  exist,  it is created.  If more\n              than one arg argument is specified,  the  arguments\n              are concatenated together with a space between each\n              one in the same fashion as the  eval  command,  and\n              the result is evaluated.\n\n              If  namespace  has leading namespace qualifiers and\n              any leading namespaces do not exist, they are auto-\n              matically created.\n\n       namespace exists namespace\n              Returns  1 if namespace is a valid namespace in the\n              current context, returns 0 otherwise.\n\n       namespace export ?-clear? ?pattern pattern ...?\n              Specifies which commands are exported from a names-\n              pace.   The exported commands are those that can be\n              later  imported  into  another  namespace  using  a\n              namespace import command.  Both commands defined in\n              a namespace and commands the namespace  has  previ-\n              ously imported can be exported by a namespace.  The\n              commands do not have to be defined at the time  the\n              namespace export command is executed.  Each pattern\n              may contain glob-style special characters,  but  it\n              may not include any namespace qualifiers.  That is,\n              the pattern can only specify commands in  the  cur-\n              rent   (exporting)   namespace.   Each  pattern  is\n              appended onto the namespace's list of  export  pat-\n              terns.   If  the  -clear  flag is given, the names-\n              pace's export pattern list is reset to empty before\n              any pattern arguments are appended.  If no patterns\n              are given and the -clear flag is  not  given,  this\n              command  returns  the  namespace's  current  export\n              list.\n\n       namespace forget ?pattern pattern ...?\n              Removes previously imported commands from a  names-\n              pace.   Each  pattern is a simple or qualified name\n              such as x, foo::x  or  a::b::p*.   Qualified  names\n              contain  double colons (::) and qualify a name with\n              the name of one or more namespaces.   Each  'quali-\n              fied  pattern'  is  qualified  with  the name of an\n              exporting namespace and may have glob-style special\n              characters  in  the  command name at the end of the\n              qualified name.  Glob characters may not appear  in\n              a  namespace  name.  For each 'simple pattern' this\n              command deletes the matching commands of  the  cur-\n              rent  namespace that were imported from a different\n              namespace.  For 'qualified patterns', this  command\n              first  finds  the  matching  exported commands.  It\n              then checks whether any of those commands were pre-\n              viously  imported by the current namespace.  If so,\n              this command  deletes  the  corresponding  imported\n              commands.   In effect, this un-does the action of a\n              namespace import command.\n\n       namespace import ?-force? ?pattern pattern ...?\n              Imports commands into a namespace, or  queries  the |\n              set  of  imported commands in a namespace.  When no |\n              arguments are present, namespace import returns the |\n              list of commands in the current namespace that have |\n              been imported from other namespaces.  The  commands |\n              in  the  returned  list are in the format of simple |\n              names, with no namespace qualifiers at  all.   This |\n              format  is  suitable for composition with namespace |\n              forget (see EXAMPLES below).   When  pattern  argu-\n              ments are present, each pattern is a qualified name\n              like foo::x or a::p*.  That  is,  it  includes  the\n              name  of  an exporting namespace and may have glob-\n              style special characters in the command name at the\n              end of the qualified name.  Glob characters may not\n              appear in a namespace name.  All the commands  that\n              match  a  pattern  string  and  which are currently\n              exported from their namespace are added to the cur-\n              rent  namespace.   This  is  done by creating a new\n              command in the current namespace that points to the\n              exported  command  in  its original namespace; when\n              the new imported command is called, it invokes  the\n              exported command.  This command normally returns an\n              error if an  imported  command  conflicts  with  an\n              existing command.  However, if the -force option is\n              given,  imported  commands  will  silently  replace\n              existing  commands.   The  namespace import command\n              has snapshot semantics:  that  is,  only  requested\n              commands  that are currently defined in the export-\n              ing namespace are imported.  In  other  words,  you\n              can  import  only the commands that are in a names-\n              pace at the time when the namespace import  command\n              is  executed.   If  another  command is defined and\n              exported in this namespace later on, it will not be\n              imported.\n\n       namespace inscope namespace script ?arg ...?\n              Executes  a  script in the context of the specified\n              namespace.  This command is not expected to be used\n              directly  by programmers; calls to it are generated\n              implicitly when  applications  use  namespace  code\n              commands to create callback scripts that the appli-\n              cations then register with, e.g., Tk widgets.   The\n              namespace  inscope  command is much like the names-\n              pace eval command except that  the  namespace  must\n              already  exist, and namespace inscope appends addi-\n              tional args as proper list elements.\n\n                     namespace inscope ::foo $script $x $y $z\n              is equivalent to\n                     namespace eval ::foo [concat $script [list $x $y $z]]\n              thus additional arguments will not undergo a second\n              round  of  substitution, as is the case with names-\n              pace eval.\n\n       namespace origin command\n              Returns the fully-qualified name  of  the  original\n              command  to  which  the  imported  command  command\n              refers.  When a command is imported into  a  names-\n              pace,  a  new  command is created in that namespace\n              that points to the actual command in the  exporting\n              namespace.    If  a  command  is  imported  into  a\n              sequence of namespaces a, b,...,n where  each  suc-\n              cessive namespace just imports the command from the\n              previous namespace, this command returns the fully-\n              qualified name of the original command in the first\n              namespace, a.  If command  does  not  refer  to  an\n              imported command, the command's own fully-qualified\n              name is returned.\n\n       namespace parent ?namespace?\n              Returns the  fully-qualified  name  of  the  parent\n              namespace for namespace namespace.  If namespace is\n              not specified, the fully-qualified name of the cur-\n              rent namespace's parent is returned.\n\n       namespace path ?namespaceList?\n              Returns  the command resolution path of the current |\n              namespace. If namespaceList is specified as a  list |\n              of  named  namespaces, the current namespace's com- |\n              mand resolution path is set to those namespaces and |\n              returns the empty list. The default command resolu- |\n              tion path is always empty.  See  the  section  NAME |\n              RESOLUTION  below  for  an explanation of the rules |\n              regarding name resolution.\n\n       namespace qualifiers string\n              Returns  any  leading  namespace   qualifiers   for\n              string.   Qualifiers  are namespace names separated\n              by   double   colons   (::).    For   the    string\n              ::foo::bar::x, this command returns ::foo::bar, and\n              for :: it returns an empty string.  This command is\n              the complement of the namespace tail command.  Note\n              that it does not check whether the namespace  names\n              are, in fact, the names of currently defined names-\n              paces.\n\n       namespace tail string\n              Returns the simple name at the end of  a  qualified\n              string.   Qualifiers  are namespace names separated\n              by   double   colons   (::).    For   the    string\n              ::foo::bar::x,  this  command returns x, and for ::\n              it returns an empty string.  This  command  is  the\n              complement of the namespace qualifiers command.  It\n              does not check whether the namespace names are,  in\n              fact, the names of currently defined namespaces.\n\n       namespace  upvar  namespace otherVar myVar ?otherVar myVar\n       ...\n              This  command  arranges for one or more local vari-\n              ables in the current procedure to  refer  to  vari-\n              ables  in namespace. The namespace name is resolved\n              as described in section NAME RESOLUTION.  The  com-\n              mand namespace upvar $ns a b has the same behaviour\n              as upvar 0 ${ns}::a b, with the sole  exception  of\n              the  resolution  rules used for qualified namespace\n              or variable  names.   namespace  upvar  returns  an\n              empty string.\n\n       namespace unknown ?script?\n              Sets or returns the unknown command handler for the\n              current namespace.  The handler is invoked  when  a\n              command  called from within the namespace cannot be\n              found (in  either  the  current  namespace  or  the\n              global  namespace).  The script argument, if given,\n              should be a well formed list representing a command\n              name  and  optional  arguments. When the handler is\n              invoked, the full invocation line will be  appended\n              to  the script and the result evaluated in the con-\n              text of the namespace. The default handler for  all\n              namespaces  is  ::unknown. If no argument is given,\n              it returns the handler for the current namespace.\n\n       namespace which ?-command? ?-variable? name\n              Looks up name as either a command or  variable  and\n              returns  its fully-qualified name.  For example, if\n              name does not exist in the  current  namespace  but\n              does  exist  in  the global namespace, this command\n              returns a fully-qualified name in the global names-\n              pace.   If  the command or variable does not exist,\n              this command returns an empty string.  If the vari-\n              able has been created but not defined, such as with\n              the variable command or  through  a  trace  on  the\n              variable, this command will return the fully-quali-\n              fied name of the variable.  If no  flag  is  given,\n              name is treated as a command name.  See the section\n              NAME RESOLUTION below for  an  explanation  of  the\n              rules regarding name resolution.\n\nWHAT IS A NAMESPACE?\n       A namespace is a collection of commands and variables.  It\n       encapsulates the commands and  variables  to  ensure  that\n       they will not interfere with the commands and variables of\n       other namespaces.  Tcl has always had one such collection,\n       which  we  refer  to  as the global namespace.  The global\n       namespace holds all global variables  and  commands.   The\n       namespace  eval  command  lets  you create new namespaces.\n       For example,\n              namespace eval Counter {\n                 namespace export bump\n                 variable num 0\n\n                 proc bump {} {\n                    variable num\n                    incr num\n                 }\n              }\n       creates a new namespace containing the  variable  num  and\n       the  procedure  bump.   The commands and variables in this\n       namespace are separate from other commands  and  variables\n       in  the same program.  If there is a command named bump in\n       the global namespace, for example, it  will  be  different\n       from the command bump in the Counter namespace.\n\n       Namespace  variables  resemble  global  variables  in Tcl.\n       They exist outside of the procedures in  a  namespace  but\n       can  be  accessed in a procedure via the variable command,\n       as shown in the example above.\n\n       Namespaces are dynamic.  You can add and  delete  commands\n       and  variables  at  any time, so you can build up the con-\n       tents of a namespace over time using a series of namespace\n       eval  commands.  For example, the following series of com-\n       mands has the same  effect  as  the  namespace  definition\n       shown above:\n              namespace eval Counter {\n                 variable num 0\n                 proc bump {} {\n                    variable num\n                    return [incr num]\n                 }\n              }\n              namespace eval Counter {\n                 proc test {args} {\n                    return $args\n                 }\n              }\n              namespace eval Counter {\n                  rename test ''\n              }\n       Note  that  the  test  procedure  is  added to the Counter\n       namespace, and later removed via the rename command.\n\n       Namespaces can have other namespaces within them, so  they\n       nest  hierarchically.   A nested namespace is encapsulated\n       inside its parent namespace and  can  not  interfere  with\n       other namespaces.\n\nQUALIFIED NAMES\n       Each  namespace  has  a  textual  name  such as history or\n       ::safe::interp.   Since  namespaces  may  nest,  qualified\n       names  are used to refer to commands, variables, and child\n       namespaces contained inside namespaces.   Qualified  names\n       are  similar to the hierarchical path names for Unix files\n       or Tk widgets, except that :: is  used  as  the  separator\n       instead  of  /  or ..  The topmost or global namespace has\n       the name '' (i.e., an empty string), although :: is a syn-\n       onym.   As  an  example,  the  name ::safe::interp::create\n       refers to the command create in the namespace interp  that\n       is  a  child of namespace ::safe, which in turn is a child\n       of the global namespace, ::.\n\n       If you want to access commands and variables from  another\n       namespace,  you must use some extra syntax.  Names must be\n       qualified by the namespace that contains them.   From  the\n       global  namespace,  we might access the Counter procedures\n       like this:\n              Counter::bump 5\n              Counter::Reset\n       We could access the current count like this:\n              puts 'count = $Counter::num'\n       When one namespace contains another,  you  may  need  more\n       than  one  qualifier  to  reach its elements.  If we had a\n       namespace Foo that contained the  namespace  Counter,  you\n       could  invoke its bump procedure from the global namespace\n       like this:\n              Foo::Counter::bump 3\n\n       You can also use  qualified  names  when  you  create  and\n       rename  commands.   For example, you could add a procedure\n       to the Foo namespace like this:\n              proc Foo::Test {args} {return $args}\n       And you could move the same procedure to another namespace\n       like this:\n              rename Foo::Test Bar::Test\n\n       There  are  a  few  remaining points about qualified names\n       that we should  cover.   Namespaces  have  nonempty  names\n       except for the global namespace.  :: is disallowed in sim-\n       ple command, variable, and namespace  names  except  as  a\n       namespace  separator.   Extra colons in any separator part\n       of a qualified name are ignored; i.e. two or  more  colons\n       are  treated as a namespace separator.  A trailing :: in a\n       qualified variable or command name refers to the  variable\n       or  command  named {}.  However, a trailing :: in a quali-\n       fied namespace name is ignored.\n\nNAME RESOLUTION\n       In general, all Tcl commands that take variable  and  com-\n       mand  names  support  qualified names.  This means you can\n       give qualified  names  to  such  commands  as  set,  proc,\n       rename,  and  interp alias.  If you provide a fully-quali-\n       fied name that starts with a  ::,  there  is  no  question\n       about what command, variable, or namespace you mean.  How-\n       ever, if the name does not start with a :: (i.e., is rela-\n       tive), Tcl follows basic rules for looking it up: Variable\n       names are always resolved by looking first in the  current\n       namespace,  and  then  in  the  global namespace.  Command |\n       names are also always resolved by looking in  the  current |\n       namespace first. If not found there, they are searched for |\n       in every namespace on the current namespace's command path |\n       (which  is  empty by default). If not found there, command |\n       names are looked up in the global namespace  (or,  failing |\n       that,  are  processed  by the unknown command.)  Namespace\n       names, on the other hand, are always resolved  by  looking\n       in only the current namespace.\n\n       In the following example,\n              set traceLevel 0\n              namespace eval Debug {\n                 printTrace $traceLevel\n              }\n       Tcl  looks  for traceLevel in the namespace Debug and then\n       in the global namespace.  It looks up the  command  print-\n       Trace  in  the same way.  If a variable or command name is\n       not found in either context, the name  is  undefined.   To\n       make  this  point absolutely clear, consider the following\n       example:\n              set traceLevel 0\n              namespace eval Foo {\n                 variable traceLevel 3\n\n                 namespace eval Debug {\n                    printTrace $traceLevel\n                 }\n              }\n       Here Tcl looks  for  traceLevel  first  in  the  namespace\n       Foo::Debug.   Since  it is not found there, Tcl then looks\n       for  it   in   the   global   namespace.    The   variable\n       Foo::traceLevel is completely ignored during the name res-\n       olution process.\n\n       You can use the namespace which command to  clear  up  any\n       question about name resolution.  For example, the command:\n              namespace eval Foo::Debug {namespace which -variable traceLevel}\n       returns ::traceLevel.  On the other hand, the command,\n              namespace eval Foo {namespace which -variable traceLevel}\n       returns ::Foo::traceLevel.\n\n       As mentioned above, namespace names are looked up  differ-\n       ently than the names of variables and commands.  Namespace\n       names are always resolved in the current namespace.   This\n       means,  for  example,  that  a namespace eval command that\n       creates a new namespace always creates a child of the cur-\n       rent  namespace  unless the new namespace name begins with\n       ::.\n\n       Tcl has no access control to limit  what  variables,  com-\n       mands,  or namespaces you can reference.  If you provide a\n       qualified name that resolves to an  element  by  the  name\n       resolution rule above, you can access the element.\n\n       You  can  access  a namespace variable from a procedure in\n       the same namespace by using the  variable  command.   Much\n       like  the global command, this creates a local link to the\n       namespace variable.  If necessary,  it  also  creates  the\n       variable  in  the  current  namespace  and initializes it.\n       Note that the global command only creates links  to  vari-\n       ables in the global namespace.  It is not necessary to use\n       a variable command if you always refer  to  the  namespace\n       variable using an appropriate qualified name.\n\nIMPORTING COMMANDS\n       Namespaces  are  often  used to represent libraries.  Some\n       library commands are used so frequently that it is a  nui-\n       sance to type their qualified names.  For example, suppose\n       that all of the commands in a package like  BLT  are  con-\n       tained  in  a namespace called Blt.  Then you might access\n       these commands like this:\n              Blt::graph .g -background red\n              Blt::table . .g 0,0\n       If you use the graph and table  commands  frequently,  you\n       may want to access them without the Blt:: prefix.  You can\n       do this by importing the commands into the current  names-\n       pace, like this:\n              namespace import Blt::*\n       This  adds  all  exported  commands from the Blt namespace\n       into the current namespace context, so you can write  code\n       like this:\n              graph .g -background red\n              table . .g 0,0\n       The  namespace import command only imports commands from a\n       namespace that that namespace exported  with  a  namespace\n       export command.\n\n       Importing  every  command  from a namespace is generally a\n       bad idea since you do not know what you will get.   It  is\n       better to import just the specific commands you need.  For\n       example, the command\n              namespace import Blt::graph Blt::table\n       imports only the graph and table commands into the current\n       context.\n\n       If  you  try  to import a command that already exists, you\n       will get an error.  This prevents you from  importing  the\n       same  command  from two different packages.  But from time\n       to time (perhaps when debugging),  you  may  want  to  get\n       around  this  restriction.   You  may  want to reissue the\n       namespace import command to pick up new commands that have\n       appeared  in  a  namespace.  In that case, you can use the\n       -force option, and  existing  commands  will  be  silently\n       overwritten:\n              namespace import -force Blt::graph Blt::table\n       If  for  some  reason, you want to stop using the imported\n       commands, you can remove them with a namespace forget com-\n       mand, like this:\n              namespace forget Blt::*\n       This  searches  the  current  namespace  for  any commands\n       imported from Blt.  If it  finds  any,  it  removes  them.\n       Otherwise,  it does nothing.  After this, the Blt commands\n       must be accessed with the Blt:: prefix.\n\n       When you delete a command  from  the  exporting  namespace\n       like this:\n              rename Blt::graph ''\n       the  command  is automatically removed from all namespaces\n       that import it.\n\nEXPORTING COMMANDS\n       You can export commands from a namespace like this:\n              namespace eval Counter {\n                 namespace export bump reset\n                 variable Num 0\n                 variable Max 100\n\n                 proc bump {{by 1}} {\n                    variable Num\n                    incr Num $by\n                    Check\n                    return $Num\n                 }\n                 proc reset {} {\n                    variable Num\n                    set Num 0\n                 }\n                 proc Check {} {\n                    variable Num\n                    variable Max\n                    if {$Num > $Max} {\n                       error 'too high!'\n                    }\n                 }\n              }\n       The procedures bump and reset are exported,  so  they  are\n       included  when you import from the Counter namespace, like\n       this:\n              namespace import Counter::*\n       However, the Check procedure is not  exported,  so  it  is\n       ignored by the import operation.\n\n       The  namespace  import  command only imports commands that\n       were declared as exported by their namespace.  The  names-\n       pace   export  command  specifies  what  commands  may  be\n       imported by other namespaces.  If a namespace import  com-\n       mand specifies a command that is not exported, the command\n       is not imported.\n\nSCOPED SCRIPTS\n       The namespace code command is the means by which a  script\n       may  be  packaged for evaluation in a namespace other than\n       the one in which it was created.  It is used most often to\n       create event handlers, Tk bindings, and traces for evalua-\n       tion in the global context.  For instance,  the  following\n       code  indicates  how  to  direct a variable trace callback\n       into the current namespace:\n              namespace eval a {\n                 variable b\n                 proc theTraceCallback { n1 n2 op } {\n                    upvar 1 $n1 var\n                    puts 'the value of $n1 has changed to $var'\n                    return\n                 }\n                 trace variable b w [namespace code theTraceCallback]\n              }\n              set a::b c\n       When executed, it prints the message:\n              the value of a::b has changed to c\n\nENSEMBLES\n       The namespace ensemble is used to  create  and  manipulate |\n       ensemble  commands,  which are commands formed by grouping |\n       subcommands together.  The commands  typically  come  from |\n       the  current  namespace  when  the  ensemble  was created, |\n       though this is configurable.  Note that there may  be  any |\n       number of ensembles associated with any namespace (includ- |\n       ing none, which is true of  all  namespaces  by  default), |\n       though  all  the ensembles associated with a namespace are |\n       deleted when that namespace is deleted.  The link  between |\n       an  ensemble  command and its namespace is maintained how- |\n       ever the ensemble is renamed.                              |\n\n       Three subcommands of the namespace  ensemble  command  are |\n       defined:                                                   |\n\n       namespace ensemble create ?option value                    |\n       ...?               |                                       |\n              Creates a new ensemble command linked to  the  cur- |\n              rent  namespace, returning the fully qualified name |\n              of the command created.  The arguments to namespace |\n              ensemble  create  allow  the  configuration  of the |\n              command as if with the namespace ensemble configure |\n              command.   If  not  overridden  with  the  -command |\n              option,  this  command  creates  an  ensemble  with |\n              exactly the same name as the linked namespace.  See |\n              the section ENSEMBLE OPTIONS below for a full  list |\n              of options supported and their effects.             |\n\n       namespace  ensemble configure command ?option? ?value      |\n       ...? |                                                     |\n              Retrieves  the  value  of an option associated with |\n              the ensemble command named command, or updates some |\n              options associated with that ensemble command.  See |\n              the section ENSEMBLE OPTIONS below for a full  list |\n              of options supported and their effects.             |\n\n       namespace ensemble exists com-                             |\n       mand                          |                            |\n              Returns a boolean value that describes whether  the |\n              command  command exists and is an ensemble command. |\n              This command only ever returns an error if the num- |\n              ber of arguments to the command is wrong.           |\n\n       When  called, an ensemble command takes its first argument |\n       and looks it up (according to the rules  described  below) |\n       to  discover  a list of words to replace the ensemble com- |\n       mand and subcommand with.  The resulting list of words  is |\n       then  evaluated (with no further substitutions) as if that |\n       was what was typed originally (i.e. by passing the list of |\n       words  through  Tcl_EvalObjv)  and returning the result of |\n       the command.  Note that it is legal to make the target  of |\n       an ensemble rewrite be another (or even the same) ensemble |\n       command.  The ensemble command will not be visible through |\n       the use of the uplevel or info level commands.             |\n\n   ENSEMBLE OPTIONS                                               |\n       The following options, supported by the namespace ensemble |\n       create and namespace ensemble configure commands,  control |\n       how an ensemble command behaves:                           |\n\n       -map                                                       ||\n              When non-empty, this option supplies  a  dictionary |\n              that  provides a mapping from subcommand names to a |\n              list of prefix words to substitute in place of  the |\n              ensemble  command and subcommand words (in a manner |\n              similar to an alias created with interp alias;  the |\n              words  are  not reparsed after substitution).  When |\n              this option is empty, the mapping will be from  the |\n              local name of the subcommand to its fully-qualified |\n              name.  Note that when this option is non-empty  and |\n              the -subcommands option is empty, the ensemble sub- |\n              command names will be exactly those words that have |\n              mappings in the dictionary.                         |\n\n       -pre-                                                      |\n       fixes                                                  |   |\n              This option (which is enabled by default)  controls |\n              whether the ensemble command recognizes unambiguous |\n              prefixes of its subcommands.  When turned off,  the |\n              ensemble command requires exact matching of subcom- |\n              mand names.                                         |\n\n       -subcom-                                                   |\n       mands                                               |      |\n              When non-empty, this option lists exactly what sub- |\n              commands are in the ensemble.  The mapping for each |\n              of  those  commands  will  be  either  whatever  is |\n              defined in the -map option, or to the command  with |\n              the same name in the namespace linked to the ensem- |\n              ble.  If this option is empty, the  subcommands  of |\n              the  namespace  will  either  be  the  keys  of the |\n              dictionary  listed  in  the  -map  option  or   the |\n              exported  commands  of  the linked namespace at the |\n              time of the invocation of the ensemble command.     |\n\n       -unknown                                                   ||\n              When non-empty, this option provides a partial com- |\n              mand (to which all the words that are arguments  to |\n              the ensemble command, including the fully-qualified |\n              name of the ensemble, are appended) to  handle  the |\n              case where an ensemble subcommand is not recognized |\n              and would otherwise generate an error.  When  empty |\n              (the   default)   an   error   (in   the  style  of |\n              Tcl_GetIndexFromObj)  is  generated  whenever   the |\n              ensemble  is unable to determine how to implement a |\n              particular   subcommand.    See   UNKNOWN   HANDLER |\n              BEHAVIOUR for more details.                         |\n\n       The  following extra option is allowed by namespace ensem- |\n       ble create:                                                |\n\n       -com-                                                      |\n       mand                                                   |   |\n              This  write-only  option  allows  the  name  of the |\n              ensemble created by namespace ensemble create to be |\n              anything  in  any  existing namespace.  The default |\n              value for this option is the  fully-qualified  name |\n              of  the  namespace  in which the namespace ensemble |\n              create command is invoked.                          |\n\n       The following extra option is allowed by namespace  ensem- |\n       ble configure:                                             |\n\n       -names-                                                    |\n       pace                                                 |     |\n              This read-only option allows the retrieval  of  the |\n              fully-qualified  name  of  the  namespace which the |\n              ensemble was created within.                        |\n\n   UNKNOWN HANDLER BEHAVIOUR                                      |\n       If an unknown handler is specified for an  ensemble,  that |\n       handler  is  called when the ensemble command would other- |\n       wise return an error due to  it  being  unable  to  decide |\n       which  subcommand  to  invoke.  The exact conditions under |\n       which that occurs are controlled by the -subcommands, -map |\n       and -prefixes options as described above.                  |\n\n       To  execute  the  unknown  handler, the ensemble mechanism |\n       takes the specified -unknown option and appends each argu- |\n       ment of the attempted ensemble command invocation (includ- |\n       ing the ensemble command  itself,  expressed  as  a  fully |\n       qualified  name).  It invokes the resulting command in the |\n       scope of the attempted  call.  If  the  execution  of  the |\n       unknown  handler  terminates normally, the ensemble engine |\n       reparses the subcommand (as described below) and tries  to |\n       dispatch  it again, which is ideal for when the ensemble's |\n       configuration has been updated by the  unknown  subcommand |\n       handler. Any other kind of termination of the unknown han- |\n       dler is treated as an error.                               |\n\n       The result of the unknown handler is expected to be a list |\n       (it  is  an  error  if it is not). If the list is an empty |\n       list, the ensemble command attempts to look up the  origi- |\n       nal subcommand again and, if it is not found this time, an |\n       error will be generated just as if  the  -unknown  handler |\n       was  not  there  (i.e. for any particular invocation of an |\n       ensemble, its unknown  handler  will  be  called  at  most |\n       once.)  This  makes  it  easy  for  the unknown handler to |\n       update the ensemble or its backing namespace so as to pro- |\n       vide  an  implementation  of  the  desired  subcommand and |\n       reparse.                                                   |\n\n       When the result is a non-empty list,  the  words  of  that |\n       list  are used to replace the ensemble command and subcom- |\n       mand, just as if they had been looked up in the  -map.  It |\n       is up to the unknown handler to supply all namespace qual- |\n       ifiers if the implementing subcommand is not in the names- |\n       pace of the caller of the ensemble command. Also note that |\n       when ensemble commands are chained (e.g. if you  make  one |\n       of the commands that implement an ensemble subcommand into |\n       an ensemble, in a manner similar to the text widget's  tag |\n       and mark subcommands) then the rewrite happens in the con- |\n       text of the caller of the outermost ensemble. That  is  to |\n       say  that  ensembles do not in themselves place any names- |\n       pace contexts on the Tcl call stack.                       |\n\n       Where an empty -unknown handler is  given  (the  default), |\n       the  ensemble command will generate an error message based |\n       on the list of commands  that  the  ensemble  has  defined |\n       (formatted   similarly   to   the   error   message   from |\n       Tcl_GetIndexFromObj). This  is  the  error  that  will  be |\n       thrown  when the subcommand is still not recognized during |\n       reparsing. It is also an error for an -unknown handler  to |\n       delete its namespace.\n\nEXAMPLES\n       Create  a  namespace containing a variable and an exported\n       command:\n              namespace eval foo {\n                 variable bar 0\n                 proc grill {} {\n                    variable bar\n                    puts 'called [incr bar] times'\n                 }\n                 namespace export grill\n              }\n\n       Call the command defined in the previous example in  vari-\n       ous ways.\n              # Direct call\n              ::foo::grill\n\n              # Use the command resolution path to find the name\n              namespace eval boo {\n                 namespace path ::foo\n                 grill\n              }\n\n              # Import into current namespace, then call local alias\n              namespace import foo::grill\n              grill\n\n              # Create two ensembles, one with the default name and one with a\n              # specified name.  Then call through the ensembles.\n              namespace eval foo {\n                 namespace ensemble create\n                 namespace ensemble create -command ::foobar\n              }\n              foo grill\n              foobar grill\n\n       Look up where the command imported in the previous example\n       came from:\n              puts 'grill came from [namespace origin grill]'\n\n       Remove all imported commands from the current namespace:\n              namespace forget {*}[namespace import]\n\nSEE ALSO\n       interp(n), upvar(n), variable(n)\n\nKEYWORDS\n       command, ensemble, exported, internal, variable\n\n\n\nTcl                            8.5                   namespace(n)\n",
"list_targets": "list_targets\n\nDescription: \nList applicable targets for the specified source\n\nSyntax: \nlist_targets  [-quiet] [-verbose] <files>\n\nReturns: \nlist of targets\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <files>     Source file for which the targets needs to be listed\n\nCategories: \nProject\n\nDescription:\n\n  List the targets that are available for a specified IP core, DSP module, or\n  IP Subsystem. The following file types are accepted: .xci, .xco, .mdl, .bd,\n  .bxml.\n\n  Use the generate_targets command to generate the listed targets.\n\n  The command returns the list of available targets. If no targets are\n  available for the specified file objects, nothing is returned.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) A files object that contains the list of source files\n  to evaluate.\n\n  Note: Use get_files to specify a files object, rather than specifying a\n  file name.\n\nExamples:\n\n  The following example lists the available targets for any DSP modules in\n  the design:\n\n    list_targets [get_files *.mdl] \n    \n\nSee Also:\n\n   *  create_bd_design\n   *  create_sysgen\n   *  generate_target\n   *  get_files\n   *  import_ip\n   *  read_ip\n",
"update_module_reference": "update_module_reference\n\nDescription: \nRefresh module reference definition and instance(s)\n\nSyntax: \nupdate_module_reference  [-quiet] [-verbose] [<ips>...]\n\nReturns: \nA return code indicating success or failure.\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<ips>]     module reference to be upgraded\n              Values: IP instance name(s) within the design\n\nCategories: \nIPFlow\n\nDescription:\n\n  Refresh the block design cell or cells that reference module definitions\n  from RTL source files by rereading the module definition from the source\n  file.\n\n  Note: This command does not cause the Vivado tool to reread the source\n  file. If changes have been made to the source file it must be separately\n  updated.\n\n  This command returns a transcript of the update process as well as any\n  warnings related to design changes, or returns nothing if the command\n  fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <ips> - (Optional) Specifies the module references in the current design to\n  upgrade. Modules can be specified by name, or returned by the get_ips\n  command.\n\nExamples:\n\n  The following example updates the specified module references in the\n  current design:\n\n    update_module_reference {rtlRam_0 uart_0} \n    \n\nSee Also:\n\n   *  create_bd_cell\n   *  create_bd_design\n",
"config_timing_pessimism": "config_timing_pessimism\n\nDescription: \nConfigure timing analysis common node pessimism removal settings\n\nSyntax: \nconfig_timing_pessimism  [-enable] [-disable] [-transition <arg>]\n                         [-threshold <arg>] [-common_node <arg>] [-quiet]\n                         [-verbose]\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-enable]       Enable common node pessimism removal \n  [-disable]      Disable common node pessimism removal \n  [-transition]   Remove pessimism for specified transitions; Values: \n                  any_transition, same_transition\n  [-threshold]    Common node pessimism threshold\n                  Default: 0\n  [-common_node]  Perform pessimism removal to common node in routing \n                  network. Values: on, off\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nTiming\n",
"open_run": "open_run\n\nDescription: \nOpen a run into a netlist or implementation design\n\nSyntax: \nopen_run  [-name <arg>] [-pr_config <arg>] [-quiet] [-verbose] <run>\n\nReturns: \ndesign object\n\nUsage: \n  Name          Description\n  -------------------------\n  [-name]       Design name\n  [-pr_config]  PR Configuration to apply while opening the design (only \n                valid when opening a synthesis run)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <run>         Run to open into the design\n\nCategories: \nProject\n\nDescription:\n\n  Opens the specified synthesis run into a Netlist Design or implementation\n  run into an Implemented Design. The run properties defining the target part\n  and constraint set are combined with the synthesis or implementation\n  results to create the design view in the tool.\n\n  This command is intended to open a synthesized or implemented design that\n  was created from design runs in Project Mode in the Vivado Design Suite.\n\n  Use the open_checkpoint command to open a Non-Project based checkpoint into\n  memory, opening the design in Non-Project Mode. Refer to the Vivado Design\n  Suite User Guide: Design Flows Overview (UG892) for more information on\n  Project Mode and Non-Project Mode.\n\nArguments:\n\n  -name - (Optional) This is the name assigned to the synthesized or\n  implemented design when the run is opened by the Vivado tool. This name is\n  for reference purposes, and has nothing to do with the top-level of the\n  design or any logic contained within.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <run> - (Required) Specifies the run name of the synthesis or\n  implementation run to open. The run must have completed synthesis or\n  implementation before it can be opened as a design.\n\n  Note: If you attempt to open a run that has not been launched the tool will\n  return an error.\n\nExamples:\n\n  The following command opens the specified synthesis run into a Netlist\n  Design named synthPass1:\n\n    open_run -name synthPass1 synth_1 \n    \n\n  The following opens an Implemented Design for impl_1:\n\n    open_run impl_1  \n    \n\nSee Also:\n\n   *  launch_runs\n   *  link_design\n   *  open_checkpoint\n   *  read_checkpoint\n   *  write_checkpoint\n",
"save_waivers": "save_waivers\n\nDescription: \nSave one or more DRC/METHODOLOGY/CDC message waivers data sets to binary file(s)\n\nSyntax: \nsave_waivers  [-type <arg>] [-file <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-type]     Type of waiver - ALL, DRC, METHODOLOGY, CDC\n  [-file]     Name of file to save waivers (or as TYPE.<filename>, if more \n              than one Type being saved)\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nWaiver, Object\n",
"read_qor_suggestions": "read_qor_suggestions\n\nDescription: \nRead QoR Suggestions from the given file\n\nSyntax: \nread_qor_suggestions  [-quiet] [-verbose] <file>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <file>      QoR suggestions file\n              Values: Path to the QoR suggestions file, typically ending with\n              .rqs.\n\nCategories: \nFileIO, Feasibility, Timing\n\nDescription:\n\n  Read the specified file and extract the QoR suggestions from the file.\n\n  This command returns the name of the QoR file read, or returns an error if\n  it fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Required) Read the QoR suggestions from the specified file, which\n  should have the .rqs suffix.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example reads the QoR suggestions from the specified file,\n  and then reports the QoR suggestions in the open design:\n\n    read_qor_suggestions C:/Data/qor_results.rqs \n    report_qor_suggestions -of_objects [get_qor_suggestions]\n\nSee Also:\n\n   *  get_qor_suggestions\n   *  report_qor_suggestions\n   *  write_qor_suggestions\n",
"disconnect_net": "disconnect_net\n\nDescription: \nDisconnect a net from pins or ports\n\nSyntax: \ndisconnect_net  [-prune] [-net <arg>] [-objects <args>] [-pinlist <args>]\n                [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-prune]    When performing disconnect, remove the net and any pin/net \n              chain up to the pin on any primitive instance as long as each \n              object in the chain has only 1 remaining connection.\n  [-net]      Net to disconnect - optional, net attached to first pin or port\n              object is used if not specified.\n  [-objects]  List of pin and port names to disconnect. String expressions \n              are supported.\n  [-pinlist]  List of pin and port objects to disconnect.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nNetlist\n\nDescription:\n\n  This command allows the user to disconnect a specified net from one or more\n  pins or ports in the netlist of an open Synthesized or Implemented Design.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -prune - (Optional) Remove hierarchical pins, ports, or nets that are left\n  unconnected after disconnecting the specified nets. This will not remove\n  the pins specified by -objects, which are disconnected, but removes the net\n  and pins or ports connected to the specified pins.\n\n  -net <arg> - (Optional) Specifies the net to disconnect. If no net is\n  specified, the net connected to the first pin or port object will be\n  disconnected.\n\n  Note: Although you can create a bus using the -bus_from and -bus_to\n  arguments of the create_net command, you must disconnect each bit of the\n  bus separately using the disconnect_net command.\n\n  -objects <args> - (Optional) The string list of pin and port names to\n  disconnect from the specified net. String expressions representing patterns\n  are supported. When first-class objects are available, the command line\n  option -pinlist should be used instead as it will be faster\n\n  -pinlist <args> - (Optional) Recommended option over -objects. List of pin\n  and port objects to disconnect from the specified net. If the list of pins\n  and ports is built around first-class objects, the -pinlist processing is\n  much faster than -objects. This option will also take a list of object\n  names as string, but at the cost of increased runtime.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  Using the following connection network:\n\n    leaf_cell1/pin1 > net1 > block1/pin1 > \n        topnet  \n    < block2/pin1 < net2 < leaf_cell2/pin1\n\n  This example first disconnects the signal, topnet, from block1/pin1, and\n  then prunes topnet, block2/pin1, and net2, but does not prune\n  leaf_cell2/pin1:\n\n    disconnect_net -prune -net topnet -objects [get_pins block1/pin1]\n\n  Note: net2 is not removed, because block1/pin1 is not pruned as part of the\n  -prune option.\n\n  The following example disconnects the specified bit of the dataBus:\n\n    disconnect_net -net dataBus[1] -objects {dataIN[1] myDMA/data[1]}\n\n  This example demonstrates the most efficient coding style to disconnect\n  nets from multiple pins or ports. In the first code sample, all pins are\n  presented as a single list of pins or ports, and the disconnect_net command\n  runs more quickly than the second code sample that is presented as multiple\n  disconnect_net commands:\n\n    disconnect_net -objects [list {pad_rin1_IBUF[0]_inst/O} {hcore0/pad_rin1[9][0]} \\  \n    {pad_rin1_IBUF[1]_inst/O} {hcore0/pad_rin1[9][1]} \\  \n    {pad_rin1_IBUF[2]_inst/O} {hcore0/pad_rin1[9][2]} \\  \n    {pad_rin1_IBUF[3]_inst/O} {hcore0/pad_rin1[9][3]} \\  \n    {pad_rin1_IBUF[4]_inst/O} {hcore0/pad_rin1[9][4]} \\  \n    {pad_rin1_IBUF[5]_inst/O} {hcore0/pad_rin1[9][5]} \\  \n    {pad_rin1_IBUF[6]_inst/O} {hcore0/pad_rin1[9][6]} \\  \n    {pad_rin1_IBUF[7]_inst/O} {hcore0/pad_rin1[9][7]} \\  \n    {pad_rin1_IBUF[8]_inst/O} {hcore0/pad_rin1[9][8]} \\  \n    {pad_rin1_IBUF[9]_inst/O} {hcore0/pad_rin1[9][9]} ]  \n    \n\n  Note: The lack of the -net option in these samples means that the net\n  attached to the first pin or port specified is the net that will be\n  disconnected from all subsequent pins and ports.\n\n    disconnect_net -objects [list {pad_rin1_IBUF[0]_inst/O} {hcore0/pad_rin1[9][0]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[1]_inst/O} {hcore0/pad_rin1[9][1]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[2]_inst/O} {hcore0/pad_rin1[9][2]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[3]_inst/O} {hcore0/pad_rin1[9][3]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[4]_inst/O} {hcore0/pad_rin1[9][4]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[5]_inst/O} {hcore0/pad_rin1[9][5]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[6]_inst/O} {hcore0/pad_rin1[9][6]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[7]_inst/O} {hcore0/pad_rin1[9][7]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[8]_inst/O} {hcore0/pad_rin1[9][8]}]  \n    disconnect_net -objects [list {pad_rin1_IBUF[9]_inst/O} {hcore0/pad_rin1[9][9]}]  \n    \n\nSee Also:\n\n   *  connect_net\n   *  remove_net\n   *  create_net\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"get_gtbanks": "get_gtbanks\n\nDescription: \nGet a list of gtbanks.\n\nSyntax: \nget_gtbanks  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n             [-verbose] [<patterns>]\n\nReturns: \ngtbanks\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the gtbanks of these package_pins, ports, clock regions,\n                 slrs or sites.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match gtbanks against patterns\n                 Default: *\n\nCategories: \nDevice, XDC, Object\n",
"move_dashboard_gadget": "move_dashboard_gadget\n\nDescription: \nReposition the Gadget for Project summary dashboard\n\nSyntax: \nmove_dashboard_gadget  -name <arg> -row <arg> -col <arg> [-dashboard <arg>]\n                       [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  -name         Name of the gadget\n  -row          Target row number to which the gadget has to be moved\n  -col          Target column number to which the gadget has to be moved\n  [-dashboard]  Name of the dashboard to which the gadget is associated\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Specify the placement of a dashboard gadget into the dashboard.\n\n  Note: Currently the Project Summary is the only dashboard, so the gadget is\n  placed into that dashboard.\n\n  The arrangement of gadgets in a dashboard is by row and column. The Project\n  Summary dashboard has two columns, 0 and 1, and has as many rows as needed\n  to display all the gadgets. If you specify a column other than 0 or 1, or\n  specify a row in excess of the current defined rows + 1, an error will be\n  returned.\n\nArguments:\n\n  -name <arg> - (Required) Specify the name of the gadget to move.\n\n  -row <arg> - (Required) Specify the row in the Project Summary dashboard\n  for the gadget placement.\n\n  -col <arg> - (Required) Specify the column in the Project Summary dashboard\n  for the gadget placement.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExample:\n\n  The following example moves the specified gadget to column 0, row 3:\n\n    move_dashboard_gadget -name utilization_1 -row 3 -col 0\n\nSee Also:\n\n   *  create_dashboard_gadget\n   *  delete_dashboard_gadgets\n   *  get_dashboard_gadgets\n",
"set_output_delay": "set_output_delay\n\nDescription: \nSet output delay on ports\n\nSyntax: \nset_output_delay  [-clock <args>] [-reference_pin <args>] [-clock_fall] [-rise]\n                  [-fall] [-max] [-min] [-add_delay]\n                  [-network_latency_included] [-source_latency_included]\n                  [-quiet] [-verbose] <delay> <objects>\n\nUsage: \n  Name                         Description\n  ----------------------------------------\n  [-clock]                     Relative clock\n  [-reference_pin]             Relative pin or port\n  [-clock_fall]                Delay is relative to falling edge of clock\n  [-rise]                      Specifies rising delay\n  [-fall]                      Specifies falling delay\n  [-max]                       Specifies maximum delay\n  [-min]                       Specifies minimum delay\n  [-add_delay]                 Don't remove existing input delay\n  [-network_latency_included]  Specifies network latency of clock already \n                               included\n  [-source_latency_included]   Specifies source latency of clock already \n                               included\n  [-quiet]                     Ignore command errors\n  [-verbose]                   Suspend message limits during command \n                               execution\n  <delay>                      Delay value\n  <objects>                    List of ports\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Note: The XDC > Timing Constraints language templates and the Timing\n  Constraints Wizard in the Vivado IDE offer timing diagrams and additional\n  details around defining specific timing constraints. You can refer to these\n  sources for additional information.\n\n  Specifies the external system-level path delay on a primary output port\n  relative to a clock edge at the interface of the design. The output delay\n  value is specified in nanoseconds (ns), and can be positive or negative,\n  depending on the clock and data relative phase outside the FPGA device.\n\n  To accurately model the system-level timing of your Xilinx FPGA design, you\n  must assign timing delays for objects external to the FPGA onto the primary\n  input or output ports in your design. These delays are defined by the\n  set_input_delay and set_output_delay commands.\n\n  Note: If the output port also has a set_max_delay constraint assigned, the\n  specified output delay value is considered part of the max_delay\n  computation. That is, the output delay consumes a portion of the max delay\n  on the timing path that includes the output port.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -clock <arg> - (Optional) Indicates that the delay is relative to the\n  rising edge of the specified clock.\n\n  -reference_pin <arg> - (Optional) Specifies that the delay is relative to\n  the specified pin rather than a clock.\n\n  -clock_fall - (Optional) Specifies that the delay is relative to a falling\n  edge of the clock rather than rising edge.\n\n  -rise - (Optional) Specifies that the delay is for a rising edge.\n\n  -fall - (Optional) Specifies that the delay is for a falling edge\n\n  -max - (Optional) Specifies that the delay specified should be treated as a\n  maximum threshold.\n\n  -min - (Optional) Specifies that the delay specified should be treated as a\n  minimum threshold.\n\n  -add_delay - (Optional) Add the specified delay constraint to the port, to\n  coexist with any other set_output_delay constraints already defined on the\n  port. The default behavior is to replace the existing delays.\n\n  -network_latency_included - (Optional) Indicates that the clock network\n  latency of the reference clock is included in the delay value. The Vivado\n  timing engine considers the clock edge reaching the capture flop after the\n  clock latencies unless the specified input or output delay value includes\n  the source latency or network latency.\n\n  -source_latency_included - (Optional) Specifies that the source latency of\n  the reference clock is included in the specified delay value.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <delay> - (Optional) The delay specified in nanoseconds (ns) to apply to\n  the listed ports. Valid values are floating point numbers, with a default\n  value of 0.\n\n  <objects> - (Required) A list of ports to which the delay applies.\n\nExamples:\n\n  The following example sets an output delay on ports relative to the\n  specified clock:\n\n    set_output_delay 5.0 -clock [get_clocks cpuClk] [get_ports]  \n    \n\n  The next example is the same as the prior example except that network\n  latency is now included:\n\n    set_output_delay 5.0 -clock [get_clocks cpuClk] \\  \n       -network_latency_included [get_ports]  \n    \n\n  This example creates a clock named clk_ddr, and defines output delay\n  constraints from data launched by both rising and falling edges of the\n  clock outside the device to the data output of the internal flip-flop that\n  is sensitive to both rising and falling clock edges:\n\n    create_clock -name clk_ddr -period 6 [get_ports DDR_CLK_IN]  \n    set_output_delay -clock clk_ddr -max 2.1 [get_ports DDR_OUT]  \n    set_output_delay -clock clk_ddr -max 1.9 [get_ports DDR_OUT] -clock_fall -add_delay  \n    set_output_delay -clock clk_ddr -min 0.9 [get_ports DDR_OUT]  \n    set_output_delay -clock clk_ddr -min 1.1 [get_ports DDR_OUT] -clock_fall -add_delay \n    \n\n  Note: The use of the -add_delay option allows the new min and max delay\n  constraints to exist alongside the first delays on the same port.\n\nSee Also:\n\n   *  all_clocks\n   *  create_clock\n   *  get_ports\n   *  set_max_delay\n   *  set_input_delay\n",
"stop_gui": "stop_gui\n\nDescription: \nClose GUI\n\nSyntax: \nstop_gui  [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  Stops GUI mode and places the tool into Tcl mode, running in the Vivado\n  Design Suite Tcl shell. In Tcl mode, all commands must be entered as Tcl\n  commands or through Tcl scripts.\n\nArguments:\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example stops and closes the GUI and places the tool into Tcl\n  mode:\n\n    stop_gui \n    \n\nSee Also:\n\n   *  start_gui\n",
"report_transformed_primitives": "report_transformed_primitives\n\nDescription: \nReport details of Unisim primitive transformations.\n\nSyntax: \nreport_transformed_primitives  [-file <arg>] [-append] [-return_string]\n                               [-quiet] [-verbose]\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-file]           Output file\n  [-append]         Append the results to file\n  [-return_string]  Return report as string\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n\nCategories: \nReport\n\nDescription:\n\n  Report the transformed primitives in the current design.\n\n  As part of the process of opening the Synthesized design, and loading it\n  into memory, the tool will transform legacy netlist primitives to the\n  supported subset of Unisim primitives.\n\n  As a default this report will be written to the standard output. However,\n  the report can also be written to a file or returned to a Tcl string\n  variable for further processing.\n\nArguments:\n\n  -file <arg> - (Optional) Write the transformed primitives report into the\n  specified file. The specified file will be overwritten if one already\n  exists, unless -append is also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -return_string - (Optional) Directs the output to a Tcl string. The Tcl\n  string can be captured by a variable definition and parsed or otherwise\n  processed.\n\n  Note: This argument cannot be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example reports the transformed primitives in the current\n  design, and returns the result to the specified Tcl variable:\n\n    set transPrim [ report_transformed_primitives -return_string ] \n    \n",
"get_file_path": "get_file_path\n\nDescription: \nGet the full path to the specific file, for the given part.\n\nSyntax: \nget_file_path  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n               [-part <arg>] [-partname <arg>] [-partobj <arg>] [-v <arg>]\n               [-vaultFileId <arg>] [-useLegacy <arg>] [-filename <arg>]\n               [-legacyFileId <arg>] [-dataLevel <arg>] [-isTimingFile <arg>]\n               [-checkDeviceFilesDir <arg>] [-useOldAPIs <arg>]\n               [-askGetDataFilePath <arg>]\n               [-askGetMostSpecificDataLocation <arg>]\n               [-askGetDataLocation_Filename <arg>]\n               [-askGetDataLocation_DataLevel_Filename <arg>] [-quiet]\n               [-verbose] [<patterns>]\n\nReturns: \nstring\n\nUsage: \n  Name                                      Description\n  -----------------------------------------------------\n  [-regexp]                                 Patterns are full regular \n                                            expressions\n  [-nocase]                                 Perform case-insensitive \n                                            matching. (valid only when \n                                            -regexp specified)\n  [-filter]                                 Filter list with expression\n  [-of_objects]                             Get the string of these part.\n  [-part]                                   (same as -partname) partname to \n                                            use if not providing a part \n                                            object.\n  [-partname]                               partname to use if not providing \n                                            a part object.\n  [-partobj]                                part Tcl object\n  [-v]                                      Verbose level where \n                                            0=None;1=Errors;2=Warnings;3=Info\n                                            ;4=Trace;5=Verbose\n                                            Default: 2=Warnings\n  [-vaultFileId]                            Vault Key or Filename for looking\n                                            up file location in vault's \n                                            device.manifest.\n  [-useLegacy]                              Use legacy / pre-vault file \n                                            locating logic, where \n                                            0=NO_LEGACY_FILE_LOCATING, \n                                            1=GET_DATA_FILE_PATH, \n                                            2=GET_MOST_SPECIFIC_DATA_LOC, \n                                            3=GET_DATA_LOCATION, \n                                            4=GET_DATA_LOCATION_IN_DPX_COMMON\n                                            Default: 0=NO_LEGACY_FILE_LOCATIN\n                                            G\n  [-filename]                               filename is an obsolete parameter\n                                            because it is now ambiguous. It \n                                            will be used as the legacyFileId,\n                                            but you may have intended it to \n                                            be used as the vaultFileId.  \n                                            Please use those two parameters \n                                            instead of this one.\n  [-legacyFileId]                           Legacy Filename or Token(e.g. \n                                            '<xng>'.\n  [-dataLevel]                              0=HDPA_ARCH, 1=HDPA_FAMILY, \n                                            2=HDPA_DEVICE, 3=HDPA_PACKAGE, \n                                            4=HDPA_SPEED to use with \n                                            getDataLocation(dataLevel, \n                                            filename) or getMostSpecificDataL\n                                            ocation(dataLevel, filename, \n                                            isTimingFile(default=false), \n                                            checkDeviceFilesDir(default=false\n                                            ))\n                                            Default: 0=HDPA_ARCH\n  [-isTimingFile]                           Legacy option to indicate a \n                                            timing file, to use with \n                                            getMostSpecificDataLocation(dataL\n                                            evel, filename, isTimingFile(defa\n                                            ult=false), checkDeviceFilesDir(d\n                                            efault=false))\n                                            Default: 0=false\n  [-checkDeviceFilesDir]                    Legacy option to look in \n                                            'devicefiles' directory, to use \n                                            with getMostSpecificDataLocation(\n                                            dataLevel, filename, \n                                            isTimingFile(default=false), \n                                            checkDeviceFilesDir(default=false\n                                            ))\n                                            Default: 0=false\n  [-useOldAPIs]                             if true, force the use of \n                                            old/deprecated/legacy HDARPart \n                                            API calls directly rather then \n                                            indirectly through new HDARPart \n                                            getFilePath API.\n                                            Default: 0=false\n  [-askGetDataFilePath]                     ask getDataFilePath\n                                            Default: 0=false\n  [-askGetMostSpecificDataLocation]         ask getMostSpecificDataLocation\n                                            Default: 0=false\n  [-askGetDataLocation_Filename]            ask getDataLocation(filename)\n                                            Default: 0=false\n  [-askGetDataLocation_DataLevel_Filename]  ask getDataLocation(DataLevel, \n                                            filename)\n                                            Default: 0=false\n  [-quiet]                                  Ignore command errors\n  [-verbose]                                Suspend message limits during \n                                            command execution\n  [<patterns>]                              Match string against patterns\n                                            Default: *\n\nCategories: \nDevice, Object, Internal\n",
"vwait": "vwait(n)              Tcl Built-In Commands              vwait(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       vwait - Process events until a variable is written\n\nSYNOPSIS\n       vwait varName\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command enters the Tcl event loop to process events,\n       blocking the application if no events are ready.  It  con-\n       tinues processing events until some event handler sets the\n       value of variable varName.  Once varName has been set, the\n       vwait  command  will  return  as soon as the event handler\n       that modified varName completes.  varName must be globally\n       scoped  (either  with a call to global for the varName, or\n       with the full namespace path specification).\n\n       In some cases the vwait command may not return immediately\n       after  varName  is set.  This can happen if the event han-\n       dler that sets varName does not complete immediately.  For\n       example,  if an event handler sets varName and then itself\n       calls vwait to wait for a different variable, then it  may\n       not  return  for  a  long time.  During this time the top-\n       level vwait is blocked waiting for the  event  handler  to\n       complete, so it cannot return either.\n\nEXAMPLES\n       Run  the  event-loop  continually  until  some event calls\n       exit.  (You can use any variable not mentioned  elsewhere,\n       but  the  name  forever  reminds  you  at  a glance of the\n       intent.)\n              vwait forever\n\n       Wait five seconds for a connection  to  a  server  socket,\n       otherwise  close  the  socket  and  continue  running  the\n       script:\n              # Initialise the state\n              after 5000 set state timeout\n              set server [socket -server accept 12345]\n              proc accept {args} {\n                 global state connectionInfo\n                 set state accepted\n                 set connectionInfo $args\n              }\n\n              # Wait for something to happen\n              vwait state\n\n              # Clean up events that could have happened\n              close $server\n              after cancel set state timeout\n\n              # Do something based on how the vwait finished...\n              switch $state {\n                 timeout {\n                    puts 'no connection on port 12345'\n                 }\n                 accepted {\n                    puts 'connection: $connectionInfo'\n                    puts [lindex $connectionInfo 0] 'Hello there!'\n                 }\n              }\n\n\nSEE ALSO\n       global(n), update(n)\n\n\nKEYWORDS\n       event, variable, wait\n\n\n\nTcl                            8.0                       vwait(n)\n",
"remove_net": "remove_net\n\nDescription: \nRemove nets from the current design\n\nSyntax: \nremove_net  [-prune] [-quiet] [-verbose] <nets>...\n\nUsage: \n  Name        Description\n  -----------------------\n  [-prune]    When performing net removal, remove pins and ports which are \n              left unconnected as a result of the remove_net operation.\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <nets>      List of nets to remove\n\nCategories: \nNetlist\n\nDescription:\n\n  Remove the specified net from the netlist of an open Synthesized or\n  Implemented Design.\n\n  Note: You cannot remove nets from library macros, also called\n  macro-primitives.\n\n  To remove a bus, you must specify the primary bus name, and not specify a\n  bus index. This ensures that the entire bus is removed, and not just a\n  portion of the bits associated with the bus. You can resize a bus,\n  eliminating bits of the bus, using the resize_net_bus command.\n\n  Netlist editing changes the in-memory view of the netlist in the current\n  design. It does not change the files in the source fileset, or change the\n  persistent design on the disk. Changes made to the netlist may be saved to\n  a design checkpoint using the write_checkpoint command, or may be exported\n  to a netlist file such as Verilog, VHDL, or EDIF, using the appropriate\n  write_* command.\n\n  Note: Netlist editing is not allowed on the elaborated RTL design.\n\nArguments:\n\n  -prune - (Optional) Prune, or remove, any unconnected hierarchical pins,\n  ports, or nets, as a result of removing the specified net.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <nets> - (Required) The list of nets to remove from the netlist of the\n  current design.\n\nExample:\n\n  Using the following connection network:\n\n    leaf_cell1/pin1 > net1 > block1/pin1 > \n       topnet  \n    < block2/pin1 < net2 < leaf_cell2/pin1 \n    \n\n  This example will remove block1/pin1, block2/pin1, net1, and net2, but will\n  not prune the pins on the leaf cells:\n\n    remove_net topnet -prune  \n    \n\n  The following example illustrates the warning returned when trying to\n  remove one bit of a bus net, and then removes the entire bus by specifying\n  the root name:\n\n    remove_net DataIn_pad_1_i[0]  \n    WARNING: [Coretcl-82] No nets matched `DataIn_pad_1_i[0]`.  \n    remove_net DataIn_pad_1_i \n    \n\nSee Also:\n\n   *  create_net\n   *  disconnect_net\n   *  resize_net_bus\n   *  write_checkpoint\n   *  write_edif\n   *  write_verilog\n   *  write_vhdl\n",
"current_design": "current_design\n\nDescription: \nSet or get the current design.\n\nSyntax: \ncurrent_design  [-quiet] [-verbose] [<design>]\n\nReturns: \ndesign object\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<design>]  Name of current design to be set\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Defines the current design or returns the name of the current design in the\n  active project.\n\n  The current design and current instance are the target of most Tcl\n  commands, design edits and constraint changes made in the tool. The current\n  instance can be defined using the current_instance command.\n\n  You can use the get_designs command to get a list of open designs in the\n  active project, and use the get_projects command to get a list of open\n  projects.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <design> - (Optional) The name of design to set as the current design. If a\n  <design> is not specified, the command returns the current design of the\n  active project.\n\nExamples:\n\n  The following example sets the design rtl_1 as the current design:\n\n    current_design rtl_1  \n    \n\nSee Also:\n\n   *  current_instance\n   *  get_designs\n   *  get_projects\n",
"place_cell": "place_cell\n\nDescription: \nMove or place one or more instances to new locations. Sites and cells are required to be listed in the right order and there should be same number of sites as number of cells. \n\nSyntax: \nplace_cell  [-quiet] [-verbose] <cell_site_list>...\n\nUsage: \n  Name              Description\n  -----------------------------\n  [-quiet]          Ignore command errors\n  [-verbose]        Suspend message limits during command execution\n  <cell_site_list>  a list of cells and sites in the interleaved order \n\nCategories: \nFloorplan\n\nDescription:\n\n  Places cells onto device resources of the target part. Cells can be placed\n  onto specific BEL sites (e.g. SLICE_X49Y60/A6LUT), or into available SLICE\n  resources (e.g. SLICE_X49Y60). If you specify the SLICE but not the BEL the\n  tool will determine an appropriate BEL within the specified SLICE if one is\n  available.\n\n  When placing a cell onto a specified site, the site must not be currently\n  occupied, or an error will be returned: Cannot set site and bel property of\n  instances. Site SLICE_X49Y61 is already occupied.\n\n  You can test if a site is occupied by querying the IS_OCCUPIED property of\n  a BEL site:\n\n    get_property IS_OCCUPIED [get_bels SLICE_X48Y60/D6LUT] \n    \n\n  Note: The IS_OCCUPIED property of a SLICE only tells you if some of the\n  BELs within the SLICE are occupied; not whether or not the SLICE is fully\n  occupied.\n\n  This command can be used to place cells, or to move placed cells from one\n  site on the device to another site. The command syntax is the same for\n  placing an unplaced cell, or moving a placed cell.\n\n  When moving a placed cell, if you specify only the SLICE for the site, the\n  tool will attempt to place the cell onto the same BEL site in the new SLICE\n  as it currently is placed. For instance moving a cell from the B6LUT, by\n  specifying a new SLICE, will cause the tool to attempt to place the cell\n  onto the B6LUT in the new SLICE. If this BEL site is currently occupied, an\n  error is returned.\n\n  Note: This command returns nothing if successful, or returns an error if it\n  fails.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <cell_site_list> - (Required) Specifies a list of cells and sites as\n  {<cell_name> <site> }. The cell name is listed first, followed the BEL site\n  or SLICE to place the cell onto. If the site is specified as a SLICE, the\n  tool will select an available BEL within the SLICE. Multiple cells can be\n  placed onto multiple sites by repeating the cell/site pair multiple times\n  as needed:\n\n    {<cell_name1> <site1> <cell_name2> <site2> \\  \n    <cell_name3> <site3>... <cell_nameN> <siteN> } \n    \n\nExamples:\n\n  The following example places the specified cell onto the specified BEL site:\n\n    place_cell div_cntr_reg_inferredi_4810_15889 SLICE_X49Y60/D6LUT \n    \n\n  The following example places the specified cell into the specified SLICE:\n\n    place_cell div_cntr_reg_inferredi_4810_15889 SLICE_X49Y61 \n    \n\n  Note: The tool will select an appropriate BEL site if one is available. If\n  no BEL is available, and error will be returned.\n\n  The following example places multiple cells onto multiple sites:\n\n    place_cell  { \\  \n       cpuEngine/cpu_iwb_adr_o/buffer_fifo/i_4810_17734 SLICE_X49Y60/A6LUT \\  \n       cpuEngine/or1200_cpu/or1200_mult_mac/i_4775_15857 SLICE_X49Y60/B6LUT \\  \n       cpuEngine/cpu_iwb_adr_o/buffer_fifo/xlnx_opt_LUT_i_4810_18807_2 \\  \n       SLICE_X49Y60/C6LUT } \n    \n\nSee Also:\n\n   *  create_cell\n   *  remove_cell\n   *  unplace_cell\n",
"dict": "dict(n)               Tcl Built-In Commands               dict(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       dict - Manipulate dictionaries\n\nSYNOPSIS\n       dict option arg ?arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       Performs one of several operations on dictionary values or\n       variables containing dictionary values (see the DICTIONARY\n       VALUES  section  below  for  a  description), depending on\n       option.  The legal options (which may be abbreviated) are:\n\n       dict append dictionaryVariable key ?string ...?\n              This  appends  the given string (or strings) to the\n              value that the given key maps to in the  dictionary\n              value  contained in the given variable, writing the\n              resulting dictionary value back to  that  variable.\n              Non-existent  keys are treated as if they map to an\n              empty string.\n\n       dict create ?key value ...?\n              Create a new dictionary that contains each  of  the\n              key/value  mappings  listed  as arguments (keys and\n              values alternating, with each key being followed by\n              its associated value.)\n\n       dict exists dictionaryValue key ?key ...?\n              This returns a boolean value indicating whether the\n              given key (or path of keys through a set of  nested\n              dictionaries) exists in the given dictionary value.\n              This returns a true value exactly when dict get  on\n              that path will succeed.\n\n       dict filter dictionaryValue filterType arg ?arg ...?\n              This  takes  a  dictionary  value and returns a new\n              dictionary that contains just those key/value pairs\n              that  match the specified filter type (which may be\n              abbreviated.)  Supported filter types are:\n\n              dict filter dictionaryValue key globPattern\n                     The key rule only  matches  those  key/value\n                     pairs whose keys match the given pattern (in\n                     the style of string match.)\n\n              dict filter dictionaryValue script  {keyVar  value-\n              Var} script\n                     The  script  rule  tests  for  matching   by\n                     assigning  the  key  to  the  keyVar and the\n                     value to the valueVar, and  then  evaluating\n                     the  given  script  which  should  return  a\n                     boolean value (with the key/value pair  only\n                     being  included  in  the  result of the dict\n                     filter when a true value is returned.)  Note\n                     that  the  first  argument  after  the  rule\n                     selection word is a  two-element  list.   If\n                     the  script  returns  with  a  condition  of\n                     TCL_BREAK, no further  key/value  pairs  are\n                     considered  for  inclusion  in the resulting\n                     dictionary, and a condition of  TCL_CONTINUE\n                     is   equivalent   to  a  false  result.  The\n                     key/value pairs are tested in the  order  in\n                     which  the  keys were inserted into the dic-\n                     tionary.\n\n              dict filter dictionaryValue value globPattern\n                     The value rule only matches those  key/value\n                     pairs  whose  values match the given pattern\n                     (in the style of string match.)\n\n       dict for {keyVar valueVar} dictionaryValue body\n              This command takes three  arguments,  the  first  a\n              two-element list of variable names (for the key and\n              value respectively of each mapping in  the  dictio-\n              nary),  the  second the dictionary value to iterate\n              across, and the third a script to be evaluated  for\n              each  mapping  with the key and value variables set\n              appropriately (in  the  manner  of  foreach.)   The\n              result  of  the  command is an empty string. If any\n              evaluation  of  the  body  generates  a   TCL_BREAK\n              result,  no  further pairs from the dictionary will\n              be iterated over and the dict for command will ter-\n              minate  successfully immediately. If any evaluation\n              of the body generates a TCL_CONTINUE  result,  this\n              shall  be  treated  exactly  like  a  normal TCL_OK\n              result. The order of  iteration  is  the  order  in\n              which the keys were inserted into the dictionary.\n\n       dict get dictionaryValue ?key ...?\n              Given a dictionary value (first argument) and a key\n              (second argument), this will retrieve the value for\n              that  key.  Where  several  keys  are supplied, the\n              behaviour of the command shall be as if the  result\n              of  dict  get $dictVal $key was passed as the first\n              argument to dict get with the  remaining  arguments\n              as second (and possibly subsequent) arguments. This\n              facilitates lookups  in  nested  dictionaries.  For\n              example, the following two commands are equivalent:\n                     dict get $dict foo bar spong\n                     dict get [dict get [dict get $dict foo] bar] spong\n              If no keys are provided, dict would return  a  list\n              containing pairs of elements in a manner similar to\n              array get. That is, the first element of each  pair\n              would  be  the  key and the second element would be\n              the value for that key.\n\n              It is an error to attempt to retrieve a value for a\n              key that is not present in the dictionary.\n\n       dict incr dictionaryVariable key ?increment?\n              This  adds  the  given  increment value (an integer\n              that defaults to 1 if not specified) to  the  value\n              that  the given key maps to in the dictionary value\n              contained  in  the  given  variable,  writing   the\n              resulting  dictionary  value back to that variable.\n              Non-existent keys are treated as if they map to  0.\n              It is an error to increment a value for an existing\n              key if that value is not an integer.\n\n       dict info dictionaryValue\n              This returns information (intended for  display  to\n              people)  about the given dictionary though the for-\n              mat of this data is dependent on the implementation\n              of the dictionary. For dictionaries that are imple-\n              mented by hash tables, it  is  expected  that  this\n              will  return  the string produced by Tcl_HashStats,\n              similar to array info.\n\n       dict keys dictionaryValue ?globPattern?\n              Return a list of all keys in the  given  dictionary\n              value.  If  a  pattern is supplied, only those keys\n              that match it (according to  the  rules  of  string\n              match)  will be returned. The returned keys will be\n              in the order that they were inserted into the  dic-\n              tionary.\n\n       dict lappend dictionaryVariable key ?value ...?\n              This appends the given items to the list value that\n              the given key maps to in the dictionary value  con-\n              tained in the given variable, writing the resulting\n              dictionary value back to that  variable.  Non-exis-\n              tent  keys  are  treated as if they map to an empty\n              list, and it is legal for there to be no  items  to\n              append  to  the  list. It is an error for the value\n              that the key maps to to not be representable  as  a\n              list.\n\n       dict merge ?dictionaryValue ...?\n              Return  a  dictionary that contains the contents of\n              each of the dictionaryValue arguments.   Where  two\n              (or  more)  dictionaries  contain a mapping for the\n              same key, the resulting dictionary maps that key to\n              the  value  according to the last dictionary on the\n              command line containing a mapping for that key.\n\n       dict remove dictionaryValue ?key ...?\n              Return a new dictionary that is a copy  of  an  old\n              one passed in as first argument except without map-\n              pings for each of the keys listed.  It is legal for\n              there  to  be  no keys to remove, and it also legal\n              for any of the keys to be removed to not be present\n              in the input dictionary in the first place.\n\n       dict replace dictionaryValue ?key value ...?\n              Return  a  new  dictionary that is a copy of an old\n              one passed in as first argument  except  with  some\n              values  different  or  some  extra  key/value pairs\n              added. It is legal for this command  to  be  called\n              with  no key/value pairs, but illegal for this com-\n              mand to be called with a key but no value.\n\n       dict set dictionaryVariable key ?key ...? value\n              This operation takes the name of  a  variable  con-\n              taining  a  dictionary  value and places an updated\n              dictionary value in that variable containing a map-\n              ping  from  the  given key to the given value. When\n              multiple keys are present, this  operation  creates\n              or updates a chain of nested dictionaries.\n\n       dict size dictionaryValue\n              Return  the  number  of  key/value  mappings in the\n              given dictionary value.\n\n       dict unset dictionaryVariable key ?key ...?\n              This operation (the companion to  dict  set)  takes\n              the  name  of  a  variable  containing a dictionary\n              value and places an  updated  dictionary  value  in\n              that  variable  that does not contain a mapping for\n              the given key. Where  multiple  keys  are  present,\n              this  describes  a path through nested dictionaries\n              to the mapping to remove. At least one key must  be\n              specified,  but  the  last key on the key-path need\n              not exist.  All other components on the  path  must\n              exist.\n\n       dict  update  dictionaryVariable  key varName ?key varName\n       ...? body\n              Execute  the  Tcl script in body with the value for\n              each key (as found by reading the dictionary  value\n              in  dictionaryVariable) mapped to the variable var-\n              Name. There may be multiple key/varName pairs. If a\n              key does not have a mapping, that corresponds to an\n              unset varName. When body  terminates,  any  changes\n              made  to the varNames is reflected back to the dic-\n              tionary within dictionaryVariable  (unless  dictio-\n              naryVariable  itself  becomes  unreadable, when all\n              updates are silently discarded), even if the result\n              of  body  is  an error or some other kind of excep-\n              tional exit. The result of dict update  is  (unless\n              some kind of error occurs) the result of the evalu-\n              ation of body. Note that the mapping of  values  to\n              variables  does not use traces; changes to the dic-\n              tionaryVariable's contents only  happen  when  body\n              terminates.\n\n       dict values dictionaryValue ?globPattern?\n              Return a list of all values in the given dictionary\n              value. If a pattern is supplied, only those  values\n              that  match  it  (according  to the rules of string\n              match) will be returned. The returned  values  will\n              be  in  the  order of that the keys associated with\n              those values were inserted into the dictionary.\n\n       dict with dictionaryVariable ?key ...? body\n              Execute the Tcl script in body with the  value  for\n              each  key in dictionaryVariable mapped (in a manner\n              similarly to dict update) to a  variable  with  the\n              same  name.  Where  one or more keys are available,\n              these indicate a chain of nested dictionaries, with\n              the  innermost  dictionary being the one opened out\n              for the execution of body.  As  with  dict  update,\n              making  dictionaryVariable unreadable will make the\n              updates to the dictionary be  discarded,  and  this\n              also  happens if the contents of dictionaryVariable\n              are adjusted so that the chain of  dictionaries  no\n              longer  exists.  The result of dict with is (unless\n              some kind of error occurs) the result of the evalu-\n              ation  of  body. Note that the mapping of values to\n              variables does not use traces; changes to the  dic-\n              tionaryVariable's  contents  only  happen when body\n              terminates.\n\nDICTIONARY VALUES\n       Dictionaries are values that contain an efficient,  order-\n       preserving  mapping  from arbitrary keys to arbitrary val-\n       ues.  Each key in the dictionary maps to a  single  value.\n       They  have  a  textual  format that is exactly that of any\n       list with an even number of elements, with each mapping in\n       the dictionary being represented as two items in the list.\n       When a command takes a dictionary and produces a new  dic-\n       tionary  based  on  it  (either returning it or writing it\n       back into the variable that the  starting  dictionary  was\n       read  from) the new dictionary will have the same order of\n       keys, modulo any deleted keys and with new keys  added  on\n       to  the end.  When a string is interpreted as a dictionary\n       and it would otherwise have duplicate keys, only the  last\n       value  for  a  particular  key  is  used;  the  others are\n       ignored, meaning that, 'apple banana'  and  'apple  carrot\n       apple  banana' are equivalent dictionaries (with different\n       string representations).\n\nEXAMPLES\n       Constructing and using nested dictionaries:\n              # Data for one employee\n              dict set employeeInfo 12345-A forenames 'Joe'\n              dict set employeeInfo 12345-A surname   'Schmoe'\n              dict set employeeInfo 12345-A street '147 Short Street'\n              dict set employeeInfo 12345-A city   'Springfield'\n              dict set employeeInfo 12345-A phone  '555-1234'\n              # Data for another employee\n              dict set employeeInfo 98372-J forenames 'Anne'\n              dict set employeeInfo 98372-J surname   'Other'\n              dict set employeeInfo 98372-J street '32995 Oakdale Way'\n              dict set employeeInfo 98372-J city   'Springfield'\n              dict set employeeInfo 98372-J phone  '555-8765'\n              # The above data probably ought to come from a database...\n\n              # Print out some employee info\n              set i 0\n              puts 'There are [dict size $employeeInfo] employees'\n              dict for {id info} $employeeInfo {\n                 puts 'Employee #[incr i]: $id'\n                 dict with info {\n                    puts '   Name: $forenames $surname'\n                    puts '   Address: $street, $city'\n                    puts '   Telephone: $phone'\n                 }\n              }\n              # Another way to iterate and pick out names...\n              foreach id [dict keys $employeeInfo] {\n                 puts 'Hello, [dict get $employeeInfo $id forenames]!'\n              }\n\n       A localizable version of string toupper:\n              # Set up the basic C locale\n              set capital [dict create C [dict create]]\n              foreach c [split {abcdefghijklmnopqrstuvwxyz} ''] {\n                 dict set capital C $c [string toupper $c]\n              }\n\n              # English locales can luckily share the 'C' locale\n              dict set capital en [dict get $capital C]\n              dict set capital en_US [dict get $capital C]\n              dict set capital en_GB [dict get $capital C]\n\n              # ... and so on for other supported languages ...\n\n              # Now get the mapping for the current locale and use it.\n              set upperCaseMap [dict get $capital $env(LANG)]\n              set upperCase [string map $upperCaseMap $string]\n\nSEE ALSO\n       append(n), array(n), foreach(n),  incr(n),  list(n),  lap-\n       pend(n), set(n)\n\nKEYWORDS\n       dictionary, create, update, lookup, iterate, filter\n\n\n\nTcl                            8.5                        dict(n)\n",
"uplevel": "uplevel(n)            Tcl Built-In Commands            uplevel(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       uplevel - Execute a script in a different stack frame\n\nSYNOPSIS\n       uplevel ?level? arg ?arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       All  of  the arg arguments are concatenated as if they had\n       been passed to concat; the result is then evaluated in the\n       variable  context indicated by level.  Uplevel returns the\n       result of that evaluation.\n\n       If level is an integer then it gives a  distance  (up  the\n       procedure calling stack) to move before executing the com-\n       mand.  If level consists of # followed by  a  number  then\n       the  number  gives  an absolute level number.  If level is\n       omitted then it defaults to 1.  Level cannot be  defaulted\n       if the first command argument starts with a digit or #.\n\n       For  example,  suppose  that  procedure a was invoked from\n       top-level, and that it called b,  and  that  b  called  c.\n       Suppose that c invokes the uplevel command.  If level is 1\n       or #2  or omitted, then the command will  be  executed  in\n       the  variable  context of b.  If level is 2 or #1 then the\n       command will be executed in the variable context of a.  If\n       level is 3 or #0 then the command will be executed at top-\n       level (only global variables will be visible).\n\n       The uplevel command causes the invoking procedure to  dis-\n       appear  from the procedure calling stack while the command\n       is being  executed.   In  the  above  example,  suppose  c\n       invokes the command\n              uplevel 1 {set x 43; d}\n       where  d  is  another Tcl procedure.  The set command will\n       modify the variable x in b's context, and d  will  execute\n       at  level  3, as if called from b.  If it in turn executes\n       the command\n              uplevel {set x 42}\n       then the set command will modify the same  variable  x  in\n       b's context:  the procedure c does not appear to be on the\n       call stack when d is executing.  The  info  level  command\n       may  be used to obtain the level of the current procedure.\n\n       Uplevel makes it possible to implement  new  control  con-\n       structs  as  Tcl procedures (for example, uplevel could be\n       used to implement the while construct as a Tcl procedure).\n\n       The  namespace  eval  and  apply commands offer other ways\n       (besides procedure calls) that the Tcl naming context  can\n       change.   They  add a call frame to the stack to represent\n       the namespace context.  This  means  each  namespace  eval\n       command counts as another call level for uplevel and upvar\n       commands.  For example, info level 1 will  return  a  list\n       describing  a  command that is either the outermost proce-\n       dure call or the outermost namespace eval command.   Also,\n       uplevel  #0  evaluates a script at top-level in the outer-\n       most namespace (the global namespace).\n\nEXAMPLE\n       As stated above, the uplevel command is useful for  creat-\n       ing  new  control  constructs.   This  example  shows  how\n       (without error handling) it can be used  to  create  a  do\n       command that is the counterpart of while except for always\n       performing the test after running the loop body:\n              proc do {body while condition} {\n                  if {$while ne 'while'} {\n                      error 'required word missing'\n                  }\n                  set conditionCmd [list expr $condition]\n                  while {1} {\n                      uplevel 1 $body\n                      if {![uplevel 1 $conditionCmd]} {\n                          break\n                      }\n                  }\n              }\n\nSEE ALSO\n       apply(n), namespace(n), upvar(n)\n\nKEYWORDS\n       context, level, namespace, stack frame, variables\n\n\n\nTcl                                                    uplevel(n)\n",
"reorder_files": "reorder_files\n\nDescription: \nChange the order of source files in the active fileset\n\nSyntax: \nreorder_files  [-fileset <arg>] [-before <arg>] [-after <arg>] [-front] [-back]\n               [-auto] [-disable_unused] [-quiet] [-verbose] <files>...\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-fileset]         Fileset to reorder\n  [-before]          Move the listed files before this file\n  [-after]           Move the listed files after this file\n  [-front]           Move the listed files to the front (default)\n  [-back]            Move the listed files to the back\n  [-auto]            Automatically re-orders the given fileset\n  [-disable_unused]  Disables all files not associated with the TOP design \n                     unit\n  [-quiet]           Ignore command errors\n  [-verbose]         Suspend message limits during command execution\n  <files>            Files to move\n\nCategories: \nProject\n\nDescription:\n\n  Reorders source files in the specified fileset. Takes the files indicated\n  and places them at the front of, the back of, or before or after other\n  files within the fileset. This command also has an auto reorder feature\n  that reorders the files based on the requirements of the current top module\n  in the design.\n\nArguments:\n\n  -fileset <arg> - (Optional) The fileset in which to reorder files. The\n  default is the sources_1 source fileset.\n\n  -before <arg> - (Optional) Place the specified files before this file in\n  the fileset. The file must be specified with the full path name in the\n  fileset.\n\n  -after <arg> - (Optional) Place the specified files after this file in the\n  fileset. The file must be specified with the full path name in the fileset.\n\n  -front - (Optional) Place the specified files at the front of the list of\n  files in the fileset.\n\n  -back - (Optional) Place the specified files at the back of the list of\n  files in the fileset.\n\n  -auto - (Optional) Enable automatic reordering based on the hierarchy\n  requirements of the current top-module in the project. Often used after\n  changing the top module with the 'set_property top' command.\n\n  -disable_unused - (Optional) Disable any files not currently used by the\n  hierarchy based on the top-module. Often used after changing the top module\n  with the 'set_property top' command.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) One or more files to relocate in the fileset. Files\n  must be specified by their full path name in the fileset, and are reordered\n  in the order they are specified.\n\nExamples:\n\n  The following example takes the specified files and moves them to the front\n  of the source fileset:\n\n    reorder_files -front {C:/Data/FPGA/file1.vhdl C:/Data/FPGA/file2.vhdl} \n    \n\n  Note: The default source fileset is used in the preceding example since the\n  -fileset argument is not specified.\n\n  The following example sets a new top_module in the design, and then\n  automatically reorders and disables unused files based on the hierarchy of\n  the new top-module:\n\n    set_property top block1 [current_fileset]  \n    reorder_files -auto -disable_unused \n    \n\nSee Also:\n\n   *  add_files\n   *  create_fileset\n   *  current_fileset\n   *  remove_files\n",
"calc_config_time": "calc_config_time\n\nDescription: \nCalculate device configuration time (ms)\n\nSyntax: \ncalc_config_time  [-verbose] [-max] [-min] [-typical] [-por_used]\n                  [-por_ramp <arg>] [-clk_freq <arg>] [-bitstream_size <arg>]\n                  [-quiet]\n\nReturns: \nReport\n\nUsage: \n  Name               Description\n  ------------------------------\n  [-verbose]         Print out calculation parameters\n  [-max]             Calculate Maximum Configuration Time\n  [-min]             Calculate Minimum Configuration Time\n  [-typical]         Calculate Typical Configuration Time\n  [-por_used]        (Deprecated) Specify if Power On Reset (POR) is used by \n                     using a non-zero por_ramp\n  [-por_ramp]        Specify a Power On Reset (POR) ramp rate as 1 ms to 50 \n                     ms\n                     Default: 0 ms\n  [-clk_freq]        Specify a clock frequency for Slave mode, or for Master \n                     mode if using external master clock (MHz)\n                     Default: 0 MHz\n  [-bitstream_size]  Specify a bitstream size to override the default\n                     Default: 0\n  [-quiet]           Ignore command errors\n\nCategories: \nBitgen, Report\n\nDescription:\n\n  Estimates the time in milliseconds (ms) to configure a Xilinx device for\n  the current design.\n\n  Note: The Device Configuration Mode must be defined for this command to work.\n\n  Some applications require that the Xilinx device be configured and\n  operational within a short time. This command lets you estimate the\n  configuration time for the device and design in question. The configuration\n  time includes the device initialization time plus the configuration time.\n  Configuration time depends on the size of the device and speed of the\n  configuration logic. For more information on the configuration time refer\n  to UltraFast Design Methodology Guide for the Vivado Design Suite (UG949),\n  the UltraScale Architecture Configuration User Guide (UG570), or the 7\n  Series FPGAs Configuration User Guide (UG470).\n\n  Some of the settings needed to calculate the configuration time are stored\n  as properties on the current design, such as the\n  BITSTREAM.CONFIG.CONFIGRATE or BITSTREAM.CONFIG.EXTMASTERCCLK_EN\n  properties. In some master modes, the FPGA provides the configuration clock\n  to control configuration, with the nominal configuration clock frequency\n  specified by BITSTREAM.CONFIG.CONFIGRATE. The property can be defined in\n  the Edit Device Properties dialog box of the Vivado Design Suite IDE, or by\n  using set_property to directly set the value of the specified property.\n\n  For a slave configuration mode, or for configuration modes using an\n  external master clock, the needed clock frequency is specified by the\n  -clk_freq option.\n\n  This command returns a value in milliseconds if successful, or returns an\n  error if it fails.\n\nArguments:\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  -max - (Optional) Reports the maximum configuration time as estimated by\n  the command.\n\n  -min - (Optional) Reports the minimum configuration time as estimated by\n  the command.\n\n  -typical - (Optional) Reports the typical configuration time as estimated\n  by the command.\n\n  -por_ramp <arg> - (Optional) Specify the power-on reset (POR) ramp rate as\n  a value from 1 millisecond (ms) to 50 ms. The default is 0. You can reduce\n  the power on reset time (Tpor) by controlling the ramp rate on the system.\n  For specifications on the Tpor ramp options, see the FPGA configuration\n  switching characteristics in the data sheet of the specific device in use.\n\n  -clk_freq <arg> - (Optional) Specify a clock frequency in MHz for Slave\n  mode, or when using an external master clock. The default is 0.\n\n  Note: When run in a master configuration mode, the clock frequency is\n  specified through the BITSTREAM.CONFIG.CONFIGRATE property.\n\n  -bitstream_size <arg> - (Optional) Specify a bitstream size in bits. The\n  default is 0.\n\n  Note: The bitstream size is derived automatically from the bitstream\n  associated with the current design. Specifying this option will override\n  the automatically derived value.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\nExample:\n\n  The following example returns the maximum calculated configuration time for\n  the current target part based on the specified external clock frequency:\n\n    calc_config_time -max -clk_freq 50 \n    \n\nSee Also:\n\n   *  program_hw_bitstream\n   *  program_hw_cfgmem\n   *  set_property\n   *  write_bitstream\n",
"save_constraints": "save_constraints\n\nDescription: \nSave the current design's constraints\n\nSyntax: \nsave_constraints  [-force] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force constraints save, overwriting the target and source XDC \n              if necessary\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Saves any changes to the constraints files of the active constraints set.\n  This command writes any changes to the constraints files to the project\n  data on the hard drive; saving any work in progress and committing any\n  changes.\n\nArguments:\n\n  -force - (Optional) Save the active constraints files regardless of whether\n  any changes have been made, overwriting the current target constraints\n  file.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example saves the constraints files for the active\n  constraints set regardless of any changes to the files:\n\n    save_constraints -force \n    \n\nSee Also:\n\n   *  save_constraints_as\n",
"undo": "undo\n\nDescription: \nUn-do previous command\n\nSyntax: \nundo  [-list] [-quiet] [-verbose]\n\nReturns: \nwith -list, the list of undoable tasks\n\nUsage: \n  Name        Description\n  -----------------------\n  [-list]     Show a list of undoable tasks\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nGUIControl\n\nDescription:\n\n  Note: The undo and redo commands are intended for use in the Vivado IDE,\n  and are not recommended for use in Tcl scripts to restore designs to a\n  former state. To restore a design to a specific condition, you must write a\n  design checkpoint using the write_checkpoint command, to be restored using\n  read_checkpoint.\n\n  Undo a prior command. This command can be used repeatedly to undo a series\n  of commands.\n\n  If a group of commands has been created using the startgroup and endgroup\n  commands, this command will undo that group as a sequence. The undo command\n  will start at the endgroup command and continue to undo until it hits the\n  startgroup command.\n\n  If you undo a command, and then change your mind, you can redo the command.\n\nArguments:\n\n  -list - (Optional) Reports the list of commands that can be undone. As you\n  execute the undo command, the tool will step backward through this list of\n  commands.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example returns a list of commands that you can undo:\n\n    undo -list \n    \n\nSee Also:\n\n   *  redo\n   *  startgroup\n   *  endgroup\n",
"set_switching_activity": "set_switching_activity\n\nDescription: \nSet switching activity on specified objects or default types\n\nSyntax: \nset_switching_activity  [-toggle_rate <arg>] [-default_toggle_rate <arg>]\n                        [-type <args>] [-all] [-static_probability <arg>]\n                        [-default_static_probability <arg>]\n                        [-signal_rate <arg>] [-hier] [-deassert_resets]\n                        [-quiet] [-verbose] [<objects>...]\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-toggle_rate]                 Toggle rate (%) is the rate at which the \n                                 output of synchronous logic element switches\n                                 compared to a given clock input.  It is \n                                 modeled as a percentage between 0 - 200%.  A\n                                 toggle rate of 100% means that on average \n                                 the output toggles once during every clock \n                                 cycle, changing on either the rising or \n                                 falling clock edges, and making the \n                                 effective output signal frequency half of \n                                 the clock frequency.\n                                 Default: 0.0\n  [-default_toggle_rate]         The default toggle rate to be used in power \n                                 analysis on the primary inputs of the \n                                 design.  The default toggle rate is set on \n                                 those primary input nets whose switching \n                                 activity is not specified by the user, \n                                 simulation data or constraints of the \n                                 design.  Valid values are:  0 <= value < \n                                 200.  The default value is 12.5.\n                                 Default: 12.5\n  [-type]                        Specify nodes in a specific category.  List \n                                 of valid type values: io_output, \n                                 io_bidir_enable, register, lut_ram, lut, \n                                 dsp, bram_enable, bram_wr_enable, gt_txdata,\n                                 gt_rxdata.\n  [-all]                         Used together with -type, set switching \n                                 activity on -type nets within an instance\n  [-static_probability]          Static probability value: 0 <= Value <= 1\n                                 Default: 0.5\n  [-default_static_probability]  The default static probability to be used in\n                                 power analysis on the design.  The default \n                                 static probability is set on those primary \n                                 inputs whose switching activity is not \n                                 specified by the user, simulation data or \n                                 constraints of the design.  Valid values \n                                 are:  0 <= Value <= 1.  The default value is\n                                 0.5.\n                                 Default: 0.5\n  [-signal_rate]                 The number of times an element changed state\n                                 (high-to-low and low-to-high) per second.  \n                                 Xilinx tools express this as millions of \n                                 transitions per second (Mtr/s).\n                                 Default: 0.0\n  [-hier]                        Hierarchically sets the switching activity \n                                 on a hierarchical instance provided via \n                                 <objects> option.  This option should be \n                                 used only with <objects> option\n  [-deassert_resets]             A switch to elegantly auto deassert all \n                                 set,reset,preset and clear signals that do \n                                 not have conflicted polarities\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n  [<objects>]                    Objects to set switching activity on\n\nCategories: \nXDC, Power\n\nDescription:\n\n  Sets the signal rate and the switching probability to be used when\n  performing power estimation on the current synthesized or implemented\n  design. These include simple signal rate and simple static probability on\n  nets, ports, and pins; and state dependent static probabilities on cells.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\n  The switching activity of a design affects both the static and dynamic\n  power consumption. The static power is often dependent on logic state\n  transitions, and the dynamic power is directly proportional to the toggle\n  rate.\n\n  The set_switching_activity command can be used to specify default activity\n  rates for the whole design, or to define the activity of one or more\n  signals in the design or on a specified module.\n\n  The current switching activity attributes can be found by using the\n  report_switching_activity command. The values can be set to their default\n  values by using the reset_switching_activity command.\n\n  Note: The reset_switching_activity is used to reset switching activity for\n  specified objects. Use the set_switching_activity -default_toggle_rate or\n  -default_static_probability to change or reset these values.\n\nArguments:\n\n  -toggle_rate <value> - (Optional) Specify the toggle rate (%) as the\n  switching rate of the output of synchronous logic elements compared to a\n  given clock input. The toggle rate is specified as a percentage between 0 -\n  100%. For clock and DDR signals only, the toggle rate can be specified up\n  to 200%. A toggle rate of 100% means that on average the output toggles\n  once during every clock cycle, changing on either the rising or falling\n  clock edges, and making the effective output signal frequency half of the\n  clock frequency. The default <value> is 12.5% of the clock frequency, as\n  defined by the -default_toggle_rate option.\n\n  Note: This option must be specified with -static_probability.\n\n  -default_toggle_rate <rate> - (Optional) The default toggle rate to be used\n  in power analysis on the primary inputs of the current design. The default\n  toggle rate is set on the primary input nets whose switching activity is\n  not specified by the user, simulation data, or constraints of the design.\n  On asynchronous inputs the toggle rate is set with respect to the highest\n  clock in the design. Valid values are: 0 <= value < 200. The default value\n  is 12.5.\n\n  Note: This option cannot be specified with <objects> as it specifies the\n  default toggle rate for the entire design.\n\n  -type <arg> - (Optional) The type of logic entity that the specified\n  set_switching_activity command can be applied to. By default, the command\n  is applied to the top-level of the current design, or to the specified\n  <objects>. The -type option applies the command settings to the specified\n  type of logic objects in the top-level of the current design. The -all\n  option or -hier option can be used to modify the scope of objects the\n  command applies to. Valid logic types include:\n\n   *  io_output - Primary outputs.\n\n   *  io_bidir_enable - Enable pin of Bidir ports.\n\n   *  register - All register outputs in the design/hierarchy specified.\n\n   *  lut - All LUT outputs in the design/hierarchy specified.\n\n   *  lut_ram - All distributed ram outputs in the design/hierarchy specified.\n\n   *  dsp - All DSP outputs in the design/hierarchy specified.\n\n   *  bram_enable - Enable pins (ENARDEN/ENBWREN) of BRAMs.\n\n   *  bram_wr_enable - Write enables of BRAMs (WEA/WEBWE).\n\n   *  gt_txdata - Output TX data pins of all GTs.\n\n   *  gt_rxdata - Output RX data pins of all GTs.\n\n  Note: The -type option is only valid for use when setting the -toggle_rate\n  or the -signal_rate, and other settings are not supported.\n\n  -all - (Optional) Must be used with -type to set the switching activity on\n  all instances in the design of the specified type of logic objects. As a\n  default the set_switching_activity command applies to the top-level of the\n  design or current_instance, or to the specified type of objects in that\n  level.\n\n  -static_probability <value> - (Optional) The static switching probability\n  for the specified <objects> to be used in power analysis. Valid values are\n  0 <= <value> <= 1. The default value is 0.5.\n\n  -default_static_probability <value> - (Optional) The default static\n  probability to be used in power analysis on the current design. The default\n  static probability is set on primary inputs whose switching activity is not\n  specified by the user, simulation data, or constraints of the design. Valid\n  values are 0 <= value <= 1. The default value is 0.5.\n\n  Note: This option cannot be specified with <objects> as it defines the\n  default for the entire design. Use -static_probability to define the\n  <value> for specific objects.\n\n  -signal_rate <value> - (Optional) The signal frequency to be used for\n  analysis, expressed as millions of transitions per second (Mtr/s).\n  Specifies the number of times an element changes state per second,\n  including transitions from low-to-high and from high-to-low. The default\n  value is 0.\n\n  Note: Must be specified with -static_probability.\n\n  -hier - (Optional) Apply the switching activity hierarchically to signals\n  in the specified hierarchical <objects>. Without -hier, the switching\n  activity is applied to the specified <objects>, or -type of objects at the\n  current level of the hierarchy.\n\n  -deassert_resets - (Optional) Directs the Vivado tool to automatically\n  de-assert all reset-type control signals (Set, Preset, Reset, Clear), by\n  setting the signal static probability to 0. The tool will only de-assert\n  control signals with non-conflicting polarities. However, if a net is\n  connected to an active-Low and an active-High Reset pin for instance, then\n  it will not de-assert this signal; or if a net is connected to an\n  active-High Reset, and an active-High Set, or Enable pin, then it will not\n  de-assert this signal.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Optional) A list of port, pin, and net objects to which the\n  switching activity constraint should be applied; or a list of cells when\n  specified with -type to define logic objects.\n\nExamples:\n\n  The following example specifies a signal rate and switching probability for\n  all ports, then reports the switching attributes for those ports:\n\n    set_switching_activity -signal_rate 55 -static_probability .33 [get_ports]  \n    report_switching_activity [get_ports] \n    \n\n  The following example specifies the default switching probability for the\n  current design:\n\n    set_switching_activity -default_static_probability .75 \n    \n\n  This example sets the specified toggle rate and static probability on all\n  registers in the hierarchy of 'CPU/MEM':\n\n    \n    set_switching_activity -type register -toggle_rate 0.4 \\  \n       -static_probability 0.5 [get_cells CPU/MEM] \n    \n\n  This example sets the specified toggle rate and static probability on all\n  registers in the hierarchy of 'CPU/' and underneath hierarchy:\n\n    \n    set_switching_activity -type register -toggle_rate 0.4   \n       -static_probability 0.5 -hier [get_cells CPU] \n    \n\nSee Also:\n\n   *  get_clocks\n   *  get_nets\n   *  get_ports\n   *  power_opt_design\n   *  report_power\n   *  report_switching_activity\n   *  reset_switching_activity\n",
"get_ports": "get_ports\n\nDescription: \nGet a list of ports in the current design\n\nSyntax: \nget_ports  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n           [-match_style <arg>] [-scoped_to_current_instance] [-no_traverse]\n           [-prop_thru_buffers] [-quiet] [-verbose] [<patterns>]\n\nReturns: \nlist of port objects\n\nUsage: \n  Name                           Description\n  ------------------------------------------\n  [-regexp]                      Patterns are full regular expressions\n  [-nocase]                      Perform case-insensitive matching (valid \n                                 only when -regexp specified)\n  [-filter]                      Filter list with expression\n  [-of_objects]                  Get ports of these nets, instances, sites, \n                                 clocks, timing paths, io standards, io \n                                 banks, package pins, drc violations\n  [-match_style]                 Style of pattern matching, valid values are \n                                 ucf, sdc\n                                 Default: sdc\n  [-scoped_to_current_instance]  Match patterns on instance pins specified \n                                 using current instance, and then find top \n                                 level connected ports.\n  [-no_traverse]                 Do not traverse to find top level terminals.\n  [-prop_thru_buffers]           Allow propagate through buffers when \n                                 traversing to find top level terminals \n                                 connected to pins of scoped instance.\n  [-quiet]                       Ignore command errors\n  [-verbose]                     Suspend message limits during command \n                                 execution\n  [<patterns>]                   Match port names against patterns\n                                 Default: *\n\nCategories: \nSDC, XDC, Object\n\nDescription:\n\n  Gets a list of port objects in the current design that match a specified\n  search pattern. The default command gets a list of all ports in the design.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_ports based on property values on the ports. You can find the\n  properties on an object with the report_property or list_property commands.\n  In the case of the 'ports' object, 'PARENT' and 'TYPE' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the ports connected to the specified\n  nets, bels, sites, clocks, timing paths, io_standards, iobanks, or\n  package_pins; or ports associated with specified DRC violation objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -match_style [sdc | ucf] - (Optional) Indicates that the search pattern\n  matches UCF constraints or SDC constraints. The default is SDC.\n\n  -scoped_to_current_instance - (Optional) This returns the top-level pins of\n  the current instance. Applies the specified search <patterns> to find the\n  instance pins on the current instance.\n\n  -prop_thru_buffers - (Optional) This option returns the top-level ports\n  connected to pins on the current instance. This option can be used with the\n  -scoped_to_current_instance option to propagate the search from the pins of\n  the current instance, through buffers, to the top-level ports of the\n  design.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match ports against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all ports in the\n  project. More than one pattern can be specified to find multiple ports\n  based on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example gets a list of pins attached to the specified cell:\n\n    get_ports -of_objects [lindex [get_cells] 1] \n    \n\n  Note: If there are no ports matching the pattern, the tool will return a\n  warning.\n\n  The following example runs the report_drc command on the current design,\n  returns the list of violations in the specified DRC report, and then\n  returns the ports associated with any violations of the unspecified I/O\n  Standard rule (NSTD):\n\n    report_drc -name drc_1  \n    get_drc_violations -name drc_1  \n    get_ports -of_objects [get_drc_violations -name drc_1 NSTD*] \n    \n\n  This example specifies a cell for the current instance, returns the pins\n  scoped to the current instance, and returns the top-level ports connected\n  to those pins:\n\n    current_instance [get_cells dac_spi*]  \n    get_ports -scoped_to_current_instance  \n    get_ports -scoped_to_current_instance -prop_thru_buffers \n    \n\nSee Also:\n\n   *  current_instance\n   *  get_cells\n   *  get_clocks\n   *  get_drc_violations\n   *  get_nets\n   *  get_timing_paths\n   *  list_property\n   *  report_drc\n   *  report_property\n",
"diff_board": "diff_board\n\nDescription: \nPrint a summary of the differences between the current board part and the given newer version of that board part.  Currently only differences in the pins of the board part and their properties are reported.\n\nSyntax: \ndiff_board  [-file <arg>] [-quiet] [-verbose] <version>\n\nReturns: \nnew board version\n\nUsage: \n  Name        Description\n  -----------------------\n  [-file]     the output file\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <version>   the other board version to compare\n\nCategories: \nObject, Board\n",
"reset_drc_check": "reset_drc_check\n\nDescription: \nReset one or more DRC checks to factory defaults.\n\nSyntax: \nreset_drc_check  [-quiet] [-verbose] [<checks>...]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<checks>]  The list of checks to reset.\n\nCategories: \nDRC, Object\n\nDescription:\n\n  Reset the specified DRC checks to the defaults provided by the Vivado\n  Design Suite. This will restore the DRC check to its default configuration,\n  including any changes to the IS_ENABLED or SEVERITY properties.\n\n  The IS_ENABLED property can be modified on a specific DRC check to disable\n  the rule from being checked, even when it is specified either directly in\n  the report_drc command, or as part of a ruledeck.\n\n  The SEVERITY property is a string property that can be modified to change\n  the severity associated with a specific DRC rule when a violation is found\n  during the report_drc command. The supported values are: FATAL, ERROR,\n  'CRITICAL WARNING', WARNING, ADVISORY\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <checks> - (Required) The list of one or more DRC rule checks to reset to\n  the tool defaults.\n\nExamples:\n\n  The following example modifies the IS_ENABLED property for the ROAS-1 rule,\n  modifies the SEVERITY property for the RFFC-1 rule, and then restores the\n  default settings for all checks:\n\n    set_property IS_ENABLED false [get_drc_checks ROAS-1]  \n    set_property SEVERITY 'Critical Warning' [get_drc_checks RFFC-1]  \n    reset_drc_check [get_drc_checks] \n    \n\nSee Also:\n\n   *  add_drc_checks\n   *  get_drc_checks\n   *  report_drc\n   *  set_property\n",
"get_tiles": "get_tiles\n\nDescription: \nGet a list of tiles.\n\nSyntax: \nget_tiles  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>] [-quiet]\n           [-verbose] [<patterns>]\n\nReturns: \ntiles\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the tiles of these slr, sites, bels, site_pins, \n                 bel_pins, nodes, wires, pips, nets, clock_regions.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match tiles against patterns\n                 Default: *\n\nCategories: \nDevice, Object, XDC\n\nDescription:\n\n  This command returns a list of tiles on the device in an open design. The\n  default command gets a list of all tiles on the device.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_tiles based on property values on the tile objects. You can find the\n  properties on an object with the report_property or list_property commands.\n  Any property/value pair can be used as a filter. In the case of the tile\n  object, 'NUM_ARCS', 'NUM_SITES', and 'IS_GT_SITE_TILE' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <args> - (Optional) Can be used to return the tiles associated\n  with specified sites, bels, site_pins, bel_pins, nodes, wires, pips, nets,\n  clock_regions, or slrs.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match tiles against the specified patterns. The\n  default pattern is the wildcard `*` which gets a list of all tiles on the\n  device. More than one search pattern can be specified to find tiles based\n  on different search criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example returns the total number of tiles where the number of\n  timing arcs is greater than 100 and 150 respectively:\n\n    llength [get_tiles -filter {NUM_ARCS>100} ]  \n    13468  \n     \n    llength [get_tiles -filter {NUM_ARCS>150} ]  \n    11691 \n    \n\nSee Also:\n\n   *  get_bels\n   *  get_nodes\n   *  get_pips\n   *  get_site_pins\n   *  get_sites\n   *  get_wires\n   *  list_property\n   *  report_property\n",
"refresh_design": "refresh_design\n\nDescription: \nRefresh the current design\n\nSyntax: \nrefresh_design  [-part <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-part]     Target part\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Reloads the current design from the project data on the hard drive. This\n  overwrites the in-memory view of the design to undo any recent design\n  changes.\n\nArguments:\n\n  -part <arg> - (Optional) The new target part for the design when it is\n  reloaded. This overrides the constraint file part specified in the project\n  data on the hard drive.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following command reloads the current design from the project data on\n  hard disk. This will overwrite the unsaved changes of the design which are\n  in memory.\n\n    refresh_design \n    \n\n  Note: You can use the command to undo a series of changes to the design and\n  revert to the previously saved design.\n\n  The following example refreshes the current design using the specified V6\n  part as the target device. The second command is required to make the\n  selected part the target device for the active implementation run.\n\n    refresh_design -part xc6vcx75tff784-1   \n    set_property part xc6vcx75tff784-1 [get_runs impl_6] \n    \n\n  Note: The second command is not required if the target part is not changed.\n\nSee Also:\n\n   *  set_property\n",
"rename": "rename(n)             Tcl Built-In Commands             rename(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       rename - Rename or delete a command\n\nSYNOPSIS\n       rename oldName newName\n_________________________________________________________________\n\n\nDESCRIPTION\n       Rename  the command that used to be called oldName so that\n       it is now called newName.  If newName is an  empty  string\n       then  oldName is deleted.  oldName and newName may include\n       namespace qualifiers (names of containing namespaces).  If\n       a  command  is  renamed into a different namespace, future\n       invocations of it will execute in the new namespace.   The\n       rename command returns an empty string as result.\n\nEXAMPLE\n       The  rename  command  can be used to wrap the standard Tcl\n       commands with your own monitoring machinery.  For example,\n       you  might  wish  to count how often the source command is\n       called:\n              rename ::source ::theRealSource\n              set sourceCount 0\n              proc ::source args {\n                  global sourceCount\n                  puts 'called source for the [incr sourceCount]'th time'\n                  uplevel 1 ::theRealSource $args\n              }\n\n\nSEE ALSO\n       namespace(n), proc(n)\n\n\nKEYWORDS\n       command, delete, namespace, rename\n\n\n\nTcl                                                     rename(n)\n",
"lset": "lset(n)               Tcl Built-In Commands               lset(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lset - Change an element in a list\n\nSYNOPSIS\n       lset varName ?index...? newValue\n_________________________________________________________________\n\nDESCRIPTION\n       The  lset  command  accepts a parameter, varName, which it\n       interprets as the name of  a  variable  containing  a  Tcl\n       list.  It also accepts zero or more indices into the list.\n       The indices may be presented either consecutively  on  the\n       command  line, or grouped in a Tcl list and presented as a\n       single argument.  Finally, it accepts a new value  for  an\n       element of varName.\n\n       If no indices are presented, the command takes the form:\n              lset varName newValue\n       or\n              lset varName {} newValue\n       In this case, newValue replaces the old value of the vari-\n       able varName.\n\n       When presented with  a  single  index,  the  lset  command\n       treats  the content of the varName variable as a Tcl list.\n       It addresses the index'th element in it (0 refers  to  the\n       first  element  of the list).  When interpreting the list,\n       lset observes the same rules concerning braces and  quotes\n       and  backslashes  as the Tcl command interpreter; however,\n       variable substitution  and  command  substitution  do  not\n       occur.   The  command  constructs  a new list in which the\n       designated element is replaced with  newValue.   This  new\n       list  is  stored  in the variable varName, and is also the\n       return value from the lset command.\n\n       If index is negative or greater than or equal to the  num-\n       ber of elements in $varName, then an error occurs.\n\n       The  interpretation of each simple index value is the same |\n       as for the command string index, supporting  simple  index |\n       arithmetic and indices relative to the end of the list.\n\n       If  additional  index  arguments  are  supplied, then each\n       argument is used in turn to address an  element  within  a\n       sublist  designated  by  the  previous indexing operation,\n       allowing the script to alter elements  in  sublists.   The\n       command,\n              lset a 1 2 newValue\n       or\n              lset a {1 2} newValue\n       replaces element 2 of sublist 1 with newValue.\n\n       The  integer  appearing  in  each  index  argument must be\n       greater than or equal to zero.  The integer  appearing  in\n       each  index argument must be strictly less than the length\n       of the corresponding list.  In other words, the lset  com-\n       mand  cannot  change  the  size of a list.  If an index is\n       outside the permitted range, an error is reported.\n\nEXAMPLES\n       In each of these examples, the initial value of x is:\n              set x [list [list a b c] [list d e f] [list g h i]]\n                    -> {a b c} {d e f} {g h i}\n       The indicated return value also becomes the new value of x\n       (except  in  the last case, which is an error which leaves\n       the value of x unchanged.)\n              lset x {j k l}\n                    -> j k l\n              lset x {} {j k l}\n                    -> j k l\n              lset x 0 j\n                    -> j {d e f} {g h i}\n              lset x 2 j\n                    -> {a b c} {d e f} j\n              lset x end j\n                    -> {a b c} {d e f} j\n              lset x end-1 j\n                    -> {a b c} j {g h i}\n              lset x 2 1 j\n                    -> {a b c} {d e f} {g j i}\n              lset x {2 1} j\n                    -> {a b c} {d e f} {g j i}\n              lset x {2 3} j\n                    -> list index out of range\n       In the following examples, the initial value of x is:\n              set x [list [list [list a b] [list c d]] \\\n                          [list [list e f] [list g h]]]\n                    -> {{a b} {c d}} {{e f} {g h}}\n       The indicated return value also becomes the new  value  of\n       x.\n              lset x 1 1 0 j\n                    -> {{a b} {c d}} {{e f} {j h}}\n              lset x {1 1 0} j\n                    -> {{a b} {c d}} {{e f} {j h}}\n\nSEE ALSO\n       list(n),  lappend(n),  lindex(n),  linsert(n), llength(n),\n       lsearch(n), lsort(n), lrange(n), lreplace(n), string(n)    |\n\n\n\nKEYWORDS\n       element, index, list, replace, set\n\n\n\nTcl                            8.4                        lset(n)\n",
"current_project": "current_project\n\nDescription: \nSet or get current project\n\nSyntax: \ncurrent_project  [-quiet] [-verbose] [<project>]\n\nReturns: \ncurrent or newly set project object\n\nUsage: \n  Name         Description\n  ------------------------\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  [<project>]  Project to set as current\n\nCategories: \nProject\n\nDescription:\n\n  Specifies the current project or returns the current project when no\n  project is specified.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <project> - (Optional) The name of the project to make current. This\n  command can be used prior to the close_project to make a specific project\n  active and then to close the project.\n\nExamples:\n\n  The following example sets project_2 as the current project:\n\n    current_project project_2 \n    \n\n  This command makes the current project the focus of all the tool commands.\n  In the GUI mode, the current project is defined automatically when\n  switching the GUI between projects.\n\n  The following example returns the name of the current project in the tool:\n\n    current_project \n    \n\n  Note: The returned value is the name of the project and not the name or\n  path of the project file.\n\nSee Also:\n\n   *  close_project\n   *  create_project\n   *  current_design\n",
"read_hw": "The command 'read_hw' is auto loaded by Tcl. To explicitly load the command type 'load_features labtools'.",
"infer_diff_pairs": "infer_diff_pairs\n\nDescription: \nInfer differential pairs, typically for ports just imported from a CSV or XDC file\n\nSyntax: \ninfer_diff_pairs  [-file_type <arg>] [-quiet] [-verbose] [<file>...]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-file_type]  Input file type: 'csv' or 'xdc'\n                Default: file type\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<file>]      Pin Planning CSV or XDC file\n                Default: file\n\nCategories: \nFileIO\n\nDescription:\n\n  The infer_diff_pairs command can be used in an I/O Pin Planning project,\n  after importing the I/O pin information using the read_csv or read_xdc\n  command.\n\n  There are several attributes that identify differential pairs in the file:\n  Signal Name, DiffPair Signal, DiffPair Type, and I/O Standard.\n\n  The tool will identify differential pairs using the following methods:\n\n   *  Matching Diff Pair - This is a direct definition of the two signals\n      which make up a differential pair. Two port entries, each have DiffPair\n      Signal values linking to the Signal Name of the other, and have\n      complementary DiffPair Type values, one N and one P. The tool checks to\n      ensure that the other attributes such as I/O Standard are compatible\n      when forming the diff pair.\n\n   *  Unmatched Diff Pair - Two port entries, with complementary DiffPair\n      Type values (one N, one P), but only one port has a DiffPair Signal\n      linking to the other Signal Name. The tool will create the differential\n      pair if all other attributes are compatible.\n\n   *  Single Port Diff Pair - A single port entry with a differential I/O\n      Standard, a DiffPair Type value, and a DiffPair Signal that does not\n      otherwise appear in the CSV. The tool will create the opposite side of\n      the differential pair (the N or P side), with all properties matching\n      those on the original port.\n\n   *  Inferred Diff Pair - Two ports entries, with Signal Names that imply\n      the N and P side. The tool will infer a differential pair if all other\n      attributes are compatible.\n\n  After reading the port definitions from a CSV or XDC file, the tool will\n  report that some differential pairs can be inferred from the data. You can\n  run the infer_diff_pairs command to infer these differential pairs if you\n  choose.\n\nArguments:\n\n  -file_type [ csv | xdc ] - (Optional) Specify the type of file to import\n  when inferring differential pairs. The valid file types are CSV and XDC.\n  There is no default; the -file_type must be specified.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <file> - (Optional) The name of the file previously imported.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example imports the specified XDC file, and then infers\n  differential pairs from the file:\n\n    read_xdc C:/Vivado_Install/io_1.xdc  \n    infer_diff_pairs C:/Vivado_Install/io_1.xdc -file_type xdc \n    \n\nSee Also:\n\n   *  read_csv\n   *  read_xdc\n",
"write_iphys_opt_tcl": "write_iphys_opt_tcl\n\nDescription: \nWrite iPhysOpt script.\n\nSyntax: \nwrite_iphys_opt_tcl  [-place] [-binary] [-quiet] [-verbose] [<output>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-place]    write out placement information\n  [-binary]   write out in binary format\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<output>]  tcl file containing iPhysOpt script\n\nCategories: \nTools\n\nDescription:\n\n  Because physical optimization requires timing data that is only available\n  after placement, the phys_opt_design command cannot be run prior to\n  placement. However, the interactive physical optimization feature, or\n  iphys_opt_design, lets you write out the physical optimizations performed\n  on the post-placed design, and then apply those optimizations to the design\n  netlist prior to placement. Refer to the Vivado Design Suite User Guide:\n  Implementation (UG904) for more information on interactive physical\n  optimization.\n\n  Interactive physical optimization can be used in two ways:\n\n   *  Applying post-placement physical optimizations to the pre-placement\n      netlist to improve the overall placement result and improve design\n      performance.\n\n   *  Saving the physical optimizations in a Tcl script to be repeated as\n      needed.\n\n  The write_iphys_opt_tcl command can only be run after placement, on a\n  design that has had actual physical optimizations performed.\n\n  Note: You can use the report_phys_opt command to report the physical\n  optimizations that have been performed on the design.\n\n  The output is a Tcl script file with a sequence of iphys_opt_design\n  commands listing the specific optimizations performed by the\n  phys_opt_design command. The iphys_opt Tcl script can be edited to change\n  the specific optimizations performed. The Tcl script provides a history of\n  the physical optimizations performed on the design after placement, marked\n  by date and history.\n\n  Note: The iphys_opt Tcl script contains the specific optimizations\n  performed by the phys_opt_design command, but does not include placement\n  and routing changes or results.\n\n  This command returns nothing if successful, or returns an error if it fails.\n\nArguments:\n\n  -place - (Optional) Write out placement data for optimized cells in the\n  design, as well as the physical optimization Tcl commands. The default\n  iphys_opt Tcl script does not include the placement data.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <output> - (Required) The name of the interactive physical optimization Tcl\n  file to write. You should specify the path, name, and extension for the\n  file.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\nExamples:\n\n  The following example writes the physical optimizations that have been\n  performed in the current design to the specified Tcl script:\n\n    write_iphys_opt_tcl C:/Data/myDesign_physopt.tcl \n    \n\nSee Also:\n\n   *  iphys_opt_design\n   *  phys_opt_design\n   *  read_iphys_opt_tcl\n   *  report_phys_opt\n",
"get_pkgpin_bytegroups": "get_pkgpin_bytegroups\n\nDescription: \nGet a list of package pin byte groups.\n\nSyntax: \nget_pkgpin_bytegroups  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                       [-quiet] [-verbose] [<patterns>]\n\nReturns: \npin_group\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the pin_group of these package_pins, iobank, site, or \n                 port.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match pin_group against patterns\n                 Default: *\n\nCategories: \nDevice, XDC, Object\n\nDescription:\n\n  Gets a list of the byte groups on the I/O banks of the current Xilinx\n  UltraScale device.\n\n  For 7 series devices, the hierarchy of IO Banks is divided into two object\n  types: I/O Banks and Package Pins. For Xilinx UltraScale FPGA devices, the\n  IO Bank hierarchy includes two additional divisions: Byte groups and\n  Nibbles.\n\n  The relationships of these objects on an UltraScale device are defined as\n  follows:\n\n   *  An iobank has 2 or 4 bytegroups.\n\n   *  Each pkgpin_bytegroup has 2 nibbles, an upper and lower, and has 13\n      package pins.\n\n   *  Each pkgpin_nibble has 6 or 7 pins, and is the upper or lower nibble of\n      the pkgpin_bytegroup.\n\n   *  A package_pin is one pin of an iobank, a pkgpin_bytegroup, or a\n      pkgpin_nibble.\n\n  Note: To improve memory and performance, the get_* commands return a\n  container list of a single type of objects (e.g. cells, nets, pins, or\n  ports). You can add new objects to the list (using lappend for instance),\n  but you can only add the same type of object that is currently in the list.\n  Adding a different type of object, or string, to the list is not permitted\n  and will result in a Tcl error.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_pkgpin_bytegroup based on property values on the objects. You can find\n  the properties on an object with the report_property or list_property\n  commands. In the case of the pkgpin_bytegroup object, 'NAME', and 'IOBANK'\n  are two of the properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -of_objects <arg> - (Optional) Get the pkgpin_bytegroups of the specified\n  iobank, site, port, or package_pin objects.\n\n  Note: The -of_objects option requires objects to be specified using the\n  get_* commands, such as get_cells or get_pins, rather than specifying\n  objects by name. In addition, -of_objects cannot be used with a search\n  <pattern>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match pkgpin_bytegroups against the specified\n  patterns. The default pattern is the wildcard `*` which returns all\n  pkgpin_bytegroups. More than one pattern can be specified to find multiple\n  pins based on different search criteria.\n\nExamples:\n\n  The following example gets a list of all pins on the package of the target\n  device:\n\n    \n    get_pkgpin_bytegroups -of [get_iobanks 44] \n    \n\nSee Also:\n\n   *  get_iobanks\n   *  get_package_pins\n   *  get_pkgpin_nibble\n   *  list_property\n   *  report_property\n",
"quit": "",
"export_bd_synth": "export_bd_synth\n\nDescription: \n(User-written application)\nCreate and write a single design checkpoint and stub files for a Block Design (BD), for use with third party synthesis tools. Perform synthesis as necessary.\n\n\nSyntax: \nexport_bd_synth  [-force] [-keep] [-verbose] [-quiet] <file>\n\nReturns: \n(none) An error will be thrown if the command is not successful\n\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Overwrite existing design checkpoint and stub files\n  [-keep]     Keep the temporary directory and project\n  [-verbose]  Print verbose messaging\n  [-quiet]    Ignore command errors\n  <file>      The Block Design file to write a synthesized checkpoint for\n\nCategories: \nsynthesis, xilinxtclstore, projutils, user-written\n\nDescription:\n\n  Runs synthesis for a Block Design (BD), integrates the design along with any\n  needed sub-designs (e.g. OOC synthesized IP), and writes out a single design\n  checkpoint of the entire synthesized design along with HDL stub files for\n  use in other synthesis tools. The output files will be placed in the same\n  directory as the source BD file.\n\nArguments:\n\n  -help - (Optional) Print this help.\n\n  -force - (Optional) Overwrite existing design checkpoint and stub files\n\n  -verbose - (Optional) Print verbose messaging.\n\n  -keep - (Optional) Keep temporary directory and project after export_bd_checkpoint has finished.\n\n  <file> - (Required) The Block Design file to write a synthesized checkpoint for\n\nSyntax:\n\n  export_bd_synth [-help] [-force] [-verbose] [-keep] <file>\n\nReturns:\n\n  (none) An error will be thrown if the command is not successful.\n\nExamples:\n\n  The following command will generate a synthesis checkpoint along with stub\n  files for the block_1.bd.\n\n  % export_bd_synth [get_files block_1.bd]\n\nSee Also:\n\n   *  get_files\n",
"get_noc_components": "get_noc_components\n\nDescription: \nGet NOC physical components\n\nSyntax: \nget_noc_components  [-regexp] [-nocase] [-filter <arg>] [-of_objects <args>]\n                    [-quiet] [-verbose] [<patterns>]\n\nReturns: \nnoc_component\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the noc_component of these noc_channel.\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match noc_component against patterns\n                 Default: *\n\nCategories: \nNOC, Object\n",
"read_ip": "read_ip\n\nDescription: \nRead one or more IP files\n\nSyntax: \nread_ip  [-quiet] [-verbose] <files>\n\nReturns: \nlist of IP file objects that were added\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <files>     IP file name(s)\n\nCategories: \nFileIO, IPFlow\n\nDescription:\n\n  Read the specified list of IP files (XCI) and add them to the design and\n  the current fileset. Files are added by reference into the current project,\n  just as in the add_files command.\n\n  You can use this command to read the contents of source files into the\n  in-memory design, when running the Vivado tool in Non Project mode, in\n  which there is no project file to maintain and manage the various project\n  source files. Refer to the Vivado Design Suite User Guide: Design Flows\n  Overview (UG892) for more information on Non Project mode.\n\n  When using the read_ip command all output products associated with the IP\n  core, including the design checkpoint file (DCP) will be read into the\n  in-memory design.\n\n  Note: In the project-based design flow, the Vivado tool will automatically\n  generate the necessary output products associated with an IP core. However,\n  in a non-project flow you must generate the necessary output products using\n  the synth_ip or generate_target commands. For more information on working\n  with IP refer to the Vivado Design Suite User Guide: Designing with IP\n  (UG896).\n\n  Use the import_ip command to add the IP cores and import the files into the\n  local project directory.\n\n  This command returns the list of files read.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <files> - (Required) The list of IP files to read into the current project.\n  Both XCI and XCO file formats are supported. An XCI file is an IP-XACT\n  format file that contains information about the IP parameterization. An XCO\n  file is a CORE Generator log file that records all the customization\n  parameters used to create the IP core and the project options in effect\n  when the core was generated.\n\nExamples:\n\n  The following example reads the specified IP files:\n\n    read_ip C:/test_ip/char_fifo.xci \n    \n\nSee Also:\n\n   *  add_files\n   *  import_ip\n",
"validate_hw_platform": "validate_hw_platform\n\nDescription: \nValidate the specified harware platform\n\nSyntax: \nvalidate_hw_platform  [-verbose] [-quiet] [<file>]\n\nReturns: \nThe name of the shell file\n\nUsage: \n  Name        Description\n  -----------------------\n  [-verbose]  Dump verbose information\n  [-quiet]    Ignore command errors\n  [<file>]    Xilinx Shell Archive file\n              Values: Path to shell file.\n\nCategories: \nVitis, Platform\n\nDescription:\n\n  Validate a Xilinx support archive (XSA) file to ensure it has the required\n  content for the platform.\n\n  This command returns information related to the validation of the XSA, or\n  returns an error if it fails.\n\nArguments:\n\n  -verbose - (Optional) Provide detailed information related to the XSA and\n  the validation process.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  <file> - (Optional) Specify the path and file name of the XSA file.\n\n  Note: If the path is not specified as part of the file name, the tool will\n  search for the specified file in the current working directory and then in\n  the directory from which the tool was launched.\n\nExamples:\n\n  The following example validates the specified XSA, returning verbose\n  information related to the platform contents:\n\n    validate_hw_platform C:/Data/zc706.xsa -verbose\n\nSee Also:\n\n   *  open_hw_platform\n   *  write_hw_platform\n",
"set_propagated_clock": "set_propagated_clock\n\nDescription: \nSpecify propagated clock latency\n\nSyntax: \nset_propagated_clock  [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   List of clocks, ports, or pins\n\nCategories: \nSDC, XDC\n\nDescription:\n\n  Propagates clock latency throughout a clock network, resulting in more\n  accurate skew and timing results throughout the clock network.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) A list of the clock objects to force propagation on.\n\nExamples:\n\n  This example specifies that the primary system clock from the top-level\n  should be propagated:\n\n    set_propagated_clock [get_clocks top/clk] \n    \n\n  This example specifies that all clocks from 'sublevel1' should be propagated:\n\n    set_propagated_clock [get_clocks sublevel1/*] \n    \n\nSee Also:\n\n   *  get_clocks\n   *  create_clock\n",
"generate_ml_strategies": "generate_ml_strategies\n\nDescription: \nGenerate ML strategies for a run\n\nSyntax: \ngenerate_ml_strategies  [-jobs <arg>] [-details] [-force] [-keep_launch_dir]\n                        [-suggestions_filter <arg>] [-quiet] [-verbose]\n                        <runs>...\n\nUsage: \n  Name                   Description\n  ----------------------------------\n  [-jobs]                Number of jobs\n                         Default: 1\n  [-details]             Prints job details\n  [-force]               Force to regenerate the ml strategies.\n  [-keep_launch_dir]     Keep the launch directory and files for analysis\n  [-suggestions_filter]  Filter for the internal call to write_qor_suggestion\n                         command\n                         Default: Category==Strategy\n  [-quiet]               Ignore command errors\n  [-verbose]             Suspend message limits during command execution\n  <runs>                 List of runs to generate ML strategies for\n\nCategories: \nObject, Run\n\nDescription:\n\n  Generates ML Strategies for a completed implementation run. It is a two\n  step process where the first step is to create the ML Strategy RQS files\n  and the second step is to create the implementation runs and reference the\n  RQS files.\n\n  ML Strategies are written to the directory <run>/MLStrategy. Once\n  strategies have been generated, implementation runs that reference the\n  strategy can be created.\n\n  In order to generate ML strategies, flow criteria must be met:\n\n   *  opt_design must be run with either Default or Explore directive.\n\n   *  place_design, phys_opt_design, and route_design must be run with the\n      same directive and be either Default or Explore.\n\n  For project mode strategies, there are two provided implementation\n  strategies that meet this criteria:\n\n   *  Implementation Defaults\n\n   *  Performance Explore\n\n  This command is intended for use in interactive mode where a user generates\n  strategies from a completed implementation run. For script users, it is\n  recommended to generate ML strategies as part of an implementation run as\n  this is a more efficient method. See the example below.\n\n  Note: This command is not supported in non-project mode. Refer alternative\n  examples in the Examples section.\n\n  ML Strategies are supported for Versal, Ultrascale+, and Ultrascale families.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  -jobs <arg> - (Optional) The number of parallel jobs to run on the local\n  host.\n\n  -details - (Optional) Print details on the jobs such as host, memory, and\n  user id.\n\n  -force - (Optional) Allows previous ML Strategies to be overwritten.\n\n  -keep_launch_dir - (Optional) Preserves the run directory used to open the\n  checkpoint and generate the ML strategies.\n\n  -suggestions_filter - (Optional) Filters the other QoR suggestions that are\n  generated. It is recommended to keep APPLIED suggestions as these form part\n  of the design that was evaluated to generate the strategies. This command\n  can be used to add other GENERATED suggestions.\n\n  Note: For more complex filtering, it is recommended to open the design and\n  write QoR suggestions from the Report > QoR Suggestions or Tcl natively\n  using report_qor_suggestions and write_qor_suggestions command.\n\n  <runs> - (Required) The names of implementation runs to launch. One or more\n  run names may be specified.\n\nExamples:\n\n  The following command creates ML Strategy RQS files after a run is complete\n  within a project.\n\n    generate_ml_strategies [get_runs impl_1] -suggestions_filter {APPLIED || Category==Strategy}\n\n  To generate the ML strategies during the implementation\n  run, either turn on the AUTO_RQS feature or add a Tcl hook script to the\n  post-route phase. AUTO_RQS will collect other category QoR Suggestions. For\n  more control over the other suggestions collected, use the Tcl hook option\n  and modify the filter command.\n\n   *  Execute the following command to enable AUTO_RQS\n\n        set_property AUTO_RQS 1 [get_runs impl_1]\n\n   *  Alternatively, add the following commands into the Tcl file and modify\n      the filter as required.\n\n        report_qor_suggestions\n        write_qor_suggestions -strategy_dir ./MLStrategy -of_objects [get_qor_suggestions -filter {APPLIED || Category == Strategy}]\n\n   *  Execute the following command to add the Tcl file to the post route Tcl\n      hook.\n\n        import_files -fileset utils_1 post_route.tcl\n        set_property STEPS.ROUTE_DESIGN.TCL.POST [ get_files post_route.tcl -of [get_fileset utils_1] ] [get_runs impl_1]\n\n  The following command create new runs and configure them to use the\n  strategy, whenever ML Strategies are generated.\n\n    create_rqs_runs -reference_run [get_runs impl_1]\n\n  Note: It is recommended to run three ML Strategies per design in maximize\n  timing improvement and smooth out variations.\n\n  For non-project users, the following commands generate ML strategy\n  suggestions and write them to an RQS file in ./MLStrategy directory.\n\n    report_qor_suggestions\n    write_qor_suggestions -strategy_dir ./MLStrategy -of_objects [get_qor_suggestions -filter {APPLIED || Category == Strategy}]\n\n  The following example shows the equivalent non-project based commands to\n  reference the RQS strategies.\n\n    <insert after link design or open checkpoint>\n    read_qor_suggestions ./MLStrategy/<top>_routedSuggestionFile[1||2||3].rqs\n    opt_design -directive RQS\n    place_design -directive RQS\n    phys_opt_design -directive RQS\n    route_design -directive RQS\n\nSee Also:\n\n   *  create_rqs_runs\n   *  report_qor_suggestions\n   *  write_qor_suggestions\n",
"get_oracle_feature_specs": "get_oracle_feature_specs\n\nDescription: \nGet the Oracle Feature Specifications for the current part.\n\nSyntax: \nget_oracle_feature_specs  [-regexp] [-nocase] [-filter <arg>]\n                          [-of_objects <args>] [-part <arg>] [-quiet]\n                          [-verbose] [<patterns>]\n\nReturns: \noracle_feature_spec\n\nUsage: \n  Name           Description\n  --------------------------\n  [-regexp]      Patterns are full regular expressions\n  [-nocase]      Perform case-insensitive matching. (valid only when -regexp \n                 specified)\n  [-filter]      Filter list with expression\n  [-of_objects]  Get the oracle_feature_spec of these part.\n  [-part]        Target part\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<patterns>]   Match oracle_feature_spec against patterns\n                 Default: *\n\nCategories: \nDevice, Object, Internal\n",
"update_files": "update_files\n\nDescription: \nUpdate file(s) in the project based on the file(s) or directory(ies) specified\n\nSyntax: \nupdate_files  [-from_files <args>] [-norecurse] [-to_files <args>]\n              [-filesets <args>] [-force] [-report_only] [-quiet] [-verbose]\n\nReturns: \nlist of the files updated\n\nUsage: \n  Name            Description\n  ---------------------------\n  [-from_files]   New files and directories to use for updating\n  [-norecurse]    Recursively search in specified directories\n  [-to_files]     Existing project files and directories to limit updates to\n  [-filesets]     Fileset name\n  [-force]        Overwrite imported files in the project, even if read-only,\n                  if possible\n  [-report_only]  Do no actual file updates, but report on updates that \n                  otherwise would have been made\n  [-quiet]        Ignore command errors\n  [-verbose]      Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  Updates the specified files with the contents of specified remote files.\n  Use this command to update a local file with the contents of its original\n  remote file, or replace it with the contents of a different remote file.\n\n  This command returns a list of updated files, or returns an error if it\n  fails.\n\nArguments:\n\n  -from_files <args> - (Optional) An ordered list of files or directories to\n  use when updating the -to_files to be updated.\n\n  -norecurse - (Optional) Disable recursive searching through specified\n  sub-directories.\n\n  -to_files <args> - (Optional) The path and filename of the file or files to\n  update with the specified -from_files.\n\n  -filesets <args> - (Optional) Overwrite the files in the specified fileset\n  with the -from_files.\n\n  -force - (Optional) Force the overwrite of specified files, even if they\n  are write restricted.\n\n  -report_only - (Optional) Run the command a generate a report related to\n  updated files, but do no actually update the files.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following example updates the various project source IP core files with\n  the specified -from_files, reporting the results without making any\n  updates:\n\n    \n    update_files -from_files C:/Data/IP/*.xci \\  \n       -to_file [get_files *.xci} -report_only \n    \n\n  Note: No warnings will be issued for newer local files that will be\n  overwritten.\n\nSee Also:\n\n   *  reimport_files\n",
"tclPkgSetup": "",
"reset_ssn": "reset_ssn\n\nDescription: \nClear a SSN results set from memory\n\nSyntax: \nreset_ssn  [-quiet] [-verbose] <name>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <name>      Name of the set of results\n\nCategories: \nReport\n\nDescription:\n\n  Clear the SSN results from the specified named result set.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) Specifies the name of the results to be cleared.\n\nExamples:\n\n  The following example clears the specified results set from memory:\n\n    reset_ssn SSN1 \n    \n\nSee Also:\n\n   *  report_ssn\n",
"set_disable_timing": "set_disable_timing\n\nDescription: \nDisable timing arcs\n\nSyntax: \nset_disable_timing  [-from <arg>] [-to <arg>] [-quiet] [-verbose] <objects>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-from]     From pin on cell\n  [-to]       To pin on cell\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <objects>   List of cells or pins, ports, lib-cells, lib-pins, libcell/cell\n              timing-arcs\n\nCategories: \nSDC, XDC, Timing\n\nDescription:\n\n  Disables timing arcs within a specified cell or cells that lead to the\n  output pins of the cell. Only the I/O paths between the clock port and the\n  outputs of the cell are disabled.\n\n  The purpose of disabling a timing arc is to prevent timing analysis through\n  the arc.\n\n  If a <cell> is specified, then all timing arcs in that cell are disabled.\n  If the optional -from and -to arguments are specified, then the timing arcs\n  are defined by the from/to pins. If only -from is speified then all timing\n  arcs from that pin are disabled. If only -to is specified then all timing\n  paths to that pin are disabled.\n\n  If a <port> is specified, then all timing paths from a specified input port\n  are disabled, or timing paths to a specified output port are disabled.\n\n  Note: This command operates silently and does not return direct feedback of\n  its operation\n\nArguments:\n\n  -from <pin_name> - (Optional) Specifies the source pin of an object cell.\n  The pin_name is specified by name only, without the need for the\n  hierarchical cell name, which is defined by the <object>.\n\n  -to <pin_name> - (Optional) Specifies the destination pin of an object\n  cell. The pin_name is specified by name only, without the need for the\n  hierarchical cell name, which is defined by the <object>.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <objects> - (Required) A list of one or more objects on which to disable\n  the timing arcs. Must be specified as Vivado objects returned by get_cells\n  or other appropriate Tcl commands. Can be any of the following types of\n  objects: cells, ports, pins, lib-cells, lib-pins, lib-cell/cell timing\n  arcs.\n\nExamples:\n\n  The following example disable the timing arc between the pins I0 and O of\n  the LUT div_dec_ff_i/U0/count_i_1 to break a combinational loop:\n\n    set_disable_timing -from I0 -to O [get_cells div_dec_ff_i/U0/count_i_1] \n    \n\n  The following example disables the timing arcs between the specified input\n  pin to the specified output pin of a BRAM cell:\n\n    \n    set_disable_timing -from WEBWE[3] -to CLKMEM [get_cells \\  \n       ldpc_dout360_channel/U_AP_FIFO_ldpc_dout360_channel_ram/mem_reg_0] \n    \n\n  The following example disables all timing arcs of the specified cell:\n\n    set arcs [get_timing_arcs -of_objects [get_cells \\  \n       ldpc_dout360_channel/U_AP_FIFO_ldpc_dout360_channel_ram/mem_reg_0]]  \n    set_disable_timing $arcs \n    \n\nSee Also:\n\n   *  get_cells\n   *  get_timing_arcs\n   *  report_timing\n",
"current_fileset": "current_fileset\n\nDescription: \nGet the current fileset (any type) or set the current fileset (applicable to simulation filesets only)\n\nSyntax: \ncurrent_fileset  [-constrset] [-simset] [-quiet] [-verbose] [<fileset>...]\n\nReturns: \ncurrent fileset (the current srcset by default)\n\nUsage: \n  Name          Description\n  -------------------------\n  [-constrset]  Get the current constraints fileset\n  [-simset]     Get the current active simulation fileset\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<fileset>]   Specify the simulation fileset to set as current (active); \n                optional\n\nCategories: \nProject\n\nDescription:\n\n  Get the active source, constraint, or simulation fileset within the current\n  project.\n\n  When used without any options, current_fileset sets and returns the\n  sources_1 set as the active fileset.\n\n  This command can also be used to set the current simulation fileset.\n\n  Note: Use set_property CONSTRSET to define the active constraint set on a\n  synthesis or implementation run.\n\nArguments:\n\n  -constrset - (Optional) Return the currently active constraint set.\n\n  -simset - (Optional) Return or set the currently active simulation fileset.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <fileset> - (Optional) The name of the simulation fileset to make active.\n  This argument sets the active simulation fileset in projects with multiple\n  filesets. When <fileset> is not specified, the sources_1 fileset is\n  returned as the active fileset.\n\nExamples:\n\n  The following example returns the name of the currently active constraint\n  fileset:\n\n    current_fileset -constrset \n    \n\n  The following example sets sim_2 as the active simulation set:\n\n    current_fileset -simset sim_2 \n    \n\nSee Also:\n\n   *  create_fileset\n   *  delete_fileset\n   *  get_filesets\n",
"expr": "expr(n)               Tcl Built-In Commands               expr(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       expr - Evaluate an expression\n\nSYNOPSIS\n       expr arg ?arg arg ...?\n_________________________________________________________________\n\nDESCRIPTION\n       Concatenates  args (adding separator spaces between them),\n       evaluates the result as a Tcl expression, and returns  the\n       value.  The operators permitted in Tcl expressions include\n       a subset of the operators permitted in C expressions.  For\n       those  operators common to both Tcl and C, Tcl applies the\n       same meaning and precedence as the corresponding C  opera-\n       tors.   Expressions  almost  always  yield numeric results\n       (integer or  floating-point  values).   For  example,  the\n       expression\n              expr 8.2 + 6\n       evaluates  to 14.2.  Tcl expressions differ from C expres-\n       sions in the way that operands are specified.   Also,  Tcl\n       expressions  support  non-numeric operands and string com-\n       parisons, as well as some additional operators  not  found\n       in C.\n\n   OPERANDS\n       A  Tcl  expression  consists of a combination of operands,\n       operators, and  parentheses.   White  space  may  be  used\n       between  the operands and operators and parentheses; it is\n       ignored by the expression's instructions.  Where possible,\n       operands  are interpreted as integer values.  Integer val- |\n       ues may be specified in  decimal  (the  normal  case),  in |\n       binary  (if  the  first  two characters of the operand are |\n       0b), in octal (if the first two characters of the  operand |\n       are 0o), or in hexadecimal (if the first two characters of |\n       the operand are 0x).  For  compatibility  with  older  Tcl |\n       releases,  an octal integer value is also indicated simply |\n       when the first character of the operand is 0,  whether  or |\n       not  the  second  character is also o.  If an operand does |\n       not have one of the integer formats given above,  then  it |\n       is treated as a floating-point number if that is possible. |\n       Floating-point numbers may be specified in any of  several |\n       common formats making use of the decimal digits, the deci- |\n       mal point ., the characters e or E  indicating  scientific |\n       notation,  and  the  sign characters + or -.  For example, |\n       all of the following  are  valid  floating-point  numbers: |\n       2.1, 3., 6e4, 7.91e+16.  Also recognized as floating point |\n       values are the strings Inf and NaN making use of any  case |\n       for  each character.  If no numeric interpretation is pos-\n       sible (note that all literal operands that are not numeric\n       or  boolean must be quoted with either braces or with dou-\n       ble quotes), then an operand is left as a string (and only\n       a limited set of operators may be applied to it).\n\n       Operands may be specified in any of the following ways:\n\n       [1]    As  a  numeric  value,  either integer or floating-\n              point.\n\n       [2]    As a boolean value, using any  form  understood  by\n              string is boolean.\n\n       [3]    As  a Tcl variable, using standard $ notation.  The\n              variable's value will be used as the operand.\n\n       [4]    As a string enclosed in double-quotes.  The expres-\n              sion  parser  will perform backslash, variable, and\n              command substitutions on  the  information  between\n              the  quotes,  and  use  the  resulting value as the\n              operand\n\n       [5]    As a string enclosed  in  braces.   The  characters\n              between  the  open  brace  and matching close brace\n              will be used as the operand without  any  substitu-\n              tions.\n\n       [6]    As a Tcl command enclosed in brackets.  The command\n              will be executed and its result will be used as the\n              operand.\n\n       [7]    As a mathematical function whose arguments have any\n              of the above forms for operands, such  as  sin($x).\n              See  MATH  FUNCTIONS  below for a discussion of how\n              mathematical functions are handled.\n\n       Where the above substitutions occur  (e.g.  inside  quoted\n       strings),  they are performed by the expression's instruc-\n       tions.  However, the command parser may already have  per-\n       formed  one  round  of  substitution before the expression\n       processor was called.  As discussed below, it  is  usually\n       best  to enclose expressions in braces to prevent the com-\n       mand parser from performing substitutions on the contents.\n\n       For some examples of simple expressions, suppose the vari-\n       able a has the value 3 and the variable b has the value 6.\n       Then  the  command  on  the left side of each of the lines\n       below will produce the value on  the  right  side  of  the\n       line:\n              expr 3.1 + $a           6.1\n              expr 2 + '$a.$b'        5.6\n              expr 4*[llength '6 2']  8\n              expr {{word one} < 'word $a'}0\n\n   OPERATORS\n       The  valid  operators (most of which are also available as\n       commands in the tcl::mathop namespace; see  the  mathop(n)\n       manual  page  for  details)  are  listed below, grouped in\n       decreasing order of precedence:\n\n       -  +  ~  !          Unary minus, unary plus, bit-wise NOT,\n                           logical  NOT.  None of these operators\n                           may be applied to string operands, and\n                           bit-wise  NOT  may  be applied only to\n                           integers.\n\n       **                  Exponentiation.  Valid for any numeric |\n                           operands.\n\n       *  /  %             Multiply,  divide, remainder.  None of\n                           these  operators  may  be  applied  to\n                           string  operands, and remainder may be\n                           applied only to integers.  The remain-\n                           der  will always have the same sign as\n                           the  divisor  and  an  absolute  value\n                           smaller than the divisor.\n\n       +  -                Add   and  subtract.   Valid  for  any\n                           numeric operands.\n\n       <<  >>              Left and right shift.  Valid for inte-\n                           ger  operands  only.   A  right  shift\n                           always propagates the sign bit.\n\n       <  >  <=  >=        Boolean less, greater,  less  than  or\n                           equal,  and  greater  than  or  equal.\n                           Each operator produces 1 if the condi-\n                           tion  is  true,  0  otherwise.   These\n                           operators may be applied to strings as\n                           well  as  numeric  operands,  in which\n                           case string comparison is used.\n\n       ==  !=              Boolean equal  and  not  equal.   Each\n                           operator  produces  a zero/one result.\n                           Valid for all operand types.\n\n       eq  ne              Boolean string equal  and  string  not\n                           equal.    Each   operator  produces  a\n                           zero/one result.   The  operand  types\n                           are interpreted only as strings.\n\n       in  ni              List containment and negated list con- |\n                           tainment.  Each  operator  produces  a |\n                           zero/one  result  and treats its first |\n                           argument as a string  and  its  second |\n                           argument as a Tcl list.  The in opera- |\n                           tor indicates whether the first  argu- |\n                           ment  is  a member of the second argu- |\n                           ment list; the ni operator inverts the |\n                           sense of the result.\n\n       &                   Bit-wise   AND.    Valid  for  integer\n                           operands only.\n\n       ^                   Bit-wise  exclusive  OR.   Valid   for\n                           integer operands only.\n\n       |                   Bit-wise   OR.    Valid   for  integer\n                           operands only.\n\n       &&                  Logical AND.  Produces a 1  result  if\n                           both  operands  are non-zero, 0 other-\n                           wise.  Valid for boolean  and  numeric\n                           (integers  or floating-point) operands\n                           only.\n\n       ||                  Logical OR.  Produces a  0  result  if\n                           both  operands  are zero, 1 otherwise.\n                           Valid for boolean and  numeric  (inte-\n                           gers or floating-point) operands only.\n\n       x?y:z               If-then-else, as in C.  If x evaluates\n                           to  non-zero,  then  the result is the\n                           value of y.  Otherwise the  result  is\n                           the  value  of  z.  The x operand must\n                           have a boolean or numeric value.\n\n       See the C manual for more details on the results  produced\n       by  each  operator.   The exponentiation operator promotes |\n       types like the multiply and divide operators, and produces |\n       a  result  that is the same as the output of the pow func- |\n       tion (after any type  conversions.)   All  of  the  binary\n       operators  group  left-to-right within the same precedence\n       level.  For example, the command\n              expr {4*2 < 7}\n       returns 0.\n\n       The &&, ||, and ?: operators have 'lazy evaluation',  just\n       as  in  C,  which means that operands are not evaluated if\n       they are not needed to determine the outcome.   For  exam-\n       ple, in the command\n              expr {$v ? [a] : [b]}\n       only  one  of  '[a]'  or '[b]' will actually be evaluated,\n       depending on the value of $v.  Note, however, that this is\n       only  true if the entire expression is enclosed in braces;\n       otherwise the Tcl parser  will  evaluate  both  '[a]'  and\n       '[b]' before invoking the expr command.\n\n   MATH FUNCTIONS\n       When the expression parser encounters a mathematical func- |\n       tion such as sin($x), it replaces it with  a  call  to  an |\n       ordinary Tcl function in the tcl::mathfunc namespace.  The |\n       processing of an expression such as:                       |\n              expr {sin($x+$y)}                                   |\n       is the same in every way as the processing of:             |\n              expr {[tcl::mathfunc::sin [expr {$x+$y}]]}          |\n       which in turn is the same as the processing of:            |\n              tcl::mathfunc::sin [expr {$x+$y}]                   |\n\n       The executor will search for tcl::mathfunc::sin using  the |\n       usual  rules for resolving functions in namespaces. Either |\n       ::tcl::mathfunc::sin  or  [namespace  current]::tcl::math- |\n       func::sin will satisfy the request, and others may as well |\n       (depending on the current namespace path setting).         |\n\n       See the mathfunc(n) manual page  for  the  math  functions |\n       that are available by default.\n\n   TYPES, OVERFLOW, AND PRECISION\n       All  internal  computations  involving  integers  are done |\n       calling  on  the  LibTomMath  multiple  precision  integer |\n       library  as  required so that all integer calculations are |\n       performed exactly.  Note that in  Tcl  releases  prior  to |\n       8.5, integer calculations were performed with one of the C |\n       types long int  or  Tcl_WideInt,  causing  implicit  range |\n       truncation  in  those calculations where values overflowed |\n       the range of those types.  Any code that relied  on  these |\n       implicit  truncations will need to explicitly add int() or |\n       wide() function calls to expressions at the  points  where |\n       such truncation is required to take place.\n\n       All  internal  computations  involving  floating-point are\n       done with the C type double.  When converting a string  to\n       floating-point,  exponent overflow is detected and results\n       in the double value of Inf or -Inf as appropriate.  Float-\n       ing-point  overflow  and  underflow  are  detected  to the\n       degree supported  by  the  hardware,  which  is  generally\n       pretty reliable.\n\n       Conversion  among  internal  representations  for integer,\n       floating-point, and string operands is done  automatically\n       as needed.  For arithmetic computations, integers are used\n       until some  floating-point  number  is  introduced,  after\n       which floating-point is used.  For example,\n              expr {5 / 4}\n       returns 1, while\n              expr {5 / 4.0}\n              expr {5 / ( [string length 'abcd'] + 0.0 )}\n       both   return  1.25.   Floating-point  values  are  always\n       returned with a '.'  or an 'e' so that they will not  look\n       like integer values.  For example,\n              expr {20.0/5.0}\n       returns 4.0, not 4.\n\n   STRING OPERATIONS\n       String  values  may  be used as operands of the comparison\n       operators, although the expression evaluator tries  to  do\n       comparisons  as  integer  or  floating-point  when it can,\n       except in the case of the eq and ne operators.  If one  of\n       the operands of a comparison is a string and the other has\n       a numeric value, a canonical string representation of  the\n       numeric  operand  value  is  generated to compare with the\n       string operand.  Canonical string representation for inte-\n       ger  values  is a decimal string format.  Canonical string\n       representation for floating-point values is that  produced\n       by  the  %g format specifier of Tcl's format command.  For\n       example, the commands\n              expr {'0x03' > '2'}\n              expr {'0y' < '0x12'}\n       both return 1.  The first comparison is done using integer\n       comparison, and the second is done using string comparison\n       after the second operand is converted to  the  string  18.\n       Because of Tcl's tendency to treat values as numbers when-\n       ever possible, it is not generally  a  good  idea  to  use\n       operators  like  == when you really want string comparison\n       and the values of the operands could be arbitrary;  it  is\n       better  in  these  cases to use the eq or ne operators, or\n       the string command instead.\n\nPERFORMANCE CONSIDERATIONS\n       Enclose expressions in braces for the best speed  and  the\n       smallest  storage requirements.  This allows the Tcl byte-\n       code compiler to generate the best code.\n\n       As mentioned above,  expressions  are  substituted  twice:\n       once  by the Tcl parser and once by the expr command.  For\n       example, the commands\n              set a 3\n              set b {$a + 2}\n              expr $b*4\n       return 11, not a multiple of 4.  This is because  the  Tcl\n       parser  will  first  substitute $a + 2 for the variable b,\n       then the expr command will evaluate the  expression  $a  +\n       2*4.\n\n       Most  expressions do not require a second round of substi-\n       tutions.  Either they are enclosed in braces or,  if  not,\n       their  variable and command substitutions yield numbers or\n       strings that  do  not  themselves  require  substitutions.\n       However,  because  a  few  unbraced  expressions  need two\n       rounds of substitutions, the bytecode compiler  must  emit\n       additional  instructions  to  handle  this situation.  The\n       most expensive code is required for  unbraced  expressions\n       that  contain  command  substitutions.   These expressions\n       must be implemented by generating new code each  time  the\n       expression  is  executed.  When the expression is unbraced |\n       to allow the substitution of a function or operator,  con- |\n       sider  using the commands documented in the mathfunc(n) or |\n       mathop(n) manual pages directly instead.\n\nEXAMPLES\n       Define a procedure that computes an  'interesting'  mathe-\n       matical function:\n              proc tcl::mathfunc::calc {x y} {\n                  expr { ($x**2 - $y**2) / exp($x**2 + $y**2) }\n              }\n\n       Convert polar coordinates into cartesian coordinates:\n              # convert from ($radius,$angle)\n              set x [expr { $radius * cos($angle) }]\n              set y [expr { $radius * sin($angle) }]\n\n       Convert cartesian coordinates into polar coordinates:\n              # convert from ($x,$y)\n              set radius [expr { hypot($y, $x) }]\n              set angle  [expr { atan2($y, $x) }]\n\n       Print  a message describing the relationship of two string\n       values to each other:\n              puts 'a and b are [expr {$a eq $b ? {equal} : {different}}]'\n\n       Set a variable to whether an environment variable is  both\n       defined at all and also set to a true boolean value:\n              set isTrue [expr {\n                  [info exists ::env(SOME_ENV_VAR)] &&\n                  [string is true -strict $::env(SOME_ENV_VAR)]\n              }]\n\n       Generate a random integer in the range 0..99 inclusive:\n              set randNum [expr { int(100 * rand()) }]\n\nSEE ALSO\n       array(n),  for(n),  if(n),  mathfunc(n), mathop(n), names-\n       pace(n), proc(n), string(n), Tcl(n), while(n)\n\nKEYWORDS\n       arithmetic, boolean, compare, expression, fuzzy comparison\n\nCOPYRIGHT\n       Copyright (c) 1993 The Regents of the University of California.\n       Copyright (c) 1994-2000 Sun Microsystems Incorporated.\n       Copyright (c) 2005 by Kevin B. Kenny <kennykb@acm.org>. All rights reserved.\n\n\n\nTcl                            8.5                        expr(n)\n",
"regsub": "regsub(n)             Tcl Built-In Commands             regsub(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       regsub - Perform substitutions based on regular expression\n       pattern matching\n\nSYNOPSIS\n       regsub ?switches? exp string subSpec ?varName?\n_________________________________________________________________\n\nDESCRIPTION\n       This command matches the regular  expression  exp  against\n       string,  and  either  copies  string to the variable whose\n       name is given by varName or returns string if  varName  is\n       not present.  (Regular expression matching is described in\n       the re_syntax reference page.)  If there is a match,  then\n       while  copying string to varName (or to the result of this\n       command if varName is not present) the portion  of  string\n       that  matched  exp  is  replaced with subSpec.  If subSpec\n       contains a '&' or '\\0', then it is replaced in the substi-\n       tution  with  the  portion of string that matched exp.  If\n       subSpec contains a '\\n', where n is a digit between 1  and\n       9,  then  it is replaced in the substitution with the por-\n       tion of string that matched the n'th parenthesized  subex-\n       pression  of  exp.   Additional backslashes may be used in\n       subSpec to prevent special interpretation  of  '&',  '\\0',\n       '\\n'  and  backslashes.  The use of backslashes in subSpec\n       tends to interact badly with the Tcl parser's use of back-\n       slashes,  so  it is generally safest to enclose subSpec in\n       braces if it includes backslashes.\n\n       If the initial arguments to regsub start with - then  they\n       are  treated as switches.  The following switches are cur-\n       rently supported:\n\n       -all      All ranges in string that match  exp  are  found\n                 and  substitution is performed for each of these\n                 ranges.  Without  this  switch  only  the  first\n                 matching  range  is  found  and substituted.  If\n                 -all is specified, then '&' and  '\\n'  sequences\n                 are  handled  for  each  substitution  using the\n                 information from the corresponding match.\n\n       -expanded      Enables use of the expanded regular expres-\n                      sion  syntax  where whitespace and comments\n                      are ignored.  This is the same as  specify-\n                      ing  the  (?x)  embedded  option  (see  the\n                      re_syntax manual page).\n\n       -line          Enables  newline-sensitive  matching.    By\n                      default,  newline  is a completely ordinary\n                      character with no  special  meaning.   With\n                      this flag, '[^' bracket expressions and '.'\n                      never match newline, '^' matches  an  empty\n                      string after any newline in addition to its\n                      normal function, and '$' matches  an  empty\n                      string  before  any  newline in addition to\n                      its normal function.  This flag is  equiva-\n                      lent to specifying both -linestop and -lin-\n                      eanchor, or the (?n) embedded  option  (see\n                      the re_syntax manual page).\n\n       -linestop      Changes   the   behavior  of  '[^'  bracket\n                      expressions and '.'  so that they  stop  at\n                      newlines.   This  is the same as specifying\n                      the (?p) embedded option (see the re_syntax\n                      manual page).\n\n       -lineanchor    Changes  the  behavior  of '^' and '$' (the\n                      'anchors') so they match the beginning  and\n                      end  of  a  line respectively.  This is the\n                      same as specifying the (?w) embedded option\n                      (see the re_syntax manual page).\n\n       -nocase   Upper-case  characters  in  string  will be con-\n                 verted to  lower-case  before  matching  against\n                 exp;   however,  substitutions specified by sub-\n                 Spec  use  the  original  unconverted  form   of\n                 string.\n\n       -start index\n                 Specifies  a  character  index  offset  into the\n                 string to start matching the regular  expression\n                 at.   The index value is interpreted in the same |\n                 manner as the index argument  to  string  index.\n                 When  using  this switch, '^' will not match the\n                 beginning of the line, and \\A will  still  match\n                 the start of the string at index.  index will be\n                 constrained to the bounds of the input string.\n\n       --        Marks the end of switches.  The argument follow-\n                 ing  this  one will be treated as exp even if it\n                 starts with a -.\n\n       If varName is supplied, the command returns a count of the\n       number  of  matching  ranges that were found and replaced,\n       otherwise the string after replacement is  returned.   See\n       the manual entry for regexp for details on the interpreta-\n       tion of regular expressions.\n\nEXAMPLES\n       Replace (in the string in variable string) every  instance\n       of foo which is a word by itself with bar:\n              regsub -all {\\mfoo\\M} $string bar string\n       or (using the 'basic regular expression' syntax):\n              regsub -all {(?b)\\<foo\\>} $string bar string\n\n       Insert double-quotes around the first instance of the word\n       interesting, however it is capitalized.\n              regsub -nocase {\\yinteresting\\y} $string {'&'} string\n\n       Convert all non-ASCII and Tcl-significant characters  into\n       \\u  escape sequences by using regsub and subst in combina-\n       tion:\n              # This RE is just a character class for everything 'bad'\n              set RE {[][{};#\\\\\\$\\s\\u0080-\\uffff]}\n\n              # We will substitute with a fragment of Tcl script in brackets\n              set substitution {[format \\\\\\\\u%04x [scan '\\\\&' %c]]}\n\n              # Now we apply the substitution to get a subst-string that\n              # will perform the computational parts of the conversion.\n              set quoted [subst [regsub -all $RE $string $substitution]]\n\nSEE ALSO\n       regexp(n), re_syntax(n), subst(n), string(n)               |\n\nKEYWORDS\n       match, pattern, quoting, regular expression, substitute\n\n\n\nTcl                            8.3                      regsub(n)\n",
"write_chipscope_cdc": "",
"platform_verify": "platform_verify\n\nDescription: \nTCL task to verify platform by comparing files at the bit level\n\nSyntax: \nplatform_verify  -reference <arg> [-untrusted <arg>] [-in_memory] [-cell <arg>]\n                 [-quiet] [-verbose]\n\nUsage: \n  Name          Description\n  -------------------------\n  -reference    full path to trusted reference DCP file\n  [-untrusted]  full path to untrusted DCP file\n  [-in_memory]  use in-memory design for comparison, when -untrusted option \n                is not specified\n  [-cell]       Name of reconfigurable cell which will be verified\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n\nCategories: \n\n\nDescription:\n\n  This command takes two design checkpoint files (DCP) and compares the\n  binary content of the files, comparing them at the bit-level.\n\nArguments:\n\n  -reference <arg> - (Required) Specifies the known good DCP as a reference\n  to compare.\n\n  -untrusted <arg> - (Optional) Specifies an unqualified DCP as the file to\n  be verified.\n\n  Note: -untrusted and -in_memory are both optional. However, at least one of\n  these options must be specified to indicate the untrusted design source.\n\n  -in_memory - (Optional) Use the current_design for comparison, when the\n  -untrusted option is not specified.\n\n  -cell <arg> - (Optional) Instructs the tool to compare the specified cell\n  in the two DCP files.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The following command compares the two design checkpoints:\n\n    platform_verify -reference C:/Data/design1/routed.dcp -untrusted C:/Data/design2/routed.dcp  \n     \n    \n\n  The following command compares the current design against the specified\n  design checkpoint in memory:\n\n    platform_verify -reference C:/Data/design1/routed.dcp -in_memory \n    \n\nSee Also:\n\n   *  current_design\n   *  read_checkpoint\n   *  write_checkpoint\n",
"create_project": "create_project\n\nDescription: \nCreate a new project\n\nSyntax: \ncreate_project  [-part <arg>] [-force] [-in_memory] [-ip] [-rtl_kernel]\n                [-quiet] [-verbose] [<name>] [<dir>]\n\nReturns: \nnew project object\n\nUsage: \n  Name           Description\n  --------------------------\n  [-part]        Target part\n  [-force]       Overwrite existing project directory\n  [-in_memory]   Create an in-memory project\n  [-ip]          Default GUI behavior is for a managed IP project\n  [-rtl_kernel]  Default GUI behavior is for a RTL Kernel project\n  [-quiet]       Ignore command errors\n  [-verbose]     Suspend message limits during command execution\n  [<name>]       Project name\n  [<dir>]        Directory where the project file is saved\n                 Default: .\n\nCategories: \nProject\n\nDescription:\n\n  Creates a Vivado Design Suite project file (.xpr), or a project file for\n  the Vivado Lab Edition (.lpr), in the specified directory.\n\n  For the Vivado Lab Edition: The create_project command has a different\n  command syntax, with fewer options, in the Vivado Lab Edition. The options\n  that are not supported in Vivado Lab Edition are:\n\n   *  -part - The Vivado Lab Edition project (.lpr) does not specify a target\n      part because the current_hw_target and current_hw_device determine the\n      target part.\n\n   *  -ip - The Vivado Lab Edition does not define projects for the Managed\n      IP flow.\n\n  For the Vivado Design Suite: The default project created for the Vivado\n  Design Suite is an RTL project, which defines the project as holding and\n  manage RTL source files in the source fileset. The type of project is\n  determined by the DESIGN_MODE Property on the source fileset when the\n  project is created. To change the project type, use the set_property\n  command to set the DESIGN_MODE property on the current_fileset as follows:\n\n   *  RTL Project - set_property DESIGN_MODE RTL [current_fileset]\n\n   *  Netlist Project - set_property DESIGN_MODE GateLvl [current_fileset]\n\n   *  I/O Planning Project - set_property DESIGN_MODE PinPlanning\n      [current_fileset]\n\n  Refer to the Vivado Design Suite User Guide: System-Level Design Entry\n  (UG895) for more information on the different types of projects.\n\n  This command returns a transcript of its process and the name of the\n  created project, or returns an error if it fails.\n\nArguments:\n\n  -part <arg> - (Optional) Specifies the Xilinx part to be used for the\n  project. This can be changed after the project is created. If the -part\n  option is not specified, the default part will be used. This option is not\n  supported in Vivado Lab Edition.\n\n  -force - (Optional) This option is required to overwrite an existing\n  project. If the project name is already define in the specified <dir> then\n  you must also specify the -force option for the tool to overwrite the\n  existing project.\n\n  Note: If the existing project is currently open in the tool, the new\n  project will overwrite the existing project on the disk, but both projects\n  will be opened in the tool. In this case you should probably run the\n  close_project command prior to running create_project.\n\n  -in_memory - (Optional) Specifies that the project should be created in the\n  in-memory database of the Vivado Design Suite to support the Non-Project\n  design flow. This project will not result in a project file or directory\n  structure being written to disk. The purpose of the in-memory project is to\n  allow properties usually associated with a project-based design to be\n  associated with the in-memory design of the non-project design flow.\n\n  Note: The use of -in_memory is not part of the standard non-project design\n  flow, and may cause unexpected behaviors in the Vivado tools. For more\n  information on Non-Project Mode refer to the Vivado Design Suite User\n  Guide: Design Flows Overview (UG892).\n\n  -ip - (Optional) Create a project for the Managed IP flow for exploring IP\n  in the IP catalog, customizing IP, and managing a repository of configured\n  IP. Refer to the Vivado Design Suite User Guide: Designing with IP (UG896)\n  for more information on the Managed IP flow. This option is not supported\n  in Vivado Lab Edition.\n\n  -rtl_kernel - (Optional) Specifies the creation of the project is for use\n  in defining an RTL kernel for the Vitis core development kit.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) This argument does not require a parameter name,\n  however, it must appear before the specified <dir>. Since these commands do\n  not have parameters, the tool interprets the first argument as <name> and\n  uses the second argument as <dir>. A project file is created <name>.xpr,\n  (or <name>.lpr) and a project data folder is also created <name>.data and\n  both are written into the specified directory <dir>.\n\n  Note: The project file created by the tool is an RTL source file by\n  default. You must use the set_property command to set the DESIGN_MODE\n  property to change the project from an RTL source project to a Netlist or\n  an I/O Pin Planning project.\n\n  <dir> - (Optional) This argument specifies the directory name to write the\n  new project file into. If the specified directory does not exist a new\n  directory will be created. If the directory is specified with the complete\n  path, the tool uses the specified path name. However, if <dir> is specified\n  without a path, the tool looks for or creates the directory in the current\n  working directory, or the directory from which the tool was launched.\n\n  Note: When creating a project in GUI-mode, the tool appends the <name> to\n  the <dir> and creates a project directory <dir>/<name> and places the new\n  project file and project data folder into that project directory.\n\nExamples:\n\n  When run from the Vivado Design Suite, the following example creates a\n  project called project1.xpr in a directory called myDesigns:\n\n    create_project project1 myDesigns \n    \n\n  Note: Because the <dir> is specified as the folder name only, the tool will\n  create the project in the current working directory, or the directory from\n  which the tool was launched.\n\n  When run from the Vivado Lab Edition, this example creates a project called\n  project1.lpr in a directory called myDesigns:\n\n    create_project project1 myDesigns \n    \n\n  The following example creates a project called Proj1 in a directory called\n  FPGA in C:/Designs. In addition, the tool will overwrite an existing\n  project if one is found to exist in the specified location. In the second\n  and third lines, the location of -force is changed to show the flexibility\n  of argument placement.\n\n    create_project Proj1 C:/Designs/FPGA -force  \n    -or-  \n    create_project Proj1 -force C:/Designs/FPGA  \n    -or-  \n    create_project -force Proj1 C:/Designs/FPGA  \n     \n    \n\n  Note: In all cases the first argument without a preceding keyword is\n  interpreted as the <name> variable, and the second argument without a\n  preceding keyword is the <dir> variable.\n\n  The following example creates a project for the Manage IP flow in the\n  specified directory:\n\n    create_project -ip manageIP C:/Data \n    \n\n  The following example creates a new project called pin_project, and then\n  sets the DESIGN_MODE property as required for an I/O Pin Planning project,\n  and finally opens an IO design:\n\n    create_project pin_project C:/Designs/PinPlanning  \n    set_property design_mode PinPlanning [current_fileset]    \n    open_io_design -name io_1 \n    \n\nSee Also:\n\n   *  close_project\n   *  current_hw_device\n   *  current_hw_target\n   *  current_project\n   *  open_io_design\n   *  open_project\n   *  save_project_as\n   *  set_property\n",
"get_simulators": "get_simulators\n\nDescription: \nGet registered simulators\n\nSyntax: \nget_simulators  [-regexp] [-nocase] [-filter <arg>] [-quiet] [-verbose]\n                [<patterns>]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-filter]     Filter list with expression\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match simulator names against patterns\n                Default: *\n\nCategories: \nToolLaunch, Simulation\n\nDescription:\n\n  Get the list of simulators registered for use with the Vivado Design Suite\n  unified simulation environment.\n\n  The Vivado Design Suite comes with some simulators pre-registered for use\n  with the unified simulation environment. You can also register your own\n  third-party simulators using the register_simulator command.\n\n  This command returns the names of registered simulators, or returns an\n  error if it fails.\n\nArguments:\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_simulators based on the properties on the registered simulators. You\n  can find the properties on a registered simulator object with the\n  report_property or list_property commands. In the case of the 'simulator'\n  object, 'NAME', 'DESCRIPTION', and 'TCLPROC.BOOTSTRAP' are some of the\n  properties that can be used to filter results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters that may be found in net, pin, or cell names, or other\n  properties. String matching is case-sensitive and is always anchored to the\n  start and to the end of the search string. The wildcard '*' character can\n  be used at the beginning or at the end of a search string to widen the\n  search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets input pins that do NOT contain the 'RESET' substring\n  within their name:\n\n    get_pins * -filter {DIRECTION == IN && NAME !~ '*RESET*'} \n    \n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_PRIMITIVE && !IS_LOC_FIXED} \n    \n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match available simulators against the specified\n  patterns. The default pattern is the wildcard `*` which gets all registered\n  simulators.\n\nExample:\n\n  The following example returns all registered simulators:\n\n    get_simulators \n    \n\nSee Also:\n\n   *  launch_simulation\n   *  register_simulator\n",
"config_implementation": "config_implementation\n\nDescription: \nConfigure Implementation\n\nSyntax: \nconfig_implementation  [-quiet] [-verbose] [<list>]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  [<list>]    list of config params which need to be configured\n\nCategories: \nConfiguration\n\nDescription:\n\n  This command lets you configure implementation parameters to control the\n  behavior of the implementation process.\n\n  The list of properties that can be configured, or have been configured by\n  this command can be reported by the report_config_implementation command.\n\nArguments:\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <list> - (Required) A list of parameters and their values, to configure\n  with the command. The parameters and their values must be enclosed in\n  braces, and the list must be enclosed in braces as show in the Example\n  below.\n\nExamples:\n\n  The following example configures implementation parameters:\n\n    config_implementation { {incr.ignore_user_clock_uncertainty True} {<other_param> <other_value>} }\n\nSee Also:\n\n   *  report_config_implementation\n",
"get_cluster_configurations": "get_cluster_configurations\n\nDescription: \nReturns all cluster configuration objects\n\nSyntax: \nget_cluster_configurations  [-filter <arg>] [-regexp] [-nocase] [-quiet]\n                            [-verbose] [<patterns>]\n\nUsage: \n  Name          Description\n  -------------------------\n  [-filter]     Filter list with expression\n  [-regexp]     Patterns are full regular expressions\n  [-nocase]     Perform case-insensitive matching (valid only when -regexp \n                specified)\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  [<patterns>]  Match cluster configuration against patterns\n                Default: *\n\nCategories: \ncluster_configuration\n\nDescription:\n\n  Gets a list of cluster configurations that includes Vivado default cluster\n  configurations and cluster configurations created using the\n  create_cluster_configuration command.\n\n  Vivado supports the following cluster management tools.\n\n   *  Load Sharing Facility (LSF)\n\n   *  Sun Grid Engine (SGE)\n\n   *  Simple Linux Utility For Resource Management (SLURM)\n\nArguments:\n\n  -filter <args> - (Optional) Filter the results list with the specified\n  expression. The -filter argument filters the list of objects returned by\n  get_cluster_configurations based on property values on the cluster\n  configurations. You can find the properties on an object with the\n  report_property or list_property commands. Any property/value pair can be\n  used as a filter. In the case of the cluster configurations object, 'TYPE'\n  and 'IS_DEFAULT' are some of the properties that can be used to filter\n  results.\n\n  The filter search pattern should be quoted to avoid having to escape\n  special characters. String matching is case-sensitive and is always\n  anchored to the start and to the end of the search string. The wildcard '*'\n  character can be used at the beginning or at the end of a search string to\n  widen the search to include a substring of the property value.\n\n  Note: The filter returns an object if a specified property exists on the\n  object, and the specified pattern matches the property value on the object.\n  In the case of the '*' wildcard character, this will match a property with\n  a defined value of ''.\n\n  For string comparison, the specific operators that can be used in filter\n  expressions are 'equal' (==), 'not-equal' (!=), 'match' (=~), and\n  'not-match' (!~). Numeric comparison operators <, >, <=, and >= can also be\n  used. Multiple filter expressions can be joined by AND and OR (&& and ||).\n  The following gets a default cluster configurations with name lsf:\n\n    get_cluster_configurations * -filter {IS_DEFAULT == 1 && NAME =~ 'lsf'}\n\n  Boolean (bool) type properties can be directly evaluated in filter\n  expressions as true or not true:\n\n    -filter {IS_DEFAULT}\n\n  -regexp - (Optional) Specifies that the search <patterns> are written as\n  regular expressions. Both search <patterns> and -filter expressions must be\n  written as regular expressions when this argument is used. Xilinx regular\n  expression Tcl commands are always anchored to the start of the search\n  string. You can add '.*' to the beginning or end of a search string to\n  widen the search to include a substring. See\n  http://perldoc.perl.org/perlre.html for help with regular expression\n  syntax.\n\n  Note: The Tcl built-in command regexp is not anchored, and works as a\n  standard Tcl command. For more information refer to\n  http://www.tcl.tk/man/tcl8.5/TclCmd/regexp.htm.\n\n  -nocase - (Optional) Perform case-insensitive matching when a pattern has\n  been specified. This argument applies to the use of -regexp only.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <patterns> - (Optional) Match cluster configuration names against the\n  specified patterns. The default pattern is the wildcard * which gets a list\n  of all defined cluster configurations. More than one pattern can be\n  specified to find multiple cluster configurations based on different search\n  criteria.\n\n  Note: You must enclose multiple search patterns in braces, {}, or quotes,\n  '', to present the list as a single element.\n\nExamples:\n\n  The following example gets the list of all cluster configurations.\n\n    get_cluster_configurations\n\n  The following example gets the cluster configuration with name 'lsf'.\n\n    get_cluster_configurations lsf\n\n  The following example gets the list of all default cluster configurations.\n\n    get_cluster_configurations -filter {IS_DEFAULT}\n\nSee Also:\n\n   *  create_cluster_configuration\n   *  remove_cluster_configurations\n   *  validate_cluster_configurations\n",
"update_design": "update_design\n\nDescription: \nupdate the netlist of the current design\n\nSyntax: \nupdate_design  -cells <args> [-strict] [-from_file <arg>] [-from_design <arg>]\n               [-from_cell <arg>] [-black_box] [-buffer_ports] [-quiet]\n               [-verbose]\n\nUsage: \n  Name             Description\n  ----------------------------\n  -cells           List of cells to update with a new sub-netlist.\n  [-strict]        Require exact ports match for replacing cell (otherwise \n                   extra ports are allowed).\n  [-from_file]     Name of the file containing the new sub-netlist.\n  [-from_design]   Name of the an open netlist design containing the new \n                   sub-netlist.\n  [-from_cell]     Name of cell in the from_design which defines the new \n                   sub-netlist.\n  [-black_box]     Update the cell to a black_box.\n  [-buffer_ports]  buffer all the ports of black box\n  [-quiet]         Ignore command errors\n  [-verbose]       Suspend message limits during command execution\n\nCategories: \nProject\n\nDescription:\n\n  This command updates the in-memory design, replacing the current netlist in\n  the specified cell with a netlist from a specified file, from another open\n  design, from a specified cell of a design, or converts the cell to a black\n  box cell.\n\n  The update_design command can update a single instance, or can update all\n  instances of a master cell.\n\n  Only the in-memory view of the design is changed by the new netlist. You\n  must save the design using the write_checkpoint command, or any updates\n  will be lost when you close the project or exit the tool.\n\nArguments:\n\n  -cells <args> - (Required) Defines a list of names, or cell objects, to\n  update with the specified netlist.\n\n  -strict - (Optional) Require the new netlist to have exactly the same ports\n  as the cell it is imported into. The tool will perform some checking on the\n  new netlist to insure that the specified netlist has all the ports required\n  for the specified cell. However, additional ports are also permitted,\n  unless the -strict option is used.\n\n  -from_file - (Optional) Name of a file containing the new netlist. The\n  netlist can be in the form of a structured Verilog netlist (.v) or an EDIF\n  netlist (.edf) file.\n\n  Note: -from_file and -from_design are mutually exclusive.\n\n  -from_design - (Optional) Allows you to import the netlist from another\n  open design in the current project. The design must be opened in the\n  current tool invocation, and not a separate process.\n\n  -from_cell - (Optional) Name of a cell in the design specified with\n  -from_design. The netlist from the specified cell will be used to update\n  the cell in the current design. By default the tool will use the top-level\n  cell of the design specified in -from_design.\n\n  Note: This option can only be used with -from_design.\n\n  -black_box - (Optional) Change the specified cell into a black box cell.\n\n  -buffer_ports - (Optional) Insert buffers for all the ports of a black box\n  cell.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  This example replaces a black box cell with the netlist from the specified\n  file:\n\n    update_design -from_file C:/Data/cell_contents.v -cell black_box_cell \n    \n\n  The following example updates the netlist in the arnd4 cell with the\n  specified Verilog netlist:\n\n    update_design -cell arnd4 -from_file C:/Data/round_4.v \n    \n\n  The following example updates the arnd4 cell in the current design with the\n  netlist from the same cell in the specified design:\n\n    update_design -cell arnd4 -from_design netlist_2 -from_cell arnd4 \n    \n\nSee Also:\n\n   *  get_cells\n   *  write_checkpoint\n",
"genkey_customer": "genkey_customer\n\nDescription: \nTo generate a pair of RSA keys to be used with Xilinx encryption: genkey_customer <base_key_name>.\n\n\nSyntax: \ngenkey_customer  [-overwrite] [-quiet] [-verbose] <file>\n\nUsage: \n  Name          Description\n  -------------------------\n  [-overwrite]  overwrite existing file.\n  [-quiet]      Ignore command errors\n  [-verbose]    Suspend message limits during command execution\n  <file>        generate a pair of key with base name\n\nCategories: \nFileIO\n",
"update_noc_qos": "update_noc_qos\n\nDescription: \nUpdate the NoC solution\n\nSyntax: \nupdate_noc_qos  [-force] [-quiet] [-verbose]\n\nUsage: \n  Name        Description\n  -----------------------\n  [-force]    Force update even if the existing solution is invalid\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n\nCategories: \nTools\n",
"lsort": "lsort(n)              Tcl Built-In Commands              lsort(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       lsort - Sort the elements of a list\n\nSYNOPSIS\n       lsort ?options? list\n_________________________________________________________________\n\n\nDESCRIPTION\n       This  command  sorts the elements of list, returning a new\n       list in sorted order.  The  implementation  of  the  lsort\n       command  uses  the  merge-sort algorithm which is a stable\n       sort that has O(n log n) performance characteristics.\n\n       By default ASCII sorting is used with the result  returned\n       in  increasing  order.   However,  any  of  the  following\n       options may be specified before list to control the  sort-\n       ing process (unique abbreviations are accepted):\n\n       -ascii              Use  string  comparison  with  Unicode\n                           code-point collation order  (the  name\n                           is   for  backward-compatibility  rea-\n                           sons.)  This is the default.\n\n       -dictionary         Use dictionary-style comparison.  This\n                           is  the same as -ascii except (a) case\n                           is ignored except as a tie-breaker and\n                           (b)  if  two  strings contain embedded\n                           numbers, the numbers compare as  inte-\n                           gers, not characters.  For example, in\n                           -dictionary mode, bigBoy sorts between\n                           bigbang  and  bigboy,  and  x10y sorts\n                           between x9y and x11y.\n\n       -integer            Convert list elements to integers  and\n                           use integer comparison.\n\n       -real               Convert  list  elements  to  floating-\n                           point values and use floating compari-\n                           son.\n\n       -command command    Use  command  as a comparison command.\n                           To compare two  elements,  evaluate  a\n                           Tcl  script consisting of command with\n                           the two  elements  appended  as  addi-\n                           tional  arguments.   The script should\n                           return an integer less than, equal to,\n                           or greater than zero if the first ele-\n                           ment is to be  considered  less  than,\n                           equal  to, or greater than the second,\n                           respectively.\n\n       -increasing         Sort  the  list  in  increasing  order\n                           ('smallest'items  first).  This is the\n                           default.\n\n       -decreasing         Sort  the  list  in  decreasing  order\n                           ('largest'items first).\n\n       -indices            Return  a list of indices into list in |\n                           sorted order  instead  of  the  values |\n                           themselves.\n\n       -index indexList    If  this  option is specified, each of\n                           the elements of list must itself be  a\n                           proper  Tcl sublist.  Instead of sort-\n                           ing based  on  whole  sublists,  lsort\n                           will  extract the indexList'th element\n                           from each sublist (as if  the  overall |\n                           element  and the indexList were passed |\n                           to lindex) and sort based on the given |\n                           element.  For example,\n                                  lsort -integer -index 1 \\\n                                        {{First 24} {Second 18} {Third 30}}\n                           returns  {Second 18} {First 24} {Third\n                           30}, and\n                                  lsort -index end-1 \\\n                                        {{a 1 e i} {b 2 3 f g} {c 4 5 6 d h}}\n                           returns {c 4 5 6 d h} {a 1 e i} {b 2 3\n                           f g}, and                              |\n                                  lsort -index {0 1} {            |\n                                     {{b i g} 12345}              |\n                                     {{d e m o} 34512}            |\n                                     {{c o d e} 54321}            |\n                                  }                               |\n                           returns  {{d  e  m  o} 34512} {{b i g} |\n                           12345} {{c o d e}  54321}  (because  e |\n                           sorts  before i which sorts before o.)\n                           This option  is  much  more  efficient\n                           than  using  -command  to  achieve the\n                           same effect.\n\n       -nocase                                                    ||\n                           Causes  comparisons to be handled in a |\n                           case-insensitive   manner.    Has   no |\n                           effect  if  combined with the -dictio- |\n                           nary, -integer, or -real options.\n\n       -unique             If this option is specified, then only\n                           the  last  set  of  duplicate elements\n                           found in the list  will  be  retained.\n                           Note  that  duplicates  are determined\n                           relative to the comparison used in the\n                           sort.  Thus if -index 0 is used, {1 a}\n                           and {1 b} would be  considered  dupli-\n                           cates  and only the second element, {1\n                           b}, would be retained.\n\nNOTES\n       The options to lsort only control what sort of  comparison\n       is  used, and do not necessarily constrain what the values\n       themselves actually are.  This distinction is only notice-\n       able  when  the  list to be sorted has fewer than two ele-\n       ments.\n\n       The lsort command is reentrant, meaning it is safe to  use\n       as  part  of  the  implementation of a command used in the\n       -command option.\n\nEXAMPLES\n       Sorting a list using ASCII sorting:\n              % lsort {a10 B2 b1 a1 a2}\n              B2 a1 a10 a2 b1\n\n       Sorting a list using Dictionary sorting:\n              % lsort -dictionary {a10 B2 b1 a1 a2}\n              a1 a2 a10 b1 B2\n\n       Sorting lists of integers:\n              % lsort -integer {5 3 1 2 11 4}\n              1 2 3 4 5 11\n              % lsort -integer {1 2 0x5 7 0 4 -1}\n              -1 0 1 2 4 0x5 7\n\n       Sorting lists of floating-point numbers:\n              % lsort -real {5 3 1 2 11 4}\n              1 2 3 4 5 11\n              % lsort -real {.5 0.07e1 0.4 6e-1}\n              0.4 .5 6e-1 0.07e1\n\n       Sorting using indices:\n              % # Note the space character before the c\n              % lsort {{a 5} { c 3} {b 4} {e 1} {d 2}}\n              { c 3} {a 5} {b 4} {d 2} {e 1}\n              % lsort -index 0 {{a 5} { c 3} {b 4} {e 1} {d 2}}\n              {a 5} {b 4} { c 3} {d 2} {e 1}\n              % lsort -index 1 {{a 5} { c 3} {b 4} {e 1} {d 2}}\n              {e 1} {d 2} { c 3} {b 4} {a 5}\n\n       Stripping duplicate values using sorting:\n              % lsort -unique {a b c a b c a b c}\n              a b c\n\n       More complex sorting using a comparison function:\n              % proc compare {a b} {\n                  set a0 [lindex $a 0]\n                  set b0 [lindex $b 0]\n                  if {$a0 < $b0} {\n                      return -1\n                  } elseif {$a0 > $b0} {\n                      return 1\n                  }\n                  return [string compare [lindex $a 1] [lindex $b 1]]\n              }\n              % lsort -command compare \\\n                      {{3 apple} {0x2 carrot} {1 dingo} {2 banana}}\n              {1 dingo} {2 banana} {0x2 carrot} {3 apple}\n\n\nSEE ALSO\n       list(n), lappend(n),  lindex(n),  linsert(n),  llength(n),\n       lsearch(n), lset(n), lrange(n), lreplace(n)\n\n\nKEYWORDS\n       element, list, order, sort\n\n\n\nTcl                            8.5                       lsort(n)\n",
"create_reconfig_module": "create_reconfig_module\n\nDescription: \nCreate new reconfig Module\n\nSyntax: \ncreate_reconfig_module  -name <arg> [-top <arg>] [-gate_level]\n                        -partition_def <arg> [-define_from <arg>]\n                        [-define_from_file <arg>] [-quiet] [-verbose]\n\nUsage: \n  Name                 Description\n  --------------------------------\n  -name                Name of the Reconfig Module\n  [-top]               module name of the top module\n  [-gate_level]        Create Reconfig Module whcih alllows adding DCP/EDIF \n                       files only\n  -partition_def       PartitionDef in which reconfig module will be created\n  [-define_from]       Name of the module in the source fileset to be the top\n                       of the blockset\n  [-define_from_file]  full path of the top source file in the source fileset\n                       for which reconfigurable module to be created.\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n\nCategories: \nObject, Partition\n\nDescription:\n\n  Note: You must first define the project as a Dynamic Function eXchange (DFX)\n  project by setting the PR_FLOW property on the project to TRUE, or by using\n  the Tools > Enable Dynamic Function eXchange command.\n\n  The create_reconfig_module command defines a reconfigurable module (RM)\n  from a specified hierarchical cell, or design file, and assigns it to the\n  specified Partition Definition (partitionDef) in the current project.\n\n  The Dynamic Function eXchange flow allows RMs to be swapped into and out of a\n  partitionDef to create a unique configuration of the design based on the\n  combination of the core design and an RM. A single partitionDef can have\n  multiple RMs to contain different netlists, constraints, or\n  implementations. Each instance of the partitionDef in the design can be\n  assigned a different RM to support many different configurations. The DFX\n  design flow requires the implementation of each PR configuration, resulting\n  in partial bitstreams for the RMs, but complete bitstreams for each\n  integrated configuration. Refer to the Vivado Design Suite User Guide:\n  Dynamic Function eXchange (UG909) for more information.\n\n  This command returns the hierarchical name of the newly created RM, or\n  returns an error if the command failed.\n\nArguments:\n\n  -name <arg> - (Required) Specify a name for the reconfigurable module (RM)\n  being created.\n\n  -top <arg> - (Optional) Specify the top-level cell that defines the\n  hierarchy of the RM. The cell can be specified by name.\n\n  -gate_level - (Optional) Indicates that the RM is defined by a netlist file\n  (EDIF or DCP) rather than by RTL source files.\n\n  -partition_def <arg> - (Required) Specify the partitionDef object that the\n  RM is assigned to. The partitionDef can be specified by name, or as an\n  object as returned by the get_partition_defs command.\n\n  -define_from <arg> - (Optional) Specify the hierarchical cell in the\n  current project that the RM is defined from. The source files of the\n  specified cell will define the source file contents of the RM. The cell can\n  be specified by name.\n\n  -define_from_file <arg> - (Optional) Specify the netlist or DCP file that\n  defines the source for gate-level RM. If the path is not specified as part\n  of the filename, the file will be looked for in the current working\n  directory, or the directory that the Vivado tool was launched from.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\nExamples:\n\n  The example below creates a reconfigurable module with the specified name:\n\n    create_reconfig_module -name fftBottom -partition_def \\  \n    [get_partition_defs partDef1 ] -top fftTop \n    \n\nSee Also:\n\n   *  create_partition_def\n   *  create_pr_configuration\n   *  delete_reconfig_modules\n   *  get_partition_defs\n   *  get_reconfig_modules\n   *  report_pr_configuration_analysis\n   *  set_property\n",
"generate_hw_emu_dir": "generate_hw_emu_dir\n\nDescription: \nUsed to generate the emulation section for DSAs.\n\nSyntax: \ngenerate_hw_emu_dir  [-platform-name <arg>] [-emu-prop-dict <arg>]\n                     [-output-dir-path <arg>] [-working-dir <arg>] [-quiet]\n                     [-verbose]\n\nUsage: \n  Name                Description\n  -------------------------------\n  [-platform-name]    Arguments\n  [-emu-prop-dict]    emu properties dict file\n  [-output-dir-path]  Output path where to place the emulation output\n  [-working-dir]      Staging files are created in the path and deleted post \n                      completion\n  [-quiet]            Ignore command errors\n  [-verbose]          Suspend message limits during command execution\n\nCategories: \nVitis, Platform, FileIO\n",
"reset_attribute": "",
"report_simlib_info": "report_simlib_info\n\nDescription: \nReport info of simulation libraries\n\nSyntax: \nreport_simlib_info  [-file <arg>] [-append] [-quiet] [-verbose] <path>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-file]     Output file\n              Default: report_simlib_info.log\n  [-append]   Append mode\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <path>      Specify the path for pre-compiled libraries\n\nCategories: \nSimulation\n\nDescription:\n\n  Report information on libraries compiled by the compile_simlib command.\n\nArguments:\n\n  -file <arg> - (Optional) Write the report into the specified file. The\n  specified file will be overwritten if one already exists, unless -append is\n  also specified.\n\n  Note: If the path is not specified as part of the file name, the file will\n  be written into the current working directory, or the directory from which\n  the tool was launched.\n\n  -append - (Optional) Append the output of the command to the specified file\n  rather than overwriting it.\n\n  Note: The -append option can only be used with the -file option.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <path> - (Required) The path to the compiled simulation library.\n\nExamples:\n\n  The following example reports information related to the compiled\n  simulation library at the specified path:\n\n    report_simlib_info C:/Data/compiled_simlib \n    \n\nSee Also:\n\n   *  compile_simlib\n",
"delete_reconfig_modules": "delete_reconfig_modules\n\nDescription: \nDelete existing reconfig modules\n\nSyntax: \ndelete_reconfig_modules  [-merge <arg>] [-quiet] [-verbose] <rms>\n\nUsage: \n  Name        Description\n  -----------------------\n  [-merge]    Fileset to merge files into from the deleted Reconfig Module\n  [-quiet]    Ignore command errors\n  [-verbose]  Suspend message limits during command execution\n  <rms>       List of Reconfig Modules to delete\n\nCategories: \nPartition\n\nDescription:\n\n  Delete the specified reconfigurable modules (RMs) from the current project.\n\n  This command returns nothing if successful, or returns an error if the\n  command fails.\n\nArguments:\n\n  -merge <arg> - (Optional) Specify the name of a fileset to merge files from\n  the deleted RM. The files will be moved from the deleted RM to the\n  specified fileset.\n\n  Note: If -merge is not specified, then all files in the deleted RM are\n  removed from the project.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <rms> - (Required) Specify one or more RM objects to remove from the\n  current project. The RMs can be specified by name, or as objects returned\n  by the get_reconfigurable_modules command.\n\nExample:\n\n  The following example deletes the specified RM:\n\n    delete_reconfig_modules usbBlock \n    \n\nSee Also:\n\n   *  create_reconfig_module\n   *  get_reconfig_modules\n",
"create_fileset": "create_fileset\n\nDescription: \nCreate a new fileset\n\nSyntax: \ncreate_fileset  [-constrset] [-simset] [-blockset] [-clone_properties <arg>]\n                -define_from <arg> [-quiet] [-verbose] <name>\n\nReturns: \nnew fileset object\n\nUsage: \n  Name                 Description\n  --------------------------------\n  [-constrset]         Create fileset as constraints fileset (default)\n  [-simset]            Create fileset as simulation source fileset\n  [-blockset]          Create fileset as block source fileset\n  [-clone_properties]  Fileset to initialize properties from\n  -define_from         Name of the module in the source fileset to be the top\n                       of the blockset\n  [-quiet]             Ignore command errors\n  [-verbose]           Suspend message limits during command execution\n  <name>               Name of the fileset to be create\n\nCategories: \nProject, Simulation\n\nDescription:\n\n  Defines a new fileset within a design project. Files can be added to a\n  newly created fileset using the add_files command.\n\n  A fileset is a list of files with a specific function within the project.\n  One or more constraint files is a constraint set (-constrset); one or more\n  simulation test benches is a simulation set (-simset). Only one fileset\n  option can be specified when using the create_fileset command. As a\n  default, the tool will create a constraint fileset if the type is not\n  specified.\n\n  You can also use the create_fileset -blockset command to configure an IP\n  core, or hierarchical module of the design, as an out-of-context (OOC)\n  block. The block fileset, or blockset, creates a hierarchical file\n  collection for the IP or module specified with the -define_from option. The\n  files related to the specified hierarchical module will be moved from their\n  current fileset to the new blockset. When the blockset is created, the\n  Vivado Design Suite also defines out-of-context synthesis and\n  implementation runs for the block. The output products for the OOC module\n  are stored in the blockset, including the synthesized design checkpoint\n  (DCP) and any required structural simulation netlists. Stuctural simulation\n  netlists are needed when a behavioral model for the block is not available,\n  or is not available in the language supported by the target simulator. You\n  can define an out-of-context constraint file for the IP or moduleif needed,\n  and add the at to the block fileset as well.\n\n  Note: Refer to the Vivado Design Suite User Guide: Designing with IP\n  (UG896) or the Vivado Design Suite User Guide: Hierarchical Design (UG905)\n  for more information on out-of-context design.\n\n  The create_fileset command returns the name of the newly created fileset,\n  or will return an error message if it fails.\n\nArguments:\n\n  -constrset - (Optional) Creates a constraint set to hold one or more\n  constraint files. This is the default fileset created if neither the\n  -constrset, -simset, or -blockset argument is specified.\n\n  -simset - (Optional) Create a simulation fileset to hold one or more\n  simulation source files. You can only specify one type of fileset argument,\n  either -constrset or -simset. You will get an error if both are specified.\n\n  -blockset - (Optional) Create a block fileset to configure an IP core or\n  hierarchical module for out-of-context design.\n\n  Note: The -blockset option requires the -define_from option to specify the\n  IP or module to use as the top-level of the blockset.\n\n  -clone_properties <arg> - (Optional) Clone the properties of a specified\n  fileset to add to the newly created fileset. This is useful for ensuring\n  that new filesets are created with needed properties such as USED_IN.\n\n  -define_from <arg> - (Optional) Specify the top-module of an IP core to\n  define the block fileset.\n\n  Note: This option is required when the -blockset option is used.\n\n  -quiet - (Optional) Execute the command quietly, returning no messages from\n  the command. The command also returns TCL_OK regardless of any errors\n  encountered during execution.\n\n  Note: Any errors encountered on the command-line, while launching the\n  command, will be returned. Only errors occurring inside the command will be\n  trapped.\n\n  -verbose - (Optional) Temporarily override any message limits and return\n  all messages from this command.\n\n  Note: Message limits can be defined with the set_msg_config command.\n\n  <name> - (Required) The name of the fileset to be created.\n\nExamples:\n\n  The following example creates a new constraint file set named constraints2:\n\n    create_fileset -constrset -quiet constraints2 \n    \n\n  Note: With -quiet specified, the tool will not return anything if it\n  encounters an error in trying to create the specified fileset.\n\n  The following example creates an out-of-context (OOC) blockset for the\n  hierarchical module specified by the -define_from option:\n\n    create_fileset -blockset -define_from dac_spi dac_spi \n    \n\n  The following example creates a new simulation fileset named sim_1:\n\n    create_fileset -simset sim_1 \n    \n\nSee Also:\n\n   *  add_files\n   *  current_fileset\n   *  synth_ip\n",
"string": "string(n)             Tcl Built-In Commands             string(n)\n\n\n\n_________________________________________________________________\n\nNAME\n       string - Manipulate strings\n\nSYNOPSIS\n       string option arg ?arg ...?\n_________________________________________________________________\n\n\nDESCRIPTION\n       Performs  one  of  several string operations, depending on\n       option.  The legal options (which may be abbreviated) are:\n\n       string bytelength string\n              Returns a decimal string giving the number of bytes\n              used to represent string in memory.  Because  UTF-8\n              uses  one to three bytes to represent Unicode char-\n              acters, the byte length will not be the same as the\n              character  length  in  general.   The cases where a\n              script cares about the byte length  are  rare.   In\n              almost  all cases, you should use the string length\n              operation (including determining the  length  of  a\n              Tcl  ByteArray  object).   Refer  to the Tcl_NumUt-\n              fChars manual entry for more details on  the  UTF-8\n              representation.\n\n       string compare ?-nocase? ?-length int? string1 string2\n              Perform   a  character-by-character  comparison  of\n              strings string1 and string2.  Returns -1, 0, or  1,\n              depending  on  whether string1 is lexicographically\n              less than, equal to, or greater than  string2.   If\n              -length  is  specified,  then only the first length\n              characters are used in the comparison.  If  -length\n              is  negative,  it is ignored.  If -nocase is speci-\n              fied, then the strings  are  compared  in  a  case-\n              insensitive manner.\n\n       string equal ?-nocase? ?-length int? string1 string2\n              Perform   a  character-by-character  comparison  of\n              strings string1 and string2.  Returns 1 if  string1\n              and  string2  are  identical,  or  0  when not.  If\n              -length is specified, then only  the  first  length\n              characters  are used in the comparison.  If -length\n              is negative, it is ignored.  If -nocase  is  speci-\n              fied,  then  the  strings  are  compared in a case-\n              insensitive manner.\n\n       string first needleString haystackString ?startIndex?\n              Search haystackString for a sequence of  characters\n              that  exactly match the characters in needleString.\n              If found, return the index of the  first  character\n              in  the first such match within haystackString.  If\n              not found, return -1.  If startIndex  is  specified\n              (in any of the forms accepted by the index method),\n              then the search is constrained to  start  with  the\n              character in haystackString specified by the index.\n              For example,\n                     string first a 0a23456789abcdef 5\n              will return 10, but\n                     string first a 0123456789abcdef 11\n              will return -1.\n\n       string index string charIndex\n              Returns the charIndex'th character  of  the  string\n              argument.   A  charIndex  of  0  corresponds to the\n              first character of the string.   charIndex  may  be\n              specified as follows:                               |\n\n              inte-                                               |\n              ger                                             |   |\n                        For any index value that passes string is |\n                        integer  -strict,  the  char specified at |\n                        this integral index (e.g. 2  would  refer |\n                        to the 'c' in 'abcd').                    |\n\n              end                                                 ||\n                        The last char of  the  string  (e.g.  end |\n                        would refer to the 'd' in 'abcd').        |\n\n              end-N                                               ||\n                        The last char of  the  string  minus  the |\n                        specified  integer  offset  N (e.g. end-1 |\n                        would refer to the 'c' in 'abcd').        |\n\n              end+N                                               ||\n                        The  last  char  of  the  string plus the |\n                        specified integer offset N  (e.g.  end+-1 |\n                        would refer to the 'c' in 'abcd').        |\n\n              M+N                                                 ||\n                        The char specified at the integral  index |\n                        that is the sum of integer values M and N |\n                        (e.g. 1+1  would  refer  to  the  'c'  in |\n                        'abcd').                                  |\n\n              M-N                                                 ||\n                        The char specified at the integral  index |\n                        that  is the difference of integer values |\n                        M and N (e.g. 2-1 would refer to the  'b' |\n                        in 'abcd').                               |\n\n              In  the  specifications  above, the integer value M |\n              contains no trailing  whitespace  and  the  integer |\n              value N contains no leading whitespace.             |\n\n              If  charIndex  is  less  than  0 or greater than or |\n              equal to the length of the string then this command |\n              returns an empty string.                            |\n\n       string is class ?-strict? ?-failindex varname? string\n              Returns 1 if string is a valid member of the speci-\n              fied character  class,  otherwise  returns  0.   If\n              -strict  is specified, then an empty string returns\n              0, otherwise an empty string will return 1  on  any\n              class.   If  -failindex  is  specified, then if the\n              function returns 0, the index in the  string  where\n              the class was no longer valid will be stored in the\n              variable named varname.  The varname  will  not  be\n              set if the function returns 1.  The following char-\n              acter classes are recognized (the class name can be\n              abbreviated):\n\n              alnum       Any  Unicode  alphabet or digit charac-\n                          ter.\n\n              alpha       Any Unicode alphabet character.\n\n              ascii       Any character with a  value  less  than\n                          \\u0080  (those  that  are  in the 7-bit\n                          ascii range).\n\n              boolean     Any of the forms  allowed  to  Tcl_Get-\n                          Boolean.\n\n              control     Any Unicode control character.\n\n              digit       Any Unicode digit character.  Note that\n                          this includes characters outside of the\n                          [0-9] range.\n\n              double      Any  of the valid forms for a double in\n                          Tcl, with optional surrounding  whites-\n                          pace.  In case of under/overflow in the\n                          value, 0 is returned  and  the  varname\n                          will contain -1.\n\n              false       Any  of  the  forms allowed to Tcl_Get-\n                          Boolean where the value is false.\n\n              graph       Any Unicode printing character,  except\n                          space.\n\n              integer     Any  of  the valid string formats for a\n                          32-bit  integer  value  in  Tcl,   with\n                          optional  surrounding  whitespace.   In\n                          case of under/overflow in the value,  0\n                          is  returned  and the varname will con-\n                          tain -1.\n\n              list        Any   proper   list   structure,   with\n                          optional   surrounding  whitespace.  In\n                          case of improper list structure,  0  is\n                          returned  and  the varname will contain\n                          the index of the  'element'  where  the\n                          list  parsing fails, or -1 if this can-\n                          not be determined.\n\n              lower       Any Unicode lower case alphabet charac-\n                          ter.\n\n              print       Any Unicode printing character, includ-\n                          ing space.\n\n              punct       Any Unicode punctuation character.\n\n              space       Any Unicode space character.\n\n              true        Any of the forms  allowed  to  Tcl_Get-\n                          Boolean where the value is true.\n\n              upper       Any  upper  case  alphabet character in\n                          the Unicode character set.              |\n\n              wideinte-                                           |\n              ger                                         |       |\n                          Any of the valid forms for a wide inte- |\n                          ger in Tcl, with  optional  surrounding |\n                          whitespace.   In case of under/overflow |\n                          in the value, 0  is  returned  and  the |\n                          varname will contain -1.\n\n              wordchar    Any  Unicode  word  character.  That is\n                          any  alphanumeric  character,  and  any\n                          Unicode  connector  punctuation charac-\n                          ters (e.g. underscore).\n\n              xdigit      Any   hexadecimal    digit    character\n                          ([0-9A-Fa-f]).\n\n              In  the  case  of  boolean,  true and false, if the\n              function will  return  0,  then  the  varname  will\n              always  be  set to 0, due to the varied nature of a\n              valid boolean value.\n\n       string last needleString haystackString ?lastIndex?\n              Search haystackString for a sequence of  characters\n              that  exactly match the characters in needleString.\n              If found, return the index of the  first  character\n              in  the  last such match within haystackString.  If\n              there is no match, then return -1.  If lastIndex is\n              specified  (in  any  of  the  forms accepted by the\n              index  method),  then  only   the   characters   in\n              haystackString at or before the specified lastIndex\n              will be considered by the search.  For example,\n                     string last a 0a23456789abcdef 15\n              will return 10, but\n                     string last a 0a23456789abcdef 9\n              will return 1.\n\n       string length string\n              Returns a decimal string giving the number of char-\n              acters  in string.  Note that this is not necessar-\n              ily the same as the number of bytes used  to  store\n              the  string.   If  the object is a ByteArray object\n              (such as  those  returned  from  reading  a  binary\n              encoded  channel), then this will return the actual\n              byte length of the object.\n\n       string map ?-nocase? mapping string\n              Replaces substrings in string  based  on  the  key-\n              value  pairs  in mapping.  mapping is a list of key\n              value key value ...  as in  the  form  returned  by\n              array  get.   Each  instance of a key in the string\n              will be replaced with its corresponding value.   If\n              -nocase is specified, then matching is done without\n              regard to case differences. Both key and value  may\n              be  multiple characters.  Replacement is done in an\n              ordered manner, so the key appearing first  in  the\n              list  will  be checked first, and so on.  string is\n              only iterated over once, so  earlier  key  replace-\n              ments  will  have  no affect for later key matches.\n              For example,\n                     string map {abc 1 ab 2 a 3 1 0} 1abcaababcabababc\n              will return the string 01321221.\n\n              Note that if an earlier key is a prefix of a  later\n              one,  it will completely mask the later one.  So if\n              the previous example is reordered like this,\n                     string map {1 0 ab 2 a 3 abc 1} 1abcaababcabababc\n              it will return the string 02c322c222c.\n\n       string match ?-nocase? pattern string\n              See if pattern matches string; return 1 if it does,\n              0  if  it  does not.  If -nocase is specified, then\n              the pattern attempts to match against the string in\n              a  case insensitive manner.  For the two strings to\n              match, their contents must be identical except that\n              the  following special sequences may appear in pat-\n              tern:\n\n              *         Matches any  sequence  of  characters  in\n                        string, including a null string.\n\n              ?         Matches any single character in string.\n\n              [chars]   Matches any character in the set given by\n                        chars.  If a sequence  of  the  form  x-y\n                        appears  in  chars,  then  any  character\n                        between x and y, inclusive,  will  match.\n                        When used with -nocase, the end points of\n                        the range are  converted  to  lower  case\n                        first.   Whereas {[A-z]} matches '_' when\n                        matching  case-sensitively   (since   '_'\n                        falls  between  the  'Z'  and  'a'), with\n                        -nocase   this   is    considered    like\n                        {[A-Za-z]}  (and  probably what was meant\n                        in the first place).\n\n              \\x        Matches the  single  character  x.   This\n                        provides  a  way  of avoiding the special\n                        interpretation of the characters *?[]\\ in\n                        pattern.\n\n       string range string first last\n              Returns  a  range  of  consecutive  characters from\n              string, starting with the character whose index  is\n              first  and ending with the character whose index is\n              last. An index of 0 refers to the  first  character\n              of  the string.  first and last may be specified as\n              for the index method.  If first is less  than  zero\n              then  it is treated as if it were zero, and if last\n              is greater than or  equal  to  the  length  of  the\n              string  then  it  is treated as if it were end.  If\n              first is greater than last then an empty string  is\n              returned.\n\n       string repeat string count\n              Returns string repeated count number of times.\n\n       string replace string first last ?newstring?\n              Removes  a  range  of  consecutive  characters from\n              string, starting with the character whose index  is\n              first  and ending with the character whose index is\n              last.  An index of 0 refers to the first  character\n              of  the string.  First and last may be specified as\n              for the index method.  If newstring  is  specified,\n              then  it  is placed in the removed character range.\n              If first is less than zero then it is treated as if\n              it  were zero, and if last is greater than or equal\n              to the length of the string then it is  treated  as\n              if  it  were end.  If first is greater than last or\n              the length of the initial string, or last  is  less\n              than   0,  then  the  initial  string  is  returned\n              untouched.                                          |\n\n       string reverse                                             |\n       string                                      |              |\n              Returns  a string that is the same length as string |\n              but with its characters in the reverse order.\n\n       string tolower string ?first? ?last?\n              Returns a value equal to  string  except  that  all\n              upper  (or  title) case letters have been converted\n              to lower case.  If first is specified, it refers to\n              the  first  char  index  in  the  string  to  start\n              modifying.  If last is specified, it refers to  the\n              char  index  in  the string to stop at (inclusive).\n              first and last may be specified as  for  the  index\n              method.\n\n       string totitle string ?first? ?last?\n              Returns  a  value  equal  to string except that the\n              first character in string is converted to its  Uni-\n              code  title case variant (or upper case if there is\n              no title case variant) and the rest of  the  string\n              is converted to lower case.  If first is specified,\n              it refers to the first char index in the string  to\n              start  modifying.   If last is specified, it refers\n              to the char index in the string to stop at  (inclu-\n              sive).   first and last may be specified as for the\n              index method.\n\n       string toupper string ?first? ?last?\n              Returns a value equal to  string  except  that  all\n              lower  (or  title) case letters have been converted\n              to upper case.  If first is specified, it refers to\n              the first char index in the string to start modify-\n              ing.  If last is specified, it refers to  the  char\n              index  in the string to stop at (inclusive).  first\n              and last may be specified as for the index  method.\n\n       string trim string ?chars?\n              Returns  a  value  equal  to string except that any\n              leading  or  trailing  characters  present  in  the\n              string given by chars are removed.  If chars is not\n              specified then  white  space  is  removed  (spaces,\n              tabs, newlines, and carriage returns).\n\n       string trimleft string ?chars?\n              Returns  a  value  equal  to string except that any\n              leading characters present in the string  given  by\n              chars  are removed.  If chars is not specified then\n              white space is removed (spaces, tabs, newlines, and\n              carriage returns).\n\n       string trimright string ?chars?\n              Returns  a  value  equal  to string except that any\n              trailing characters present in the string given  by\n              chars  are removed.  If chars is not specified then\n              white space is removed (spaces, tabs, newlines, and\n              carriage returns).\n\n       string wordend string charIndex\n              Returns  the  index of the character just after the\n              last one in the word containing character charIndex\n              of  string.   charIndex may be specified as for the\n              index method.  A word is considered to be any  con-\n              tiguous  range  of alphanumeric (Unicode letters or\n              decimal digits) or  underscore  (Unicode  connector\n              punctuation)  characters,  or  any single character\n              other than these.\n\n       string wordstart string charIndex\n              Returns the index of the  first  character  in  the\n              word  containing  character  charIndex  of  string.\n              charIndex may be specified as for the index method.\n              A  word is considered to be any contiguous range of\n              alphanumeric (Unicode letters or decimal digits) or\n              underscore  (Unicode connector punctuation) charac-\n              ters, or any single character other than these.\n\nEXAMPLE\n       Test if the string in the variable string is a proper non-\n       empty prefix of the string foobar.\n              set length [string length $string]\n              if {$length == 0} {\n                 set isPrefix 0\n              } else {\n                 set isPrefix [string equal -length $length $string 'foobar']\n              }\n\n\nSEE ALSO\n       expr(n), list(n)\n\n\nKEYWORDS\n       case  conversion,  compare, index, match, pattern, string,\n       word, equal, ctype, character, reverse\n\n\n\n\nTcl                            8.1                      string(n)\n",
"config_simmodel": "config_simmodel\n\nDescription: \nConfigure settings for simulation models\n\nSyntax: \nconfig_simmodel  [-name <arg>] [-value <arg>] [-report] [-reset] [-quiet]\n                 [-verbose] <simulator>\n\nUsage: \n  Name         Description\n  ------------------------\n  [-name]      Name of the configuration (<simulator>.compile.<compiler>.<simm\n               odel>)\n  [-value]     Value of the configuration\n  [-report]    Print the list of configuration settings of the specified \n               simulator\n  [-reset]     Reset configuration settings of the specified simulator\n  [-quiet]     Ignore command errors\n  [-verbose]   Suspend message limits during command execution\n  <simulator>  Name of the simulator\n\nCategories: \nSimulation\n"
}
